=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%7%bbentry L3%8%d L3%9%bbentry L3%11%bbentry L3%19%bbentry L3%20%d L3%21%bbentry L3%23%bbentry L3%27%d L3%28%bbentry L3%29%bbentry L3%32%bbentry E0%0%d
=Edges:
L0%0%d => L3%7%bbentry
L3%7%bbentry => L3%8%d
L3%8%d => L3%11%bbentry
L3%8%d => L3%9%bbentry
L3%9%bbentry => E0%0%d
L3%11%bbentry => L3%19%bbentry
L3%19%bbentry => L3%20%d
L3%20%d => L3%23%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%7%bbentry (backedge) 
L3%23%bbentry => L3%27%d
L3%27%d => L3%29%bbentry
L3%27%d => L3%28%bbentry
L3%28%bbentry => L3%32%bbentry
L3%29%bbentry => L3%32%bbentry
L3%32%bbentry => L3%19%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%19%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%23%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%27%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%28%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%29%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%32%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%7%bbentry => L3%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%8%d => L3%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%8%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%11%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%19%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%23%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-1.L3%7%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%23%bbentry => L3%27%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%27%d
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%27%d
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L3%27%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*intrinsic_app_bvugt)
tfg_edge_comment end

=Edge: L3%27%d => L3%29%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_false_split
tfg_edge_comment end

=Edge: L3%27%d => L3%28%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_true_split
tfg_edge_comment end

=Edge: L3%28%bbentry => L3%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvadd)*ite_true_merge)
tfg_edge_comment end

=Edge: L3%29%bbentry => L3%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvsub)*ite_false_merge)
tfg_edge_comment end

=Edge: L3%32%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 35 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 36 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%8%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%20%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%27%d
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=Loc 40 in src.spec.foo.
REGMEM
spec-%var-i-1.L3%7%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 42 in src.spec.foo.
REGMEM
spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-16.E0%0%d
1 : input.spec-%tmpvar-16.E0%0%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%27%d
1 : input.spec-%tmpvar-1.L3%27%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%27%d
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L3%27%d
1 : input.spec-%var-x_ij-0.L3%27%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L3%7%bbentry
1 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L3%7%bbentry
1 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L3%19%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%tmpvar-14.L3%7%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%tmpvar-8.L3%7%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%7%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%7%bbentry
1 : input.spec-%var-u-0.L3%7%bbentry : UNIT
=Loc 63 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=Loc 64 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%19%bbentry
1 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=Loc 66 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L3%19%bbentry
1 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 68 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%tmpvar-4.L3%32%bbentry : BV:32
=Loc 69 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%tmpvar-5.L3%32%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%7%bbentry
40, 41, 48, 
=live locs at L3%8%d
37, 40, 41, 48, 
=live locs at L3%9%bbentry
48, 
=live locs at L3%11%bbentry
37, 40, 41, 48, 
=live locs at L3%19%bbentry
41, 42, 43, 52, 57, 61, 
=live locs at L3%20%d
38, 41, 42, 43, 52, 57, 61, 
=live locs at L3%21%bbentry
41, 57, 61, 
=live locs at L3%23%bbentry
38, 41, 42, 43, 52, 57, 61, 
=live locs at L3%27%d
39, 41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%28%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%29%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%32%bbentry
41, 43, 51, 52, 57, 63, 
=live locs at E0%0%d
47[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 35, 36
=loc definedness at L3%7%bbentry
1, 35, 36, 40, 41, 48, 54, 55, 56
=loc definedness at L3%8%d
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%9%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%11%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%19%bbentry
1, 35, 36, 37, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%20%d
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%21%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%23%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%27%d
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%28%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%29%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%32%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67
=loc definedness at E0%0%d
1, 35, 36, 37, 40, 41, 44, 45, 46, 47, 48, 49, 54, 55, 56

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%7%bbentry
40, 41
=branch affecting variable locs at L3%8%d
37, 40, 41
=branch affecting variable locs at L3%9%bbentry

=branch affecting variable locs at L3%11%bbentry
37, 40, 41
=branch affecting variable locs at L3%19%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L3%20%d
38, 41, 42, 43, 52, 57
=branch affecting variable locs at L3%21%bbentry
41, 57
=branch affecting variable locs at L3%23%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L3%27%d
39, 41, 43, 51, 52, 57
=branch affecting variable locs at L3%28%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L3%29%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L3%32%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 40 {input.spec-%var-i-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 41 {input.spec-%var-x-0.L3%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 48 {input.spec-%var-ret-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 54 {input.spec-%tmpvar-18.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 55 {input.spec-%tmpvar-19.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d for loc_id 37 {input.spec-%tmpvar-10.L3%8%d }
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 44 {input.spec-%tmpvar-16.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 45 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 46 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 47 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 49 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 42 {input.spec-%var-j-0.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 43 {input.spec-%var-x_i-0.L3%19%bbentry }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-i-0.L3%19%bbentry }
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 57 {input.spec-%tmpvar-12.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 65 {input.spec-%tmpvar-11.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 66 {input.spec-%tmpvar-13.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 67 {input.spec-%var-x_i-1.L3%19%bbentry }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d for loc_id 38 {input.spec-%tmpvar-0.L3%20%d }
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 40 {input.spec-%var-i-1.L3%7%bbentry }
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 48 {input.spec-%var-ret-1.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 58 {input.spec-%tmpvar-14.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 59 {input.spec-%tmpvar-8.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 60 {input.spec-%tmpvar-9.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 62 {input.spec-%var-u-0.L3%7%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 39 {input.spec-%tmpvar-3.L3%27%d }
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 50 {input.spec-%tmpvar-1.L3%27%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 51 {input.spec-%tmpvar-2.L3%27%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 53 {input.spec-%var-x_ij-0.L3%27%d }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d done
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%28%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%28%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%29%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%29%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry for loc_id 63 {input.spec-%tmpvar-6.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry for loc_id 68 {input.spec-%tmpvar-4.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry for loc_id 63 {input.spec-%tmpvar-6.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry for loc_id 69 {input.spec-%tmpvar-5.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 42 {input.spec-%var-j-0.L3%19%bbentry }
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%7%bbentry:
vacuous mls at L3%8%d:
vacuous mls at L3%9%bbentry:
vacuous mls at L3%11%bbentry:
vacuous mls at L3%19%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%23%bbentry:
vacuous mls at L3%27%d:
vacuous mls at L3%28%bbentry:
vacuous mls at L3%29%bbentry:
vacuous mls at L3%32%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%7%bbentry:
non-vacuous mls at L3%8%d:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at L3%11%bbentry:
non-vacuous mls at L3%19%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%23%bbentry:
non-vacuous mls at L3%27%d:
non-vacuous mls at L3%28%bbentry:
non-vacuous mls at L3%29%bbentry:
non-vacuous mls at L3%32%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 41
=loc_expr
140584 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 50
=loc_expr
140617 : input.spec-%tmpvar-1.L3%27%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140618 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140619 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 65
=loc_expr
140624 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 66
=loc_expr
140627 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 50 expr
1 : input.spec-%tmpvar-1.L3%27%d : BV:32
=loc 50 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=loc 55 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 65 expr
1 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=loc 65 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 66 expr
1 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=loc 66 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 50 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%bbentry=>L3%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%9%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%11%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%11%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%19%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%23%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%23%bbentry=>L3%27%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%27%d=>L3%28%bbentry
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%27%d=>L3%29%bbentry
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%28%bbentry=>L3%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%29%bbentry=>L3%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%32%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%7%bbentry
=spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%bbentry=>L3%8%d
=spec-%tmpvar-10.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>E0%0%d
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%11%bbentry=>L3%19%bbentry
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%19%bbentry=>L3%20%d
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%23%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%7%bbentry
=spec-%var-i-1.L3%7%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%23%bbentry=>L3%27%d
=spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%27%d
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L3%27%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%27%d=>L3%28%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%27%d=>L3%29%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%28%bbentry=>L3%32%bbentry
=spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%29%bbentry=>L3%32%bbentry
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%32%bbentry=>L3%19%bbentry
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%27%d
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%27%d done
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%28%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%28%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%29%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%29%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%28%bbentry=>L3%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%28%bbentry=>L3%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%29%bbentry=>L3%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%29%bbentry=>L3%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%7%bbentry for src.spec.foo
=suffixpath_at_L3%7%bbentry.graph_edge_composition
(L0%0%d=>L3%7%bbentry)
=suffixpath_at_L3%8%d for src.spec.foo
=suffixpath_at_L3%8%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*(L3%7%bbentry=>L3%8%d))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%9%bbentry)))
=suffixpath_at_L3%11%bbentry for src.spec.foo
=suffixpath_at_L3%11%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%11%bbentry)))
=suffixpath_at_L3%19%bbentry for src.spec.foo
=suffixpath_at_L3%19%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*(L3%11%bbentry=>L3%19%bbentry))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*(L3%19%bbentry=>L3%20%d)))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry))))))
=suffixpath_at_L3%23%bbentry for src.spec.foo
=suffixpath_at_L3%23%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%23%bbentry))))))
=suffixpath_at_L3%27%d for src.spec.foo
=suffixpath_at_L3%27%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*(L3%23%bbentry=>L3%27%d)))))))
=suffixpath_at_L3%28%bbentry for src.spec.foo
=suffixpath_at_L3%28%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*(L3%27%d=>L3%28%bbentry))))))))
=suffixpath_at_L3%29%bbentry for src.spec.foo
=suffixpath_at_L3%29%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*(L3%27%d=>L3%29%bbentry))))))))
=suffixpath_at_L3%32%bbentry for src.spec.foo
=suffixpath_at_L3%32%bbentry.graph_edge_composition
(((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*((L3%27%d=>L3%28%bbentry)*(L3%28%bbentry=>L3%32%bbentry)))))))))+((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*((L3%27%d=>L3%29%bbentry)*(L3%29%bbentry=>L3%32%bbentry))))))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%9%bbentry)*(L3%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry done
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d done
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry done
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry done
tfg.assumes_around_edge at L3%23%bbentry=>L3%27%d
tfg.assumes_around_edge at L3%23%bbentry=>L3%27%d done
tfg.assumes_around_edge at L3%27%d=>L3%28%bbentry
tfg.assumes_around_edge at L3%27%d=>L3%28%bbentry done
tfg.assumes_around_edge at L3%27%d=>L3%29%bbentry
tfg.assumes_around_edge at L3%27%d=>L3%29%bbentry done
tfg.assumes_around_edge at L3%28%bbentry=>L3%32%bbentry
tfg.assumes_around_edge at L3%28%bbentry=>L3%32%bbentry done
tfg.assumes_around_edge at L3%29%bbentry=>L3%32%bbentry
tfg.assumes_around_edge at L3%29%bbentry=>L3%32%bbentry done
tfg.assumes_around_edge at L3%32%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%32%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.body3%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end10%1%d Lfor.inc8%1%d Lif.else%1%d Lif.end%1%bbentry Lif.then%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end10%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc8%1%d
Lfor.body3%1%d => Lfor.body3%2%d
Lfor.body3%2%d => Lif.then%1%d
Lfor.body3%2%d => Lif.else%1%d
Lif.then%1%d => Lif.end%1%bbentry
Lif.else%1%d => Lif.end%1%bbentry
Lif.end%1%bbentry => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc8%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end10%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end10%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc8%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.3 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end10%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc8%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.body3%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %cmp4 = icmp ugt i32 %i.0, %j.0, !dbg !36
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.else%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lif.then%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40))*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40)))*((  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40*  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40)*(((  %add = add i32 %ret.1, %1, !dbg !41*  br label %if.end, !dbg !42)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end, !dbg !42))*(  br label %if.end, !dbg !42*  br label %if.end, !dbg !42))))
tfg_edge_comment end

=Edge: Lif.else%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.3 : MEMLABEL
4 : mlvar.dst.llvm.foo.2 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.2 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*(  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43))*(  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43*  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43))*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43)))*((  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43*  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43)*(((  %sub = sub i32 %ret.1, %3, !dbg !44*  br label %if.end)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end))*(  br label %if.end*  br label %if.end))))
tfg_edge_comment end

=Edge: Lif.end%1%bbentry => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((((bb_entry*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*(  %inc = add i32 %j.0, 1, !dbg !47*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  br label %for.cond1, !dbg !48, !llvm.loop !49)*(  br label %for.cond1, !dbg !48, !llvm.loop !49*  br label %for.cond1, !dbg !48, !llvm.loop !49))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.inc8%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc9 = add i32 %i.0, 1, !dbg !52*  br label %for.cond, !dbg !53, !llvm.loop !54)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !53, !llvm.loop !54))*  br label %for.cond, !dbg !53, !llvm.loop !54)*(  br label %for.cond, !dbg !53, !llvm.loop !54*  br label %for.cond, !dbg !53, !llvm.loop !54))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end10%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !56
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100061 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100062 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100063 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100064 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100065 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100066 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100067 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100087 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100088 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100089 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100090 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=Loc 100091 in dst.llvm.foo.
REGMEM
dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=Loc 100092 in dst.llvm.foo.
REGMEM
dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=Loc 100093 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=Loc 100094 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=Loc 100095 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100096 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100097 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100098 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100099 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100100 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100101 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=Loc 100102 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=Loc 100103 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=Loc 100104 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=Loc 100105 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100106 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100107 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100108 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100109 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100110 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100111 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=Loc 100112 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=Loc 100113 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=Loc 100114 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=Loc 100115 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100116 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073, 
=live locs at Lfor.body3%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.body3%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100068, 100069, 100070, 100083, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 
=live locs at Lfor.cond%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 100075, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100076, 100083, 
=live locs at Lfor.end10%1%d
100065, 100073[f], 
=live locs at Lfor.inc8%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100083, 
=live locs at Lif.else%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lif.end%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100090, 
=live locs at Lif.then%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at E0%0%d
100065, 100073[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.body3%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.body3%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.end10%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.inc8%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.else%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.end%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100090, 100115, 100116
=loc definedness at Lif.then%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at E0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100071, 100072, 100073, 100074, 100075, 100077, 100078, 100079, 100115, 100116

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100069
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.body3%2%d
100006, 100012, 100068, 100069, 100070
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100069
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100069, 100075
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100069, 100070, 100076
=branch affecting variable locs at Lfor.end10%1%d

=branch affecting variable locs at Lfor.inc8%1%d
100006, 100012, 100069
=branch affecting variable locs at Lif.else%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.end%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.then%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100115 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100116 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100085 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d for loc_id 100068 {input.dst.llvm-%cmp4.Lfor.body3%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100075 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100076 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100071 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100072 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100074 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%inc9.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100091 {input.dst.llvm-%2.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100092 {input.dst.llvm-%3.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100093 {input.dst.llvm-%arrayidx6.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100094 {input.dst.llvm-%arrayidx7.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100095 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100096 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100097 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100098 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100099 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100100 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100101 {input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100102 {input.dst.llvm-%sub.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100087 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100088 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100089 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100103 {input.dst.llvm-%0.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100104 {input.dst.llvm-%1.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100105 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100106 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100107 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100108 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100109 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100110 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100111 {input.dst.llvm-%add.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100112 {input.dst.llvm-%arrayidx.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100113 {input.dst.llvm-%arrayidx5.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100114 {input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.body3%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end10%1%d:
vacuous mls at Lfor.inc8%1%d:
vacuous mls at Lif.else%1%d:
vacuous mls at Lif.end%1%bbentry:
vacuous mls at Lif.then%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.body3%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end10%1%d:
non-vacuous mls at Lfor.inc8%1%d:
non-vacuous mls at Lif.else%1%d:
non-vacuous mls at Lif.end%1%bbentry:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140397 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140395 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140399 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100046
=loc_expr
140496 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100048
=loc_expr
140497 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100049
=loc_expr
140499 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100050
=loc_expr
140501 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140503 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100056
=loc_expr
140404 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100057
=loc_expr
140394 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100058
=loc_expr
140396 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100059
=loc_expr
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100071
=loc_expr
140767 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140768 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140769 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140770 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140771 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140774 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140775 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140779 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100115
=loc_expr
140804 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100116
=loc_expr
140805 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100074 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100074 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100115 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100115 spreled-expr
140404 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100116 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100116 spreled-expr
140403 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100090 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100091 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100092 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100093 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100094 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100095 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100098 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100099 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100101 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100106 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100108 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100109 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100111 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100074 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100115 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.else%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.then%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end10%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc8%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end10%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.body3%2%d
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.else%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end10%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc8%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end10%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%d=>Lif.end%1%bbentry
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lif.end%1%bbentry
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.body3%2%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*(Lfor.body3%1%d=>Lfor.body3%2%d)))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end10%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end10%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end10%1%d)))
=suffixpath_at_Lfor.inc8%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc8%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc8%1%d))))))
=suffixpath_at_Lif.else%1%d for dst.llvm.foo
=suffixpath_at_Lif.else%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.else%1%d))))))))
=suffixpath_at_Lif.end%1%bbentry for dst.llvm.foo
=suffixpath_at_Lif.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lif.end%1%bbentry)))))))))+((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lif.end%1%bbentry))))))))))
=suffixpath_at_Lif.then%1%d for dst.llvm.foo
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.then%1%d))))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end10%1%d)*(Lfor.end10%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140399 : input.dst.llvm-%x : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140405 : islangaligned(140399, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d done
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140555 : 4 { 0x4 +1.0e1025 } : BV:64
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140426 : 32 { 0x20 +1.0e1025 } : INT
140729 : bvsign_ext(140699, 140426) : BV:64
140880 : bvmul(140555, 140729) : BV:64
140430 : 63 { 0x3f +1.0e1025 } : INT
140881 : bvextract(140880, 140430, 140426) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140728 : bvslt(140699, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140894 : ite(140728, 140337, 140276) : BV:32
140896 : eq(140881, 140894) : BOOL
140378 : 4 { 0x4 +1.0e1025 } : INT
140898 : isindexforsize(140896, 140378) : BOOL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140900 : isgepoffset(140824, 140821) : BOOL
140904 : islangaligned(140824, 140378) : BOOL
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140906 : islangaligned(140830, 140378) : BOOL
140909 : and(140904, 140906) : BOOL
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140744 : bvsign_ext(140700, 140426) : BV:64
140922 : bvmul(140555, 140744) : BV:64
140923 : bvextract(140922, 140430, 140426) : BV:32
140743 : bvslt(140700, 140276) : BOOL
140936 : ite(140743, 140337, 140276) : BV:32
140938 : eq(140923, 140936) : BOOL
140940 : isindexforsize(140938, 140378) : BOOL
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140942 : isgepoffset(140835, 140833) : BOOL
140947 : and(140898, 140900, 140904, 140909, 140940, 140942) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140862 : islangaligned(140835, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140555 : 4 { 0x4 +1.0e1025 } : BV:64
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140426 : 32 { 0x20 +1.0e1025 } : INT
140729 : bvsign_ext(140699, 140426) : BV:64
140880 : bvmul(140555, 140729) : BV:64
140430 : 63 { 0x3f +1.0e1025 } : INT
140881 : bvextract(140880, 140430, 140426) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140728 : bvslt(140699, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140894 : ite(140728, 140337, 140276) : BV:32
140896 : eq(140881, 140894) : BOOL
140378 : 4 { 0x4 +1.0e1025 } : INT
140898 : isindexforsize(140896, 140378) : BOOL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140900 : isgepoffset(140824, 140821) : BOOL
140904 : islangaligned(140824, 140378) : BOOL
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140906 : islangaligned(140830, 140378) : BOOL
140909 : and(140904, 140906) : BOOL
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140744 : bvsign_ext(140700, 140426) : BV:64
140922 : bvmul(140555, 140744) : BV:64
140923 : bvextract(140922, 140430, 140426) : BV:32
140743 : bvslt(140700, 140276) : BOOL
140936 : ite(140743, 140337, 140276) : BV:32
140938 : eq(140923, 140936) : BOOL
140940 : isindexforsize(140938, 140378) : BOOL
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140942 : isgepoffset(140835, 140833) : BOOL
140947 : and(140898, 140900, 140904, 140909, 140940, 140942) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140862 : islangaligned(140835, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 10
=pc
Lfor.end10%1%d
=linename
line 11
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc8%1%d
=linename
line 3
=pc
Lfor.inc8%2%d
=linename
line 3
=pc
Lif.else%1%d
=linename
line 8
=pc
Lif.else%2%d
=linename
line 8
=pc
Lif.else%3%d
=linename
line 8
=pc
Lif.else%4%d
=linename
line 8
=pc
Lif.else%5%d
=linename
line 8
=pc
Lif.end%1%d
=linename
line 9
=pc
Lif.then%1%d
=linename
line 6
=pc
Lif.then%2%d
=linename
line 6
=pc
Lif.then%3%d
=linename
line 6
=pc
Lif.then%4%d
=linename
line 6
=pc
Lif.then%5%d
=linename
line 6
=pc
Lif.then%6%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 13
=pc
Lfor.body3%2%d
=column_name
 at column 11
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end10%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc8%1%d
=column_name
 at column 31
=pc
Lfor.inc8%2%d
=column_name
 at column 3
=pc
Lif.else%1%d
=column_name
 at column 16
=pc
Lif.else%2%d
=column_name
 at column 16
=pc
Lif.else%3%d
=column_name
 at column 16
=pc
Lif.else%4%d
=column_name
 at column 16
=pc
Lif.else%5%d
=column_name
 at column 13
=pc
Lif.end%1%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 16
=pc
Lif.then%2%d
=column_name
 at column 16
=pc
Lif.then%3%d
=column_name
 at column 16
=pc
Lif.then%4%d
=column_name
 at column 16
=pc
Lif.then%5%d
=column_name
 at column 13
=pc
Lif.then%6%d
=column_name
 at column 9
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 13)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 10
=pc
Lfor.end10%1%d
=line_and_column
line 11
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc8%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc8%2%d
=line_and_column
(line 3 at column 3)
=pc
Lif.else%1%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%2%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%3%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%4%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%5%d
=line_and_column
(line 8 at column 13)
=pc
Lif.end%1%d
=line_and_column
line 9
=pc
Lif.then%1%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%2%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%3%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%4%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%5%d
=line_and_column
(line 6 at column 13)
=pc
Lif.then%6%d
=line_and_column
(line 6 at column 9)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset : L0%0%d : (input.dst.llvm-%0 + input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset)
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx5]_4
input.dst.llvm-%add : Lif.then%6%bbentry : ret'
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx6]_4
input.dst.llvm-%3 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx7]_4
input.dst.llvm-%sub : Lif.else%6%bbentry : ret'
input.dst.llvm-%ret.2 : Lif.end%1%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%ret.2
input.dst.llvm-%inc9 : Lfor.inc8%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%arrayidx5 : L0%0%d : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.then : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx6 : L0%0%d : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset
input.dst.llvm-%arrayidx7 : L0%0%d : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.else : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : L0%0%d : input.dst.llvm-%ret.2.Lif.end%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx5
=dst.llvm-%arrayidx5 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx5 val_scevb
=dst.llvm-%arrayidx5 val_scevb scev
=dst.llvm-%arrayidx5 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr done
=dst.llvm-%arrayidx5 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb
=dst.llvm-%arrayidx5 atuse_scevb scev
=dst.llvm-%arrayidx5 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx5 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atexit_scev
=dst.llvm-%arrayidx5 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx5 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%ret.2
=dst.llvm-%ret.2 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.2 val_scevb
=dst.llvm-%ret.2 val_scevb scev
=dst.llvm-%ret.2 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 val_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 val_scevb scev scev_expr done
=dst.llvm-%ret.2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb
=dst.llvm-%ret.2 atuse_scevb scev
=dst.llvm-%ret.2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 atuse_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atuse_scevb scev scev_expr done
=dst.llvm-%ret.2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atexit_scev
=dst.llvm-%ret.2 atexit_scev loop: L0%0%d
=dst.llvm-%ret.2 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.2 atexit_scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atexit_scev scev_expr done
=dst.llvm-%arrayidx6
=dst.llvm-%arrayidx6 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx6 val_scevb
=dst.llvm-%arrayidx6 val_scevb scev
=dst.llvm-%arrayidx6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr done
=dst.llvm-%arrayidx6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb
=dst.llvm-%arrayidx6 atuse_scevb scev
=dst.llvm-%arrayidx6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atexit_scev
=dst.llvm-%arrayidx6 atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atexit_scev scev_expr done
=dst.llvm-%2
=dst.llvm-%2 loop pc: Lfor.cond1%1%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev
=dst.llvm-%2 atexit_scev loop: L0%0%d
=dst.llvm-%2 atexit_scev scev_overflow_flag: 
=dst.llvm-%2 atexit_scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atexit_scev scev_expr done
=dst.llvm-%arrayidx7
=dst.llvm-%arrayidx7 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx7 val_scevb
=dst.llvm-%arrayidx7 val_scevb scev
=dst.llvm-%arrayidx7 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr done
=dst.llvm-%arrayidx7 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb
=dst.llvm-%arrayidx7 atuse_scevb scev
=dst.llvm-%arrayidx7 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx7 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atexit_scev
=dst.llvm-%arrayidx7 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx7 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
20 : input.dst.llvm-%2 : BV32
22 : scev_op_add(15, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr done
=dst.llvm-%3
=dst.llvm-%3 loop pc: Lfor.cond1%1%d
=dst.llvm-%3 val_scevb
=dst.llvm-%3 val_scevb scev
=dst.llvm-%3 val_scevb scev loop: L0%0%d
=dst.llvm-%3 val_scevb scev scev_overflow_flag: 
=dst.llvm-%3 val_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 val_scevb scev scev_expr done
=dst.llvm-%3 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb
=dst.llvm-%3 atuse_scevb scev
=dst.llvm-%3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%3 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%3 atuse_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atuse_scevb scev scev_expr done
=dst.llvm-%3 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atexit_scev
=dst.llvm-%3 atexit_scev loop: L0%0%d
=dst.llvm-%3 atexit_scev scev_overflow_flag: 
=dst.llvm-%3 atexit_scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atexit_scev scev_expr done
=dst.llvm-%sub
=dst.llvm-%sub loop pc: Lfor.cond1%1%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev
=dst.llvm-%sub atexit_scev loop: L0%0%d
=dst.llvm-%sub atexit_scev scev_overflow_flag: 
=dst.llvm-%sub atexit_scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
28 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc9
=dst.llvm-%inc9 loop pc: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb
=dst.llvm-%inc9 val_scevb scev
=dst.llvm-%inc9 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 val_scevb scev scev_expr done
=dst.llvm-%inc9 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb
=dst.llvm-%inc9 atuse_scevb scev
=dst.llvm-%inc9 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 atuse_scevb scev scev_expr done
=dst.llvm-%inc9 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atexit_scev
=dst.llvm-%inc9 atexit_scev loop: L0%0%d
=dst.llvm-%inc9 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc9 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
30 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc9 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.end10%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc8%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 21 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 22 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns for expr 54
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 54 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 54 edges done
=reaching defns for expr 55
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 55 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 55 edges done
=reaching defns for expr 56
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 56 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 56 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%add.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.llvm-%cmp4.Lfor.body3%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%3.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc9.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple6.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%7%bbentry_Lfor.cond%1%bbentry L3%19%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc8%1%d#{0,0})*(Lfor.inc8%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*(((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*((L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})*((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{1,0})))))+((L3%20%d#{0,0}=>L3%23%bbentry#{0,0})*((L3%23%bbentry#{0,0}=>L3%27%d#{0,0})*((((L3%27%d#{0,0}=>L3%28%bbentry#{0,0})*(L3%28%bbentry#{0,0}=>L3%32%bbentry#{0,0}))+((L3%27%d#{0,0}=>L3%29%bbentry#{0,0})*(L3%29%bbentry#{0,0}=>L3%32%bbentry#{0,0})))*(L3%32%bbentry#{0,0}=>L3%19%bbentry#{1,0}))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*((Lfor.body3%1%d#{0,0}=>Lfor.body3%2%d#{0,0})*((((Lfor.body3%2%d#{0,0}=>Lif.else%1%d#{0,0})*(Lif.else%1%d#{0,0}=>Lif.end%1%bbentry#{0,0}))+((Lfor.body3%2%d#{0,0}=>Lif.then%1%d#{0,0})*(Lif.then%1%d#{0,0}=>Lif.end%1%bbentry#{0,0})))*(Lif.end%1%bbentry#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end10%1%d#{0,0})*(Lfor.end10%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B4.C1.D2.E1
=Locs end
=Liveness in foo.A1.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%7%bbentry_Lfor.cond%1%bbentry

=live locs at L3%19%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B4.C1.D2.E1

=Branch affecting variable locs in foo.A1.B4.C1.D2.E1

=Relevant Memlabels in foo.A1.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 58cafb65af6dc75401844c289cf3e85
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137962127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137962128; 137962131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 137962132; 807997699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807997700; 807997703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807997704; 1512563519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1512563520; 1512563523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1512563524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807997703 { 0x30291107 +1.32083213e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 137962131 { 0x8392293 +1.44636762e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1512563523 { 0x5a27e343 +1.31162297e53 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 1453ea3a95944bc724181f3e858e081
=input.spec-%var-x-1
1 : Lambda214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda215Var : BV:32
11 : Lambda216Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda217Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 62985987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 62985988; 62985991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 62985992; 1082155007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082155008; 1082155011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1082155012; 1279275583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1279275584; 1279275587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1279275588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda232Var : BV:32
11 : Lambda233Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda234Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 62985991 { 0x3c11707 +1.50851523e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1279275587 { 0x4c403243 +1.50153386e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1082155011 { 0x40806003 +1.293004e2 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce27.num_edges_traversed2
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce27 47da247ac0e5aafaccaff602547a8c3
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4613Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4614Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 14, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 14, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : ite(40, 14, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : ite(45, 14, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : ite(50, 14, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : ite(55, 14, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4603Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4604Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(15, 24, 25) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 29, 32) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(24, 25) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 29, 32) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 29, 32) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 29, 32) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(15, 23, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 29, 32) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 29, 32) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4619Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4620Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 14, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 14, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : ite(40, 14, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : ite(45, 14, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : ite(50, 14, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : ite(55, 14, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 2 num_edges_traversed 2
=global nodece 2 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce28.num_edges_traversed2
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce28 f27233ffc646f40a455f705d7f44fb
=input.spec-%var-x-1
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4565Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4566Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
16 : eq(11, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 9, 10) : BV:32
29 : eq(28, 12) : BOOL
30 : eq(28, 15) : BOOL
31 : ite(30, 17, 18) : BV:8
32 : ite(29, 14, 31) : BV:8
33 : bvadd(9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : ite(35, 17, 18) : BV:8
37 : ite(34, 14, 36) : BV:8
38 : bvconcat(20, 26, 32, 37) : BV:32
39 : bvadd(5, 7, 38) : BV:32
40 : eq(39, 12) : BOOL
41 : eq(39, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : bvadd(21, 7, 38) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : ite(46, 17, 18) : BV:8
48 : ite(45, 14, 47) : BV:8
49 : bvadd(27, 7, 38) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : ite(51, 17, 18) : BV:8
53 : ite(50, 14, 52) : BV:8
54 : bvadd(7, 38) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : ite(56, 17, 18) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : bvconcat(43, 48, 53, 58) : BV:32
60 : lambda(4, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(3, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 177223351 ] -> 0, [ 177223352; 177223352 ] -> 32, [ 177223353; 3269441524 ] -> 0, [ 3269441525; 3269441525 ] -> 1, [ 3269441526; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 177223351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 177223352; 177223355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 177223356; 1249769175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1249769176; 1249769179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1249769180; 3269441523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3269441524; 3269441527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3269441528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.llvm-%x
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 255 { 0xff +1.3039e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 256 { 0x100 +1.3051e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4555Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4556Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : bvadd(15, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 32, 33) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(35, 41, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 32, 33) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(36, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 32, 33) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(15, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 32, 33) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : sum(16, 17, 75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
77 : sym_const(76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4571Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4572Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
16 : eq(11, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 9, 10) : BV:32
29 : eq(28, 12) : BOOL
30 : eq(28, 15) : BOOL
31 : ite(30, 17, 18) : BV:8
32 : ite(29, 14, 31) : BV:8
33 : bvadd(9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : ite(35, 17, 18) : BV:8
37 : ite(34, 14, 36) : BV:8
38 : bvconcat(20, 26, 32, 37) : BV:32
39 : bvadd(5, 7, 38) : BV:32
40 : eq(39, 12) : BOOL
41 : eq(39, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : bvadd(21, 7, 38) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : ite(46, 17, 18) : BV:8
48 : ite(45, 14, 47) : BV:8
49 : bvadd(27, 7, 38) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : ite(51, 17, 18) : BV:8
53 : ite(50, 14, 52) : BV:8
54 : bvadd(7, 38) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : ite(56, 17, 18) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : bvconcat(43, 48, 53, 58) : BV:32
60 : lambda(4, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(3, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3269441527 { 0xc2dfb7f7 -1025525769 -1.74780166e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 177223355 { 0xa9036bb +1.12667024e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1249769179 { 0x4a7df6db +1.98409593e21 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda449Var : BV:32
2 : Lambda450Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3955501958
=counter_example_end
=global nodece 3 num_edges_traversed 2
=global nodece 3 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce51.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce51 558e83669136917bb4f844942d2a66
=input.spec-%var-x-1
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4517Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4518Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 80 { 0x50 +1.953e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 79 ] -> 0, [ 80; 80 ] -> 1, [ 81; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 79 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 80; 83 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 84; 16419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16420; 16423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16424; 105279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 105280; 105283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 105284; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : Lambda4507Var : BV:32
16 : lambda(15, 10) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4508Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvmul(19, 1) : BV:32
22 : bvadd(18, 21, 1) : BV:32
23 : 80 { 0x50 +1.953e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 21, 1) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : bvadd(5, 21, 1) : BV:32
33 : eq(32, 23) : BOOL
34 : ite(33, 25, 26) : BV:8
35 : bvadd(21, 1) : BV:32
36 : eq(35, 23) : BOOL
37 : ite(36, 25, 26) : BV:8
38 : bvconcat(27, 31, 34, 37) : BV:32
39 : bvadd(18, 20, 38) : BV:32
40 : eq(39, 23) : BOOL
41 : ite(40, 25, 26) : BV:8
42 : bvadd(28, 20, 38) : BV:32
43 : eq(42, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : bvadd(5, 20, 38) : BV:32
46 : eq(45, 23) : BOOL
47 : ite(46, 25, 26) : BV:8
48 : bvadd(20, 38) : BV:32
49 : eq(48, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : bvconcat(41, 44, 47, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sum(13, 14, 53) : SUM[UNIT,MAP[BV:32 -> BV:32]]
55 : sym_const(54) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4523Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4524Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 80 { 0x50 +1.953e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 83 { 0x53 +1.989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 105283 { 0x19b43 +1.1255071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16423 { 0x4027 +1.195777e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda655Var : BV:32
2 : Lambda656Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda665Var : BV:32
2 : Lambda666Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce63.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce63 07d5f1d25be7eb8853d1cfcdd422d54
=input.spec-%var-x-1
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 7603007 ] -> 0, [ 7603008; 7603008 ] -> 4, [ 7603009; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 7603007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7603008; 7603011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 7603012; 438370319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 438370320; 438370323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 438370324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7603011 { 0x740343 +1.90634953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 438370323 { 0x1a210013 +1.25781476e181 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda817Var : BV:32
2 : Lambda818Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda825Var : BV:32
2 : Lambda826Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2151377258
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce64.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce64 982511669a706d47be58519fdc9a3df2
=input.spec-%var-x-1
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 645922815 ] -> 8, [ 645922816; 645922819 ] -> 0, [ 645922820; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 645922815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 645922816; 645922819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 645922820; 2820053559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820053560; 2820053563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2820053564; 3494369115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3494369116; 3494369119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3494369120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.llvm-%m
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.llvm-%x
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 645922819 { 0x26800003 +1.35e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2820053563 { 0xa8169a3b -1474913733 -1.17658174e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3494369119 { 0xd047d75f -800598177 -1.56126010e33 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda828Var : BV:32
2 : Lambda829Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda836Var : BV:32
2 : Lambda837Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2295244487
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce87.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce87 5712ab1aefdcbc8a58fe66f32ea59ce
=input.spec-%var-x-1
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4247212035 ] -> 0, [ 4247212036; 4247212036 ] -> 2, [ 4247212037; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3094625979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094625980; 3094625983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3094625984; 3103785023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3103785024; 3103785027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3103785028; 4247212035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4247212036; 4247212039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4247212040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3103785027 { 0xb9000043 -1191182269 -1.798e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3094625983 { 0xb8743ebf -1200341313 -1.90816485e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4247212039 { 0xfd275007 -47755257 -1.30712974e123 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1137Var : BV:32
2 : Lambda1138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1145Var : BV:32
2 : Lambda1146Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1483938286
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce111.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce111 3acec2b260534696d3dbda4bb1ef0f5
=input.spec-%var-x-1
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1879429855 ] -> 0, [ 1879429856; 1879429856 ] -> 1, [ 1879429857; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1085498959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1085498960; 1085498963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1085498964; 1879429855 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1879429856; 1879429859 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1879429860; 3225801363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3225801364; 3225801367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3225801368; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1085498960 { 0x40b36650 +1.40155982e2 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3225801364 { 0xc045d294 -1069165932 -1.54548883e1 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1085498960 { 0x40b36650 +1.40155982e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1085498963 { 0x40b36653 +1.40156018e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3225801364 { 0xc045d294 -1069165932 -1.54548883e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3225801367 { 0xc045d297 -1069165929 -1.54548919e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1879429859 { 0x7005d2e3 +1.4549825e97 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1362Var : BV:32
2 : Lambda1363Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1370Var : BV:32
2 : Lambda1371Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1314779067
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce135.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce135 604fea87ed7e90191a5bd7feae6d3da
=input.spec-%var-x-1
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
29 : eq(24, 28) : BOOL
30 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
31 : eq(24, 30) : BOOL
32 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4397Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4398Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
17 : eq(10, 16) : BOOL
18 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 68190671 ] -> 0, [ 68190672; 68190675 ] -> 255, [ 68190676; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2165155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2165156; 2165159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2165160; 68190671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68190672; 68190675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 68190676; 100737823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 100737824; 100737827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 100737828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 100737824 { 0x6012320 +1.888442e141 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2165156 { 0x2109a4 +1.25810670e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
29 : eq(24, 28) : BOOL
30 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
31 : eq(24, 30) : BOOL
32 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda4387Var : BV:32
18 : lambda(17, 11) : FUNCTION[BV:32 -> BOOL]
19 : Lambda4388Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 1) : BV:32
24 : bvadd(20, 23, 1) : BV:32
25 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
29 : eq(24, 28) : BOOL
30 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
31 : eq(24, 30) : BOOL
32 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 1) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : bvadd(14, 23, 1) : BV:32
50 : eq(49, 25) : BOOL
51 : eq(49, 28) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 32) : BOOL
54 : ite(53, 27, 34) : BV:8
55 : ite(52, 27, 54) : BV:8
56 : ite(51, 27, 55) : BV:8
57 : ite(50, 27, 56) : BV:8
58 : bvadd(23, 1) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 32) : BOOL
63 : ite(62, 27, 34) : BV:8
64 : ite(61, 27, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : ite(59, 27, 65) : BV:8
67 : bvconcat(38, 48, 57, 66) : BV:32
68 : bvadd(20, 22, 67) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 30) : BOOL
72 : eq(68, 32) : BOOL
73 : ite(72, 27, 34) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 27, 74) : BV:8
76 : ite(69, 27, 75) : BV:8
77 : bvadd(39, 22, 67) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : ite(81, 27, 34) : BV:8
83 : ite(80, 27, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 27, 84) : BV:8
86 : bvadd(14, 22, 67) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 30) : BOOL
90 : eq(86, 32) : BOOL
91 : ite(90, 27, 34) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 27, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : bvadd(22, 67) : BV:32
96 : eq(95, 25) : BOOL
97 : eq(95, 28) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : ite(99, 27, 34) : BV:8
101 : ite(98, 27, 100) : BV:8
102 : ite(97, 27, 101) : BV:8
103 : ite(96, 27, 102) : BV:8
104 : bvconcat(76, 85, 94, 103) : BV:32
105 : lambda(19, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(18, 105) : MAP[BV:32 -> BV:32]
107 : sum(15, 16, 106) : SUM[UNIT,MAP[BV:32 -> BV:32]]
108 : sym_const(107) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4403Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4404Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
17 : eq(10, 16) : BOOL
18 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2165156 { 0x2109a4 +1.25810670e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2165159 { 0x2109a7 +1.25810706e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 100737824 { 0x6012320 +1.888442e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 100737827 { 0x6012323 +1.888478e141 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1587Var : BV:32
2 : Lambda1588Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
13 : eq(8, 12) : BOOL
14 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
15 : eq(8, 14) : BOOL
16 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1597Var : BV:32
2 : Lambda1598Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
13 : eq(8, 12) : BOOL
14 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
15 : eq(8, 14) : BOOL
16 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce159.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce159 959f72ab2fd4a3941f91680bd4bfd79
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce183.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce183 483025f7be3f403ca2447d6e982a47e7
=input.spec-%var-x-1
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3129957035 ] -> 0, [ 3129957036; 3129957039 ] -> 255, [ 3129957040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2231376759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2231376760; 2231376763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2231376764; 3129483643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129483644; 3129483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3129483648; 3129957035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129957036; 3129957039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3129957040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2231376763 { 0x85001b7b -2063590533 -1.83863e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3129483647 { 0xba88217f -1165483649 -1.6352221e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2046Var : BV:32
2 : Lambda2047Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2054Var : BV:32
2 : Lambda2055Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1928214307
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce338.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce338 9f1bcf11d2e077d237c868daace1389
=input.spec-%var-x-1
1 : Lambda3760Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3761Var : BV:32
18 : Lambda3762Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3763Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 242 { 0xf2 -14 } : BV:8
82 : eq(79, 75) : BOOL
83 : 241 { 0xf1 -15 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 127 { 0x7f } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 253 { 0xfd -3 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4283Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4284Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 242, [ 1; 1 ] -> 127, [ 2; 2 ] -> 253, [ 3; 3 ] -> 241, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 408417167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 408417168; 408417171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 408417172; 2044707699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044707700; 2044707703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2044707704; 3493055215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493055216; 3493055219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3493055220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3773Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3774Var : BV:32
18 : Lambda3775Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3776Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 242 { 0xf2 -14 } : BV:8
63 : eq(60, 56) : BOOL
64 : 241 { 0xf1 -15 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 253 { 0xfd -3 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4273Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 67108865 { 0x4000001 +1.11e137 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4095 { 0xfff +1.48816e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 4096 { 0x1000 +1.48828e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 4097 { 0x1001 +1.48840e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4274Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 1) : BOOL
57 : 242 { 0xf2 -14 } : BV:8
58 : eq(55, 51) : BOOL
59 : 241 { 0xf1 -15 } : BV:8
60 : eq(55, 15) : BOOL
61 : 127 { 0x7f } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(55, 62) : BOOL
64 : 253 { 0xfd -3 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 59, 67) : BV:8
69 : ite(56, 57, 68) : BV:8
70 : bvadd(62, 54) : BV:32
71 : eq(70, 1) : BOOL
72 : eq(70, 51) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 57, 77) : BV:8
79 : bvadd(15, 54) : BV:32
80 : eq(79, 1) : BOOL
81 : eq(79, 51) : BOOL
82 : eq(79, 15) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 59, 85) : BV:8
87 : ite(80, 57, 86) : BV:8
88 : eq(54, 1) : BOOL
89 : eq(54, 51) : BOOL
90 : eq(54, 15) : BOOL
91 : eq(54, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 59, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(51, 53, 96) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 15) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 59, 103) : BV:8
105 : ite(98, 57, 104) : BV:8
106 : bvadd(62, 53, 96) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 51) : BOOL
109 : eq(106, 15) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 59, 112) : BV:8
114 : ite(107, 57, 113) : BV:8
115 : bvadd(15, 53, 96) : BV:32
116 : eq(115, 1) : BOOL
117 : eq(115, 51) : BOOL
118 : eq(115, 15) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 59, 121) : BV:8
123 : ite(116, 57, 122) : BV:8
124 : bvadd(53, 96) : BV:32
125 : eq(124, 1) : BOOL
126 : eq(124, 51) : BOOL
127 : eq(124, 15) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 59, 130) : BV:8
132 : ite(125, 57, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(50, 1, 133) : BV:32
135 : lambda(47, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(46, 135) : MAP[BV:32 -> BV:32]
137 : sum(16, 17, 136) : SUM[UNIT,MAP[BV:32 -> BV:32]]
138 : sym_const(137) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4289Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4290Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3493055219 { 0xd033caf3 -801912077 -1.40463101e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2044707703 { 0x79dfc377 +1.74815261e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 408417171 { 0x1857f393 +1.68712079e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3695Var : BV:32
2 : Lambda3696Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4096 { 0x1000 +1.48828e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 242 { 0xf2 -14 } : BV:8
55 : eq(52, 48) : BOOL
56 : 241 { 0xf1 -15 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3700Var : BV:32
2 : Lambda3701Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda3709Var : BV:32
2 : Lambda3710Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda3705Var : BV:32
2 : Lambda3706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 242 { 0xf2 -14 } : BV:8
14 : eq(11, 7) : BOOL
15 : 241 { 0xf1 -15 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 253 { 0xfd -3 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1626471087
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce339.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce339 67cf2913fd5de8e1caa613d7bd102ce4
=input.spec-%var-x-1
1 : Lambda3814Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3815Var : BV:32
18 : Lambda3816Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3817Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048584; 33554439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554440; 33554443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3831Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3832Var : BV:32
18 : Lambda3833Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3834Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554443 { 0x200000b +1.131e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1802347510
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce1818.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce1818 c7c740e51acbc405697afe44b40cca
=input.spec-%var-x-1
1 : Lambda11577Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11578Var : BV:32
18 : Lambda11579Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11580Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : bvmul(37, 17) : BV:32
77 : bvadd(34, 76) : BV:32
78 : eq(77, 2) : BOOL
79 : 13 { 0xd } : BV:8
80 : eq(77, 34) : BOOL
81 : 254 { 0xfe -2 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(77, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : 2 { 0x2 +1.23e129 } : BV:32
86 : eq(77, 85) : BOOL
87 : 159 { 0x9f -97 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : bvadd(85, 76) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 34) : BOOL
96 : eq(93, 82) : BOOL
97 : eq(93, 85) : BOOL
98 : ite(97, 87, 88) : BV:8
99 : ite(96, 84, 98) : BV:8
100 : ite(95, 81, 99) : BV:8
101 : ite(94, 79, 100) : BV:8
102 : bvadd(82, 76) : BV:32
103 : eq(102, 2) : BOOL
104 : eq(102, 34) : BOOL
105 : eq(102, 82) : BOOL
106 : eq(102, 85) : BOOL
107 : ite(106, 87, 88) : BV:8
108 : ite(105, 84, 107) : BV:8
109 : ite(104, 81, 108) : BV:8
110 : ite(103, 79, 109) : BV:8
111 : eq(76, 2) : BOOL
112 : eq(76, 34) : BOOL
113 : eq(76, 82) : BOOL
114 : eq(76, 85) : BOOL
115 : ite(114, 87, 88) : BV:8
116 : ite(113, 84, 115) : BV:8
117 : ite(112, 81, 116) : BV:8
118 : ite(111, 79, 117) : BV:8
119 : bvconcat(92, 101, 110, 118) : BV:32
120 : bvadd(34, 75, 119) : BV:32
121 : eq(120, 2) : BOOL
122 : eq(120, 34) : BOOL
123 : eq(120, 82) : BOOL
124 : eq(120, 85) : BOOL
125 : ite(124, 87, 88) : BV:8
126 : ite(123, 84, 125) : BV:8
127 : ite(122, 81, 126) : BV:8
128 : ite(121, 79, 127) : BV:8
129 : bvadd(85, 75, 119) : BV:32
130 : eq(129, 2) : BOOL
131 : eq(129, 34) : BOOL
132 : eq(129, 82) : BOOL
133 : eq(129, 85) : BOOL
134 : ite(133, 87, 88) : BV:8
135 : ite(132, 84, 134) : BV:8
136 : ite(131, 81, 135) : BV:8
137 : ite(130, 79, 136) : BV:8
138 : bvadd(82, 75, 119) : BV:32
139 : eq(138, 2) : BOOL
140 : eq(138, 34) : BOOL
141 : eq(138, 82) : BOOL
142 : eq(138, 85) : BOOL
143 : ite(142, 87, 88) : BV:8
144 : ite(141, 84, 143) : BV:8
145 : ite(140, 81, 144) : BV:8
146 : ite(139, 79, 145) : BV:8
147 : bvadd(75, 119) : BV:32
148 : eq(147, 2) : BOOL
149 : eq(147, 34) : BOOL
150 : eq(147, 82) : BOOL
151 : eq(147, 85) : BOOL
152 : ite(151, 87, 88) : BV:8
153 : ite(150, 84, 152) : BV:8
154 : ite(149, 81, 153) : BV:8
155 : ite(148, 79, 154) : BV:8
156 : bvconcat(128, 137, 146, 155) : BV:32
157 : ite(55, 2, 156) : BV:32
158 : ite(74, 156, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : lambda(52, 159) : FUNCTION[BV:32 -> BV:32]
161 : map(51, 160) : MAP[BV:32 -> BV:32]
162 : lambda(17, 161) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
163 : map(16, 162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
164 : sym_const(163) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16713Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 5 { 0x5 +1.59e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16714Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : bvmul(24, 41) : BV:32
46 : bvmul(24, 2) : BV:32
47 : bvadd(21, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : 13 { 0xd } : BV:8
50 : eq(47, 21) : BOOL
51 : 254 { 0xfe -2 } : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(47, 52) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : eq(47, 55) : BOOL
57 : 159 { 0x9f -97 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(53, 54, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 49, 61) : BV:8
63 : bvadd(55, 46) : BV:32
64 : eq(63, 2) : BOOL
65 : eq(63, 21) : BOOL
66 : eq(63, 52) : BOOL
67 : eq(63, 55) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 54, 68) : BV:8
70 : ite(65, 51, 69) : BV:8
71 : ite(64, 49, 70) : BV:8
72 : bvadd(52, 46) : BV:32
73 : eq(72, 2) : BOOL
74 : eq(72, 21) : BOOL
75 : eq(72, 52) : BOOL
76 : eq(72, 55) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 54, 77) : BV:8
79 : ite(74, 51, 78) : BV:8
80 : ite(73, 49, 79) : BV:8
81 : eq(46, 2) : BOOL
82 : eq(46, 21) : BOOL
83 : eq(46, 52) : BOOL
84 : eq(46, 55) : BOOL
85 : ite(84, 57, 58) : BV:8
86 : ite(83, 54, 85) : BV:8
87 : ite(82, 51, 86) : BV:8
88 : ite(81, 49, 87) : BV:8
89 : bvconcat(62, 71, 80, 88) : BV:32
90 : bvadd(21, 45, 89) : BV:32
91 : eq(90, 2) : BOOL
92 : eq(90, 21) : BOOL
93 : eq(90, 52) : BOOL
94 : eq(90, 55) : BOOL
95 : ite(94, 57, 58) : BV:8
96 : ite(93, 54, 95) : BV:8
97 : ite(92, 51, 96) : BV:8
98 : ite(91, 49, 97) : BV:8
99 : bvadd(55, 45, 89) : BV:32
100 : eq(99, 2) : BOOL
101 : eq(99, 21) : BOOL
102 : eq(99, 52) : BOOL
103 : eq(99, 55) : BOOL
104 : ite(103, 57, 58) : BV:8
105 : ite(102, 54, 104) : BV:8
106 : ite(101, 51, 105) : BV:8
107 : ite(100, 49, 106) : BV:8
108 : bvadd(52, 45, 89) : BV:32
109 : eq(108, 2) : BOOL
110 : eq(108, 21) : BOOL
111 : eq(108, 52) : BOOL
112 : eq(108, 55) : BOOL
113 : ite(112, 57, 58) : BV:8
114 : ite(111, 54, 113) : BV:8
115 : ite(110, 51, 114) : BV:8
116 : ite(109, 49, 115) : BV:8
117 : bvadd(45, 89) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 21) : BOOL
120 : eq(117, 52) : BOOL
121 : eq(117, 55) : BOOL
122 : ite(121, 57, 58) : BV:8
123 : ite(120, 54, 122) : BV:8
124 : ite(119, 51, 123) : BV:8
125 : ite(118, 49, 124) : BV:8
126 : bvconcat(98, 107, 116, 125) : BV:32
127 : ite(44, 2, 126) : BV:32
128 : lambda(41, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(40, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 13, [ 1; 1 ] -> 255, [ 2; 2 ] -> 159, [ 3; 3 ] -> 254, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 708427843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 708427844; 708427847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 708427848; 1127837707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1127837708; 1127837711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1127837712; 3102617751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3102617752; 3102617755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3102617756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11590Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11591Var : BV:32
18 : Lambda11592Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11593Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : bvmul(37, 17) : BV:32
58 : bvadd(34, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : 13 { 0xd } : BV:8
61 : eq(58, 34) : BOOL
62 : 254 { 0xfe -2 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(58, 63) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : eq(58, 66) : BOOL
68 : 159 { 0x9f -97 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(64, 65, 70) : BV:8
72 : ite(61, 62, 71) : BV:8
73 : ite(59, 60, 72) : BV:8
74 : bvadd(66, 57) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 34) : BOOL
77 : eq(74, 63) : BOOL
78 : eq(74, 66) : BOOL
79 : ite(78, 68, 69) : BV:8
80 : ite(77, 65, 79) : BV:8
81 : ite(76, 62, 80) : BV:8
82 : ite(75, 60, 81) : BV:8
83 : bvadd(63, 57) : BV:32
84 : eq(83, 2) : BOOL
85 : eq(83, 34) : BOOL
86 : eq(83, 63) : BOOL
87 : eq(83, 66) : BOOL
88 : ite(87, 68, 69) : BV:8
89 : ite(86, 65, 88) : BV:8
90 : ite(85, 62, 89) : BV:8
91 : ite(84, 60, 90) : BV:8
92 : eq(57, 2) : BOOL
93 : eq(57, 34) : BOOL
94 : eq(57, 63) : BOOL
95 : eq(57, 66) : BOOL
96 : ite(95, 68, 69) : BV:8
97 : ite(94, 65, 96) : BV:8
98 : ite(93, 62, 97) : BV:8
99 : ite(92, 60, 98) : BV:8
100 : bvconcat(73, 82, 91, 99) : BV:32
101 : bvadd(34, 56, 100) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 34) : BOOL
104 : eq(101, 63) : BOOL
105 : eq(101, 66) : BOOL
106 : ite(105, 68, 69) : BV:8
107 : ite(104, 65, 106) : BV:8
108 : ite(103, 62, 107) : BV:8
109 : ite(102, 60, 108) : BV:8
110 : bvadd(66, 56, 100) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 34) : BOOL
113 : eq(110, 63) : BOOL
114 : eq(110, 66) : BOOL
115 : ite(114, 68, 69) : BV:8
116 : ite(113, 65, 115) : BV:8
117 : ite(112, 62, 116) : BV:8
118 : ite(111, 60, 117) : BV:8
119 : bvadd(63, 56, 100) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 34) : BOOL
122 : eq(119, 63) : BOOL
123 : eq(119, 66) : BOOL
124 : ite(123, 68, 69) : BV:8
125 : ite(122, 65, 124) : BV:8
126 : ite(121, 62, 125) : BV:8
127 : ite(120, 60, 126) : BV:8
128 : bvadd(56, 100) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 34) : BOOL
131 : eq(128, 63) : BOOL
132 : eq(128, 66) : BOOL
133 : ite(132, 68, 69) : BV:8
134 : ite(131, 65, 133) : BV:8
135 : ite(130, 62, 134) : BV:8
136 : ite(129, 60, 135) : BV:8
137 : bvconcat(109, 118, 127, 136) : BV:32
138 : ite(55, 2, 137) : BV:32
139 : lambda(52, 138) : FUNCTION[BV:32 -> BV:32]
140 : map(51, 139) : MAP[BV:32 -> BV:32]
141 : lambda(17, 140) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
142 : map(16, 141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
143 : sym_const(142) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16703Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 3 { 0x3 +1.35e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 4 { 0x4 +1.47e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 5 { 0x5 +1.59e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16704Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvmul(32, 47) : BV:32
52 : bvmul(32, 1) : BV:32
53 : bvadd(29, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 13 { 0xd } : BV:8
56 : eq(53, 29) : BOOL
57 : 254 { 0xfe -2 } : BV:8
58 : eq(53, 15) : BOOL
59 : 255 { 0xff -1 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(53, 60) : BOOL
62 : 159 { 0x9f -97 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(56, 57, 65) : BV:8
67 : ite(54, 55, 66) : BV:8
68 : bvadd(60, 52) : BV:32
69 : eq(68, 1) : BOOL
70 : eq(68, 29) : BOOL
71 : eq(68, 15) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 57, 74) : BV:8
76 : ite(69, 55, 75) : BV:8
77 : bvadd(15, 52) : BV:32
78 : eq(77, 1) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 57, 83) : BV:8
85 : ite(78, 55, 84) : BV:8
86 : eq(52, 1) : BOOL
87 : eq(52, 29) : BOOL
88 : eq(52, 15) : BOOL
89 : eq(52, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 57, 91) : BV:8
93 : ite(86, 55, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(29, 51, 94) : BV:32
96 : eq(95, 1) : BOOL
97 : eq(95, 29) : BOOL
98 : eq(95, 15) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 57, 101) : BV:8
103 : ite(96, 55, 102) : BV:8
104 : bvadd(60, 51, 94) : BV:32
105 : eq(104, 1) : BOOL
106 : eq(104, 29) : BOOL
107 : eq(104, 15) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 57, 110) : BV:8
112 : ite(105, 55, 111) : BV:8
113 : bvadd(15, 51, 94) : BV:32
114 : eq(113, 1) : BOOL
115 : eq(113, 29) : BOOL
116 : eq(113, 15) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 57, 119) : BV:8
121 : ite(114, 55, 120) : BV:8
122 : bvadd(51, 94) : BV:32
123 : eq(122, 1) : BOOL
124 : eq(122, 29) : BOOL
125 : eq(122, 15) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 57, 128) : BV:8
130 : ite(123, 55, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(50, 1, 131) : BV:32
133 : lambda(47, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(46, 133) : MAP[BV:32 -> BV:32]
135 : sum(16, 17, 134) : SUM[UNIT,MAP[BV:32 -> BV:32]]
136 : sym_const(135) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16719Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 5 { 0x5 +1.59e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16720Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : bvmul(24, 41) : BV:32
46 : bvmul(24, 2) : BV:32
47 : bvadd(21, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : 13 { 0xd } : BV:8
50 : eq(47, 21) : BOOL
51 : 254 { 0xfe -2 } : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(47, 52) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : eq(47, 55) : BOOL
57 : 159 { 0x9f -97 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(53, 54, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 49, 61) : BV:8
63 : bvadd(55, 46) : BV:32
64 : eq(63, 2) : BOOL
65 : eq(63, 21) : BOOL
66 : eq(63, 52) : BOOL
67 : eq(63, 55) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 54, 68) : BV:8
70 : ite(65, 51, 69) : BV:8
71 : ite(64, 49, 70) : BV:8
72 : bvadd(52, 46) : BV:32
73 : eq(72, 2) : BOOL
74 : eq(72, 21) : BOOL
75 : eq(72, 52) : BOOL
76 : eq(72, 55) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 54, 77) : BV:8
79 : ite(74, 51, 78) : BV:8
80 : ite(73, 49, 79) : BV:8
81 : eq(46, 2) : BOOL
82 : eq(46, 21) : BOOL
83 : eq(46, 52) : BOOL
84 : eq(46, 55) : BOOL
85 : ite(84, 57, 58) : BV:8
86 : ite(83, 54, 85) : BV:8
87 : ite(82, 51, 86) : BV:8
88 : ite(81, 49, 87) : BV:8
89 : bvconcat(62, 71, 80, 88) : BV:32
90 : bvadd(21, 45, 89) : BV:32
91 : eq(90, 2) : BOOL
92 : eq(90, 21) : BOOL
93 : eq(90, 52) : BOOL
94 : eq(90, 55) : BOOL
95 : ite(94, 57, 58) : BV:8
96 : ite(93, 54, 95) : BV:8
97 : ite(92, 51, 96) : BV:8
98 : ite(91, 49, 97) : BV:8
99 : bvadd(55, 45, 89) : BV:32
100 : eq(99, 2) : BOOL
101 : eq(99, 21) : BOOL
102 : eq(99, 52) : BOOL
103 : eq(99, 55) : BOOL
104 : ite(103, 57, 58) : BV:8
105 : ite(102, 54, 104) : BV:8
106 : ite(101, 51, 105) : BV:8
107 : ite(100, 49, 106) : BV:8
108 : bvadd(52, 45, 89) : BV:32
109 : eq(108, 2) : BOOL
110 : eq(108, 21) : BOOL
111 : eq(108, 52) : BOOL
112 : eq(108, 55) : BOOL
113 : ite(112, 57, 58) : BV:8
114 : ite(111, 54, 113) : BV:8
115 : ite(110, 51, 114) : BV:8
116 : ite(109, 49, 115) : BV:8
117 : bvadd(45, 89) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 21) : BOOL
120 : eq(117, 52) : BOOL
121 : eq(117, 55) : BOOL
122 : ite(121, 57, 58) : BV:8
123 : ite(120, 54, 122) : BV:8
124 : ite(119, 51, 123) : BV:8
125 : ite(118, 49, 124) : BV:8
126 : bvconcat(98, 107, 116, 125) : BV:32
127 : ite(44, 2, 126) : BV:32
128 : lambda(41, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(40, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3102617755 { 0xb8ee309b -1192349541 -1.86085832e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 708427847 { 0x2a39c047 +1.45118033e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1127837711 { 0x4339700f +1.44873225e7 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11507Var : BV:32
2 : Lambda11508Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : bvmul(33, 1) : BV:32
50 : bvadd(30, 49) : BV:32
51 : eq(50, 3) : BOOL
52 : 13 { 0xd } : BV:8
53 : eq(50, 30) : BOOL
54 : 254 { 0xfe -2 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(50, 55) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : eq(50, 58) : BOOL
60 : 159 { 0x9f -97 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(51, 52, 64) : BV:8
66 : bvadd(58, 49) : BV:32
67 : eq(66, 3) : BOOL
68 : eq(66, 30) : BOOL
69 : eq(66, 55) : BOOL
70 : eq(66, 58) : BOOL
71 : ite(70, 60, 61) : BV:8
72 : ite(69, 57, 71) : BV:8
73 : ite(68, 54, 72) : BV:8
74 : ite(67, 52, 73) : BV:8
75 : bvadd(55, 49) : BV:32
76 : eq(75, 3) : BOOL
77 : eq(75, 30) : BOOL
78 : eq(75, 55) : BOOL
79 : eq(75, 58) : BOOL
80 : ite(79, 60, 61) : BV:8
81 : ite(78, 57, 80) : BV:8
82 : ite(77, 54, 81) : BV:8
83 : ite(76, 52, 82) : BV:8
84 : eq(49, 3) : BOOL
85 : eq(49, 30) : BOOL
86 : eq(49, 55) : BOOL
87 : eq(49, 58) : BOOL
88 : ite(87, 60, 61) : BV:8
89 : ite(86, 57, 88) : BV:8
90 : ite(85, 54, 89) : BV:8
91 : ite(84, 52, 90) : BV:8
92 : bvconcat(65, 74, 83, 91) : BV:32
93 : bvadd(30, 48, 92) : BV:32
94 : eq(93, 3) : BOOL
95 : eq(93, 30) : BOOL
96 : eq(93, 55) : BOOL
97 : eq(93, 58) : BOOL
98 : ite(97, 60, 61) : BV:8
99 : ite(96, 57, 98) : BV:8
100 : ite(95, 54, 99) : BV:8
101 : ite(94, 52, 100) : BV:8
102 : bvadd(58, 48, 92) : BV:32
103 : eq(102, 3) : BOOL
104 : eq(102, 30) : BOOL
105 : eq(102, 55) : BOOL
106 : eq(102, 58) : BOOL
107 : ite(106, 60, 61) : BV:8
108 : ite(105, 57, 107) : BV:8
109 : ite(104, 54, 108) : BV:8
110 : ite(103, 52, 109) : BV:8
111 : bvadd(55, 48, 92) : BV:32
112 : eq(111, 3) : BOOL
113 : eq(111, 30) : BOOL
114 : eq(111, 55) : BOOL
115 : eq(111, 58) : BOOL
116 : ite(115, 60, 61) : BV:8
117 : ite(114, 57, 116) : BV:8
118 : ite(113, 54, 117) : BV:8
119 : ite(112, 52, 118) : BV:8
120 : bvadd(48, 92) : BV:32
121 : eq(120, 3) : BOOL
122 : eq(120, 30) : BOOL
123 : eq(120, 55) : BOOL
124 : eq(120, 58) : BOOL
125 : ite(124, 60, 61) : BV:8
126 : ite(123, 57, 125) : BV:8
127 : ite(122, 54, 126) : BV:8
128 : ite(121, 52, 127) : BV:8
129 : bvconcat(101, 110, 119, 128) : BV:32
130 : ite(6, 3, 129) : BV:32
131 : ite(47, 129, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11512Var : BV:32
2 : Lambda11513Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11521Var : BV:32
2 : Lambda11522Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11517Var : BV:32
2 : Lambda11518Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 13 { 0xd } : BV:8
14 : eq(11, 7) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 159 { 0x9f -97 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3099122649
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce1860.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce1860 cca0f15020b3495431cfefc320635424
=input.spec-%var-x-1
1 : Lambda11893Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11894Var : BV:32
18 : Lambda11895Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11896Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 180 { 0xb4 -76 } : BV:8
81 : eq(78, 74) : BOOL
82 : 127 { 0x7f } : BV:8
83 : eq(78, 36) : BOOL
84 : 219 { 0xdb -37 } : BV:8
85 : eq(78, 40) : BOOL
86 : 198 { 0xc6 -58 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16815Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 4096 { 0x1000 +1.48828e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 4097 { 0x1001 +1.48840e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16816Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 180 { 0xb4 -76 } : BV:8
51 : eq(48, 44) : BOOL
52 : 127 { 0x7f } : BV:8
53 : eq(48, 23) : BOOL
54 : 219 { 0xdb -37 } : BV:8
55 : eq(48, 27) : BOOL
56 : 198 { 0xc6 -58 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(27, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 44) : BOOL
65 : eq(62, 23) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(23, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 44) : BOOL
74 : eq(71, 23) : BOOL
75 : eq(71, 27) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 44) : BOOL
82 : eq(47, 23) : BOOL
83 : eq(47, 27) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(44, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 44) : BOOL
92 : eq(89, 23) : BOOL
93 : eq(89, 27) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(27, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 44) : BOOL
101 : eq(98, 23) : BOOL
102 : eq(98, 27) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(23, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 44) : BOOL
110 : eq(107, 23) : BOOL
111 : eq(107, 27) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 44) : BOOL
119 : eq(116, 23) : BOOL
120 : eq(116, 27) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(43, 2, 125) : BV:32
127 : lambda(40, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(39, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 180, [ 1; 1 ] -> 219, [ 2; 2 ] -> 198, [ 3; 3 ] -> 127, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 519011587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 519011588; 519011591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 519011592; 1372999371 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1372999372; 1372999375 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1372999376; 3480830383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3480830384; 3480830387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3480830388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1372999372 { 0x51d64ecc +1.67427968e36 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 519011588 { 0x1eef7d04 +1.87100267e190 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3480830384 { 0xcf7941b0 -814136912 -1.94731712e31 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11906Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11907Var : BV:32
18 : Lambda11908Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11909Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 180 { 0xb4 -76 } : BV:8
62 : eq(59, 55) : BOOL
63 : 127 { 0x7f } : BV:8
64 : eq(59, 36) : BOOL
65 : 219 { 0xdb -37 } : BV:8
66 : eq(59, 40) : BOOL
67 : 198 { 0xc6 -58 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4095 { 0xfff +1.48816e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4096 { 0x1000 +1.48828e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16805Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 4097 { 0x1001 +1.48840e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16806Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : 3 { 0x3 +1.35e129 } : BV:32
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 45) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(49, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 180 { 0xb4 -76 } : BV:8
56 : eq(53, 49) : BOOL
57 : 127 { 0x7f } : BV:8
58 : eq(53, 15) : BOOL
59 : 219 { 0xdb -37 } : BV:8
60 : eq(53, 34) : BOOL
61 : 198 { 0xc6 -58 } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(58, 59, 63) : BV:8
65 : ite(56, 57, 64) : BV:8
66 : ite(54, 55, 65) : BV:8
67 : bvadd(34, 52) : BV:32
68 : eq(67, 1) : BOOL
69 : eq(67, 49) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 34) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 57, 73) : BV:8
75 : ite(68, 55, 74) : BV:8
76 : bvadd(15, 52) : BV:32
77 : eq(76, 1) : BOOL
78 : eq(76, 49) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 34) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 59, 81) : BV:8
83 : ite(78, 57, 82) : BV:8
84 : ite(77, 55, 83) : BV:8
85 : eq(52, 1) : BOOL
86 : eq(52, 49) : BOOL
87 : eq(52, 15) : BOOL
88 : eq(52, 34) : BOOL
89 : ite(88, 61, 62) : BV:8
90 : ite(87, 59, 89) : BV:8
91 : ite(86, 57, 90) : BV:8
92 : ite(85, 55, 91) : BV:8
93 : bvconcat(66, 75, 84, 92) : BV:32
94 : bvadd(49, 51, 93) : BV:32
95 : eq(94, 1) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 34) : BOOL
99 : ite(98, 61, 62) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 57, 100) : BV:8
102 : ite(95, 55, 101) : BV:8
103 : bvadd(34, 51, 93) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 49) : BOOL
106 : eq(103, 15) : BOOL
107 : eq(103, 34) : BOOL
108 : ite(107, 61, 62) : BV:8
109 : ite(106, 59, 108) : BV:8
110 : ite(105, 57, 109) : BV:8
111 : ite(104, 55, 110) : BV:8
112 : bvadd(15, 51, 93) : BV:32
113 : eq(112, 1) : BOOL
114 : eq(112, 49) : BOOL
115 : eq(112, 15) : BOOL
116 : eq(112, 34) : BOOL
117 : ite(116, 61, 62) : BV:8
118 : ite(115, 59, 117) : BV:8
119 : ite(114, 57, 118) : BV:8
120 : ite(113, 55, 119) : BV:8
121 : bvadd(51, 93) : BV:32
122 : eq(121, 1) : BOOL
123 : eq(121, 49) : BOOL
124 : eq(121, 15) : BOOL
125 : eq(121, 34) : BOOL
126 : ite(125, 61, 62) : BV:8
127 : ite(124, 59, 126) : BV:8
128 : ite(123, 57, 127) : BV:8
129 : ite(122, 55, 128) : BV:8
130 : bvconcat(102, 111, 120, 129) : BV:32
131 : ite(48, 1, 130) : BV:32
132 : lambda(45, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(44, 132) : MAP[BV:32 -> BV:32]
134 : sum(16, 17, 133) : SUM[UNIT,MAP[BV:32 -> BV:32]]
135 : sym_const(134) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16821Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 4096 { 0x1000 +1.48828e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 4097 { 0x1001 +1.48840e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16822Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 180 { 0xb4 -76 } : BV:8
51 : eq(48, 44) : BOOL
52 : 127 { 0x7f } : BV:8
53 : eq(48, 23) : BOOL
54 : 219 { 0xdb -37 } : BV:8
55 : eq(48, 27) : BOOL
56 : 198 { 0xc6 -58 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(27, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 44) : BOOL
65 : eq(62, 23) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(23, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 44) : BOOL
74 : eq(71, 23) : BOOL
75 : eq(71, 27) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 44) : BOOL
82 : eq(47, 23) : BOOL
83 : eq(47, 27) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(44, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 44) : BOOL
92 : eq(89, 23) : BOOL
93 : eq(89, 27) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(27, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 44) : BOOL
101 : eq(98, 23) : BOOL
102 : eq(98, 27) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(23, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 44) : BOOL
110 : eq(107, 23) : BOOL
111 : eq(107, 27) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 44) : BOOL
119 : eq(116, 23) : BOOL
120 : eq(116, 27) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(43, 2, 125) : BV:32
127 : lambda(40, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(39, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 519011588 { 0x1eef7d04 +1.87100267e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 519011591 { 0x1eef7d07 +1.87100303e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3480830384 { 0xcf7941b0 -814136912 -1.94731712e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3480830387 { 0xcf7941b3 -814136909 -1.94731748e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1372999372 { 0x51d64ecc +1.67427968e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1372999375 { 0x51d64ecf +1.67428004e36 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11823Var : BV:32
2 : Lambda11824Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 180 { 0xb4 -76 } : BV:8
54 : eq(51, 47) : BOOL
55 : 127 { 0x7f } : BV:8
56 : eq(51, 32) : BOOL
57 : 219 { 0xdb -37 } : BV:8
58 : eq(51, 36) : BOOL
59 : 198 { 0xc6 -58 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11828Var : BV:32
2 : Lambda11829Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11837Var : BV:32
2 : Lambda11838Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11833Var : BV:32
2 : Lambda11834Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 180 { 0xb4 -76 } : BV:8
14 : eq(11, 7) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 219 { 0xdb -37 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 198 { 0xc6 -58 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3953522240
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce1902.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1902 63e0c691fe26cbae471bb3326960322b
=input.spec-%var-x-1
1 : Lambda12204Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12205Var : BV:32
18 : Lambda12206Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12207Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16917Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda16918Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : 0 { 0x0 +1.0e129 } : BV:32
10 : bvmul(6, 9) : BV:32
11 : bvadd(8, 10) : BV:32
12 : eq(11, 6) : BOOL
13 : 246 { 0xf6 -10 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 99 { 0x63 } : BV:8
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 127 { 0x7f } : BV:8
20 : 251 { 0xfb -5 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(14, 10) : BV:32
25 : eq(24, 6) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(17, 10) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : bvadd(6, 10) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 14) : BOOL
41 : eq(38, 17) : BOOL
42 : ite(41, 19, 20) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 13, 43) : BV:8
45 : bvconcat(23, 30, 37, 44) : BV:32
46 : bvadd(5, 7, 45) : BV:32
47 : eq(46, 6) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : ite(49, 19, 20) : BV:8
51 : ite(48, 16, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 7, 45) : BV:32
55 : eq(54, 6) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : ite(57, 19, 20) : BV:8
59 : ite(56, 16, 58) : BV:8
60 : ite(55, 13, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 45) : BV:32
63 : eq(62, 6) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : ite(65, 19, 20) : BV:8
67 : ite(64, 16, 66) : BV:8
68 : ite(63, 13, 67) : BV:8
69 : bvadd(7, 45) : BV:32
70 : eq(69, 6) : BOOL
71 : eq(69, 14) : BOOL
72 : eq(69, 17) : BOOL
73 : ite(72, 19, 20) : BV:8
74 : ite(71, 16, 73) : BV:8
75 : ite(70, 13, 74) : BV:8
76 : bvconcat(52, 60, 68, 75) : BV:32
77 : lambda(4, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(3, 77) : MAP[BV:32 -> BV:32]
79 : sym_const(78) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 251, [ 4; 4 ] -> 246, [ 5; 5 ] -> 127, [ 6; 6 ] -> 99, [ 7; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 615784447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 615784448; 615784451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 615784452; 3875037915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3875037916; 3875037919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3875037920; 4101381719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4101381720; 4101381723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4101381724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12219Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12220Var : BV:32
18 : Lambda12221Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12222Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16907Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda16908Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 1) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : bvadd(15, 23, 60) : BV:32
77 : eq(76, 22) : BOOL
78 : eq(76, 29) : BOOL
79 : eq(76, 32) : BOOL
80 : ite(79, 34, 35) : BV:8
81 : ite(78, 31, 80) : BV:8
82 : ite(77, 28, 81) : BV:8
83 : bvadd(23, 60) : BV:32
84 : eq(83, 22) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : bvconcat(67, 75, 82, 89) : BV:32
91 : lambda(20, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(19, 91) : MAP[BV:32 -> BV:32]
93 : sum(16, 17, 92) : SUM[UNIT,MAP[BV:32 -> BV:32]]
94 : sym_const(93) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16923Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda16924Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : 0 { 0x0 +1.0e129 } : BV:32
10 : bvmul(6, 9) : BV:32
11 : bvadd(8, 10) : BV:32
12 : eq(11, 6) : BOOL
13 : 246 { 0xf6 -10 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 99 { 0x63 } : BV:8
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 127 { 0x7f } : BV:8
20 : 251 { 0xfb -5 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(14, 10) : BV:32
25 : eq(24, 6) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(17, 10) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : bvadd(6, 10) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 14) : BOOL
41 : eq(38, 17) : BOOL
42 : ite(41, 19, 20) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 13, 43) : BV:8
45 : bvconcat(23, 30, 37, 44) : BV:32
46 : bvadd(5, 7, 45) : BV:32
47 : eq(46, 6) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : ite(49, 19, 20) : BV:8
51 : ite(48, 16, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 7, 45) : BV:32
55 : eq(54, 6) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : ite(57, 19, 20) : BV:8
59 : ite(56, 16, 58) : BV:8
60 : ite(55, 13, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 45) : BV:32
63 : eq(62, 6) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : ite(65, 19, 20) : BV:8
67 : ite(64, 16, 66) : BV:8
68 : ite(63, 13, 67) : BV:8
69 : bvadd(7, 45) : BV:32
70 : eq(69, 6) : BOOL
71 : eq(69, 14) : BOOL
72 : eq(69, 17) : BOOL
73 : ite(72, 19, 20) : BV:8
74 : ite(71, 16, 73) : BV:8
75 : ite(70, 13, 74) : BV:8
76 : bvconcat(52, 60, 68, 75) : BV:32
77 : lambda(4, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(3, 77) : MAP[BV:32 -> BV:32]
79 : sym_const(78) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 615784451 { 0x24b42003 +1.40722692e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3875037919 { 0xe6f862df -419929377 -1.94051730e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4101381723 { 0xf4761e5b -193585573 -1.92280137e105 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12137Var : BV:32
2 : Lambda12138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12144Var : BV:32
2 : Lambda12145Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1953446005
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce1944.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce1944 256228e2c17ce35a43409b2265897da
=input.spec-%var-x-1
1 : Lambda12626Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12627Var : BV:32
18 : Lambda12628Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12629Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17447Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17448Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12639Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12640Var : BV:32
18 : Lambda12641Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12642Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17437Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17438Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17453Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17454Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12556Var : BV:32
2 : Lambda12557Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12561Var : BV:32
2 : Lambda12562Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12570Var : BV:32
2 : Lambda12571Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12566Var : BV:32
2 : Lambda12567Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3875746067
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3v487.ce3203.num_edges_traversed0
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3v487.ce3203 d662aec87f80a0b923889abc405e1a1c
=input.spec-%var-x-1
1 : Lambda26361Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26362Var : BV:32
18 : Lambda26363Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26364Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26394Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26395Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3145727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3145728; 3145731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3145732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26386Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26387Var : BV:32
18 : Lambda26388Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26389Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda26371Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda26372Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26400Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26401Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3145731 { 0x300003 +1.37500035e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
969011348
=counter_example_end
=global nodece 18 num_edges_traversed 0
=global nodece 18 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce3204.num_edges_traversed0
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce3204 956aae7638eb67bcfb895e7ce59e64b5
=input.spec-%var-x-1
1 : Lambda26453Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26454Var : BV:32
18 : Lambda26455Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26456Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26487Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1539336499 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1539336500; 1539336503 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1539336504; 2201937839 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2201937840; 2201937843 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2201937844; 3399132051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3399132052; 3399132055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3399132056; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1539336500 { 0x5bc06934 +1.50321054e56 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2201937840 { 0x833ee7b0 -2093029456 -1.49144554e135 } : BV:32
=input.dst.llvm-%n
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3399132052 { 0xca9aa394 -895835244 -1.20811700e22 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26478Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26479Var : BV:32
18 : Lambda26480Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26481Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda26463Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda26464Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26492Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26493Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2201937840 { 0x833ee7b0 -2093029456 -1.49144554e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2201937843 { 0x833ee7b3 -2093029453 -1.49144589e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3399132052 { 0xca9aa394 -895835244 -1.20811700e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3399132055 { 0xca9aa397 -895835241 -1.20811736e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1539336500 { 0x5bc06934 +1.50321054e56 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1539336503 { 0x5bc06937 +1.50321090e56 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4245114091
=counter_example_end
=global nodece 19 num_edges_traversed 0
=global nodece 19 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3v487.ce3294.num_edges_traversed4
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce3294 a5d1b7243be7828481db9fcf3c39236
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26628Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26629Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : bvadd(8, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : ite(15, 2, 1) : BV:32
17 : unit : UNIT
18 : Lambda26618Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26619Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 2) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(2, 24, 25) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 29, 32) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(24, 25) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 29, 32) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 29, 32) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 29, 32) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(2, 23, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 29, 32) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 29, 32) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26634Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26635Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : bvadd(8, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 20 num_edges_traversed 4
=global nodece 20 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3v487.ce3330.num_edges_traversed6
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce3330 7c8164a29ad6ced1d19f51c8f1f185
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26706Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26707Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : bvadd(8, 9, 10) : BV:32
21 : eq(20, 12) : BOOL
22 : eq(20, 15) : BOOL
23 : ite(22, 14, 17) : BV:8
24 : ite(21, 14, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda26696Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda26697Var : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 21) : BV:32
25 : bvmul(23, 2) : BV:32
26 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
27 : bvadd(22, 25, 26) : BV:32
28 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
29 : eq(27, 28) : BOOL
30 : 64 { 0x40 } : BV:8
31 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
32 : eq(27, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : ite(32, 30, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : bvadd(2, 25, 26) : BV:32
37 : eq(36, 28) : BOOL
38 : eq(36, 31) : BOOL
39 : ite(38, 30, 33) : BV:8
40 : ite(37, 30, 39) : BV:8
41 : bvadd(16, 25, 26) : BV:32
42 : eq(41, 28) : BOOL
43 : eq(41, 31) : BOOL
44 : ite(43, 30, 33) : BV:8
45 : ite(42, 30, 44) : BV:8
46 : bvadd(25, 26) : BV:32
47 : eq(46, 28) : BOOL
48 : eq(46, 31) : BOOL
49 : ite(48, 30, 33) : BV:8
50 : ite(47, 30, 49) : BV:8
51 : bvconcat(35, 40, 45, 50) : BV:32
52 : bvadd(22, 24, 51) : BV:32
53 : eq(52, 28) : BOOL
54 : eq(52, 31) : BOOL
55 : ite(54, 30, 33) : BV:8
56 : ite(53, 30, 55) : BV:8
57 : bvadd(2, 24, 51) : BV:32
58 : eq(57, 28) : BOOL
59 : eq(57, 31) : BOOL
60 : ite(59, 30, 33) : BV:8
61 : ite(58, 30, 60) : BV:8
62 : bvadd(16, 24, 51) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : ite(64, 30, 33) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : bvadd(24, 51) : BV:32
68 : eq(67, 28) : BOOL
69 : eq(67, 31) : BOOL
70 : ite(69, 30, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(21, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(20, 73) : MAP[BV:32 -> BV:32]
75 : sum(17, 18, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26712Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26713Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : bvadd(8, 9, 10) : BV:32
21 : eq(20, 12) : BOOL
22 : eq(20, 15) : BOOL
23 : ite(22, 14, 17) : BV:8
24 : ite(21, 14, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 21 num_edges_traversed 6
=global nodece 21 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce3366.num_edges_traversed7
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce3366 3fd93f3c0438ab65078255759314654
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 22 num_edges_traversed 7
=global nodece 22 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3.ce3284.num_edges_traversed3
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce3284 ec199b6a51dd3cf5555d8a7a0c5b6d9
=input.spec-%var-x-1
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 177223351 ] -> 0, [ 177223352; 177223352 ] -> 32, [ 177223353; 3269441524 ] -> 0, [ 3269441525; 3269441525 ] -> 1, [ 3269441526; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 177223351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 177223352; 177223355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 177223356; 1249769175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1249769176; 1249769179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1249769180; 3269441523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3269441524; 3269441527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3269441528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.llvm-%x
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3269441527 { 0xc2dfb7f7 -1025525769 -1.74780166e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 177223355 { 0xa9036bb +1.12667024e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1249769179 { 0x4a7df6db +1.98409593e21 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda449Var : BV:32
2 : Lambda450Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3955501958
=counter_example_end
=global nodece 23 num_edges_traversed 3
=global nodece 23 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3v487.ce3274.num_edges_traversed3
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3v487.ce3274 7a46cae18f93ecc59ab5994a5bca18
=input.spec-%var-x-1
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 79 ] -> 0, [ 80; 80 ] -> 1, [ 81; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 79 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 80; 83 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 84; 16419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16420; 16423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16424; 105279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 105280; 105283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 105284; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 83 { 0x53 +1.989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 105283 { 0x19b43 +1.1255071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16423 { 0x4027 +1.195777e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda655Var : BV:32
2 : Lambda656Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda665Var : BV:32
2 : Lambda666Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 24 num_edges_traversed 3
=global nodece 24 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3v487.ce3264.num_edges_traversed3
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3v487.ce3264 543995c285d28c63c25435998c8e5
=input.spec-%var-x-1
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
29 : eq(24, 28) : BOOL
30 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
31 : eq(24, 30) : BOOL
32 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 68190671 ] -> 0, [ 68190672; 68190675 ] -> 255, [ 68190676; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2165155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2165156; 2165159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2165160; 68190671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68190672; 68190675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 68190676; 100737823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 100737824; 100737827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 100737828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 100737824 { 0x6012320 +1.888442e141 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2165156 { 0x2109a4 +1.25810670e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
29 : eq(24, 28) : BOOL
30 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
31 : eq(24, 30) : BOOL
32 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2165156 { 0x2109a4 +1.25810670e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2165159 { 0x2109a7 +1.25810706e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 100737824 { 0x6012320 +1.888442e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 100737827 { 0x6012323 +1.888478e141 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1587Var : BV:32
2 : Lambda1588Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
13 : eq(8, 12) : BOOL
14 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
15 : eq(8, 14) : BOOL
16 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1597Var : BV:32
2 : Lambda1598Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 68190675 { 0x41081d3 +1.12896192e137 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 68190674 { 0x41081d2 +1.12896180e137 } : BV:32
13 : eq(8, 12) : BOOL
14 : 68190672 { 0x41081d0 +1.12896156e137 } : BV:32
15 : eq(8, 14) : BOOL
16 : 68190673 { 0x41081d1 +1.12896168e137 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 25 num_edges_traversed 3
=global nodece 25 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3.ce3238.num_edges_traversed2
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce3238 4bd114bc39945564f3ee382a4e832
=input.spec-%var-x-1
1 : Lambda12204Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12205Var : BV:32
18 : Lambda12206Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12207Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 251, [ 4; 4 ] -> 246, [ 5; 5 ] -> 127, [ 6; 6 ] -> 99, [ 7; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 615784447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 615784448; 615784451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 615784452; 3875037915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3875037916; 3875037919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3875037920; 4101381719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4101381720; 4101381723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4101381724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12219Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12220Var : BV:32
18 : Lambda12221Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12222Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1647506831 { 0x6232f58f +1.39811885e69 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1623582782 { 0x60c5e83e +1.54614996e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 615784451 { 0x24b42003 +1.40722692e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3875037919 { 0xe6f862df -419929377 -1.94051730e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4101381723 { 0xf4761e5b -193585573 -1.92280137e105 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12137Var : BV:32
2 : Lambda12138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12144Var : BV:32
2 : Lambda12145Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3648229277
=counter_example_end
=global nodece 26 num_edges_traversed 2
=global nodece 26 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce3224.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce3224 c5a94ddfe6de8039d994139496f0d2
=input.spec-%var-x-1
1 : Lambda26361Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26362Var : BV:32
18 : Lambda26363Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26364Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3145727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3145728; 3145731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3145732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26386Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26387Var : BV:32
18 : Lambda26388Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26389Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 849653424 { 0x32a4aeb0 +1.28658103e230 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1434657300 { 0x55832214 +1.2447748e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3145731 { 0x300003 +1.37500035e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2444757596
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce3501.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce3501 ee637155bf3f17a782b6171e02f1616
=input.spec-%var-x-1
1 : Lambda29836Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29837Var : BV:32
18 : Lambda29838Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29839Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda29869Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29870Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048580; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29861Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29862Var : BV:32
18 : Lambda29863Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29864Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : Lambda29846Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda29847Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1440867014 { 0x55e1e2c6 +1.76473307e44 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda29875Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29876Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 738610315 { 0x2c064c8b +1.4921090e217 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048579 { 0x100003 +1.12500035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4158329913
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3v487.ce3547.num_edges_traversed1
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce3547 dd4028dd6ad2a288c38a4417c32f6a61
=input.spec-%var-x-1
1 : Lambda31506Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31507Var : BV:32
18 : Lambda31508Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda31509Var : BV:32
62 : lambda(61, 2) : FUNCTION[BV:32 -> BV:32]
63 : map(60, 62) : MAP[BV:32 -> BV:32]
64 : lambda(17, 63) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
65 : map(16, 64) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
66 : sym_const(65) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda31617Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda31618Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 3181392167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3181392168; 3181392171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3181392172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3181392168 { 0xbda03128 -1113575128 -1.25150012e252 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda31519Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31520Var : BV:32
18 : Lambda31521Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda31522Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : or(84, 85) : BOOL
87 : ite(86, 7, 13) : BOOL
88 : and(70, 87) : BOOL
89 : ite(66, 2, 2) : BV:32
90 : ite(64, 2, 89) : BV:32
91 : ite(88, 2, 90) : BV:32
92 : ite(66, 2, 91) : BV:32
93 : ite(64, 2, 92) : BV:32
94 : lambda(61, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(60, 94) : MAP[BV:32 -> BV:32]
96 : lambda(17, 95) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
97 : map(16, 96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
98 : sym_const(97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda31607Var : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 33554433 { 0x2000001 +1.11e133 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : bvule(1, 19) : BOOL
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 8 { 0x8 +1.95e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 9 { 0x9 +1.107e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 1) : BOOL
53 : and(52, 50) : BOOL
54 : or(51, 53) : BOOL
55 : ite(54, 7, 13) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda31608Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvule(1, 57) : BOOL
64 : bvule(57, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(39, 57) : BOOL
67 : bvule(57, 39) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(43, 57) : BOOL
70 : bvule(57, 10) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 43, 43) : BV:32
73 : ite(68, 39, 72) : BV:32
74 : ite(65, 1, 73) : BV:32
75 : eq(74, 1) : BOOL
76 : and(34, 75) : BOOL
77 : and(52, 75) : BOOL
78 : or(76, 77) : BOOL
79 : ite(78, 7, 13) : BOOL
80 : and(15, 79) : BOOL
81 : ite(62, 1, 1) : BV:32
82 : ite(60, 1, 81) : BV:32
83 : ite(80, 1, 82) : BV:32
84 : ite(62, 1, 83) : BV:32
85 : ite(60, 1, 84) : BV:32
86 : lambda(57, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(56, 86) : MAP[BV:32 -> BV:32]
88 : sum(17, 18, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda31623Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda31624Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3181392168 { 0xbda03128 -1113575128 -1.25150012e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3181392171 { 0xbda0312b -1113575125 -1.25150048e252 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda31441Var : BV:32
2 : Lambda31442Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda31451Var : BV:32
2 : Lambda31452Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda31455Var : BV:32
2 : Lambda31456Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 33554432 { 0x2000000 +1.0e133 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : bvule(5, 2) : BOOL
39 : 7 { 0x7 +1.83e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 8 { 0x8 +1.95e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 9 { 0x9 +1.107e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 5) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 14, 20) : BOOL
59 : and(22, 58) : BOOL
60 : ite(9, 5, 5) : BV:32
61 : ite(7, 5, 60) : BV:32
62 : ite(59, 5, 61) : BV:32
63 : ite(9, 5, 62) : BV:32
64 : ite(7, 5, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
454914691
=counter_example_end
=global nodece 29 num_edges_traversed 1
=global nodece 29 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 30
=global nodece 30 nodece z3v487.ce3599.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3v487.ce3599 b1964822e7ee92cda53f4e5b302451
=input.spec-%var-x-1
1 : Lambda33710Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33711Var : BV:32
18 : Lambda33712Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33713Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda33743Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33744Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 2097155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097156; 2097159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097160; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097156 { 0x200004 +1.25000047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33736Var : BV:32
18 : Lambda33737Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33738Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda33720Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda33721Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 60471100 { 0x39ab73c +1.20871686e136 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda33749Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33750Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1385598812 { 0x52968f5c +1.17624998e38 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097156 { 0x200004 +1.25000047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097159 { 0x200007 +1.25000083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3265853320
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 31
=global nodece 31 nodece z3v487.ce3645.num_edges_traversed1
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce3645 4a11482db51fb6f2360ab2272585616
=input.spec-%var-x-1
1 : Lambda35380Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35381Var : BV:32
18 : Lambda35382Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 63 { 0x3f +1.751e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 64 { 0x40 +1.762e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 65 { 0x41 +1.774e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda35383Var : BV:32
62 : lambda(61, 2) : FUNCTION[BV:32 -> BV:32]
63 : map(60, 62) : MAP[BV:32 -> BV:32]
64 : lambda(17, 63) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
65 : map(16, 64) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
66 : sym_const(65) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda35491Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 63 { 0x3f +1.751e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 64 { 0x40 +1.762e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 65 { 0x41 +1.774e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda35492Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 67 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68; 71 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 72; 1031 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1032; 1035 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1036; 5243779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 5243780; 5243783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 5243784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 5243780 { 0x500384 +1.62510728e129 } : BV:32
=input.dst.llvm-%m
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1032 { 0x408 +1.12302e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda35393Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35394Var : BV:32
18 : Lambda35395Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 63 { 0x3f +1.751e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 64 { 0x40 +1.762e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 65 { 0x41 +1.774e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda35396Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : or(84, 85) : BOOL
87 : ite(86, 7, 13) : BOOL
88 : and(70, 87) : BOOL
89 : ite(66, 2, 2) : BV:32
90 : ite(64, 2, 89) : BV:32
91 : ite(88, 2, 90) : BV:32
92 : ite(66, 2, 91) : BV:32
93 : ite(64, 2, 92) : BV:32
94 : lambda(61, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(60, 94) : MAP[BV:32 -> BV:32]
96 : lambda(17, 95) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
97 : map(16, 96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
98 : sym_const(97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda35481Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : bvule(1, 19) : BOOL
36 : 63 { 0x3f +1.751e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 64 { 0x40 +1.762e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 65 { 0x41 +1.774e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 1) : BOOL
53 : and(52, 50) : BOOL
54 : or(51, 53) : BOOL
55 : ite(54, 7, 13) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda35482Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvule(1, 57) : BOOL
64 : bvule(57, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(39, 57) : BOOL
67 : bvule(57, 39) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(43, 57) : BOOL
70 : bvule(57, 10) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 43, 43) : BV:32
73 : ite(68, 39, 72) : BV:32
74 : ite(65, 1, 73) : BV:32
75 : eq(74, 1) : BOOL
76 : and(34, 75) : BOOL
77 : and(52, 75) : BOOL
78 : or(76, 77) : BOOL
79 : ite(78, 7, 13) : BOOL
80 : and(15, 79) : BOOL
81 : ite(62, 1, 1) : BV:32
82 : ite(60, 1, 81) : BV:32
83 : ite(80, 1, 82) : BV:32
84 : ite(62, 1, 83) : BV:32
85 : ite(60, 1, 84) : BV:32
86 : lambda(57, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(56, 86) : MAP[BV:32 -> BV:32]
88 : sum(17, 18, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda35497Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 63 { 0x3f +1.751e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 64 { 0x40 +1.762e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 65 { 0x41 +1.774e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda35498Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 71 { 0x47 +1.846e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1032 { 0x408 +1.12302e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1035 { 0x40b +1.12338e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 5243780 { 0x500384 +1.62510728e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 5243783 { 0x500387 +1.62510764e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda35315Var : BV:32
2 : Lambda35316Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 63 { 0x3f +1.751e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 64 { 0x40 +1.762e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 65 { 0x41 +1.774e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda35325Var : BV:32
2 : Lambda35326Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 63 { 0x3f +1.751e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 64 { 0x40 +1.762e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 65 { 0x41 +1.774e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda35329Var : BV:32
2 : Lambda35330Var : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : bvule(5, 2) : BOOL
39 : 63 { 0x3f +1.751e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 64 { 0x40 +1.762e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 65 { 0x41 +1.774e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 5) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 14, 20) : BOOL
59 : and(22, 58) : BOOL
60 : ite(9, 5, 5) : BV:32
61 : ite(7, 5, 60) : BV:32
62 : ite(59, 5, 61) : BV:32
63 : ite(9, 5, 62) : BV:32
64 : ite(7, 5, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1927961828
=counter_example_end
=global nodece 31 num_edges_traversed 1
=global nodece 31 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 32
=global nodece 32 nodece z3.ce3697.num_edges_traversed1
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce3697 e84c15ba49e73a43e5d737aef52151be
=input.spec-%var-x-1
1 : Lambda37474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37475Var : BV:32
18 : Lambda37476Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda37477Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37507Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37508Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1399082519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1399082520; 1399082523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1399082524; 1525054255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1525054256; 1525054259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1525054260; 4226068651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4226068652; 4226068655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4226068656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1399082520 { 0x53644e18 +1.78363323e39 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1525054256 { 0x5ae67b30 +1.80063438e54 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4226068652 { 0xfbe4b0ac -68898644 -1.78664159e120 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37500Var : BV:32
18 : Lambda37501Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda37502Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
2 : unit : UNIT
3 : Lambda37484Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda37485Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1204836206 { 0x47d0576e +1.62766814e16 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37513Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37514Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1993119772 { 0x76cc981c +1.59839200e110 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1525054256 { 0x5ae67b30 +1.80063438e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1525054259 { 0x5ae67b33 +1.80063474e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4226068652 { 0xfbe4b0ac -68898644 -1.78664159e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4226068655 { 0xfbe4b0af -68898641 -1.78664195e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1399082520 { 0x53644e18 +1.78363323e39 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1399082523 { 0x53644e1b +1.78363358e39 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3986799555
=counter_example_end
=global nodece 32 num_edges_traversed 1
=global nodece 32 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 33
=global nodece 33 nodece z3.ce3743.num_edges_traversed1
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3.ce3743 d5a5f54b6774e6916d64328109993eb
=input.spec-%var-x-1
1 : Lambda38973Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38974Var : BV:32
18 : Lambda38975Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 127 { 0x7f +1.1513e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 128 { 0x80 +1.1525e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 129 { 0x81 +1.1537e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda38976Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : ite(84, 7, 86) : BOOL
88 : and(70, 87) : BOOL
89 : 3 { 0x3 +1.35e129 } : BV:32
90 : 4 { 0x4 +1.47e129 } : BV:32
91 : bvmul(90, 61) : BV:32
92 : bvmul(90, 17) : BV:32
93 : bvadd(89, 92) : BV:32
94 : 409605956 { 0x186a1744 +1.82883501e177 } : BV:32
95 : eq(93, 94) : BOOL
96 : 217 { 0xd9 -39 } : BV:8
97 : eq(93, 89) : BOOL
98 : 235 { 0xeb -21 } : BV:8
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : eq(93, 99) : BOOL
101 : 242 { 0xf2 -14 } : BV:8
102 : 409605957 { 0x186a1745 +1.82883512e177 } : BV:32
103 : eq(93, 102) : BOOL
104 : 7 { 0x7 } : BV:8
105 : 409605959 { 0x186a1747 +1.82883536e177 } : BV:32
106 : eq(93, 105) : BOOL
107 : 219 { 0xdb -37 } : BV:8
108 : eq(93, 2) : BOOL
109 : 251 { 0xfb -5 } : BV:8
110 : 2 { 0x2 +1.23e129 } : BV:32
111 : eq(93, 110) : BOOL
112 : 47 { 0x2f } : BV:8
113 : 409605958 { 0x186a1746 +1.82883524e177 } : BV:32
114 : eq(93, 113) : BOOL
115 : 187 { 0xbb -69 } : BV:8
116 : 0 { 0x0 } : BV:8
117 : ite(114, 115, 116) : BV:8
118 : ite(111, 112, 117) : BV:8
119 : ite(108, 109, 118) : BV:8
120 : ite(106, 107, 119) : BV:8
121 : ite(103, 104, 120) : BV:8
122 : ite(100, 101, 121) : BV:8
123 : ite(97, 98, 122) : BV:8
124 : ite(95, 96, 123) : BV:8
125 : bvadd(110, 92) : BV:32
126 : eq(125, 94) : BOOL
127 : eq(125, 89) : BOOL
128 : eq(125, 99) : BOOL
129 : eq(125, 102) : BOOL
130 : eq(125, 105) : BOOL
131 : eq(125, 2) : BOOL
132 : eq(125, 110) : BOOL
133 : eq(125, 113) : BOOL
134 : ite(133, 115, 116) : BV:8
135 : ite(132, 112, 134) : BV:8
136 : ite(131, 109, 135) : BV:8
137 : ite(130, 107, 136) : BV:8
138 : ite(129, 104, 137) : BV:8
139 : ite(128, 101, 138) : BV:8
140 : ite(127, 98, 139) : BV:8
141 : ite(126, 96, 140) : BV:8
142 : bvadd(99, 92) : BV:32
143 : eq(142, 94) : BOOL
144 : eq(142, 89) : BOOL
145 : eq(142, 99) : BOOL
146 : eq(142, 102) : BOOL
147 : eq(142, 105) : BOOL
148 : eq(142, 2) : BOOL
149 : eq(142, 110) : BOOL
150 : eq(142, 113) : BOOL
151 : ite(150, 115, 116) : BV:8
152 : ite(149, 112, 151) : BV:8
153 : ite(148, 109, 152) : BV:8
154 : ite(147, 107, 153) : BV:8
155 : ite(146, 104, 154) : BV:8
156 : ite(145, 101, 155) : BV:8
157 : ite(144, 98, 156) : BV:8
158 : ite(143, 96, 157) : BV:8
159 : eq(92, 94) : BOOL
160 : eq(92, 89) : BOOL
161 : eq(92, 99) : BOOL
162 : eq(92, 102) : BOOL
163 : eq(92, 105) : BOOL
164 : eq(92, 2) : BOOL
165 : eq(92, 110) : BOOL
166 : eq(92, 113) : BOOL
167 : ite(166, 115, 116) : BV:8
168 : ite(165, 112, 167) : BV:8
169 : ite(164, 109, 168) : BV:8
170 : ite(163, 107, 169) : BV:8
171 : ite(162, 104, 170) : BV:8
172 : ite(161, 101, 171) : BV:8
173 : ite(160, 98, 172) : BV:8
174 : ite(159, 96, 173) : BV:8
175 : bvconcat(124, 141, 158, 174) : BV:32
176 : bvadd(89, 91, 175) : BV:32
177 : eq(176, 94) : BOOL
178 : eq(176, 89) : BOOL
179 : eq(176, 99) : BOOL
180 : eq(176, 102) : BOOL
181 : eq(176, 105) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 110) : BOOL
184 : eq(176, 113) : BOOL
185 : ite(184, 115, 116) : BV:8
186 : ite(183, 112, 185) : BV:8
187 : ite(182, 109, 186) : BV:8
188 : ite(181, 107, 187) : BV:8
189 : ite(180, 104, 188) : BV:8
190 : ite(179, 101, 189) : BV:8
191 : ite(178, 98, 190) : BV:8
192 : ite(177, 96, 191) : BV:8
193 : bvadd(110, 91, 175) : BV:32
194 : eq(193, 94) : BOOL
195 : eq(193, 89) : BOOL
196 : eq(193, 99) : BOOL
197 : eq(193, 102) : BOOL
198 : eq(193, 105) : BOOL
199 : eq(193, 2) : BOOL
200 : eq(193, 110) : BOOL
201 : eq(193, 113) : BOOL
202 : ite(201, 115, 116) : BV:8
203 : ite(200, 112, 202) : BV:8
204 : ite(199, 109, 203) : BV:8
205 : ite(198, 107, 204) : BV:8
206 : ite(197, 104, 205) : BV:8
207 : ite(196, 101, 206) : BV:8
208 : ite(195, 98, 207) : BV:8
209 : ite(194, 96, 208) : BV:8
210 : bvadd(99, 91, 175) : BV:32
211 : eq(210, 94) : BOOL
212 : eq(210, 89) : BOOL
213 : eq(210, 99) : BOOL
214 : eq(210, 102) : BOOL
215 : eq(210, 105) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 110) : BOOL
218 : eq(210, 113) : BOOL
219 : ite(218, 115, 116) : BV:8
220 : ite(217, 112, 219) : BV:8
221 : ite(216, 109, 220) : BV:8
222 : ite(215, 107, 221) : BV:8
223 : ite(214, 104, 222) : BV:8
224 : ite(213, 101, 223) : BV:8
225 : ite(212, 98, 224) : BV:8
226 : ite(211, 96, 225) : BV:8
227 : bvadd(91, 175) : BV:32
228 : eq(227, 94) : BOOL
229 : eq(227, 89) : BOOL
230 : eq(227, 99) : BOOL
231 : eq(227, 102) : BOOL
232 : eq(227, 105) : BOOL
233 : eq(227, 2) : BOOL
234 : eq(227, 110) : BOOL
235 : eq(227, 113) : BOOL
236 : ite(235, 115, 116) : BV:8
237 : ite(234, 112, 236) : BV:8
238 : ite(233, 109, 237) : BV:8
239 : ite(232, 107, 238) : BV:8
240 : ite(231, 104, 239) : BV:8
241 : ite(230, 101, 240) : BV:8
242 : ite(229, 98, 241) : BV:8
243 : ite(228, 96, 242) : BV:8
244 : bvconcat(192, 209, 226, 243) : BV:32
245 : ite(66, 2, 244) : BV:32
246 : ite(64, 2, 245) : BV:32
247 : ite(88, 244, 246) : BV:32
248 : ite(66, 2, 247) : BV:32
249 : ite(64, 2, 248) : BV:32
250 : lambda(61, 249) : FUNCTION[BV:32 -> BV:32]
251 : map(60, 250) : MAP[BV:32 -> BV:32]
252 : lambda(17, 251) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
253 : map(16, 252) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
254 : sym_const(253) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39082Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 127 { 0x7f +1.1513e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 128 { 0x80 +1.1525e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 129 { 0x81 +1.1537e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda39083Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 409605956 { 0x186a1744 +1.82883501e177 } : BV:32
62 : eq(60, 61) : BOOL
63 : 217 { 0xd9 -39 } : BV:8
64 : eq(60, 56) : BOOL
65 : 235 { 0xeb -21 } : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 242 { 0xf2 -14 } : BV:8
69 : 409605957 { 0x186a1745 +1.82883512e177 } : BV:32
70 : eq(60, 69) : BOOL
71 : 7 { 0x7 } : BV:8
72 : 409605959 { 0x186a1747 +1.82883536e177 } : BV:32
73 : eq(60, 72) : BOOL
74 : 219 { 0xdb -37 } : BV:8
75 : eq(60, 2) : BOOL
76 : 251 { 0xfb -5 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 47 { 0x2f } : BV:8
80 : 409605958 { 0x186a1746 +1.82883524e177 } : BV:32
81 : eq(60, 80) : BOOL
82 : 187 { 0xbb -69 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(73, 74, 86) : BV:8
88 : ite(70, 71, 87) : BV:8
89 : ite(67, 68, 88) : BV:8
90 : ite(64, 65, 89) : BV:8
91 : ite(62, 63, 90) : BV:8
92 : bvadd(77, 59) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 56) : BOOL
95 : eq(92, 66) : BOOL
96 : eq(92, 69) : BOOL
97 : eq(92, 72) : BOOL
98 : eq(92, 2) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 74, 103) : BV:8
105 : ite(96, 71, 104) : BV:8
106 : ite(95, 68, 105) : BV:8
107 : ite(94, 65, 106) : BV:8
108 : ite(93, 63, 107) : BV:8
109 : bvadd(66, 59) : BV:32
110 : eq(109, 61) : BOOL
111 : eq(109, 56) : BOOL
112 : eq(109, 66) : BOOL
113 : eq(109, 69) : BOOL
114 : eq(109, 72) : BOOL
115 : eq(109, 2) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 74, 120) : BV:8
122 : ite(113, 71, 121) : BV:8
123 : ite(112, 68, 122) : BV:8
124 : ite(111, 65, 123) : BV:8
125 : ite(110, 63, 124) : BV:8
126 : eq(59, 61) : BOOL
127 : eq(59, 56) : BOOL
128 : eq(59, 66) : BOOL
129 : eq(59, 69) : BOOL
130 : eq(59, 72) : BOOL
131 : eq(59, 2) : BOOL
132 : eq(59, 77) : BOOL
133 : eq(59, 80) : BOOL
134 : ite(133, 82, 83) : BV:8
135 : ite(132, 79, 134) : BV:8
136 : ite(131, 76, 135) : BV:8
137 : ite(130, 74, 136) : BV:8
138 : ite(129, 71, 137) : BV:8
139 : ite(128, 68, 138) : BV:8
140 : ite(127, 65, 139) : BV:8
141 : ite(126, 63, 140) : BV:8
142 : bvconcat(91, 108, 125, 141) : BV:32
143 : bvadd(56, 58, 142) : BV:32
144 : eq(143, 61) : BOOL
145 : eq(143, 56) : BOOL
146 : eq(143, 66) : BOOL
147 : eq(143, 69) : BOOL
148 : eq(143, 72) : BOOL
149 : eq(143, 2) : BOOL
150 : eq(143, 77) : BOOL
151 : eq(143, 80) : BOOL
152 : ite(151, 82, 83) : BV:8
153 : ite(150, 79, 152) : BV:8
154 : ite(149, 76, 153) : BV:8
155 : ite(148, 74, 154) : BV:8
156 : ite(147, 71, 155) : BV:8
157 : ite(146, 68, 156) : BV:8
158 : ite(145, 65, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : bvadd(77, 58, 142) : BV:32
161 : eq(160, 61) : BOOL
162 : eq(160, 56) : BOOL
163 : eq(160, 66) : BOOL
164 : eq(160, 69) : BOOL
165 : eq(160, 72) : BOOL
166 : eq(160, 2) : BOOL
167 : eq(160, 77) : BOOL
168 : eq(160, 80) : BOOL
169 : ite(168, 82, 83) : BV:8
170 : ite(167, 79, 169) : BV:8
171 : ite(166, 76, 170) : BV:8
172 : ite(165, 74, 171) : BV:8
173 : ite(164, 71, 172) : BV:8
174 : ite(163, 68, 173) : BV:8
175 : ite(162, 65, 174) : BV:8
176 : ite(161, 63, 175) : BV:8
177 : bvadd(66, 58, 142) : BV:32
178 : eq(177, 61) : BOOL
179 : eq(177, 56) : BOOL
180 : eq(177, 66) : BOOL
181 : eq(177, 69) : BOOL
182 : eq(177, 72) : BOOL
183 : eq(177, 2) : BOOL
184 : eq(177, 77) : BOOL
185 : eq(177, 80) : BOOL
186 : ite(185, 82, 83) : BV:8
187 : ite(184, 79, 186) : BV:8
188 : ite(183, 76, 187) : BV:8
189 : ite(182, 74, 188) : BV:8
190 : ite(181, 71, 189) : BV:8
191 : ite(180, 68, 190) : BV:8
192 : ite(179, 65, 191) : BV:8
193 : ite(178, 63, 192) : BV:8
194 : bvadd(58, 142) : BV:32
195 : eq(194, 61) : BOOL
196 : eq(194, 56) : BOOL
197 : eq(194, 66) : BOOL
198 : eq(194, 69) : BOOL
199 : eq(194, 72) : BOOL
200 : eq(194, 2) : BOOL
201 : eq(194, 77) : BOOL
202 : eq(194, 80) : BOOL
203 : ite(202, 82, 83) : BV:8
204 : ite(201, 79, 203) : BV:8
205 : ite(200, 76, 204) : BV:8
206 : ite(199, 74, 205) : BV:8
207 : ite(198, 71, 206) : BV:8
208 : ite(197, 68, 207) : BV:8
209 : ite(196, 65, 208) : BV:8
210 : ite(195, 63, 209) : BV:8
211 : bvconcat(159, 176, 193, 210) : BV:32
212 : ite(55, 2, 211) : BV:32
213 : ite(53, 2, 212) : BV:32
214 : lambda(50, 213) : FUNCTION[BV:32 -> BV:32]
215 : map(49, 214) : MAP[BV:32 -> BV:32]
216 : sym_const(215) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 251, [ 1; 1 ] -> 242, [ 2; 2 ] -> 47, [ 3; 3 ] -> 235, [ 4; 409605955 ] -> 0, [ 409605956; 409605956 ] -> 217, [ 409605957; 409605957 ] -> 7, [ 409605958; 409605958 ] -> 187, [ 409605959; 409605959 ] -> 219, [ 409605960; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1974948471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1974948472; 1974948475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1974948476; 2684354487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2684354488; 2684354491 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2684354492; 3221225331 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3221225332; 3221225335 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3221225336; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2684354488 { 0x9fffffb8 -1610612808 -1.99999141e192 } : BV:32
=input.dst.llvm-%m
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3221225332 { 0xbfffff74 -1073741964 -1.99998331e0 } : BV:32
=input.dst.llvm-%n
1 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1974948472 { 0x75b75278 +1.43220424e108 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda38986Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38987Var : BV:32
18 : Lambda38988Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 127 { 0x7f +1.1513e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 128 { 0x80 +1.1525e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 129 { 0x81 +1.1537e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda38989Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : 3 { 0x3 +1.35e129 } : BV:32
68 : 4 { 0x4 +1.47e129 } : BV:32
69 : bvmul(68, 61) : BV:32
70 : bvmul(68, 17) : BV:32
71 : bvadd(67, 70) : BV:32
72 : 409605956 { 0x186a1744 +1.82883501e177 } : BV:32
73 : eq(71, 72) : BOOL
74 : 217 { 0xd9 -39 } : BV:8
75 : eq(71, 67) : BOOL
76 : 235 { 0xeb -21 } : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : eq(71, 77) : BOOL
79 : 242 { 0xf2 -14 } : BV:8
80 : 409605957 { 0x186a1745 +1.82883512e177 } : BV:32
81 : eq(71, 80) : BOOL
82 : 7 { 0x7 } : BV:8
83 : 409605959 { 0x186a1747 +1.82883536e177 } : BV:32
84 : eq(71, 83) : BOOL
85 : 219 { 0xdb -37 } : BV:8
86 : eq(71, 2) : BOOL
87 : 251 { 0xfb -5 } : BV:8
88 : 2 { 0x2 +1.23e129 } : BV:32
89 : eq(71, 88) : BOOL
90 : 47 { 0x2f } : BV:8
91 : 409605958 { 0x186a1746 +1.82883524e177 } : BV:32
92 : eq(71, 91) : BOOL
93 : 187 { 0xbb -69 } : BV:8
94 : 0 { 0x0 } : BV:8
95 : ite(92, 93, 94) : BV:8
96 : ite(89, 90, 95) : BV:8
97 : ite(86, 87, 96) : BV:8
98 : ite(84, 85, 97) : BV:8
99 : ite(81, 82, 98) : BV:8
100 : ite(78, 79, 99) : BV:8
101 : ite(75, 76, 100) : BV:8
102 : ite(73, 74, 101) : BV:8
103 : bvadd(88, 70) : BV:32
104 : eq(103, 72) : BOOL
105 : eq(103, 67) : BOOL
106 : eq(103, 77) : BOOL
107 : eq(103, 80) : BOOL
108 : eq(103, 83) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 88) : BOOL
111 : eq(103, 91) : BOOL
112 : ite(111, 93, 94) : BV:8
113 : ite(110, 90, 112) : BV:8
114 : ite(109, 87, 113) : BV:8
115 : ite(108, 85, 114) : BV:8
116 : ite(107, 82, 115) : BV:8
117 : ite(106, 79, 116) : BV:8
118 : ite(105, 76, 117) : BV:8
119 : ite(104, 74, 118) : BV:8
120 : bvadd(77, 70) : BV:32
121 : eq(120, 72) : BOOL
122 : eq(120, 67) : BOOL
123 : eq(120, 77) : BOOL
124 : eq(120, 80) : BOOL
125 : eq(120, 83) : BOOL
126 : eq(120, 2) : BOOL
127 : eq(120, 88) : BOOL
128 : eq(120, 91) : BOOL
129 : ite(128, 93, 94) : BV:8
130 : ite(127, 90, 129) : BV:8
131 : ite(126, 87, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 82, 132) : BV:8
134 : ite(123, 79, 133) : BV:8
135 : ite(122, 76, 134) : BV:8
136 : ite(121, 74, 135) : BV:8
137 : eq(70, 72) : BOOL
138 : eq(70, 67) : BOOL
139 : eq(70, 77) : BOOL
140 : eq(70, 80) : BOOL
141 : eq(70, 83) : BOOL
142 : eq(70, 2) : BOOL
143 : eq(70, 88) : BOOL
144 : eq(70, 91) : BOOL
145 : ite(144, 93, 94) : BV:8
146 : ite(143, 90, 145) : BV:8
147 : ite(142, 87, 146) : BV:8
148 : ite(141, 85, 147) : BV:8
149 : ite(140, 82, 148) : BV:8
150 : ite(139, 79, 149) : BV:8
151 : ite(138, 76, 150) : BV:8
152 : ite(137, 74, 151) : BV:8
153 : bvconcat(102, 119, 136, 152) : BV:32
154 : bvadd(67, 69, 153) : BV:32
155 : eq(154, 72) : BOOL
156 : eq(154, 67) : BOOL
157 : eq(154, 77) : BOOL
158 : eq(154, 80) : BOOL
159 : eq(154, 83) : BOOL
160 : eq(154, 2) : BOOL
161 : eq(154, 88) : BOOL
162 : eq(154, 91) : BOOL
163 : ite(162, 93, 94) : BV:8
164 : ite(161, 90, 163) : BV:8
165 : ite(160, 87, 164) : BV:8
166 : ite(159, 85, 165) : BV:8
167 : ite(158, 82, 166) : BV:8
168 : ite(157, 79, 167) : BV:8
169 : ite(156, 76, 168) : BV:8
170 : ite(155, 74, 169) : BV:8
171 : bvadd(88, 69, 153) : BV:32
172 : eq(171, 72) : BOOL
173 : eq(171, 67) : BOOL
174 : eq(171, 77) : BOOL
175 : eq(171, 80) : BOOL
176 : eq(171, 83) : BOOL
177 : eq(171, 2) : BOOL
178 : eq(171, 88) : BOOL
179 : eq(171, 91) : BOOL
180 : ite(179, 93, 94) : BV:8
181 : ite(178, 90, 180) : BV:8
182 : ite(177, 87, 181) : BV:8
183 : ite(176, 85, 182) : BV:8
184 : ite(175, 82, 183) : BV:8
185 : ite(174, 79, 184) : BV:8
186 : ite(173, 76, 185) : BV:8
187 : ite(172, 74, 186) : BV:8
188 : bvadd(77, 69, 153) : BV:32
189 : eq(188, 72) : BOOL
190 : eq(188, 67) : BOOL
191 : eq(188, 77) : BOOL
192 : eq(188, 80) : BOOL
193 : eq(188, 83) : BOOL
194 : eq(188, 2) : BOOL
195 : eq(188, 88) : BOOL
196 : eq(188, 91) : BOOL
197 : ite(196, 93, 94) : BV:8
198 : ite(195, 90, 197) : BV:8
199 : ite(194, 87, 198) : BV:8
200 : ite(193, 85, 199) : BV:8
201 : ite(192, 82, 200) : BV:8
202 : ite(191, 79, 201) : BV:8
203 : ite(190, 76, 202) : BV:8
204 : ite(189, 74, 203) : BV:8
205 : bvadd(69, 153) : BV:32
206 : eq(205, 72) : BOOL
207 : eq(205, 67) : BOOL
208 : eq(205, 77) : BOOL
209 : eq(205, 80) : BOOL
210 : eq(205, 83) : BOOL
211 : eq(205, 2) : BOOL
212 : eq(205, 88) : BOOL
213 : eq(205, 91) : BOOL
214 : ite(213, 93, 94) : BV:8
215 : ite(212, 90, 214) : BV:8
216 : ite(211, 87, 215) : BV:8
217 : ite(210, 85, 216) : BV:8
218 : ite(209, 82, 217) : BV:8
219 : ite(208, 79, 218) : BV:8
220 : ite(207, 76, 219) : BV:8
221 : ite(206, 74, 220) : BV:8
222 : bvconcat(170, 187, 204, 221) : BV:32
223 : ite(66, 2, 222) : BV:32
224 : ite(64, 2, 223) : BV:32
225 : lambda(61, 224) : FUNCTION[BV:32 -> BV:32]
226 : map(60, 225) : MAP[BV:32 -> BV:32]
227 : lambda(17, 226) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
228 : map(16, 227) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
229 : sym_const(228) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda39072Var : BV:32
20 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : 127 { 0x7f +1.1513e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 128 { 0x80 +1.1525e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 129 { 0x81 +1.1537e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 2) : BOOL
53 : and(52, 50) : BOOL
54 : ite(53, 7, 13) : BOOL
55 : ite(51, 7, 54) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda39073Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : 3 { 0x3 +1.35e129 } : BV:32
64 : 4 { 0x4 +1.47e129 } : BV:32
65 : bvmul(64, 57) : BV:32
66 : bvmul(64, 2) : BV:32
67 : bvadd(63, 66) : BV:32
68 : 409605956 { 0x186a1744 +1.82883501e177 } : BV:32
69 : eq(67, 68) : BOOL
70 : 217 { 0xd9 -39 } : BV:8
71 : eq(67, 63) : BOOL
72 : 235 { 0xeb -21 } : BV:8
73 : eq(67, 16) : BOOL
74 : 242 { 0xf2 -14 } : BV:8
75 : 409605957 { 0x186a1745 +1.82883512e177 } : BV:32
76 : eq(67, 75) : BOOL
77 : 7 { 0x7 } : BV:8
78 : 409605959 { 0x186a1747 +1.82883536e177 } : BV:32
79 : eq(67, 78) : BOOL
80 : 219 { 0xdb -37 } : BV:8
81 : eq(67, 1) : BOOL
82 : 251 { 0xfb -5 } : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : eq(67, 83) : BOOL
85 : 47 { 0x2f } : BV:8
86 : 409605958 { 0x186a1746 +1.82883524e177 } : BV:32
87 : eq(67, 86) : BOOL
88 : 187 { 0xbb -69 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(73, 74, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : ite(69, 70, 96) : BV:8
98 : bvadd(83, 66) : BV:32
99 : eq(98, 68) : BOOL
100 : eq(98, 63) : BOOL
101 : eq(98, 16) : BOOL
102 : eq(98, 75) : BOOL
103 : eq(98, 78) : BOOL
104 : eq(98, 1) : BOOL
105 : eq(98, 83) : BOOL
106 : eq(98, 86) : BOOL
107 : ite(106, 88, 89) : BV:8
108 : ite(105, 85, 107) : BV:8
109 : ite(104, 82, 108) : BV:8
110 : ite(103, 80, 109) : BV:8
111 : ite(102, 77, 110) : BV:8
112 : ite(101, 74, 111) : BV:8
113 : ite(100, 72, 112) : BV:8
114 : ite(99, 70, 113) : BV:8
115 : bvadd(16, 66) : BV:32
116 : eq(115, 68) : BOOL
117 : eq(115, 63) : BOOL
118 : eq(115, 16) : BOOL
119 : eq(115, 75) : BOOL
120 : eq(115, 78) : BOOL
121 : eq(115, 1) : BOOL
122 : eq(115, 83) : BOOL
123 : eq(115, 86) : BOOL
124 : ite(123, 88, 89) : BV:8
125 : ite(122, 85, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : ite(119, 77, 127) : BV:8
129 : ite(118, 74, 128) : BV:8
130 : ite(117, 72, 129) : BV:8
131 : ite(116, 70, 130) : BV:8
132 : eq(66, 68) : BOOL
133 : eq(66, 63) : BOOL
134 : eq(66, 16) : BOOL
135 : eq(66, 75) : BOOL
136 : eq(66, 78) : BOOL
137 : eq(66, 1) : BOOL
138 : eq(66, 83) : BOOL
139 : eq(66, 86) : BOOL
140 : ite(139, 88, 89) : BV:8
141 : ite(138, 85, 140) : BV:8
142 : ite(137, 82, 141) : BV:8
143 : ite(136, 80, 142) : BV:8
144 : ite(135, 77, 143) : BV:8
145 : ite(134, 74, 144) : BV:8
146 : ite(133, 72, 145) : BV:8
147 : ite(132, 70, 146) : BV:8
148 : bvconcat(97, 114, 131, 147) : BV:32
149 : bvadd(63, 65, 148) : BV:32
150 : eq(149, 68) : BOOL
151 : eq(149, 63) : BOOL
152 : eq(149, 16) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 78) : BOOL
155 : eq(149, 1) : BOOL
156 : eq(149, 83) : BOOL
157 : eq(149, 86) : BOOL
158 : ite(157, 88, 89) : BV:8
159 : ite(156, 85, 158) : BV:8
160 : ite(155, 82, 159) : BV:8
161 : ite(154, 80, 160) : BV:8
162 : ite(153, 77, 161) : BV:8
163 : ite(152, 74, 162) : BV:8
164 : ite(151, 72, 163) : BV:8
165 : ite(150, 70, 164) : BV:8
166 : bvadd(83, 65, 148) : BV:32
167 : eq(166, 68) : BOOL
168 : eq(166, 63) : BOOL
169 : eq(166, 16) : BOOL
170 : eq(166, 75) : BOOL
171 : eq(166, 78) : BOOL
172 : eq(166, 1) : BOOL
173 : eq(166, 83) : BOOL
174 : eq(166, 86) : BOOL
175 : ite(174, 88, 89) : BV:8
176 : ite(173, 85, 175) : BV:8
177 : ite(172, 82, 176) : BV:8
178 : ite(171, 80, 177) : BV:8
179 : ite(170, 77, 178) : BV:8
180 : ite(169, 74, 179) : BV:8
181 : ite(168, 72, 180) : BV:8
182 : ite(167, 70, 181) : BV:8
183 : bvadd(16, 65, 148) : BV:32
184 : eq(183, 68) : BOOL
185 : eq(183, 63) : BOOL
186 : eq(183, 16) : BOOL
187 : eq(183, 75) : BOOL
188 : eq(183, 78) : BOOL
189 : eq(183, 1) : BOOL
190 : eq(183, 83) : BOOL
191 : eq(183, 86) : BOOL
192 : ite(191, 88, 89) : BV:8
193 : ite(190, 85, 192) : BV:8
194 : ite(189, 82, 193) : BV:8
195 : ite(188, 80, 194) : BV:8
196 : ite(187, 77, 195) : BV:8
197 : ite(186, 74, 196) : BV:8
198 : ite(185, 72, 197) : BV:8
199 : ite(184, 70, 198) : BV:8
200 : bvadd(65, 148) : BV:32
201 : eq(200, 68) : BOOL
202 : eq(200, 63) : BOOL
203 : eq(200, 16) : BOOL
204 : eq(200, 75) : BOOL
205 : eq(200, 78) : BOOL
206 : eq(200, 1) : BOOL
207 : eq(200, 83) : BOOL
208 : eq(200, 86) : BOOL
209 : ite(208, 88, 89) : BV:8
210 : ite(207, 85, 209) : BV:8
211 : ite(206, 82, 210) : BV:8
212 : ite(205, 80, 211) : BV:8
213 : ite(204, 77, 212) : BV:8
214 : ite(203, 74, 213) : BV:8
215 : ite(202, 72, 214) : BV:8
216 : ite(201, 70, 215) : BV:8
217 : bvconcat(165, 182, 199, 216) : BV:32
218 : ite(62, 1, 217) : BV:32
219 : ite(60, 1, 218) : BV:32
220 : lambda(57, 219) : FUNCTION[BV:32 -> BV:32]
221 : map(56, 220) : MAP[BV:32 -> BV:32]
222 : sum(17, 18, 221) : SUM[UNIT,MAP[BV:32 -> BV:32]]
223 : sym_const(222) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 102401490 { 0x61a85d2 +1.20720887e141 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39088Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 127 { 0x7f +1.1513e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 128 { 0x80 +1.1525e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 129 { 0x81 +1.1537e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda39089Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 409605956 { 0x186a1744 +1.82883501e177 } : BV:32
62 : eq(60, 61) : BOOL
63 : 217 { 0xd9 -39 } : BV:8
64 : eq(60, 56) : BOOL
65 : 235 { 0xeb -21 } : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 242 { 0xf2 -14 } : BV:8
69 : 409605957 { 0x186a1745 +1.82883512e177 } : BV:32
70 : eq(60, 69) : BOOL
71 : 7 { 0x7 } : BV:8
72 : 409605959 { 0x186a1747 +1.82883536e177 } : BV:32
73 : eq(60, 72) : BOOL
74 : 219 { 0xdb -37 } : BV:8
75 : eq(60, 2) : BOOL
76 : 251 { 0xfb -5 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 47 { 0x2f } : BV:8
80 : 409605958 { 0x186a1746 +1.82883524e177 } : BV:32
81 : eq(60, 80) : BOOL
82 : 187 { 0xbb -69 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(73, 74, 86) : BV:8
88 : ite(70, 71, 87) : BV:8
89 : ite(67, 68, 88) : BV:8
90 : ite(64, 65, 89) : BV:8
91 : ite(62, 63, 90) : BV:8
92 : bvadd(77, 59) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 56) : BOOL
95 : eq(92, 66) : BOOL
96 : eq(92, 69) : BOOL
97 : eq(92, 72) : BOOL
98 : eq(92, 2) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 74, 103) : BV:8
105 : ite(96, 71, 104) : BV:8
106 : ite(95, 68, 105) : BV:8
107 : ite(94, 65, 106) : BV:8
108 : ite(93, 63, 107) : BV:8
109 : bvadd(66, 59) : BV:32
110 : eq(109, 61) : BOOL
111 : eq(109, 56) : BOOL
112 : eq(109, 66) : BOOL
113 : eq(109, 69) : BOOL
114 : eq(109, 72) : BOOL
115 : eq(109, 2) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 74, 120) : BV:8
122 : ite(113, 71, 121) : BV:8
123 : ite(112, 68, 122) : BV:8
124 : ite(111, 65, 123) : BV:8
125 : ite(110, 63, 124) : BV:8
126 : eq(59, 61) : BOOL
127 : eq(59, 56) : BOOL
128 : eq(59, 66) : BOOL
129 : eq(59, 69) : BOOL
130 : eq(59, 72) : BOOL
131 : eq(59, 2) : BOOL
132 : eq(59, 77) : BOOL
133 : eq(59, 80) : BOOL
134 : ite(133, 82, 83) : BV:8
135 : ite(132, 79, 134) : BV:8
136 : ite(131, 76, 135) : BV:8
137 : ite(130, 74, 136) : BV:8
138 : ite(129, 71, 137) : BV:8
139 : ite(128, 68, 138) : BV:8
140 : ite(127, 65, 139) : BV:8
141 : ite(126, 63, 140) : BV:8
142 : bvconcat(91, 108, 125, 141) : BV:32
143 : bvadd(56, 58, 142) : BV:32
144 : eq(143, 61) : BOOL
145 : eq(143, 56) : BOOL
146 : eq(143, 66) : BOOL
147 : eq(143, 69) : BOOL
148 : eq(143, 72) : BOOL
149 : eq(143, 2) : BOOL
150 : eq(143, 77) : BOOL
151 : eq(143, 80) : BOOL
152 : ite(151, 82, 83) : BV:8
153 : ite(150, 79, 152) : BV:8
154 : ite(149, 76, 153) : BV:8
155 : ite(148, 74, 154) : BV:8
156 : ite(147, 71, 155) : BV:8
157 : ite(146, 68, 156) : BV:8
158 : ite(145, 65, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : bvadd(77, 58, 142) : BV:32
161 : eq(160, 61) : BOOL
162 : eq(160, 56) : BOOL
163 : eq(160, 66) : BOOL
164 : eq(160, 69) : BOOL
165 : eq(160, 72) : BOOL
166 : eq(160, 2) : BOOL
167 : eq(160, 77) : BOOL
168 : eq(160, 80) : BOOL
169 : ite(168, 82, 83) : BV:8
170 : ite(167, 79, 169) : BV:8
171 : ite(166, 76, 170) : BV:8
172 : ite(165, 74, 171) : BV:8
173 : ite(164, 71, 172) : BV:8
174 : ite(163, 68, 173) : BV:8
175 : ite(162, 65, 174) : BV:8
176 : ite(161, 63, 175) : BV:8
177 : bvadd(66, 58, 142) : BV:32
178 : eq(177, 61) : BOOL
179 : eq(177, 56) : BOOL
180 : eq(177, 66) : BOOL
181 : eq(177, 69) : BOOL
182 : eq(177, 72) : BOOL
183 : eq(177, 2) : BOOL
184 : eq(177, 77) : BOOL
185 : eq(177, 80) : BOOL
186 : ite(185, 82, 83) : BV:8
187 : ite(184, 79, 186) : BV:8
188 : ite(183, 76, 187) : BV:8
189 : ite(182, 74, 188) : BV:8
190 : ite(181, 71, 189) : BV:8
191 : ite(180, 68, 190) : BV:8
192 : ite(179, 65, 191) : BV:8
193 : ite(178, 63, 192) : BV:8
194 : bvadd(58, 142) : BV:32
195 : eq(194, 61) : BOOL
196 : eq(194, 56) : BOOL
197 : eq(194, 66) : BOOL
198 : eq(194, 69) : BOOL
199 : eq(194, 72) : BOOL
200 : eq(194, 2) : BOOL
201 : eq(194, 77) : BOOL
202 : eq(194, 80) : BOOL
203 : ite(202, 82, 83) : BV:8
204 : ite(201, 79, 203) : BV:8
205 : ite(200, 76, 204) : BV:8
206 : ite(199, 74, 205) : BV:8
207 : ite(198, 71, 206) : BV:8
208 : ite(197, 68, 207) : BV:8
209 : ite(196, 65, 208) : BV:8
210 : ite(195, 63, 209) : BV:8
211 : bvconcat(159, 176, 193, 210) : BV:32
212 : ite(55, 2, 211) : BV:32
213 : ite(53, 2, 212) : BV:32
214 : lambda(50, 213) : FUNCTION[BV:32 -> BV:32]
215 : map(49, 214) : MAP[BV:32 -> BV:32]
216 : sym_const(215) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3221225332 { 0xbfffff74 -1073741964 -1.99998331e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3221225335 { 0xbfffff77 -1073741961 -1.99998366e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1974948472 { 0x75b75278 +1.43220424e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1974948475 { 0x75b7527b +1.43220460e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2684354488 { 0x9fffffb8 -1610612808 -1.99999141e192 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2684354491 { 0x9fffffbb -1610612805 -1.99999177e192 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda38903Var : BV:32
2 : Lambda38904Var : BV:32
3 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : 127 { 0x7f +1.1513e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 128 { 0x80 +1.1525e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 129 { 0x81 +1.1537e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 3) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : ite(54, 14, 57) : BOOL
59 : and(22, 58) : BOOL
60 : 3 { 0x3 +1.35e129 } : BV:32
61 : 4 { 0x4 +1.47e129 } : BV:32
62 : bvmul(61, 2) : BV:32
63 : bvmul(61, 1) : BV:32
64 : bvadd(60, 63) : BV:32
65 : 409605956 { 0x186a1744 +1.82883501e177 } : BV:32
66 : eq(64, 65) : BOOL
67 : 217 { 0xd9 -39 } : BV:8
68 : eq(64, 60) : BOOL
69 : 235 { 0xeb -21 } : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : eq(64, 70) : BOOL
72 : 242 { 0xf2 -14 } : BV:8
73 : 409605957 { 0x186a1745 +1.82883512e177 } : BV:32
74 : eq(64, 73) : BOOL
75 : 7 { 0x7 } : BV:8
76 : 409605959 { 0x186a1747 +1.82883536e177 } : BV:32
77 : eq(64, 76) : BOOL
78 : 219 { 0xdb -37 } : BV:8
79 : eq(64, 5) : BOOL
80 : 251 { 0xfb -5 } : BV:8
81 : 2 { 0x2 +1.23e129 } : BV:32
82 : eq(64, 81) : BOOL
83 : 47 { 0x2f } : BV:8
84 : 409605958 { 0x186a1746 +1.82883524e177 } : BV:32
85 : eq(64, 84) : BOOL
86 : 187 { 0xbb -69 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(77, 78, 90) : BV:8
92 : ite(74, 75, 91) : BV:8
93 : ite(71, 72, 92) : BV:8
94 : ite(68, 69, 93) : BV:8
95 : ite(66, 67, 94) : BV:8
96 : bvadd(81, 63) : BV:32
97 : eq(96, 65) : BOOL
98 : eq(96, 60) : BOOL
99 : eq(96, 70) : BOOL
100 : eq(96, 73) : BOOL
101 : eq(96, 76) : BOOL
102 : eq(96, 5) : BOOL
103 : eq(96, 81) : BOOL
104 : eq(96, 84) : BOOL
105 : ite(104, 86, 87) : BV:8
106 : ite(103, 83, 105) : BV:8
107 : ite(102, 80, 106) : BV:8
108 : ite(101, 78, 107) : BV:8
109 : ite(100, 75, 108) : BV:8
110 : ite(99, 72, 109) : BV:8
111 : ite(98, 69, 110) : BV:8
112 : ite(97, 67, 111) : BV:8
113 : bvadd(70, 63) : BV:32
114 : eq(113, 65) : BOOL
115 : eq(113, 60) : BOOL
116 : eq(113, 70) : BOOL
117 : eq(113, 73) : BOOL
118 : eq(113, 76) : BOOL
119 : eq(113, 5) : BOOL
120 : eq(113, 81) : BOOL
121 : eq(113, 84) : BOOL
122 : ite(121, 86, 87) : BV:8
123 : ite(120, 83, 122) : BV:8
124 : ite(119, 80, 123) : BV:8
125 : ite(118, 78, 124) : BV:8
126 : ite(117, 75, 125) : BV:8
127 : ite(116, 72, 126) : BV:8
128 : ite(115, 69, 127) : BV:8
129 : ite(114, 67, 128) : BV:8
130 : eq(63, 65) : BOOL
131 : eq(63, 60) : BOOL
132 : eq(63, 70) : BOOL
133 : eq(63, 73) : BOOL
134 : eq(63, 76) : BOOL
135 : eq(63, 5) : BOOL
136 : eq(63, 81) : BOOL
137 : eq(63, 84) : BOOL
138 : ite(137, 86, 87) : BV:8
139 : ite(136, 83, 138) : BV:8
140 : ite(135, 80, 139) : BV:8
141 : ite(134, 78, 140) : BV:8
142 : ite(133, 75, 141) : BV:8
143 : ite(132, 72, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 67, 144) : BV:8
146 : bvconcat(95, 112, 129, 145) : BV:32
147 : bvadd(60, 62, 146) : BV:32
148 : eq(147, 65) : BOOL
149 : eq(147, 60) : BOOL
150 : eq(147, 70) : BOOL
151 : eq(147, 73) : BOOL
152 : eq(147, 76) : BOOL
153 : eq(147, 5) : BOOL
154 : eq(147, 81) : BOOL
155 : eq(147, 84) : BOOL
156 : ite(155, 86, 87) : BV:8
157 : ite(154, 83, 156) : BV:8
158 : ite(153, 80, 157) : BV:8
159 : ite(152, 78, 158) : BV:8
160 : ite(151, 75, 159) : BV:8
161 : ite(150, 72, 160) : BV:8
162 : ite(149, 69, 161) : BV:8
163 : ite(148, 67, 162) : BV:8
164 : bvadd(81, 62, 146) : BV:32
165 : eq(164, 65) : BOOL
166 : eq(164, 60) : BOOL
167 : eq(164, 70) : BOOL
168 : eq(164, 73) : BOOL
169 : eq(164, 76) : BOOL
170 : eq(164, 5) : BOOL
171 : eq(164, 81) : BOOL
172 : eq(164, 84) : BOOL
173 : ite(172, 86, 87) : BV:8
174 : ite(171, 83, 173) : BV:8
175 : ite(170, 80, 174) : BV:8
176 : ite(169, 78, 175) : BV:8
177 : ite(168, 75, 176) : BV:8
178 : ite(167, 72, 177) : BV:8
179 : ite(166, 69, 178) : BV:8
180 : ite(165, 67, 179) : BV:8
181 : bvadd(70, 62, 146) : BV:32
182 : eq(181, 65) : BOOL
183 : eq(181, 60) : BOOL
184 : eq(181, 70) : BOOL
185 : eq(181, 73) : BOOL
186 : eq(181, 76) : BOOL
187 : eq(181, 5) : BOOL
188 : eq(181, 81) : BOOL
189 : eq(181, 84) : BOOL
190 : ite(189, 86, 87) : BV:8
191 : ite(188, 83, 190) : BV:8
192 : ite(187, 80, 191) : BV:8
193 : ite(186, 78, 192) : BV:8
194 : ite(185, 75, 193) : BV:8
195 : ite(184, 72, 194) : BV:8
196 : ite(183, 69, 195) : BV:8
197 : ite(182, 67, 196) : BV:8
198 : bvadd(62, 146) : BV:32
199 : eq(198, 65) : BOOL
200 : eq(198, 60) : BOOL
201 : eq(198, 70) : BOOL
202 : eq(198, 73) : BOOL
203 : eq(198, 76) : BOOL
204 : eq(198, 5) : BOOL
205 : eq(198, 81) : BOOL
206 : eq(198, 84) : BOOL
207 : ite(206, 86, 87) : BV:8
208 : ite(205, 83, 207) : BV:8
209 : ite(204, 80, 208) : BV:8
210 : ite(203, 78, 209) : BV:8
211 : ite(202, 75, 210) : BV:8
212 : ite(201, 72, 211) : BV:8
213 : ite(200, 69, 212) : BV:8
214 : ite(199, 67, 213) : BV:8
215 : bvconcat(163, 180, 197, 214) : BV:32
216 : ite(9, 5, 215) : BV:32
217 : ite(7, 5, 216) : BV:32
218 : ite(59, 215, 217) : BV:32
219 : ite(9, 5, 218) : BV:32
220 : ite(7, 5, 219) : BV:32
221 : lambda(1, 2, 220) : FUNCTION[BV:32,BV:32 -> BV:32]
222 : sym_const(221) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda38908Var : BV:32
2 : Lambda38909Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 127 { 0x7f +1.1513e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 128 { 0x80 +1.1525e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 129 { 0x81 +1.1537e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 341116879 ] -> true, [ 341116880; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 341116879 ] -> true, [ 341116880; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda38917Var : BV:32
2 : Lambda38918Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 102401488 { 0x61a85d0 +1.20720863e141 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 341116879 { 0x145507cf +1.66430079e169 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 341116880 { 0x145507d0 +1.66430091e169 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 341116881 { 0x145507d1 +1.66430103e169 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 127 { 0x7f +1.1513e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 128 { 0x80 +1.1525e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 129 { 0x81 +1.1537e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda38913Var : BV:32
2 : Lambda38914Var : BV:32
3 : 102401489 { 0x61a85d1 +1.20720875e141 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 409605956 { 0x186a1744 +1.82883501e177 } : BV:32
16 : eq(14, 15) : BOOL
17 : 217 { 0xd9 -39 } : BV:8
18 : eq(14, 10) : BOOL
19 : 235 { 0xeb -21 } : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 242 { 0xf2 -14 } : BV:8
23 : 409605957 { 0x186a1745 +1.82883512e177 } : BV:32
24 : eq(14, 23) : BOOL
25 : 7 { 0x7 } : BV:8
26 : 409605959 { 0x186a1747 +1.82883536e177 } : BV:32
27 : eq(14, 26) : BOOL
28 : 219 { 0xdb -37 } : BV:8
29 : eq(14, 5) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 47 { 0x2f } : BV:8
34 : 409605958 { 0x186a1746 +1.82883524e177 } : BV:32
35 : eq(14, 34) : BOOL
36 : 187 { 0xbb -69 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 15) : BOOL
48 : eq(46, 10) : BOOL
49 : eq(46, 20) : BOOL
50 : eq(46, 23) : BOOL
51 : eq(46, 26) : BOOL
52 : eq(46, 5) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 28, 57) : BV:8
59 : ite(50, 25, 58) : BV:8
60 : ite(49, 22, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 17, 61) : BV:8
63 : bvadd(20, 13) : BV:32
64 : eq(63, 15) : BOOL
65 : eq(63, 10) : BOOL
66 : eq(63, 20) : BOOL
67 : eq(63, 23) : BOOL
68 : eq(63, 26) : BOOL
69 : eq(63, 5) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : ite(66, 22, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 17, 78) : BV:8
80 : eq(13, 15) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 20) : BOOL
83 : eq(13, 23) : BOOL
84 : eq(13, 26) : BOOL
85 : eq(13, 5) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 28, 90) : BV:8
92 : ite(83, 25, 91) : BV:8
93 : ite(82, 22, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 17, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 15) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 20) : BOOL
101 : eq(97, 23) : BOOL
102 : eq(97, 26) : BOOL
103 : eq(97, 5) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 28, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 22, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 17, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 15) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 20) : BOOL
118 : eq(114, 23) : BOOL
119 : eq(114, 26) : BOOL
120 : eq(114, 5) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 28, 125) : BV:8
127 : ite(118, 25, 126) : BV:8
128 : ite(117, 22, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 17, 129) : BV:8
131 : bvadd(20, 12, 96) : BV:32
132 : eq(131, 15) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 20) : BOOL
135 : eq(131, 23) : BOOL
136 : eq(131, 26) : BOOL
137 : eq(131, 5) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 28, 142) : BV:8
144 : ite(135, 25, 143) : BV:8
145 : ite(134, 22, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 17, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 15) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 20) : BOOL
152 : eq(148, 23) : BOOL
153 : eq(148, 26) : BOOL
154 : eq(148, 5) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 28, 159) : BV:8
161 : ite(152, 25, 160) : BV:8
162 : ite(151, 22, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3189126338
=counter_example_end
=global nodece 33 num_edges_traversed 1
=global nodece 33 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 34
=global nodece 34 nodece z3.ce3795.num_edges_traversed1
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce3795 8822f8657146122021bdb274b977656c
=input.spec-%var-x-1
1 : Lambda39528Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39529Var : BV:32
18 : Lambda39530Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 511 { 0x1ff +1.6091e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 512 { 0x200 +1.6103e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 513 { 0x201 +1.6115e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda39531Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : ite(84, 7, 86) : BOOL
88 : and(70, 87) : BOOL
89 : 3 { 0x3 +1.35e129 } : BV:32
90 : 4 { 0x4 +1.47e129 } : BV:32
91 : bvmul(90, 61) : BV:32
92 : bvmul(90, 17) : BV:32
93 : bvadd(89, 92) : BV:32
94 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
95 : eq(93, 94) : BOOL
96 : 244 { 0xf4 -12 } : BV:8
97 : 1 { 0x1 +1.11e129 } : BV:32
98 : eq(93, 97) : BOOL
99 : 255 { 0xff -1 } : BV:8
100 : eq(93, 89) : BOOL
101 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
102 : eq(93, 101) : BOOL
103 : 247 { 0xf7 -9 } : BV:8
104 : eq(93, 10) : BOOL
105 : 251 { 0xfb -5 } : BV:8
106 : eq(93, 2) : BOOL
107 : 123 { 0x7b } : BV:8
108 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
109 : eq(93, 108) : BOOL
110 : 126 { 0x7e } : BV:8
111 : 2 { 0x2 +1.23e129 } : BV:32
112 : eq(93, 111) : BOOL
113 : 239 { 0xef -17 } : BV:8
114 : 0 { 0x0 } : BV:8
115 : ite(112, 113, 114) : BV:8
116 : ite(109, 110, 115) : BV:8
117 : ite(106, 107, 116) : BV:8
118 : ite(104, 105, 117) : BV:8
119 : ite(102, 103, 118) : BV:8
120 : ite(100, 99, 119) : BV:8
121 : ite(98, 99, 120) : BV:8
122 : ite(95, 96, 121) : BV:8
123 : bvadd(111, 92) : BV:32
124 : eq(123, 94) : BOOL
125 : eq(123, 97) : BOOL
126 : eq(123, 89) : BOOL
127 : eq(123, 101) : BOOL
128 : eq(123, 10) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 108) : BOOL
131 : eq(123, 111) : BOOL
132 : ite(131, 113, 114) : BV:8
133 : ite(130, 110, 132) : BV:8
134 : ite(129, 107, 133) : BV:8
135 : ite(128, 105, 134) : BV:8
136 : ite(127, 103, 135) : BV:8
137 : ite(126, 99, 136) : BV:8
138 : ite(125, 99, 137) : BV:8
139 : ite(124, 96, 138) : BV:8
140 : bvadd(97, 92) : BV:32
141 : eq(140, 94) : BOOL
142 : eq(140, 97) : BOOL
143 : eq(140, 89) : BOOL
144 : eq(140, 101) : BOOL
145 : eq(140, 10) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 108) : BOOL
148 : eq(140, 111) : BOOL
149 : ite(148, 113, 114) : BV:8
150 : ite(147, 110, 149) : BV:8
151 : ite(146, 107, 150) : BV:8
152 : ite(145, 105, 151) : BV:8
153 : ite(144, 103, 152) : BV:8
154 : ite(143, 99, 153) : BV:8
155 : ite(142, 99, 154) : BV:8
156 : ite(141, 96, 155) : BV:8
157 : eq(92, 94) : BOOL
158 : eq(92, 97) : BOOL
159 : eq(92, 89) : BOOL
160 : eq(92, 101) : BOOL
161 : eq(92, 10) : BOOL
162 : eq(92, 2) : BOOL
163 : eq(92, 108) : BOOL
164 : eq(92, 111) : BOOL
165 : ite(164, 113, 114) : BV:8
166 : ite(163, 110, 165) : BV:8
167 : ite(162, 107, 166) : BV:8
168 : ite(161, 105, 167) : BV:8
169 : ite(160, 103, 168) : BV:8
170 : ite(159, 99, 169) : BV:8
171 : ite(158, 99, 170) : BV:8
172 : ite(157, 96, 171) : BV:8
173 : bvconcat(122, 139, 156, 172) : BV:32
174 : bvadd(89, 91, 173) : BV:32
175 : eq(174, 94) : BOOL
176 : eq(174, 97) : BOOL
177 : eq(174, 89) : BOOL
178 : eq(174, 101) : BOOL
179 : eq(174, 10) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 108) : BOOL
182 : eq(174, 111) : BOOL
183 : ite(182, 113, 114) : BV:8
184 : ite(181, 110, 183) : BV:8
185 : ite(180, 107, 184) : BV:8
186 : ite(179, 105, 185) : BV:8
187 : ite(178, 103, 186) : BV:8
188 : ite(177, 99, 187) : BV:8
189 : ite(176, 99, 188) : BV:8
190 : ite(175, 96, 189) : BV:8
191 : bvadd(111, 91, 173) : BV:32
192 : eq(191, 94) : BOOL
193 : eq(191, 97) : BOOL
194 : eq(191, 89) : BOOL
195 : eq(191, 101) : BOOL
196 : eq(191, 10) : BOOL
197 : eq(191, 2) : BOOL
198 : eq(191, 108) : BOOL
199 : eq(191, 111) : BOOL
200 : ite(199, 113, 114) : BV:8
201 : ite(198, 110, 200) : BV:8
202 : ite(197, 107, 201) : BV:8
203 : ite(196, 105, 202) : BV:8
204 : ite(195, 103, 203) : BV:8
205 : ite(194, 99, 204) : BV:8
206 : ite(193, 99, 205) : BV:8
207 : ite(192, 96, 206) : BV:8
208 : bvadd(97, 91, 173) : BV:32
209 : eq(208, 94) : BOOL
210 : eq(208, 97) : BOOL
211 : eq(208, 89) : BOOL
212 : eq(208, 101) : BOOL
213 : eq(208, 10) : BOOL
214 : eq(208, 2) : BOOL
215 : eq(208, 108) : BOOL
216 : eq(208, 111) : BOOL
217 : ite(216, 113, 114) : BV:8
218 : ite(215, 110, 217) : BV:8
219 : ite(214, 107, 218) : BV:8
220 : ite(213, 105, 219) : BV:8
221 : ite(212, 103, 220) : BV:8
222 : ite(211, 99, 221) : BV:8
223 : ite(210, 99, 222) : BV:8
224 : ite(209, 96, 223) : BV:8
225 : bvadd(91, 173) : BV:32
226 : eq(225, 94) : BOOL
227 : eq(225, 97) : BOOL
228 : eq(225, 89) : BOOL
229 : eq(225, 101) : BOOL
230 : eq(225, 10) : BOOL
231 : eq(225, 2) : BOOL
232 : eq(225, 108) : BOOL
233 : eq(225, 111) : BOOL
234 : ite(233, 113, 114) : BV:8
235 : ite(232, 110, 234) : BV:8
236 : ite(231, 107, 235) : BV:8
237 : ite(230, 105, 236) : BV:8
238 : ite(229, 103, 237) : BV:8
239 : ite(228, 99, 238) : BV:8
240 : ite(227, 99, 239) : BV:8
241 : ite(226, 96, 240) : BV:8
242 : bvconcat(190, 207, 224, 241) : BV:32
243 : ite(66, 2, 242) : BV:32
244 : ite(64, 2, 243) : BV:32
245 : ite(88, 242, 244) : BV:32
246 : ite(66, 2, 245) : BV:32
247 : ite(64, 2, 246) : BV:32
248 : lambda(61, 247) : FUNCTION[BV:32 -> BV:32]
249 : map(60, 248) : MAP[BV:32 -> BV:32]
250 : lambda(17, 249) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
251 : map(16, 250) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
252 : sym_const(251) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39643Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 511 { 0x1ff +1.6091e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 512 { 0x200 +1.6103e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 513 { 0x201 +1.6115e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda39644Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 244 { 0xf4 -12 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 255 { 0xff -1 } : BV:8
67 : eq(60, 56) : BOOL
68 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
69 : eq(60, 68) : BOOL
70 : 247 { 0xf7 -9 } : BV:8
71 : eq(60, 18) : BOOL
72 : 251 { 0xfb -5 } : BV:8
73 : eq(60, 2) : BOOL
74 : 123 { 0x7b } : BV:8
75 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
76 : eq(60, 75) : BOOL
77 : 126 { 0x7e } : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 239 { 0xef -17 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 72, 84) : BV:8
86 : ite(69, 70, 85) : BV:8
87 : ite(67, 66, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(78, 59) : BV:32
91 : eq(90, 61) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 56) : BOOL
94 : eq(90, 68) : BOOL
95 : eq(90, 18) : BOOL
96 : eq(90, 2) : BOOL
97 : eq(90, 75) : BOOL
98 : eq(90, 78) : BOOL
99 : ite(98, 80, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 74, 100) : BV:8
102 : ite(95, 72, 101) : BV:8
103 : ite(94, 70, 102) : BV:8
104 : ite(93, 66, 103) : BV:8
105 : ite(92, 66, 104) : BV:8
106 : ite(91, 63, 105) : BV:8
107 : bvadd(64, 59) : BV:32
108 : eq(107, 61) : BOOL
109 : eq(107, 64) : BOOL
110 : eq(107, 56) : BOOL
111 : eq(107, 68) : BOOL
112 : eq(107, 18) : BOOL
113 : eq(107, 2) : BOOL
114 : eq(107, 75) : BOOL
115 : eq(107, 78) : BOOL
116 : ite(115, 80, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 74, 117) : BV:8
119 : ite(112, 72, 118) : BV:8
120 : ite(111, 70, 119) : BV:8
121 : ite(110, 66, 120) : BV:8
122 : ite(109, 66, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : eq(59, 61) : BOOL
125 : eq(59, 64) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 68) : BOOL
128 : eq(59, 18) : BOOL
129 : eq(59, 2) : BOOL
130 : eq(59, 75) : BOOL
131 : eq(59, 78) : BOOL
132 : ite(131, 80, 81) : BV:8
133 : ite(130, 77, 132) : BV:8
134 : ite(129, 74, 133) : BV:8
135 : ite(128, 72, 134) : BV:8
136 : ite(127, 70, 135) : BV:8
137 : ite(126, 66, 136) : BV:8
138 : ite(125, 66, 137) : BV:8
139 : ite(124, 63, 138) : BV:8
140 : bvconcat(89, 106, 123, 139) : BV:32
141 : bvadd(56, 58, 140) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 56) : BOOL
145 : eq(141, 68) : BOOL
146 : eq(141, 18) : BOOL
147 : eq(141, 2) : BOOL
148 : eq(141, 75) : BOOL
149 : eq(141, 78) : BOOL
150 : ite(149, 80, 81) : BV:8
151 : ite(148, 77, 150) : BV:8
152 : ite(147, 74, 151) : BV:8
153 : ite(146, 72, 152) : BV:8
154 : ite(145, 70, 153) : BV:8
155 : ite(144, 66, 154) : BV:8
156 : ite(143, 66, 155) : BV:8
157 : ite(142, 63, 156) : BV:8
158 : bvadd(78, 58, 140) : BV:32
159 : eq(158, 61) : BOOL
160 : eq(158, 64) : BOOL
161 : eq(158, 56) : BOOL
162 : eq(158, 68) : BOOL
163 : eq(158, 18) : BOOL
164 : eq(158, 2) : BOOL
165 : eq(158, 75) : BOOL
166 : eq(158, 78) : BOOL
167 : ite(166, 80, 81) : BV:8
168 : ite(165, 77, 167) : BV:8
169 : ite(164, 74, 168) : BV:8
170 : ite(163, 72, 169) : BV:8
171 : ite(162, 70, 170) : BV:8
172 : ite(161, 66, 171) : BV:8
173 : ite(160, 66, 172) : BV:8
174 : ite(159, 63, 173) : BV:8
175 : bvadd(64, 58, 140) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 64) : BOOL
178 : eq(175, 56) : BOOL
179 : eq(175, 68) : BOOL
180 : eq(175, 18) : BOOL
181 : eq(175, 2) : BOOL
182 : eq(175, 75) : BOOL
183 : eq(175, 78) : BOOL
184 : ite(183, 80, 81) : BV:8
185 : ite(182, 77, 184) : BV:8
186 : ite(181, 74, 185) : BV:8
187 : ite(180, 72, 186) : BV:8
188 : ite(179, 70, 187) : BV:8
189 : ite(178, 66, 188) : BV:8
190 : ite(177, 66, 189) : BV:8
191 : ite(176, 63, 190) : BV:8
192 : bvadd(58, 140) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 56) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 18) : BOOL
198 : eq(192, 2) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 78) : BOOL
201 : ite(200, 80, 81) : BV:8
202 : ite(199, 77, 201) : BV:8
203 : ite(198, 74, 202) : BV:8
204 : ite(197, 72, 203) : BV:8
205 : ite(196, 70, 204) : BV:8
206 : ite(195, 66, 205) : BV:8
207 : ite(194, 66, 206) : BV:8
208 : ite(193, 63, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(55, 2, 209) : BV:32
211 : ite(53, 2, 210) : BV:32
212 : lambda(50, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(49, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 123, [ 1; 1 ] -> 255, [ 2; 2 ] -> 239, [ 3; 3 ] -> 255, [ 4; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 244, [ 4294967293; 4294967293 ] -> 247, [ 4294967294; 4294967294 ] -> 126, [ 4294967295; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 288358383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 288358384; 288358387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 288358388; 2511683591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2511683592; 2511683595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2511683596; 3359014931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3359014932; 3359014935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3359014936; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3359014932 { 0xc8368014 -935952364 -1.42578363e17 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 288358384 { 0x112ffff0 +1.37499809e163 } : BV:32
=input.dst.llvm-%n
1 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2511683592 { 0x95b54008 -1783283704 -1.41601657e172 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39541Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39542Var : BV:32
18 : Lambda39543Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 511 { 0x1ff +1.6091e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 512 { 0x200 +1.6103e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 513 { 0x201 +1.6115e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda39544Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : 3 { 0x3 +1.35e129 } : BV:32
68 : 4 { 0x4 +1.47e129 } : BV:32
69 : bvmul(68, 61) : BV:32
70 : bvmul(68, 17) : BV:32
71 : bvadd(67, 70) : BV:32
72 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
73 : eq(71, 72) : BOOL
74 : 244 { 0xf4 -12 } : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(71, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : eq(71, 67) : BOOL
79 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
80 : eq(71, 79) : BOOL
81 : 247 { 0xf7 -9 } : BV:8
82 : eq(71, 10) : BOOL
83 : 251 { 0xfb -5 } : BV:8
84 : eq(71, 2) : BOOL
85 : 123 { 0x7b } : BV:8
86 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
87 : eq(71, 86) : BOOL
88 : 126 { 0x7e } : BV:8
89 : 2 { 0x2 +1.23e129 } : BV:32
90 : eq(71, 89) : BOOL
91 : 239 { 0xef -17 } : BV:8
92 : 0 { 0x0 } : BV:8
93 : ite(90, 91, 92) : BV:8
94 : ite(87, 88, 93) : BV:8
95 : ite(84, 85, 94) : BV:8
96 : ite(82, 83, 95) : BV:8
97 : ite(80, 81, 96) : BV:8
98 : ite(78, 77, 97) : BV:8
99 : ite(76, 77, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : bvadd(89, 70) : BV:32
102 : eq(101, 72) : BOOL
103 : eq(101, 75) : BOOL
104 : eq(101, 67) : BOOL
105 : eq(101, 79) : BOOL
106 : eq(101, 10) : BOOL
107 : eq(101, 2) : BOOL
108 : eq(101, 86) : BOOL
109 : eq(101, 89) : BOOL
110 : ite(109, 91, 92) : BV:8
111 : ite(108, 88, 110) : BV:8
112 : ite(107, 85, 111) : BV:8
113 : ite(106, 83, 112) : BV:8
114 : ite(105, 81, 113) : BV:8
115 : ite(104, 77, 114) : BV:8
116 : ite(103, 77, 115) : BV:8
117 : ite(102, 74, 116) : BV:8
118 : bvadd(75, 70) : BV:32
119 : eq(118, 72) : BOOL
120 : eq(118, 75) : BOOL
121 : eq(118, 67) : BOOL
122 : eq(118, 79) : BOOL
123 : eq(118, 10) : BOOL
124 : eq(118, 2) : BOOL
125 : eq(118, 86) : BOOL
126 : eq(118, 89) : BOOL
127 : ite(126, 91, 92) : BV:8
128 : ite(125, 88, 127) : BV:8
129 : ite(124, 85, 128) : BV:8
130 : ite(123, 83, 129) : BV:8
131 : ite(122, 81, 130) : BV:8
132 : ite(121, 77, 131) : BV:8
133 : ite(120, 77, 132) : BV:8
134 : ite(119, 74, 133) : BV:8
135 : eq(70, 72) : BOOL
136 : eq(70, 75) : BOOL
137 : eq(70, 67) : BOOL
138 : eq(70, 79) : BOOL
139 : eq(70, 10) : BOOL
140 : eq(70, 2) : BOOL
141 : eq(70, 86) : BOOL
142 : eq(70, 89) : BOOL
143 : ite(142, 91, 92) : BV:8
144 : ite(141, 88, 143) : BV:8
145 : ite(140, 85, 144) : BV:8
146 : ite(139, 83, 145) : BV:8
147 : ite(138, 81, 146) : BV:8
148 : ite(137, 77, 147) : BV:8
149 : ite(136, 77, 148) : BV:8
150 : ite(135, 74, 149) : BV:8
151 : bvconcat(100, 117, 134, 150) : BV:32
152 : bvadd(67, 69, 151) : BV:32
153 : eq(152, 72) : BOOL
154 : eq(152, 75) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 79) : BOOL
157 : eq(152, 10) : BOOL
158 : eq(152, 2) : BOOL
159 : eq(152, 86) : BOOL
160 : eq(152, 89) : BOOL
161 : ite(160, 91, 92) : BV:8
162 : ite(159, 88, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 83, 163) : BV:8
165 : ite(156, 81, 164) : BV:8
166 : ite(155, 77, 165) : BV:8
167 : ite(154, 77, 166) : BV:8
168 : ite(153, 74, 167) : BV:8
169 : bvadd(89, 69, 151) : BV:32
170 : eq(169, 72) : BOOL
171 : eq(169, 75) : BOOL
172 : eq(169, 67) : BOOL
173 : eq(169, 79) : BOOL
174 : eq(169, 10) : BOOL
175 : eq(169, 2) : BOOL
176 : eq(169, 86) : BOOL
177 : eq(169, 89) : BOOL
178 : ite(177, 91, 92) : BV:8
179 : ite(176, 88, 178) : BV:8
180 : ite(175, 85, 179) : BV:8
181 : ite(174, 83, 180) : BV:8
182 : ite(173, 81, 181) : BV:8
183 : ite(172, 77, 182) : BV:8
184 : ite(171, 77, 183) : BV:8
185 : ite(170, 74, 184) : BV:8
186 : bvadd(75, 69, 151) : BV:32
187 : eq(186, 72) : BOOL
188 : eq(186, 75) : BOOL
189 : eq(186, 67) : BOOL
190 : eq(186, 79) : BOOL
191 : eq(186, 10) : BOOL
192 : eq(186, 2) : BOOL
193 : eq(186, 86) : BOOL
194 : eq(186, 89) : BOOL
195 : ite(194, 91, 92) : BV:8
196 : ite(193, 88, 195) : BV:8
197 : ite(192, 85, 196) : BV:8
198 : ite(191, 83, 197) : BV:8
199 : ite(190, 81, 198) : BV:8
200 : ite(189, 77, 199) : BV:8
201 : ite(188, 77, 200) : BV:8
202 : ite(187, 74, 201) : BV:8
203 : bvadd(69, 151) : BV:32
204 : eq(203, 72) : BOOL
205 : eq(203, 75) : BOOL
206 : eq(203, 67) : BOOL
207 : eq(203, 79) : BOOL
208 : eq(203, 10) : BOOL
209 : eq(203, 2) : BOOL
210 : eq(203, 86) : BOOL
211 : eq(203, 89) : BOOL
212 : ite(211, 91, 92) : BV:8
213 : ite(210, 88, 212) : BV:8
214 : ite(209, 85, 213) : BV:8
215 : ite(208, 83, 214) : BV:8
216 : ite(207, 81, 215) : BV:8
217 : ite(206, 77, 216) : BV:8
218 : ite(205, 77, 217) : BV:8
219 : ite(204, 74, 218) : BV:8
220 : bvconcat(168, 185, 202, 219) : BV:32
221 : ite(66, 2, 220) : BV:32
222 : ite(64, 2, 221) : BV:32
223 : lambda(61, 222) : FUNCTION[BV:32 -> BV:32]
224 : map(60, 223) : MAP[BV:32 -> BV:32]
225 : lambda(17, 224) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
226 : map(16, 225) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
227 : sym_const(226) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda39633Var : BV:32
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : 511 { 0x1ff +1.6091e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 512 { 0x200 +1.6103e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 513 { 0x201 +1.6115e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 2) : BOOL
53 : and(52, 50) : BOOL
54 : ite(53, 7, 13) : BOOL
55 : ite(51, 7, 54) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda39634Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : 3 { 0x3 +1.35e129 } : BV:32
64 : 4 { 0x4 +1.47e129 } : BV:32
65 : bvmul(64, 57) : BV:32
66 : bvmul(64, 2) : BV:32
67 : bvadd(63, 66) : BV:32
68 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
69 : eq(67, 68) : BOOL
70 : 244 { 0xf4 -12 } : BV:8
71 : eq(67, 16) : BOOL
72 : 255 { 0xff -1 } : BV:8
73 : eq(67, 63) : BOOL
74 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
75 : eq(67, 74) : BOOL
76 : 247 { 0xf7 -9 } : BV:8
77 : eq(67, 10) : BOOL
78 : 251 { 0xfb -5 } : BV:8
79 : eq(67, 1) : BOOL
80 : 123 { 0x7b } : BV:8
81 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
82 : eq(67, 81) : BOOL
83 : 126 { 0x7e } : BV:8
84 : 2 { 0x2 +1.23e129 } : BV:32
85 : eq(67, 84) : BOOL
86 : 239 { 0xef -17 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(77, 78, 90) : BV:8
92 : ite(75, 76, 91) : BV:8
93 : ite(73, 72, 92) : BV:8
94 : ite(71, 72, 93) : BV:8
95 : ite(69, 70, 94) : BV:8
96 : bvadd(84, 66) : BV:32
97 : eq(96, 68) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 63) : BOOL
100 : eq(96, 74) : BOOL
101 : eq(96, 10) : BOOL
102 : eq(96, 1) : BOOL
103 : eq(96, 81) : BOOL
104 : eq(96, 84) : BOOL
105 : ite(104, 86, 87) : BV:8
106 : ite(103, 83, 105) : BV:8
107 : ite(102, 80, 106) : BV:8
108 : ite(101, 78, 107) : BV:8
109 : ite(100, 76, 108) : BV:8
110 : ite(99, 72, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : ite(97, 70, 111) : BV:8
113 : bvadd(16, 66) : BV:32
114 : eq(113, 68) : BOOL
115 : eq(113, 16) : BOOL
116 : eq(113, 63) : BOOL
117 : eq(113, 74) : BOOL
118 : eq(113, 10) : BOOL
119 : eq(113, 1) : BOOL
120 : eq(113, 81) : BOOL
121 : eq(113, 84) : BOOL
122 : ite(121, 86, 87) : BV:8
123 : ite(120, 83, 122) : BV:8
124 : ite(119, 80, 123) : BV:8
125 : ite(118, 78, 124) : BV:8
126 : ite(117, 76, 125) : BV:8
127 : ite(116, 72, 126) : BV:8
128 : ite(115, 72, 127) : BV:8
129 : ite(114, 70, 128) : BV:8
130 : eq(66, 68) : BOOL
131 : eq(66, 16) : BOOL
132 : eq(66, 63) : BOOL
133 : eq(66, 74) : BOOL
134 : eq(66, 10) : BOOL
135 : eq(66, 1) : BOOL
136 : eq(66, 81) : BOOL
137 : eq(66, 84) : BOOL
138 : ite(137, 86, 87) : BV:8
139 : ite(136, 83, 138) : BV:8
140 : ite(135, 80, 139) : BV:8
141 : ite(134, 78, 140) : BV:8
142 : ite(133, 76, 141) : BV:8
143 : ite(132, 72, 142) : BV:8
144 : ite(131, 72, 143) : BV:8
145 : ite(130, 70, 144) : BV:8
146 : bvconcat(95, 112, 129, 145) : BV:32
147 : bvadd(63, 65, 146) : BV:32
148 : eq(147, 68) : BOOL
149 : eq(147, 16) : BOOL
150 : eq(147, 63) : BOOL
151 : eq(147, 74) : BOOL
152 : eq(147, 10) : BOOL
153 : eq(147, 1) : BOOL
154 : eq(147, 81) : BOOL
155 : eq(147, 84) : BOOL
156 : ite(155, 86, 87) : BV:8
157 : ite(154, 83, 156) : BV:8
158 : ite(153, 80, 157) : BV:8
159 : ite(152, 78, 158) : BV:8
160 : ite(151, 76, 159) : BV:8
161 : ite(150, 72, 160) : BV:8
162 : ite(149, 72, 161) : BV:8
163 : ite(148, 70, 162) : BV:8
164 : bvadd(84, 65, 146) : BV:32
165 : eq(164, 68) : BOOL
166 : eq(164, 16) : BOOL
167 : eq(164, 63) : BOOL
168 : eq(164, 74) : BOOL
169 : eq(164, 10) : BOOL
170 : eq(164, 1) : BOOL
171 : eq(164, 81) : BOOL
172 : eq(164, 84) : BOOL
173 : ite(172, 86, 87) : BV:8
174 : ite(171, 83, 173) : BV:8
175 : ite(170, 80, 174) : BV:8
176 : ite(169, 78, 175) : BV:8
177 : ite(168, 76, 176) : BV:8
178 : ite(167, 72, 177) : BV:8
179 : ite(166, 72, 178) : BV:8
180 : ite(165, 70, 179) : BV:8
181 : bvadd(16, 65, 146) : BV:32
182 : eq(181, 68) : BOOL
183 : eq(181, 16) : BOOL
184 : eq(181, 63) : BOOL
185 : eq(181, 74) : BOOL
186 : eq(181, 10) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 81) : BOOL
189 : eq(181, 84) : BOOL
190 : ite(189, 86, 87) : BV:8
191 : ite(188, 83, 190) : BV:8
192 : ite(187, 80, 191) : BV:8
193 : ite(186, 78, 192) : BV:8
194 : ite(185, 76, 193) : BV:8
195 : ite(184, 72, 194) : BV:8
196 : ite(183, 72, 195) : BV:8
197 : ite(182, 70, 196) : BV:8
198 : bvadd(65, 146) : BV:32
199 : eq(198, 68) : BOOL
200 : eq(198, 16) : BOOL
201 : eq(198, 63) : BOOL
202 : eq(198, 74) : BOOL
203 : eq(198, 10) : BOOL
204 : eq(198, 1) : BOOL
205 : eq(198, 81) : BOOL
206 : eq(198, 84) : BOOL
207 : ite(206, 86, 87) : BV:8
208 : ite(205, 83, 207) : BV:8
209 : ite(204, 80, 208) : BV:8
210 : ite(203, 78, 209) : BV:8
211 : ite(202, 76, 210) : BV:8
212 : ite(201, 72, 211) : BV:8
213 : ite(200, 72, 212) : BV:8
214 : ite(199, 70, 213) : BV:8
215 : bvconcat(163, 180, 197, 214) : BV:32
216 : ite(62, 1, 215) : BV:32
217 : ite(60, 1, 216) : BV:32
218 : lambda(57, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(56, 218) : MAP[BV:32 -> BV:32]
220 : sum(17, 18, 219) : SUM[UNIT,MAP[BV:32 -> BV:32]]
221 : sym_const(220) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39649Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 511 { 0x1ff +1.6091e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 512 { 0x200 +1.6103e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 513 { 0x201 +1.6115e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda39650Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 244 { 0xf4 -12 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 255 { 0xff -1 } : BV:8
67 : eq(60, 56) : BOOL
68 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
69 : eq(60, 68) : BOOL
70 : 247 { 0xf7 -9 } : BV:8
71 : eq(60, 18) : BOOL
72 : 251 { 0xfb -5 } : BV:8
73 : eq(60, 2) : BOOL
74 : 123 { 0x7b } : BV:8
75 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
76 : eq(60, 75) : BOOL
77 : 126 { 0x7e } : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 239 { 0xef -17 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 72, 84) : BV:8
86 : ite(69, 70, 85) : BV:8
87 : ite(67, 66, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(78, 59) : BV:32
91 : eq(90, 61) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 56) : BOOL
94 : eq(90, 68) : BOOL
95 : eq(90, 18) : BOOL
96 : eq(90, 2) : BOOL
97 : eq(90, 75) : BOOL
98 : eq(90, 78) : BOOL
99 : ite(98, 80, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 74, 100) : BV:8
102 : ite(95, 72, 101) : BV:8
103 : ite(94, 70, 102) : BV:8
104 : ite(93, 66, 103) : BV:8
105 : ite(92, 66, 104) : BV:8
106 : ite(91, 63, 105) : BV:8
107 : bvadd(64, 59) : BV:32
108 : eq(107, 61) : BOOL
109 : eq(107, 64) : BOOL
110 : eq(107, 56) : BOOL
111 : eq(107, 68) : BOOL
112 : eq(107, 18) : BOOL
113 : eq(107, 2) : BOOL
114 : eq(107, 75) : BOOL
115 : eq(107, 78) : BOOL
116 : ite(115, 80, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 74, 117) : BV:8
119 : ite(112, 72, 118) : BV:8
120 : ite(111, 70, 119) : BV:8
121 : ite(110, 66, 120) : BV:8
122 : ite(109, 66, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : eq(59, 61) : BOOL
125 : eq(59, 64) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 68) : BOOL
128 : eq(59, 18) : BOOL
129 : eq(59, 2) : BOOL
130 : eq(59, 75) : BOOL
131 : eq(59, 78) : BOOL
132 : ite(131, 80, 81) : BV:8
133 : ite(130, 77, 132) : BV:8
134 : ite(129, 74, 133) : BV:8
135 : ite(128, 72, 134) : BV:8
136 : ite(127, 70, 135) : BV:8
137 : ite(126, 66, 136) : BV:8
138 : ite(125, 66, 137) : BV:8
139 : ite(124, 63, 138) : BV:8
140 : bvconcat(89, 106, 123, 139) : BV:32
141 : bvadd(56, 58, 140) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 56) : BOOL
145 : eq(141, 68) : BOOL
146 : eq(141, 18) : BOOL
147 : eq(141, 2) : BOOL
148 : eq(141, 75) : BOOL
149 : eq(141, 78) : BOOL
150 : ite(149, 80, 81) : BV:8
151 : ite(148, 77, 150) : BV:8
152 : ite(147, 74, 151) : BV:8
153 : ite(146, 72, 152) : BV:8
154 : ite(145, 70, 153) : BV:8
155 : ite(144, 66, 154) : BV:8
156 : ite(143, 66, 155) : BV:8
157 : ite(142, 63, 156) : BV:8
158 : bvadd(78, 58, 140) : BV:32
159 : eq(158, 61) : BOOL
160 : eq(158, 64) : BOOL
161 : eq(158, 56) : BOOL
162 : eq(158, 68) : BOOL
163 : eq(158, 18) : BOOL
164 : eq(158, 2) : BOOL
165 : eq(158, 75) : BOOL
166 : eq(158, 78) : BOOL
167 : ite(166, 80, 81) : BV:8
168 : ite(165, 77, 167) : BV:8
169 : ite(164, 74, 168) : BV:8
170 : ite(163, 72, 169) : BV:8
171 : ite(162, 70, 170) : BV:8
172 : ite(161, 66, 171) : BV:8
173 : ite(160, 66, 172) : BV:8
174 : ite(159, 63, 173) : BV:8
175 : bvadd(64, 58, 140) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 64) : BOOL
178 : eq(175, 56) : BOOL
179 : eq(175, 68) : BOOL
180 : eq(175, 18) : BOOL
181 : eq(175, 2) : BOOL
182 : eq(175, 75) : BOOL
183 : eq(175, 78) : BOOL
184 : ite(183, 80, 81) : BV:8
185 : ite(182, 77, 184) : BV:8
186 : ite(181, 74, 185) : BV:8
187 : ite(180, 72, 186) : BV:8
188 : ite(179, 70, 187) : BV:8
189 : ite(178, 66, 188) : BV:8
190 : ite(177, 66, 189) : BV:8
191 : ite(176, 63, 190) : BV:8
192 : bvadd(58, 140) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 56) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 18) : BOOL
198 : eq(192, 2) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 78) : BOOL
201 : ite(200, 80, 81) : BV:8
202 : ite(199, 77, 201) : BV:8
203 : ite(198, 74, 202) : BV:8
204 : ite(197, 72, 203) : BV:8
205 : ite(196, 70, 204) : BV:8
206 : ite(195, 66, 205) : BV:8
207 : ite(194, 66, 206) : BV:8
208 : ite(193, 63, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(55, 2, 209) : BV:32
211 : ite(53, 2, 210) : BV:32
212 : lambda(50, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(49, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 288358384 { 0x112ffff0 +1.37499809e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 288358387 { 0x112ffff3 +1.37499845e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2511683592 { 0x95b54008 -1783283704 -1.41601657e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2511683595 { 0x95b5400b -1783283701 -1.41601693e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3359014932 { 0xc8368014 -935952364 -1.42578363e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3359014935 { 0xc8368017 -935952361 -1.42578399e17 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda39463Var : BV:32
2 : Lambda39464Var : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : 511 { 0x1ff +1.6091e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 512 { 0x200 +1.6103e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 513 { 0x201 +1.6115e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 3) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : ite(54, 14, 57) : BOOL
59 : and(22, 58) : BOOL
60 : 3 { 0x3 +1.35e129 } : BV:32
61 : 4 { 0x4 +1.47e129 } : BV:32
62 : bvmul(61, 2) : BV:32
63 : bvmul(61, 1) : BV:32
64 : bvadd(60, 63) : BV:32
65 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
66 : eq(64, 65) : BOOL
67 : 244 { 0xf4 -12 } : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : eq(64, 68) : BOOL
70 : 255 { 0xff -1 } : BV:8
71 : eq(64, 60) : BOOL
72 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
73 : eq(64, 72) : BOOL
74 : 247 { 0xf7 -9 } : BV:8
75 : eq(64, 17) : BOOL
76 : 251 { 0xfb -5 } : BV:8
77 : eq(64, 5) : BOOL
78 : 123 { 0x7b } : BV:8
79 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
80 : eq(64, 79) : BOOL
81 : 126 { 0x7e } : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : eq(64, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(75, 76, 88) : BV:8
90 : ite(73, 74, 89) : BV:8
91 : ite(71, 70, 90) : BV:8
92 : ite(69, 70, 91) : BV:8
93 : ite(66, 67, 92) : BV:8
94 : bvadd(82, 63) : BV:32
95 : eq(94, 65) : BOOL
96 : eq(94, 68) : BOOL
97 : eq(94, 60) : BOOL
98 : eq(94, 72) : BOOL
99 : eq(94, 17) : BOOL
100 : eq(94, 5) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 76, 105) : BV:8
107 : ite(98, 74, 106) : BV:8
108 : ite(97, 70, 107) : BV:8
109 : ite(96, 70, 108) : BV:8
110 : ite(95, 67, 109) : BV:8
111 : bvadd(68, 63) : BV:32
112 : eq(111, 65) : BOOL
113 : eq(111, 68) : BOOL
114 : eq(111, 60) : BOOL
115 : eq(111, 72) : BOOL
116 : eq(111, 17) : BOOL
117 : eq(111, 5) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 76, 122) : BV:8
124 : ite(115, 74, 123) : BV:8
125 : ite(114, 70, 124) : BV:8
126 : ite(113, 70, 125) : BV:8
127 : ite(112, 67, 126) : BV:8
128 : eq(63, 65) : BOOL
129 : eq(63, 68) : BOOL
130 : eq(63, 60) : BOOL
131 : eq(63, 72) : BOOL
132 : eq(63, 17) : BOOL
133 : eq(63, 5) : BOOL
134 : eq(63, 79) : BOOL
135 : eq(63, 82) : BOOL
136 : ite(135, 84, 85) : BV:8
137 : ite(134, 81, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 76, 138) : BV:8
140 : ite(131, 74, 139) : BV:8
141 : ite(130, 70, 140) : BV:8
142 : ite(129, 70, 141) : BV:8
143 : ite(128, 67, 142) : BV:8
144 : bvconcat(93, 110, 127, 143) : BV:32
145 : bvadd(60, 62, 144) : BV:32
146 : eq(145, 65) : BOOL
147 : eq(145, 68) : BOOL
148 : eq(145, 60) : BOOL
149 : eq(145, 72) : BOOL
150 : eq(145, 17) : BOOL
151 : eq(145, 5) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 82) : BOOL
154 : ite(153, 84, 85) : BV:8
155 : ite(152, 81, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 76, 156) : BV:8
158 : ite(149, 74, 157) : BV:8
159 : ite(148, 70, 158) : BV:8
160 : ite(147, 70, 159) : BV:8
161 : ite(146, 67, 160) : BV:8
162 : bvadd(82, 62, 144) : BV:32
163 : eq(162, 65) : BOOL
164 : eq(162, 68) : BOOL
165 : eq(162, 60) : BOOL
166 : eq(162, 72) : BOOL
167 : eq(162, 17) : BOOL
168 : eq(162, 5) : BOOL
169 : eq(162, 79) : BOOL
170 : eq(162, 82) : BOOL
171 : ite(170, 84, 85) : BV:8
172 : ite(169, 81, 171) : BV:8
173 : ite(168, 78, 172) : BV:8
174 : ite(167, 76, 173) : BV:8
175 : ite(166, 74, 174) : BV:8
176 : ite(165, 70, 175) : BV:8
177 : ite(164, 70, 176) : BV:8
178 : ite(163, 67, 177) : BV:8
179 : bvadd(68, 62, 144) : BV:32
180 : eq(179, 65) : BOOL
181 : eq(179, 68) : BOOL
182 : eq(179, 60) : BOOL
183 : eq(179, 72) : BOOL
184 : eq(179, 17) : BOOL
185 : eq(179, 5) : BOOL
186 : eq(179, 79) : BOOL
187 : eq(179, 82) : BOOL
188 : ite(187, 84, 85) : BV:8
189 : ite(186, 81, 188) : BV:8
190 : ite(185, 78, 189) : BV:8
191 : ite(184, 76, 190) : BV:8
192 : ite(183, 74, 191) : BV:8
193 : ite(182, 70, 192) : BV:8
194 : ite(181, 70, 193) : BV:8
195 : ite(180, 67, 194) : BV:8
196 : bvadd(62, 144) : BV:32
197 : eq(196, 65) : BOOL
198 : eq(196, 68) : BOOL
199 : eq(196, 60) : BOOL
200 : eq(196, 72) : BOOL
201 : eq(196, 17) : BOOL
202 : eq(196, 5) : BOOL
203 : eq(196, 79) : BOOL
204 : eq(196, 82) : BOOL
205 : ite(204, 84, 85) : BV:8
206 : ite(203, 81, 205) : BV:8
207 : ite(202, 78, 206) : BV:8
208 : ite(201, 76, 207) : BV:8
209 : ite(200, 74, 208) : BV:8
210 : ite(199, 70, 209) : BV:8
211 : ite(198, 70, 210) : BV:8
212 : ite(197, 67, 211) : BV:8
213 : bvconcat(161, 178, 195, 212) : BV:32
214 : ite(9, 5, 213) : BV:32
215 : ite(7, 5, 214) : BV:32
216 : ite(59, 213, 215) : BV:32
217 : ite(9, 5, 216) : BV:32
218 : ite(7, 5, 217) : BV:32
219 : lambda(1, 2, 218) : FUNCTION[BV:32,BV:32 -> BV:32]
220 : sym_const(219) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda39468Var : BV:32
2 : Lambda39469Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 511 { 0x1ff +1.6091e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 512 { 0x200 +1.6103e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 513 { 0x201 +1.6115e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4016830071 ] -> true, [ 4016830072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4016830071 ] -> true, [ 4016830072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda39477Var : BV:32
2 : Lambda39478Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 511 { 0x1ff +1.6091e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 512 { 0x200 +1.6103e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 513 { 0x201 +1.6115e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda39473Var : BV:32
2 : Lambda39474Var : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
16 : eq(14, 15) : BOOL
17 : 244 { 0xf4 -12 } : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(14, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : eq(14, 10) : BOOL
22 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
23 : eq(14, 22) : BOOL
24 : 247 { 0xf7 -9 } : BV:8
25 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
26 : eq(14, 25) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : eq(14, 5) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : eq(14, 30) : BOOL
32 : 126 { 0x7e } : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : eq(14, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(23, 24, 40) : BV:8
42 : ite(21, 20, 41) : BV:8
43 : ite(19, 20, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : bvadd(33, 13) : BV:32
46 : eq(45, 15) : BOOL
47 : eq(45, 18) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : eq(45, 5) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 27, 56) : BV:8
58 : ite(49, 24, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 20, 59) : BV:8
61 : ite(46, 17, 60) : BV:8
62 : bvadd(18, 13) : BV:32
63 : eq(62, 15) : BOOL
64 : eq(62, 18) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 22) : BOOL
67 : eq(62, 25) : BOOL
68 : eq(62, 5) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 27, 73) : BV:8
75 : ite(66, 24, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 20, 76) : BV:8
78 : ite(63, 17, 77) : BV:8
79 : eq(13, 15) : BOOL
80 : eq(13, 18) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 22) : BOOL
83 : eq(13, 25) : BOOL
84 : eq(13, 5) : BOOL
85 : eq(13, 30) : BOOL
86 : eq(13, 33) : BOOL
87 : ite(86, 35, 36) : BV:8
88 : ite(85, 32, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 27, 89) : BV:8
91 : ite(82, 24, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 20, 92) : BV:8
94 : ite(79, 17, 93) : BV:8
95 : bvconcat(44, 61, 78, 94) : BV:32
96 : bvadd(10, 12, 95) : BV:32
97 : eq(96, 15) : BOOL
98 : eq(96, 18) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 22) : BOOL
101 : eq(96, 25) : BOOL
102 : eq(96, 5) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 33) : BOOL
105 : ite(104, 35, 36) : BV:8
106 : ite(103, 32, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 27, 107) : BV:8
109 : ite(100, 24, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 20, 110) : BV:8
112 : ite(97, 17, 111) : BV:8
113 : bvadd(33, 12, 95) : BV:32
114 : eq(113, 15) : BOOL
115 : eq(113, 18) : BOOL
116 : eq(113, 10) : BOOL
117 : eq(113, 22) : BOOL
118 : eq(113, 25) : BOOL
119 : eq(113, 5) : BOOL
120 : eq(113, 30) : BOOL
121 : eq(113, 33) : BOOL
122 : ite(121, 35, 36) : BV:8
123 : ite(120, 32, 122) : BV:8
124 : ite(119, 29, 123) : BV:8
125 : ite(118, 27, 124) : BV:8
126 : ite(117, 24, 125) : BV:8
127 : ite(116, 20, 126) : BV:8
128 : ite(115, 20, 127) : BV:8
129 : ite(114, 17, 128) : BV:8
130 : bvadd(18, 12, 95) : BV:32
131 : eq(130, 15) : BOOL
132 : eq(130, 18) : BOOL
133 : eq(130, 10) : BOOL
134 : eq(130, 22) : BOOL
135 : eq(130, 25) : BOOL
136 : eq(130, 5) : BOOL
137 : eq(130, 30) : BOOL
138 : eq(130, 33) : BOOL
139 : ite(138, 35, 36) : BV:8
140 : ite(137, 32, 139) : BV:8
141 : ite(136, 29, 140) : BV:8
142 : ite(135, 27, 141) : BV:8
143 : ite(134, 24, 142) : BV:8
144 : ite(133, 20, 143) : BV:8
145 : ite(132, 20, 144) : BV:8
146 : ite(131, 17, 145) : BV:8
147 : bvadd(12, 95) : BV:32
148 : eq(147, 15) : BOOL
149 : eq(147, 18) : BOOL
150 : eq(147, 10) : BOOL
151 : eq(147, 22) : BOOL
152 : eq(147, 25) : BOOL
153 : eq(147, 5) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : ite(155, 35, 36) : BV:8
157 : ite(154, 32, 156) : BV:8
158 : ite(153, 29, 157) : BV:8
159 : ite(152, 27, 158) : BV:8
160 : ite(151, 24, 159) : BV:8
161 : ite(150, 20, 160) : BV:8
162 : ite(149, 20, 161) : BV:8
163 : ite(148, 17, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : ite(9, 5, 164) : BV:32
166 : ite(7, 5, 165) : BV:32
167 : lambda(1, 2, 166) : FUNCTION[BV:32,BV:32 -> BV:32]
168 : sym_const(167) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2097605966
=counter_example_end
=global nodece 34 num_edges_traversed 1
=global nodece 34 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 35
=global nodece 35 nodece z3v487.ce3847.num_edges_traversed1
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3v487.ce3847 fa15ee66baa395fb1e65a37834fcb8fa
=input.spec-%var-x-1
1 : Lambda41308Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41309Var : BV:32
18 : Lambda41310Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda41311Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda41341Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41342Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483656; 2214592511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2214592512; 2214592515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2214592516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda41333Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41334Var : BV:32
18 : Lambda41335Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda41336Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda41318Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda41319Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 72549480 { 0x4530468 +1.64857196e137 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda41347Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41348Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2088806359 { 0x7c80a7d7 +1.512206e122 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2214592515 { 0x84000003 -2080374781 -1.35e137 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
345238201
=counter_example_end
=global nodece 35 num_edges_traversed 1
=global nodece 35 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 36
=global nodece 36 nodece z3v487.ce3893.num_edges_traversed1
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce3893 5aa679e5b7fc315ff67ef4d0a1ee49c7
=input.spec-%var-x-1
1 : Lambda42453Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2686003455 { 0xa01928ff -1608963841 -1.19656360e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2686003456 { 0xa0192900 -1608963840 -1.19656372e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42454Var : BV:32
18 : Lambda42455Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda42456Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2150930433 { 0x80349801 -2144036863 -1.41088879e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42568Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda42569Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3498706859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3498706860; 3498706863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3498706864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3498706860 { 0xd08a07ac -796260436 -1.7835912e34 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2686003456 { 0xa0192900 -1608963840 -1.19656372e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42470Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2686003455 { 0xa01928ff -1608963841 -1.19656360e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2686003456 { 0xa0192900 -1608963840 -1.19656372e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42471Var : BV:32
18 : Lambda42472Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda42473Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2150930433 { 0x80349801 -2144036863 -1.41088879e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2686003455 { 0xa01928ff -1608963841 -1.19656360e193 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2686003456 { 0xa0192900 -1608963840 -1.19656372e193 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda42558Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda42559Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2150930433 { 0x80349801 -2144036863 -1.41088879e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2150930434 { 0x80349802 -2144036862 -1.41088891e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42574Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda42575Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2150930433 { 0x80349801 -2144036863 -1.41088879e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3498706860 { 0xd08a07ac -796260436 -1.7835912e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3498706863 { 0xd08a07af -796260433 -1.7835948e34 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2686003455 ] -> true, [ 2686003456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2686003455 ] -> true, [ 2686003456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4007919782
=counter_example_end
=global nodece 36 num_edges_traversed 1
=global nodece 36 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 37
=global nodece 37 nodece z3v487.ce3927.num_edges_traversed2
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(epsilon)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3v487.ce3927 559f83f315512492c35fcca02264bd
=input.spec-%var-x-1
1 : Lambda42453Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2686003455 { 0xa01928ff -1608963841 -1.19656360e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2686003456 { 0xa0192900 -1608963840 -1.19656372e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42454Var : BV:32
18 : Lambda42455Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda42456Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2150930434 { 0x80349802 -2144036862 -1.41088891e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3498706859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3498706860; 3498706863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3498706864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3498706860 { 0xd08a07ac -796260436 -1.7835912e34 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2686003456 { 0xa0192900 -1608963840 -1.19656372e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42470Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2686003455 { 0xa01928ff -1608963841 -1.19656360e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2686003456 { 0xa0192900 -1608963840 -1.19656372e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42471Var : BV:32
18 : Lambda42472Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda42473Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1470953897 { 0x57acf9a9 +1.35136902e48 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2150930434 { 0x80349802 -2144036862 -1.41088891e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1521697729 { 0x5ab343c1 +1.40050518e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3498706860 { 0xd08a07ac -796260436 -1.7835912e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3498706863 { 0xd08a07af -796260433 -1.7835948e34 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2686003455 ] -> true, [ 2686003456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2686003455 ] -> true, [ 2686003456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
250053422
=counter_example_end
=global nodece 37 num_edges_traversed 2
=global nodece 37 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 38
=global nodece 38 nodece z3.ce3977.num_edges_traversed1
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce3977 29dd906833cfefc5c8bd04e36748723
=input.spec-%var-x-1
1 : Lambda42885Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42886Var : BV:32
17 : Lambda42887Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda42888Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : and(18, 26) : BOOL
60 : ite(24, 12, 12) : BOOL
61 : ite(59, 7, 60) : BOOL
62 : bvule(2, 53) : BOOL
63 : bvule(53, 2) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(35, 53) : BOOL
66 : bvule(53, 35) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(39, 53) : BOOL
69 : bvule(53, 8) : BOOL
70 : and(68, 69) : BOOL
71 : ite(70, 39, 39) : BV:32
72 : ite(67, 35, 71) : BV:32
73 : ite(64, 2, 72) : BV:32
74 : eq(73, 2) : BOOL
75 : and(31, 74) : BOOL
76 : and(48, 74) : BOOL
77 : ite(76, 7, 12) : BOOL
78 : ite(75, 7, 77) : BOOL
79 : and(61, 78) : BOOL
80 : 3 { 0x3 +1.35e129 } : BV:32
81 : 4 { 0x4 +1.47e129 } : BV:32
82 : bvmul(81, 53) : BV:32
83 : bvmul(81, 16) : BV:32
84 : bvadd(80, 83) : BV:32
85 : eq(84, 2) : BOOL
86 : 168 { 0xa8 -88 } : BV:8
87 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
88 : eq(84, 87) : BOOL
89 : 235 { 0xeb -21 } : BV:8
90 : eq(84, 80) : BOOL
91 : 27 { 0x1b } : BV:8
92 : eq(84, 35) : BOOL
93 : 223 { 0xdf -33 } : BV:8
94 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
95 : eq(84, 94) : BOOL
96 : 68 { 0x44 } : BV:8
97 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
98 : eq(84, 97) : BOOL
99 : 114 { 0x72 } : BV:8
100 : eq(84, 39) : BOOL
101 : 104 { 0x68 } : BV:8
102 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
103 : eq(84, 102) : BOOL
104 : 164 { 0xa4 -92 } : BV:8
105 : 0 { 0x0 } : BV:8
106 : ite(103, 104, 105) : BV:8
107 : ite(100, 101, 106) : BV:8
108 : ite(98, 99, 107) : BV:8
109 : ite(95, 96, 108) : BV:8
110 : ite(92, 93, 109) : BV:8
111 : ite(90, 91, 110) : BV:8
112 : ite(88, 89, 111) : BV:8
113 : ite(85, 86, 112) : BV:8
114 : bvadd(39, 83) : BV:32
115 : eq(114, 2) : BOOL
116 : eq(114, 87) : BOOL
117 : eq(114, 80) : BOOL
118 : eq(114, 35) : BOOL
119 : eq(114, 94) : BOOL
120 : eq(114, 97) : BOOL
121 : eq(114, 39) : BOOL
122 : eq(114, 102) : BOOL
123 : ite(122, 104, 105) : BV:8
124 : ite(121, 101, 123) : BV:8
125 : ite(120, 99, 124) : BV:8
126 : ite(119, 96, 125) : BV:8
127 : ite(118, 93, 126) : BV:8
128 : ite(117, 91, 127) : BV:8
129 : ite(116, 89, 128) : BV:8
130 : ite(115, 86, 129) : BV:8
131 : bvadd(35, 83) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 87) : BOOL
134 : eq(131, 80) : BOOL
135 : eq(131, 35) : BOOL
136 : eq(131, 94) : BOOL
137 : eq(131, 97) : BOOL
138 : eq(131, 39) : BOOL
139 : eq(131, 102) : BOOL
140 : ite(139, 104, 105) : BV:8
141 : ite(138, 101, 140) : BV:8
142 : ite(137, 99, 141) : BV:8
143 : ite(136, 96, 142) : BV:8
144 : ite(135, 93, 143) : BV:8
145 : ite(134, 91, 144) : BV:8
146 : ite(133, 89, 145) : BV:8
147 : ite(132, 86, 146) : BV:8
148 : eq(83, 2) : BOOL
149 : eq(83, 87) : BOOL
150 : eq(83, 80) : BOOL
151 : eq(83, 35) : BOOL
152 : eq(83, 94) : BOOL
153 : eq(83, 97) : BOOL
154 : eq(83, 39) : BOOL
155 : eq(83, 102) : BOOL
156 : ite(155, 104, 105) : BV:8
157 : ite(154, 101, 156) : BV:8
158 : ite(153, 99, 157) : BV:8
159 : ite(152, 96, 158) : BV:8
160 : ite(151, 93, 159) : BV:8
161 : ite(150, 91, 160) : BV:8
162 : ite(149, 89, 161) : BV:8
163 : ite(148, 86, 162) : BV:8
164 : bvconcat(113, 130, 147, 163) : BV:32
165 : bvadd(80, 82, 164) : BV:32
166 : eq(165, 2) : BOOL
167 : eq(165, 87) : BOOL
168 : eq(165, 80) : BOOL
169 : eq(165, 35) : BOOL
170 : eq(165, 94) : BOOL
171 : eq(165, 97) : BOOL
172 : eq(165, 39) : BOOL
173 : eq(165, 102) : BOOL
174 : ite(173, 104, 105) : BV:8
175 : ite(172, 101, 174) : BV:8
176 : ite(171, 99, 175) : BV:8
177 : ite(170, 96, 176) : BV:8
178 : ite(169, 93, 177) : BV:8
179 : ite(168, 91, 178) : BV:8
180 : ite(167, 89, 179) : BV:8
181 : ite(166, 86, 180) : BV:8
182 : bvadd(39, 82, 164) : BV:32
183 : eq(182, 2) : BOOL
184 : eq(182, 87) : BOOL
185 : eq(182, 80) : BOOL
186 : eq(182, 35) : BOOL
187 : eq(182, 94) : BOOL
188 : eq(182, 97) : BOOL
189 : eq(182, 39) : BOOL
190 : eq(182, 102) : BOOL
191 : ite(190, 104, 105) : BV:8
192 : ite(189, 101, 191) : BV:8
193 : ite(188, 99, 192) : BV:8
194 : ite(187, 96, 193) : BV:8
195 : ite(186, 93, 194) : BV:8
196 : ite(185, 91, 195) : BV:8
197 : ite(184, 89, 196) : BV:8
198 : ite(183, 86, 197) : BV:8
199 : bvadd(35, 82, 164) : BV:32
200 : eq(199, 2) : BOOL
201 : eq(199, 87) : BOOL
202 : eq(199, 80) : BOOL
203 : eq(199, 35) : BOOL
204 : eq(199, 94) : BOOL
205 : eq(199, 97) : BOOL
206 : eq(199, 39) : BOOL
207 : eq(199, 102) : BOOL
208 : ite(207, 104, 105) : BV:8
209 : ite(206, 101, 208) : BV:8
210 : ite(205, 99, 209) : BV:8
211 : ite(204, 96, 210) : BV:8
212 : ite(203, 93, 211) : BV:8
213 : ite(202, 91, 212) : BV:8
214 : ite(201, 89, 213) : BV:8
215 : ite(200, 86, 214) : BV:8
216 : bvadd(82, 164) : BV:32
217 : eq(216, 2) : BOOL
218 : eq(216, 87) : BOOL
219 : eq(216, 80) : BOOL
220 : eq(216, 35) : BOOL
221 : eq(216, 94) : BOOL
222 : eq(216, 97) : BOOL
223 : eq(216, 39) : BOOL
224 : eq(216, 102) : BOOL
225 : ite(224, 104, 105) : BV:8
226 : ite(223, 101, 225) : BV:8
227 : ite(222, 99, 226) : BV:8
228 : ite(221, 96, 227) : BV:8
229 : ite(220, 93, 228) : BV:8
230 : ite(219, 91, 229) : BV:8
231 : ite(218, 89, 230) : BV:8
232 : ite(217, 86, 231) : BV:8
233 : bvconcat(181, 198, 215, 232) : BV:32
234 : ite(58, 2, 233) : BV:32
235 : ite(56, 2, 234) : BV:32
236 : ite(79, 233, 235) : BV:32
237 : ite(58, 2, 236) : BV:32
238 : ite(56, 2, 237) : BV:32
239 : lambda(53, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(52, 239) : MAP[BV:32 -> BV:32]
241 : lambda(16, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(15, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42992Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda42993Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 223, [ 2; 2 ] -> 104, [ 3; 3 ] -> 27, [ 4; 4294967287 ] -> 0, [ 4294967288; 4294967288 ] -> 164, [ 4294967289; 4294967289 ] -> 114, [ 4294967290; 4294967290 ] -> 235, [ 4294967291; 4294967291 ] -> 68, [ 4294967292; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 740395007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 740395008; 740395011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 740395012; 1061322755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1061322756; 1061322759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1061322760; 3663098495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3663098496; 3663098499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3663098500; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42898Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42899Var : BV:32
17 : Lambda42900Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda42901Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 53) : BV:32
62 : bvmul(60, 16) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 2) : BOOL
65 : 168 { 0xa8 -88 } : BV:8
66 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
67 : eq(63, 66) : BOOL
68 : 235 { 0xeb -21 } : BV:8
69 : eq(63, 59) : BOOL
70 : 27 { 0x1b } : BV:8
71 : eq(63, 35) : BOOL
72 : 223 { 0xdf -33 } : BV:8
73 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
74 : eq(63, 73) : BOOL
75 : 68 { 0x44 } : BV:8
76 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
77 : eq(63, 76) : BOOL
78 : 114 { 0x72 } : BV:8
79 : eq(63, 39) : BOOL
80 : 104 { 0x68 } : BV:8
81 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
82 : eq(63, 81) : BOOL
83 : 164 { 0xa4 -92 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : bvadd(39, 62) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 66) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 35) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 39) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 70, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 65, 108) : BV:8
110 : bvadd(35, 62) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 66) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 35) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 39) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 70, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 65, 125) : BV:8
127 : eq(62, 2) : BOOL
128 : eq(62, 66) : BOOL
129 : eq(62, 59) : BOOL
130 : eq(62, 35) : BOOL
131 : eq(62, 73) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 39) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 72, 138) : BV:8
140 : ite(129, 70, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 65, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 2) : BOOL
146 : eq(144, 66) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 35) : BOOL
149 : eq(144, 73) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 39) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 72, 156) : BV:8
158 : ite(147, 70, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 65, 159) : BV:8
161 : bvadd(39, 61, 143) : BV:32
162 : eq(161, 2) : BOOL
163 : eq(161, 66) : BOOL
164 : eq(161, 59) : BOOL
165 : eq(161, 35) : BOOL
166 : eq(161, 73) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 39) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 72, 173) : BV:8
175 : ite(164, 70, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 65, 176) : BV:8
178 : bvadd(35, 61, 143) : BV:32
179 : eq(178, 2) : BOOL
180 : eq(178, 66) : BOOL
181 : eq(178, 59) : BOOL
182 : eq(178, 35) : BOOL
183 : eq(178, 73) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 39) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 72, 190) : BV:8
192 : ite(181, 70, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 65, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 2) : BOOL
197 : eq(195, 66) : BOOL
198 : eq(195, 59) : BOOL
199 : eq(195, 35) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 39) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 72, 207) : BV:8
209 : ite(198, 70, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 65, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(58, 2, 212) : BV:32
214 : ite(56, 2, 213) : BV:32
215 : lambda(53, 214) : FUNCTION[BV:32 -> BV:32]
216 : map(52, 215) : MAP[BV:32 -> BV:32]
217 : lambda(16, 216) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
218 : map(15, 217) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
219 : sym_const(218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda42982Var : BV:32
18 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
19 : bvule(2, 18) : BOOL
20 : and(3, 19) : BOOL
21 : and(4, 4) : BOOL
22 : ite(21, 2, 2) : BV:32
23 : ite(10, 7, 22) : BV:32
24 : ite(20, 1, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(1, 17) : BOOL
27 : bvule(17, 1) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(14, 17) : BOOL
30 : bvule(17, 14) : BOOL
31 : and(29, 30) : BOOL
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvule(32, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 14, 36) : BV:32
38 : ite(28, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(25, 39) : BOOL
41 : eq(24, 1) : BOOL
42 : and(41, 39) : BOOL
43 : ite(42, 6, 11) : BOOL
44 : ite(40, 6, 43) : BOOL
45 : lambda(17, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda42983Var : BV:32
47 : eq(2, 2) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : eq(2, 1) : BOOL
51 : and(50, 48) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 46) : BV:32
55 : bvmul(53, 2) : BV:32
56 : bvadd(52, 55) : BV:32
57 : eq(56, 1) : BOOL
58 : 168 { 0xa8 -88 } : BV:8
59 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
60 : eq(56, 59) : BOOL
61 : 235 { 0xeb -21 } : BV:8
62 : eq(56, 52) : BOOL
63 : 27 { 0x1b } : BV:8
64 : eq(56, 14) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
67 : eq(56, 66) : BOOL
68 : 68 { 0x44 } : BV:8
69 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
70 : eq(56, 69) : BOOL
71 : 114 { 0x72 } : BV:8
72 : eq(56, 32) : BOOL
73 : 104 { 0x68 } : BV:8
74 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
75 : eq(56, 74) : BOOL
76 : 164 { 0xa4 -92 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(70, 71, 79) : BV:8
81 : ite(67, 68, 80) : BV:8
82 : ite(64, 65, 81) : BV:8
83 : ite(62, 63, 82) : BV:8
84 : ite(60, 61, 83) : BV:8
85 : ite(57, 58, 84) : BV:8
86 : bvadd(32, 55) : BV:32
87 : eq(86, 1) : BOOL
88 : eq(86, 59) : BOOL
89 : eq(86, 52) : BOOL
90 : eq(86, 14) : BOOL
91 : eq(86, 66) : BOOL
92 : eq(86, 69) : BOOL
93 : eq(86, 32) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 71, 96) : BV:8
98 : ite(91, 68, 97) : BV:8
99 : ite(90, 65, 98) : BV:8
100 : ite(89, 63, 99) : BV:8
101 : ite(88, 61, 100) : BV:8
102 : ite(87, 58, 101) : BV:8
103 : bvadd(14, 55) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 59) : BOOL
106 : eq(103, 52) : BOOL
107 : eq(103, 14) : BOOL
108 : eq(103, 66) : BOOL
109 : eq(103, 69) : BOOL
110 : eq(103, 32) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 71, 113) : BV:8
115 : ite(108, 68, 114) : BV:8
116 : ite(107, 65, 115) : BV:8
117 : ite(106, 63, 116) : BV:8
118 : ite(105, 61, 117) : BV:8
119 : ite(104, 58, 118) : BV:8
120 : eq(55, 1) : BOOL
121 : eq(55, 59) : BOOL
122 : eq(55, 52) : BOOL
123 : eq(55, 14) : BOOL
124 : eq(55, 66) : BOOL
125 : eq(55, 69) : BOOL
126 : eq(55, 32) : BOOL
127 : eq(55, 74) : BOOL
128 : ite(127, 76, 77) : BV:8
129 : ite(126, 73, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : ite(124, 68, 130) : BV:8
132 : ite(123, 65, 131) : BV:8
133 : ite(122, 63, 132) : BV:8
134 : ite(121, 61, 133) : BV:8
135 : ite(120, 58, 134) : BV:8
136 : bvconcat(85, 102, 119, 135) : BV:32
137 : bvadd(52, 54, 136) : BV:32
138 : eq(137, 1) : BOOL
139 : eq(137, 59) : BOOL
140 : eq(137, 52) : BOOL
141 : eq(137, 14) : BOOL
142 : eq(137, 66) : BOOL
143 : eq(137, 69) : BOOL
144 : eq(137, 32) : BOOL
145 : eq(137, 74) : BOOL
146 : ite(145, 76, 77) : BV:8
147 : ite(144, 73, 146) : BV:8
148 : ite(143, 71, 147) : BV:8
149 : ite(142, 68, 148) : BV:8
150 : ite(141, 65, 149) : BV:8
151 : ite(140, 63, 150) : BV:8
152 : ite(139, 61, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : bvadd(32, 54, 136) : BV:32
155 : eq(154, 1) : BOOL
156 : eq(154, 59) : BOOL
157 : eq(154, 52) : BOOL
158 : eq(154, 14) : BOOL
159 : eq(154, 66) : BOOL
160 : eq(154, 69) : BOOL
161 : eq(154, 32) : BOOL
162 : eq(154, 74) : BOOL
163 : ite(162, 76, 77) : BV:8
164 : ite(161, 73, 163) : BV:8
165 : ite(160, 71, 164) : BV:8
166 : ite(159, 68, 165) : BV:8
167 : ite(158, 65, 166) : BV:8
168 : ite(157, 63, 167) : BV:8
169 : ite(156, 61, 168) : BV:8
170 : ite(155, 58, 169) : BV:8
171 : bvadd(14, 54, 136) : BV:32
172 : eq(171, 1) : BOOL
173 : eq(171, 59) : BOOL
174 : eq(171, 52) : BOOL
175 : eq(171, 14) : BOOL
176 : eq(171, 66) : BOOL
177 : eq(171, 69) : BOOL
178 : eq(171, 32) : BOOL
179 : eq(171, 74) : BOOL
180 : ite(179, 76, 77) : BV:8
181 : ite(178, 73, 180) : BV:8
182 : ite(177, 71, 181) : BV:8
183 : ite(176, 68, 182) : BV:8
184 : ite(175, 65, 183) : BV:8
185 : ite(174, 63, 184) : BV:8
186 : ite(173, 61, 185) : BV:8
187 : ite(172, 58, 186) : BV:8
188 : bvadd(54, 136) : BV:32
189 : eq(188, 1) : BOOL
190 : eq(188, 59) : BOOL
191 : eq(188, 52) : BOOL
192 : eq(188, 14) : BOOL
193 : eq(188, 66) : BOOL
194 : eq(188, 69) : BOOL
195 : eq(188, 32) : BOOL
196 : eq(188, 74) : BOOL
197 : ite(196, 76, 77) : BV:8
198 : ite(195, 73, 197) : BV:8
199 : ite(194, 71, 198) : BV:8
200 : ite(193, 68, 199) : BV:8
201 : ite(192, 65, 200) : BV:8
202 : ite(191, 63, 201) : BV:8
203 : ite(190, 61, 202) : BV:8
204 : ite(189, 58, 203) : BV:8
205 : bvconcat(153, 170, 187, 204) : BV:32
206 : ite(51, 1, 205) : BV:32
207 : ite(49, 1, 206) : BV:32
208 : lambda(46, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(45, 208) : MAP[BV:32 -> BV:32]
210 : sum(15, 16, 209) : SUM[UNIT,MAP[BV:32 -> BV:32]]
211 : sym_const(210) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42998Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda42999Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3663098499 { 0xda567283 -631868797 -1.67536962e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 740395011 { 0x2c218803 +1.26196324e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1061322759 { 0x3f428007 +1.51953208e255 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda42815Var : BV:32
2 : Lambda42816Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : bvule(1, 3) : BOOL
12 : and(10, 11) : BOOL
13 : 1 { 0x1 } : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(14, 1) : BOOL
16 : bvule(1, 14) : BOOL
17 : and(15, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 18, 18) : BOOL
20 : ite(12, 13, 19) : BOOL
21 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(10, 22) : BOOL
24 : bvule(3, 1) : BOOL
25 : and(24, 11) : BOOL
26 : ite(25, 3, 3) : BV:32
27 : ite(17, 14, 26) : BV:32
28 : ite(23, 5, 27) : BV:32
29 : eq(28, 3) : BOOL
30 : bvule(5, 2) : BOOL
31 : bvule(2, 5) : BOOL
32 : and(30, 31) : BOOL
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 5, 42) : BV:32
44 : eq(43, 5) : BOOL
45 : and(29, 44) : BOOL
46 : eq(28, 5) : BOOL
47 : and(46, 44) : BOOL
48 : ite(47, 13, 18) : BOOL
49 : ite(45, 13, 48) : BOOL
50 : and(20, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 2) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 5) : BOOL
57 : 168 { 0xa8 -88 } : BV:8
58 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
59 : eq(55, 58) : BOOL
60 : 235 { 0xeb -21 } : BV:8
61 : eq(55, 51) : BOOL
62 : 27 { 0x1b } : BV:8
63 : eq(55, 33) : BOOL
64 : 223 { 0xdf -33 } : BV:8
65 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
66 : eq(55, 65) : BOOL
67 : 68 { 0x44 } : BV:8
68 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
69 : eq(55, 68) : BOOL
70 : 114 { 0x72 } : BV:8
71 : eq(55, 37) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
74 : eq(55, 73) : BOOL
75 : 164 { 0xa4 -92 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(59, 60, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : bvadd(37, 54) : BV:32
86 : eq(85, 5) : BOOL
87 : eq(85, 58) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 37) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 62, 98) : BV:8
100 : ite(87, 60, 99) : BV:8
101 : ite(86, 57, 100) : BV:8
102 : bvadd(33, 54) : BV:32
103 : eq(102, 5) : BOOL
104 : eq(102, 58) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 33) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 37) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 62, 115) : BV:8
117 : ite(104, 60, 116) : BV:8
118 : ite(103, 57, 117) : BV:8
119 : eq(54, 5) : BOOL
120 : eq(54, 58) : BOOL
121 : eq(54, 51) : BOOL
122 : eq(54, 33) : BOOL
123 : eq(54, 65) : BOOL
124 : eq(54, 68) : BOOL
125 : eq(54, 37) : BOOL
126 : eq(54, 73) : BOOL
127 : ite(126, 75, 76) : BV:8
128 : ite(125, 72, 127) : BV:8
129 : ite(124, 70, 128) : BV:8
130 : ite(123, 67, 129) : BV:8
131 : ite(122, 64, 130) : BV:8
132 : ite(121, 62, 131) : BV:8
133 : ite(120, 60, 132) : BV:8
134 : ite(119, 57, 133) : BV:8
135 : bvconcat(84, 101, 118, 134) : BV:32
136 : bvadd(51, 53, 135) : BV:32
137 : eq(136, 5) : BOOL
138 : eq(136, 58) : BOOL
139 : eq(136, 51) : BOOL
140 : eq(136, 33) : BOOL
141 : eq(136, 65) : BOOL
142 : eq(136, 68) : BOOL
143 : eq(136, 37) : BOOL
144 : eq(136, 73) : BOOL
145 : ite(144, 75, 76) : BV:8
146 : ite(143, 72, 145) : BV:8
147 : ite(142, 70, 146) : BV:8
148 : ite(141, 67, 147) : BV:8
149 : ite(140, 64, 148) : BV:8
150 : ite(139, 62, 149) : BV:8
151 : ite(138, 60, 150) : BV:8
152 : ite(137, 57, 151) : BV:8
153 : bvadd(37, 53, 135) : BV:32
154 : eq(153, 5) : BOOL
155 : eq(153, 58) : BOOL
156 : eq(153, 51) : BOOL
157 : eq(153, 33) : BOOL
158 : eq(153, 65) : BOOL
159 : eq(153, 68) : BOOL
160 : eq(153, 37) : BOOL
161 : eq(153, 73) : BOOL
162 : ite(161, 75, 76) : BV:8
163 : ite(160, 72, 162) : BV:8
164 : ite(159, 70, 163) : BV:8
165 : ite(158, 67, 164) : BV:8
166 : ite(157, 64, 165) : BV:8
167 : ite(156, 62, 166) : BV:8
168 : ite(155, 60, 167) : BV:8
169 : ite(154, 57, 168) : BV:8
170 : bvadd(33, 53, 135) : BV:32
171 : eq(170, 5) : BOOL
172 : eq(170, 58) : BOOL
173 : eq(170, 51) : BOOL
174 : eq(170, 33) : BOOL
175 : eq(170, 65) : BOOL
176 : eq(170, 68) : BOOL
177 : eq(170, 37) : BOOL
178 : eq(170, 73) : BOOL
179 : ite(178, 75, 76) : BV:8
180 : ite(177, 72, 179) : BV:8
181 : ite(176, 70, 180) : BV:8
182 : ite(175, 67, 181) : BV:8
183 : ite(174, 64, 182) : BV:8
184 : ite(173, 62, 183) : BV:8
185 : ite(172, 60, 184) : BV:8
186 : ite(171, 57, 185) : BV:8
187 : bvadd(53, 135) : BV:32
188 : eq(187, 5) : BOOL
189 : eq(187, 58) : BOOL
190 : eq(187, 51) : BOOL
191 : eq(187, 33) : BOOL
192 : eq(187, 65) : BOOL
193 : eq(187, 68) : BOOL
194 : eq(187, 37) : BOOL
195 : eq(187, 73) : BOOL
196 : ite(195, 75, 76) : BV:8
197 : ite(194, 72, 196) : BV:8
198 : ite(193, 70, 197) : BV:8
199 : ite(192, 67, 198) : BV:8
200 : ite(191, 64, 199) : BV:8
201 : ite(190, 62, 200) : BV:8
202 : ite(189, 60, 201) : BV:8
203 : ite(188, 57, 202) : BV:8
204 : bvconcat(152, 169, 186, 203) : BV:32
205 : ite(9, 5, 204) : BV:32
206 : ite(7, 5, 205) : BV:32
207 : ite(50, 204, 206) : BV:32
208 : ite(9, 5, 207) : BV:32
209 : ite(7, 5, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda42820Var : BV:32
2 : Lambda42821Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda42829Var : BV:32
2 : Lambda42830Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda42825Var : BV:32
2 : Lambda42826Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 5) : BOOL
16 : 168 { 0xa8 -88 } : BV:8
17 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
18 : eq(14, 17) : BOOL
19 : 235 { 0xeb -21 } : BV:8
20 : eq(14, 10) : BOOL
21 : 27 { 0x1b } : BV:8
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(14, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
26 : eq(14, 25) : BOOL
27 : 68 { 0x44 } : BV:8
28 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
29 : eq(14, 28) : BOOL
30 : 114 { 0x72 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 104 { 0x68 } : BV:8
34 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
35 : eq(14, 34) : BOOL
36 : 164 { 0xa4 -92 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 17) : BOOL
49 : eq(46, 10) : BOOL
50 : eq(46, 22) : BOOL
51 : eq(46, 25) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 24, 58) : BV:8
60 : ite(49, 21, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 16, 61) : BV:8
63 : bvadd(22, 13) : BV:32
64 : eq(63, 5) : BOOL
65 : eq(63, 17) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 22) : BOOL
68 : eq(63, 25) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : ite(66, 21, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 16, 78) : BV:8
80 : eq(13, 5) : BOOL
81 : eq(13, 17) : BOOL
82 : eq(13, 10) : BOOL
83 : eq(13, 22) : BOOL
84 : eq(13, 25) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 24, 91) : BV:8
93 : ite(82, 21, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 16, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 5) : BOOL
99 : eq(97, 17) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 22) : BOOL
102 : eq(97, 25) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 24, 109) : BV:8
111 : ite(100, 21, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 16, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 5) : BOOL
116 : eq(114, 17) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 22) : BOOL
119 : eq(114, 25) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 24, 126) : BV:8
128 : ite(117, 21, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 16, 129) : BV:8
131 : bvadd(22, 12, 96) : BV:32
132 : eq(131, 5) : BOOL
133 : eq(131, 17) : BOOL
134 : eq(131, 10) : BOOL
135 : eq(131, 22) : BOOL
136 : eq(131, 25) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 24, 143) : BV:8
145 : ite(134, 21, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 16, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 5) : BOOL
150 : eq(148, 17) : BOOL
151 : eq(148, 10) : BOOL
152 : eq(148, 22) : BOOL
153 : eq(148, 25) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 24, 160) : BV:8
162 : ite(151, 21, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 16, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1210753216
=counter_example_end
=global nodece 38 num_edges_traversed 1
=global nodece 38 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 39
=global nodece 39 nodece z3v487.ce4029.num_edges_traversed1
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce4029 2582e10d718b3414ec0c590983549c
=input.spec-%var-x-1
1 : Lambda44645Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda44646Var : BV:32
17 : Lambda44647Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda44648Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda44678Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda44679Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda44670Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda44671Var : BV:32
17 : Lambda44672Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda44673Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda44655Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda44656Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1074009398 { 0x40041536 +1.3189730e1 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda44684Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda44685Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1642629843 { 0x61e88ad3 +1.81673657e68 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1973239401
=counter_example_end
=global nodece 39 num_edges_traversed 1
=global nodece 39 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 40
=global nodece 40 nodece z3.ce4075.num_edges_traversed0
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3.ce4075 5591ad2ee27a15238b89154ed4abd8
=input.spec-%var-x-1
1 : Lambda45827Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45828Var : BV:32
18 : Lambda45829Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435456 { 0x10000000 +1.0e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435457 { 0x10000001 +1.11e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45830Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
82 : eq(80, 81) : BOOL
83 : 126 { 0x7e } : BV:8
84 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
85 : eq(80, 84) : BOOL
86 : 123 { 0x7b } : BV:8
87 : eq(80, 78) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
90 : eq(80, 89) : BOOL
91 : 188 { 0xbc -68 } : BV:8
92 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
93 : eq(80, 92) : BOOL
94 : 191 { 0xbf -65 } : BV:8
95 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
96 : eq(80, 95) : BOOL
97 : 90 { 0x5a } : BV:8
98 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
99 : eq(80, 98) : BOOL
100 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
101 : eq(80, 100) : BOOL
102 : 249 { 0xf9 -7 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(99, 94, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(98, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 84) : BOOL
115 : eq(112, 78) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 98) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 94, 121) : BV:8
123 : ite(118, 97, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 86, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(100, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 78) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 98) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 97, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 86, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(95, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 84) : BOOL
149 : eq(146, 78) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 98) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 94, 155) : BV:8
157 : ite(152, 97, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 86, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 84) : BOOL
167 : eq(164, 78) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 98) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 94, 173) : BV:8
175 : ite(170, 97, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 86, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 84) : BOOL
185 : eq(182, 78) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 98) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 94, 191) : BV:8
193 : ite(188, 97, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 86, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 84) : BOOL
203 : eq(200, 78) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 98) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 94, 209) : BV:8
211 : ite(206, 97, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 86, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 84) : BOOL
220 : eq(217, 78) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 98) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 94, 226) : BV:8
228 : ite(223, 97, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 86, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 234, 235) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45854Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45855Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
25 : eq(23, 24) : BOOL
26 : 126 { 0x7e } : BV:8
27 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
28 : eq(23, 27) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
34 : eq(23, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
40 : eq(23, 39) : BOOL
41 : 90 { 0x5a } : BV:8
42 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
45 : eq(23, 44) : BOOL
46 : 249 { 0xf9 -7 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 38, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 38, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 38, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(18, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2768240639 ] -> 0, [ 2768240640; 2768240640 ] -> 90, [ 2768240641; 2768240641 ] -> 249, [ 2768240642; 2768240642 ] -> 191, [ 2768240643; 2768240643 ] -> 253, [ 2768240644; 4009754619 ] -> 0, [ 4009754620; 4009754620 ] -> 188, [ 4009754621; 4009754621 ] -> 191, [ 4009754622; 4009754622 ] -> 123, [ 4009754623; 4009754623 ] -> 126, [ 4009754624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 681570295 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 681570296; 681570299 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 681570300; 1232680891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1232680892; 1232680895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1232680896; 4022329307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4022329308; 4022329311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4022329312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4022329308 { 0xefbfdfdc -272637988 -1.49901914e96 } : BV:32
=input.dst.llvm-%m
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 681570296 { 0x289feff8 +1.24951076e210 } : BV:32
=input.dst.llvm-%n
1 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1232680892 { 0x497937bc +1.94701337e19 } : BV:32
=input.dst.llvm-%x
1 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45847Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45848Var : BV:32
18 : Lambda45849Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435456 { 0x10000000 +1.0e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435457 { 0x10000001 +1.11e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45850Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
63 : eq(61, 62) : BOOL
64 : 126 { 0x7e } : BV:8
65 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
66 : eq(61, 65) : BOOL
67 : 123 { 0x7b } : BV:8
68 : eq(61, 59) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
71 : eq(61, 70) : BOOL
72 : 188 { 0xbc -68 } : BV:8
73 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
74 : eq(61, 73) : BOOL
75 : 191 { 0xbf -65 } : BV:8
76 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
77 : eq(61, 76) : BOOL
78 : 90 { 0x5a } : BV:8
79 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
80 : eq(61, 79) : BOOL
81 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
82 : eq(61, 81) : BOOL
83 : 249 { 0xf9 -7 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(80, 75, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(79, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 65) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 79) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 75, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 67, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(81, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 65) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 79) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 67, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(76, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 65) : BOOL
130 : eq(127, 59) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 79) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 75, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 67, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 65) : BOOL
148 : eq(145, 59) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 75, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 67, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 65) : BOOL
166 : eq(163, 59) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 79) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 75, 172) : BV:8
174 : ite(169, 78, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 67, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 65) : BOOL
184 : eq(181, 59) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 79) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 75, 190) : BV:8
192 : ite(187, 78, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 67, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 65) : BOOL
201 : eq(198, 59) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 79) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 75, 207) : BV:8
209 : ite(204, 78, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 67, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda45836Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 268435456 { 0x10000000 +1.0e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda45837Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
27 : eq(25, 26) : BOOL
28 : 126 { 0x7e } : BV:8
29 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
30 : eq(25, 29) : BOOL
31 : 123 { 0x7b } : BV:8
32 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
33 : eq(25, 32) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
36 : eq(25, 35) : BOOL
37 : 188 { 0xbc -68 } : BV:8
38 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
39 : eq(25, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
42 : eq(25, 41) : BOOL
43 : 90 { 0x5a } : BV:8
44 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
45 : eq(25, 44) : BOOL
46 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
47 : eq(25, 46) : BOOL
48 : 249 { 0xf9 -7 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(45, 40, 50) : BV:8
52 : ite(42, 43, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : ite(36, 37, 53) : BV:8
55 : ite(33, 34, 54) : BV:8
56 : ite(30, 31, 55) : BV:8
57 : ite(27, 28, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 23, 24) : BV:32
60 : eq(59, 26) : BOOL
61 : eq(59, 29) : BOOL
62 : eq(59, 32) : BOOL
63 : eq(59, 35) : BOOL
64 : eq(59, 38) : BOOL
65 : eq(59, 41) : BOOL
66 : eq(59, 44) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 40, 68) : BV:8
70 : ite(65, 43, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : ite(63, 37, 71) : BV:8
73 : ite(62, 34, 72) : BV:8
74 : ite(61, 31, 73) : BV:8
75 : ite(60, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 24) : BV:32
78 : eq(77, 26) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : eq(77, 35) : BOOL
82 : eq(77, 38) : BOOL
83 : eq(77, 41) : BOOL
84 : eq(77, 44) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 43, 87) : BV:8
89 : ite(82, 40, 88) : BV:8
90 : ite(81, 37, 89) : BV:8
91 : ite(80, 34, 90) : BV:8
92 : ite(79, 31, 91) : BV:8
93 : ite(78, 28, 92) : BV:8
94 : bvadd(23, 24) : BV:32
95 : eq(94, 26) : BOOL
96 : eq(94, 29) : BOOL
97 : eq(94, 32) : BOOL
98 : eq(94, 35) : BOOL
99 : eq(94, 38) : BOOL
100 : eq(94, 41) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 40, 103) : BV:8
105 : ite(100, 43, 104) : BV:8
106 : ite(99, 40, 105) : BV:8
107 : ite(98, 37, 106) : BV:8
108 : ite(97, 34, 107) : BV:8
109 : ite(96, 31, 108) : BV:8
110 : ite(95, 28, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 4, 111) : BV:32
113 : lambda(19, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(18, 113) : MAP[BV:32 -> BV:32]
115 : sum(1, 2, 114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
116 : sym_const(115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 310378496 { 0x12800000 +1.0e166 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45859Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45860Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
25 : eq(23, 24) : BOOL
26 : 126 { 0x7e } : BV:8
27 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
28 : eq(23, 27) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
34 : eq(23, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
40 : eq(23, 39) : BOOL
41 : 90 { 0x5a } : BV:8
42 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
45 : eq(23, 44) : BOOL
46 : 249 { 0xf9 -7 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 38, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 38, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 38, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(18, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 681570296 { 0x289feff8 +1.24951076e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 681570299 { 0x289feffb +1.24951112e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1232680892 { 0x497937bc +1.94701337e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1232680895 { 0x497937bf +1.94701373e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4022329308 { 0xefbfdfdc -272637988 -1.49901914e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4022329311 { 0xefbfdfdf -272637985 -1.49901950e96 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45719Var : BV:32
2 : Lambda45720Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 268435456 { 0x10000000 +1.0e161 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
55 : eq(53, 54) : BOOL
56 : 126 { 0x7e } : BV:8
57 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
58 : eq(53, 57) : BOOL
59 : 123 { 0x7b } : BV:8
60 : eq(53, 51) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
63 : eq(53, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
66 : eq(53, 65) : BOOL
67 : 191 { 0xbf -65 } : BV:8
68 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
69 : eq(53, 68) : BOOL
70 : 90 { 0x5a } : BV:8
71 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
72 : eq(53, 71) : BOOL
73 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
74 : eq(53, 73) : BOOL
75 : 249 { 0xf9 -7 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(72, 67, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(71, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 57) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 71) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 67, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 59, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(73, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 71) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 59, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(68, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 57) : BOOL
122 : eq(119, 51) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 71) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 67, 128) : BV:8
130 : ite(125, 70, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 59, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 57) : BOOL
140 : eq(137, 51) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 71) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 67, 146) : BV:8
148 : ite(143, 70, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 59, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 57) : BOOL
158 : eq(155, 51) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 71) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 67, 164) : BV:8
166 : ite(161, 70, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 59, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 57) : BOOL
176 : eq(173, 51) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 71) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 67, 182) : BV:8
184 : ite(179, 70, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 59, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 57) : BOOL
193 : eq(190, 51) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 71) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 67, 199) : BV:8
201 : ite(196, 70, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 59, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 207, 208) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45724Var : BV:32
2 : Lambda45725Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435457 { 0x10000001 +1.11e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 327071645 ] -> true, [ 327071646; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 327071645 ] -> true, [ 327071646; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45733Var : BV:32
2 : Lambda45734Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435457 { 0x10000001 +1.11e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45729Var : BV:32
2 : Lambda45730Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
14 : eq(12, 13) : BOOL
15 : 126 { 0x7e } : BV:8
16 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
17 : eq(12, 16) : BOOL
18 : 123 { 0x7b } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
22 : eq(12, 21) : BOOL
23 : 188 { 0xbc -68 } : BV:8
24 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
25 : eq(12, 24) : BOOL
26 : 191 { 0xbf -65 } : BV:8
27 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
28 : eq(12, 27) : BOOL
29 : 90 { 0x5a } : BV:8
30 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
33 : eq(12, 32) : BOOL
34 : 249 { 0xf9 -7 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 26, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(30, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 16) : BOOL
47 : eq(44, 10) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 30) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 26, 53) : BV:8
55 : ite(50, 29, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 18, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(32, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 16) : BOOL
64 : eq(61, 10) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 30) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 18, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(27, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 16) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 30) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 26, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 18, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 26, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 18, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 16) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 30) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 26, 123) : BV:8
125 : ite(120, 29, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 18, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 16) : BOOL
135 : eq(132, 10) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 30) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 26, 141) : BV:8
143 : ite(138, 29, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 18, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 16) : BOOL
152 : eq(149, 10) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 30) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 26, 158) : BV:8
160 : ite(155, 29, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 18, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45740Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45741Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3780418639
=counter_example_end
=global nodece 40 num_edges_traversed 0
=global nodece 40 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce4076.num_edges_traversed0
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce4076 2c2571ccea40379581f7fc29bbd597a0
=input.spec-%var-x-1
1 : Lambda45908Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232950783 { 0x85181fff -2062016513 -1.18847644e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232950784 { 0x85182000 -2062016512 -1.18847656e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45909Var : BV:32
18 : Lambda45910Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2232950785 { 0x85182001 -2062016511 -1.18847668e139 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45911Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1091064835 { 0x41085403 +1.6506383e3 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
63 : eq(61, 62) : BOOL
64 : 136 { 0x88 -120 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 1091064834 { 0x41085402 +1.6506371e3 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : 1091064833 { 0x41085401 +1.6506359e3 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : ite(73, 64, 65) : BV:8
75 : 1091064832 { 0x41085400 +1.6506347e3 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : ite(77, 64, 65) : BV:8
79 : bvconcat(66, 70, 74, 78) : BV:32
80 : bvadd(56, 58, 79) : BV:32
81 : eq(80, 62) : BOOL
82 : ite(81, 64, 65) : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : bvadd(83, 58, 79) : BV:32
85 : eq(84, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : 1 { 0x1 +1.11e129 } : BV:32
88 : bvadd(87, 58, 79) : BV:32
89 : eq(88, 62) : BOOL
90 : ite(89, 64, 65) : BV:8
91 : bvadd(58, 79) : BV:32
92 : eq(91, 62) : BOOL
93 : ite(92, 64, 65) : BV:8
94 : bvconcat(82, 86, 90, 93) : BV:32
95 : ite(55, 2, 94) : BV:32
96 : lambda(52, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(51, 96) : MAP[BV:32 -> BV:32]
98 : lambda(17, 97) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
99 : map(16, 98) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
100 : sym_const(99) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 289947647 { 0x11483fff +1.56445300e163 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45935Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45936Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
25 : eq(23, 24) : BOOL
26 : 136 { 0x88 -120 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2250855422 ] -> 0, [ 2250855423; 2250855423 ] -> 136, [ 2250855424; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 68157443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68157444; 68157447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 68157448; 100663299 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 100663300; 100663303 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 100663304; 2449997823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2449997824; 2449997827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2449997828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 100663300 { 0x6000004 +1.47e141 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 68157444 { 0x4100004 +1.12500047e137 } : BV:32
=input.dst.llvm-%n
1 : 2232950784 { 0x85182000 -2062016512 -1.18847656e139 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2449997824 { 0x92080000 -1844969472 -1.6250000e165 } : BV:32
=input.dst.llvm-%x
1 : 1091064832 { 0x41085400 +1.6506347e3 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45928Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232950783 { 0x85181fff -2062016513 -1.18847644e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232950784 { 0x85182000 -2062016512 -1.18847656e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45929Var : BV:32
18 : Lambda45930Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2232950785 { 0x85182001 -2062016511 -1.18847668e139 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45931Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1091064835 { 0x41085403 +1.6506383e3 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
82 : eq(80, 81) : BOOL
83 : 136 { 0x88 -120 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 1091064834 { 0x41085402 +1.6506371e3 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 1091064833 { 0x41085401 +1.6506359e3 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : 1091064832 { 0x41085400 +1.6506347e3 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : ite(96, 83, 84) : BV:8
98 : bvconcat(85, 89, 93, 97) : BV:32
99 : bvadd(75, 77, 98) : BV:32
100 : eq(99, 81) : BOOL
101 : ite(100, 83, 84) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 77, 98) : BV:32
104 : eq(103, 81) : BOOL
105 : ite(104, 83, 84) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 77, 98) : BV:32
108 : eq(107, 81) : BOOL
109 : ite(108, 83, 84) : BV:8
110 : bvadd(77, 98) : BV:32
111 : eq(110, 81) : BOOL
112 : ite(111, 83, 84) : BV:8
113 : bvconcat(101, 105, 109, 112) : BV:32
114 : ite(55, 2, 113) : BV:32
115 : ite(74, 113, 114) : BV:32
116 : ite(55, 2, 115) : BV:32
117 : lambda(52, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(51, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda45917Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 255 { 0xff +1.3039e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 256 { 0x100 +1.3051e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda45918Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
27 : eq(25, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 289947647 { 0x11483fff +1.56445300e163 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 289947648 { 0x11484000 +1.56445312e163 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45940Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45941Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
25 : eq(23, 24) : BOOL
26 : 136 { 0x88 -120 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 289947647 { 0x11483fff +1.56445300e163 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 68157444 { 0x4100004 +1.12500047e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 68157447 { 0x4100007 +1.12500083e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2449997824 { 0x92080000 -1844969472 -1.6250000e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2449997827 { 0x92080003 -1844969469 -1.6250035e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 100663300 { 0x6000004 +1.47e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 100663303 { 0x6000007 +1.83e141 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45750Var : BV:32
2 : Lambda45751Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1091064835 { 0x41085403 +1.6506383e3 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
14 : eq(12, 13) : BOOL
15 : 136 { 0x88 -120 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 1091064834 { 0x41085402 +1.6506371e3 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 1091064833 { 0x41085401 +1.6506359e3 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : 1091064832 { 0x41085400 +1.6506347e3 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : bvconcat(17, 21, 25, 29) : BV:32
31 : bvadd(7, 9, 30) : BV:32
32 : eq(31, 13) : BOOL
33 : ite(32, 15, 16) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 9, 30) : BV:32
36 : eq(35, 13) : BOOL
37 : ite(36, 15, 16) : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : bvadd(38, 9, 30) : BV:32
40 : eq(39, 13) : BOOL
41 : ite(40, 15, 16) : BV:8
42 : bvadd(9, 30) : BV:32
43 : eq(42, 13) : BOOL
44 : ite(43, 15, 16) : BV:8
45 : bvconcat(33, 37, 41, 44) : BV:32
46 : ite(6, 3, 45) : BV:32
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45752Var : BV:32
2 : Lambda45753Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232950783 { 0x85181fff -2062016513 -1.18847644e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232950784 { 0x85182000 -2062016512 -1.18847656e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2232950785 { 0x85182001 -2062016511 -1.18847668e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2232950783 ] -> true, [ 2232950784; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2232950783 ] -> true, [ 2232950784; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45762Var : BV:32
2 : Lambda45763Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232950783 { 0x85181fff -2062016513 -1.18847644e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232950784 { 0x85182000 -2062016512 -1.18847656e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2232950785 { 0x85182001 -2062016511 -1.18847668e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45766Var : BV:32
2 : Lambda45767Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2232950783 { 0x85181fff -2062016513 -1.18847644e139 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2232950784 { 0x85182000 -2062016512 -1.18847656e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2232950785 { 0x85182001 -2062016511 -1.18847668e139 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 255 { 0xff +1.3039e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 256 { 0x100 +1.3051e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 257 { 0x101 +1.3063e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1091064835 { 0x41085403 +1.6506383e3 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
55 : eq(53, 54) : BOOL
56 : 136 { 0x88 -120 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 1091064834 { 0x41085402 +1.6506371e3 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 1091064833 { 0x41085401 +1.6506359e3 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : 1091064832 { 0x41085400 +1.6506347e3 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : ite(69, 56, 57) : BV:8
71 : bvconcat(58, 62, 66, 70) : BV:32
72 : bvadd(48, 50, 71) : BV:32
73 : eq(72, 54) : BOOL
74 : ite(73, 56, 57) : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : bvadd(75, 50, 71) : BV:32
77 : eq(76, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 50, 71) : BV:32
81 : eq(80, 54) : BOOL
82 : ite(81, 56, 57) : BV:8
83 : bvadd(50, 71) : BV:32
84 : eq(83, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : bvconcat(74, 78, 82, 85) : BV:32
87 : ite(6, 3, 86) : BV:32
88 : ite(47, 86, 87) : BV:32
89 : ite(6, 3, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
10 : eq(8, 9) : BOOL
11 : 136 { 0x88 -120 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45772Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
10 : eq(8, 9) : BOOL
11 : 136 { 0x88 -120 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45779Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2250855423 { 0x862953ff -2044111873 -1.32287585e141 } : BV:32
10 : eq(8, 9) : BOOL
11 : 136 { 0x88 -120 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3570729942
=counter_example_end
=global nodece 41 num_edges_traversed 0
=global nodece 41 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 42
=global nodece 42 nodece z3v487.ce4253.num_edges_traversed3
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce4253 54e15c87b285c9a0aadc1bbc4a761660
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 42 num_edges_traversed 3
=global nodece 42 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 43
=global nodece 43 nodece z3v487.ce4295.num_edges_traversed4
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3v487.ce4295 8fe6ada653c59c9c73c3a812b77dda
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2139062144 { 0x7f7f7f80 +1.99607849e127 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2139062144 { 0x7f7f7f80 +1.99607849e127 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 43 num_edges_traversed 4
=global nodece 43 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 44
=global nodece 44 nodece z3v487.ce4332.num_edges_traversed5
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce4332 3fb36791805ea899b532f851a46e4fa8
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4278124288 { 0xfefeff00 -16843008 -1.99215698e126 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4278124288 { 0xfefeff00 -16843008 -1.99215698e126 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 44 num_edges_traversed 5
=global nodece 44 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 45
=global nodece 45 nodece z3.ce4223.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce4223 4a60989c661577ff5c268ff7345fb755
=input.spec-%var-x-1
1 : Lambda11893Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11894Var : BV:32
18 : Lambda11895Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11896Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 180 { 0xb4 -76 } : BV:8
81 : eq(78, 74) : BOOL
82 : 127 { 0x7f } : BV:8
83 : eq(78, 36) : BOOL
84 : 219 { 0xdb -37 } : BV:8
85 : eq(78, 40) : BOOL
86 : 198 { 0xc6 -58 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16815Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 4096 { 0x1000 +1.48828e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 4097 { 0x1001 +1.48840e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16816Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 180 { 0xb4 -76 } : BV:8
51 : eq(48, 44) : BOOL
52 : 127 { 0x7f } : BV:8
53 : eq(48, 23) : BOOL
54 : 219 { 0xdb -37 } : BV:8
55 : eq(48, 27) : BOOL
56 : 198 { 0xc6 -58 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(27, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 44) : BOOL
65 : eq(62, 23) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(23, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 44) : BOOL
74 : eq(71, 23) : BOOL
75 : eq(71, 27) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 44) : BOOL
82 : eq(47, 23) : BOOL
83 : eq(47, 27) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(44, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 44) : BOOL
92 : eq(89, 23) : BOOL
93 : eq(89, 27) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(27, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 44) : BOOL
101 : eq(98, 23) : BOOL
102 : eq(98, 27) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(23, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 44) : BOOL
110 : eq(107, 23) : BOOL
111 : eq(107, 27) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 44) : BOOL
119 : eq(116, 23) : BOOL
120 : eq(116, 27) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(43, 2, 125) : BV:32
127 : lambda(40, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(39, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 180, [ 1; 1 ] -> 219, [ 2; 2 ] -> 198, [ 3; 3 ] -> 127, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 519011587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 519011588; 519011591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 519011592; 1372999371 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1372999372; 1372999375 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1372999376; 3480830383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3480830384; 3480830387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3480830388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1372999372 { 0x51d64ecc +1.67427968e36 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 519011588 { 0x1eef7d04 +1.87100267e190 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3480830384 { 0xcf7941b0 -814136912 -1.94731712e31 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11906Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11907Var : BV:32
18 : Lambda11908Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11909Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 180 { 0xb4 -76 } : BV:8
62 : eq(59, 55) : BOOL
63 : 127 { 0x7f } : BV:8
64 : eq(59, 36) : BOOL
65 : 219 { 0xdb -37 } : BV:8
66 : eq(59, 40) : BOOL
67 : 198 { 0xc6 -58 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4095 { 0xfff +1.48816e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4096 { 0x1000 +1.48828e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16805Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 4097 { 0x1001 +1.48840e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16806Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : 3 { 0x3 +1.35e129 } : BV:32
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 45) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(49, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 180 { 0xb4 -76 } : BV:8
56 : eq(53, 49) : BOOL
57 : 127 { 0x7f } : BV:8
58 : eq(53, 15) : BOOL
59 : 219 { 0xdb -37 } : BV:8
60 : eq(53, 34) : BOOL
61 : 198 { 0xc6 -58 } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(58, 59, 63) : BV:8
65 : ite(56, 57, 64) : BV:8
66 : ite(54, 55, 65) : BV:8
67 : bvadd(34, 52) : BV:32
68 : eq(67, 1) : BOOL
69 : eq(67, 49) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 34) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 57, 73) : BV:8
75 : ite(68, 55, 74) : BV:8
76 : bvadd(15, 52) : BV:32
77 : eq(76, 1) : BOOL
78 : eq(76, 49) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 34) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 59, 81) : BV:8
83 : ite(78, 57, 82) : BV:8
84 : ite(77, 55, 83) : BV:8
85 : eq(52, 1) : BOOL
86 : eq(52, 49) : BOOL
87 : eq(52, 15) : BOOL
88 : eq(52, 34) : BOOL
89 : ite(88, 61, 62) : BV:8
90 : ite(87, 59, 89) : BV:8
91 : ite(86, 57, 90) : BV:8
92 : ite(85, 55, 91) : BV:8
93 : bvconcat(66, 75, 84, 92) : BV:32
94 : bvadd(49, 51, 93) : BV:32
95 : eq(94, 1) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 34) : BOOL
99 : ite(98, 61, 62) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 57, 100) : BV:8
102 : ite(95, 55, 101) : BV:8
103 : bvadd(34, 51, 93) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 49) : BOOL
106 : eq(103, 15) : BOOL
107 : eq(103, 34) : BOOL
108 : ite(107, 61, 62) : BV:8
109 : ite(106, 59, 108) : BV:8
110 : ite(105, 57, 109) : BV:8
111 : ite(104, 55, 110) : BV:8
112 : bvadd(15, 51, 93) : BV:32
113 : eq(112, 1) : BOOL
114 : eq(112, 49) : BOOL
115 : eq(112, 15) : BOOL
116 : eq(112, 34) : BOOL
117 : ite(116, 61, 62) : BV:8
118 : ite(115, 59, 117) : BV:8
119 : ite(114, 57, 118) : BV:8
120 : ite(113, 55, 119) : BV:8
121 : bvadd(51, 93) : BV:32
122 : eq(121, 1) : BOOL
123 : eq(121, 49) : BOOL
124 : eq(121, 15) : BOOL
125 : eq(121, 34) : BOOL
126 : ite(125, 61, 62) : BV:8
127 : ite(124, 59, 126) : BV:8
128 : ite(123, 57, 127) : BV:8
129 : ite(122, 55, 128) : BV:8
130 : bvconcat(102, 111, 120, 129) : BV:32
131 : ite(48, 1, 130) : BV:32
132 : lambda(45, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(44, 132) : MAP[BV:32 -> BV:32]
134 : sum(16, 17, 133) : SUM[UNIT,MAP[BV:32 -> BV:32]]
135 : sym_const(134) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16821Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 4096 { 0x1000 +1.48828e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 4097 { 0x1001 +1.48840e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16822Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 180 { 0xb4 -76 } : BV:8
51 : eq(48, 44) : BOOL
52 : 127 { 0x7f } : BV:8
53 : eq(48, 23) : BOOL
54 : 219 { 0xdb -37 } : BV:8
55 : eq(48, 27) : BOOL
56 : 198 { 0xc6 -58 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(27, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 44) : BOOL
65 : eq(62, 23) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(23, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 44) : BOOL
74 : eq(71, 23) : BOOL
75 : eq(71, 27) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 44) : BOOL
82 : eq(47, 23) : BOOL
83 : eq(47, 27) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(44, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 44) : BOOL
92 : eq(89, 23) : BOOL
93 : eq(89, 27) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(27, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 44) : BOOL
101 : eq(98, 23) : BOOL
102 : eq(98, 27) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(23, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 44) : BOOL
110 : eq(107, 23) : BOOL
111 : eq(107, 27) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 44) : BOOL
119 : eq(116, 23) : BOOL
120 : eq(116, 27) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(43, 2, 125) : BV:32
127 : lambda(40, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(39, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 519011588 { 0x1eef7d04 +1.87100267e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 519011591 { 0x1eef7d07 +1.87100303e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3480830384 { 0xcf7941b0 -814136912 -1.94731712e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3480830387 { 0xcf7941b3 -814136909 -1.94731748e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1372999372 { 0x51d64ecc +1.67427968e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1372999375 { 0x51d64ecf +1.67428004e36 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11823Var : BV:32
2 : Lambda11824Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 180 { 0xb4 -76 } : BV:8
54 : eq(51, 47) : BOOL
55 : 127 { 0x7f } : BV:8
56 : eq(51, 32) : BOOL
57 : 219 { 0xdb -37 } : BV:8
58 : eq(51, 36) : BOOL
59 : 198 { 0xc6 -58 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11828Var : BV:32
2 : Lambda11829Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11837Var : BV:32
2 : Lambda11838Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11833Var : BV:32
2 : Lambda11834Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 180 { 0xb4 -76 } : BV:8
14 : eq(11, 7) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 219 { 0xdb -37 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 198 { 0xc6 -58 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3953522240
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 46
=global nodece 46 nodece z3.ce4203.num_edges_traversed2
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3.ce4203 8352ccd0797f88acc0309758bbcf653b
=input.spec-%var-x-1
1 : Lambda12626Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12627Var : BV:32
18 : Lambda12628Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12629Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17447Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17448Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12639Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12640Var : BV:32
18 : Lambda12641Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12642Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17437Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17438Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17453Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17454Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12556Var : BV:32
2 : Lambda12557Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12561Var : BV:32
2 : Lambda12562Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12570Var : BV:32
2 : Lambda12571Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12566Var : BV:32
2 : Lambda12567Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3875746067
=counter_example_end
=global nodece 46 num_edges_traversed 2
=global nodece 46 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3.ce4395.num_edges_traversed3
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3.ce4395 1d385217efce6608298cd8dacdce997
=input.spec-%var-x-1
1 : Lambda12626Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12627Var : BV:32
18 : Lambda12628Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12629Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17447Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17448Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12639Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12640Var : BV:32
18 : Lambda12641Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12642Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17437Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17438Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17453Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17454Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12556Var : BV:32
2 : Lambda12557Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12561Var : BV:32
2 : Lambda12562Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12570Var : BV:32
2 : Lambda12571Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12566Var : BV:32
2 : Lambda12567Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3875746067
=counter_example_end
=global nodece 47 num_edges_traversed 3
=global nodece 47 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 48
=global nodece 48 nodece z3.ce4432.num_edges_traversed4
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce4432 ffc537fc965c9a9cf1f9da5c4d7f2c4
=input.spec-%var-x-1
1 : Lambda12626Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12627Var : BV:32
18 : Lambda12628Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12629Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17447Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17448Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12639Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12640Var : BV:32
18 : Lambda12641Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12642Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17437Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17438Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17453Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17454Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12556Var : BV:32
2 : Lambda12557Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12561Var : BV:32
2 : Lambda12562Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12570Var : BV:32
2 : Lambda12571Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12566Var : BV:32
2 : Lambda12567Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3875746067
=counter_example_end
=global nodece 48 num_edges_traversed 4
=global nodece 48 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3v487.ce4163.num_edges_traversed2
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(epsilon)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3v487.ce4163 26d15cb18f259cf0832013feda2d1c52
=input.spec-%var-x-1
1 : Lambda35380Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35381Var : BV:32
18 : Lambda35382Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 63 { 0x3f +1.751e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 64 { 0x40 +1.762e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 65 { 0x41 +1.774e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda35383Var : BV:32
62 : lambda(61, 2) : FUNCTION[BV:32 -> BV:32]
63 : map(60, 62) : MAP[BV:32 -> BV:32]
64 : lambda(17, 63) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
65 : map(16, 64) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
66 : sym_const(65) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda35491Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 63 { 0x3f +1.751e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 64 { 0x40 +1.762e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 65 { 0x41 +1.774e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda35492Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 67 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68; 71 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 72; 1031 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1032; 1035 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1036; 5243779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 5243780; 5243783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 5243784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 5243780 { 0x500384 +1.62510728e129 } : BV:32
=input.dst.llvm-%m
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1032 { 0x408 +1.12302e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda35393Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35394Var : BV:32
18 : Lambda35395Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 63 { 0x3f +1.751e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 64 { 0x40 +1.762e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 65 { 0x41 +1.774e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda35396Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : or(84, 85) : BOOL
87 : ite(86, 7, 13) : BOOL
88 : and(70, 87) : BOOL
89 : ite(66, 2, 2) : BV:32
90 : ite(64, 2, 89) : BV:32
91 : ite(88, 2, 90) : BV:32
92 : ite(66, 2, 91) : BV:32
93 : ite(64, 2, 92) : BV:32
94 : lambda(61, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(60, 94) : MAP[BV:32 -> BV:32]
96 : lambda(17, 95) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
97 : map(16, 96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
98 : sym_const(97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda35481Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : bvule(1, 19) : BOOL
36 : 63 { 0x3f +1.751e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 64 { 0x40 +1.762e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 65 { 0x41 +1.774e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 1) : BOOL
53 : and(52, 50) : BOOL
54 : or(51, 53) : BOOL
55 : ite(54, 7, 13) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda35482Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvule(1, 57) : BOOL
64 : bvule(57, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(39, 57) : BOOL
67 : bvule(57, 39) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(43, 57) : BOOL
70 : bvule(57, 10) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 43, 43) : BV:32
73 : ite(68, 39, 72) : BV:32
74 : ite(65, 1, 73) : BV:32
75 : eq(74, 1) : BOOL
76 : and(34, 75) : BOOL
77 : and(52, 75) : BOOL
78 : or(76, 77) : BOOL
79 : ite(78, 7, 13) : BOOL
80 : and(15, 79) : BOOL
81 : ite(62, 1, 1) : BV:32
82 : ite(60, 1, 81) : BV:32
83 : ite(80, 1, 82) : BV:32
84 : ite(62, 1, 83) : BV:32
85 : ite(60, 1, 84) : BV:32
86 : lambda(57, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(56, 86) : MAP[BV:32 -> BV:32]
88 : sum(17, 18, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda35497Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 63 { 0x3f +1.751e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 64 { 0x40 +1.762e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 65 { 0x41 +1.774e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda35498Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 71 { 0x47 +1.846e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1032 { 0x408 +1.12302e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1035 { 0x40b +1.12338e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 5243780 { 0x500384 +1.62510728e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 5243783 { 0x500387 +1.62510764e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda35315Var : BV:32
2 : Lambda35316Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 63 { 0x3f +1.751e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 64 { 0x40 +1.762e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 65 { 0x41 +1.774e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda35325Var : BV:32
2 : Lambda35326Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 63 { 0x3f +1.751e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 64 { 0x40 +1.762e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 65 { 0x41 +1.774e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda35329Var : BV:32
2 : Lambda35330Var : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : bvule(5, 2) : BOOL
39 : 63 { 0x3f +1.751e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 64 { 0x40 +1.762e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 65 { 0x41 +1.774e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 5) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 14, 20) : BOOL
59 : and(22, 58) : BOOL
60 : ite(9, 5, 5) : BV:32
61 : ite(7, 5, 60) : BV:32
62 : ite(59, 5, 61) : BV:32
63 : ite(9, 5, 62) : BV:32
64 : ite(7, 5, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1927961828
=counter_example_end
=global nodece 49 num_edges_traversed 2
=global nodece 49 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3.ce4122.num_edges_traversed1
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3.ce4122 4857e5e96975ac27cb5d5d1ecafe77e8
=input.spec-%var-x-1
1 : Lambda45827Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45828Var : BV:32
18 : Lambda45829Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435456 { 0x10000000 +1.0e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435457 { 0x10000001 +1.11e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45830Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
82 : eq(80, 81) : BOOL
83 : 126 { 0x7e } : BV:8
84 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
85 : eq(80, 84) : BOOL
86 : 123 { 0x7b } : BV:8
87 : eq(80, 78) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
90 : eq(80, 89) : BOOL
91 : 188 { 0xbc -68 } : BV:8
92 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
93 : eq(80, 92) : BOOL
94 : 191 { 0xbf -65 } : BV:8
95 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
96 : eq(80, 95) : BOOL
97 : 90 { 0x5a } : BV:8
98 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
99 : eq(80, 98) : BOOL
100 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
101 : eq(80, 100) : BOOL
102 : 249 { 0xf9 -7 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(99, 94, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(98, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 84) : BOOL
115 : eq(112, 78) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 98) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 94, 121) : BV:8
123 : ite(118, 97, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 86, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(100, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 78) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 98) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 97, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 86, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(95, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 84) : BOOL
149 : eq(146, 78) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 98) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 94, 155) : BV:8
157 : ite(152, 97, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 86, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 84) : BOOL
167 : eq(164, 78) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 98) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 94, 173) : BV:8
175 : ite(170, 97, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 86, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 84) : BOOL
185 : eq(182, 78) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 98) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 94, 191) : BV:8
193 : ite(188, 97, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 86, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 84) : BOOL
203 : eq(200, 78) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 98) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 94, 209) : BV:8
211 : ite(206, 97, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 86, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 84) : BOOL
220 : eq(217, 78) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 98) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 94, 226) : BV:8
228 : ite(223, 97, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 86, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 234, 235) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45854Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45855Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
25 : eq(23, 24) : BOOL
26 : 126 { 0x7e } : BV:8
27 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
28 : eq(23, 27) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
34 : eq(23, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
40 : eq(23, 39) : BOOL
41 : 90 { 0x5a } : BV:8
42 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
45 : eq(23, 44) : BOOL
46 : 249 { 0xf9 -7 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 38, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 38, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 38, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(18, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2768240639 ] -> 0, [ 2768240640; 2768240640 ] -> 90, [ 2768240641; 2768240641 ] -> 249, [ 2768240642; 2768240642 ] -> 191, [ 2768240643; 2768240643 ] -> 253, [ 2768240644; 4009754619 ] -> 0, [ 4009754620; 4009754620 ] -> 188, [ 4009754621; 4009754621 ] -> 191, [ 4009754622; 4009754622 ] -> 123, [ 4009754623; 4009754623 ] -> 126, [ 4009754624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 681570295 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 681570296; 681570299 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 681570300; 1232680891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1232680892; 1232680895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1232680896; 4022329307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4022329308; 4022329311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4022329312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4022329308 { 0xefbfdfdc -272637988 -1.49901914e96 } : BV:32
=input.dst.llvm-%m
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 681570296 { 0x289feff8 +1.24951076e210 } : BV:32
=input.dst.llvm-%n
1 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1232680892 { 0x497937bc +1.94701337e19 } : BV:32
=input.dst.llvm-%x
1 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45847Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45848Var : BV:32
18 : Lambda45849Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435456 { 0x10000000 +1.0e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435457 { 0x10000001 +1.11e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45850Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
63 : eq(61, 62) : BOOL
64 : 126 { 0x7e } : BV:8
65 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
66 : eq(61, 65) : BOOL
67 : 123 { 0x7b } : BV:8
68 : eq(61, 59) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
71 : eq(61, 70) : BOOL
72 : 188 { 0xbc -68 } : BV:8
73 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
74 : eq(61, 73) : BOOL
75 : 191 { 0xbf -65 } : BV:8
76 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
77 : eq(61, 76) : BOOL
78 : 90 { 0x5a } : BV:8
79 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
80 : eq(61, 79) : BOOL
81 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
82 : eq(61, 81) : BOOL
83 : 249 { 0xf9 -7 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(80, 75, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(79, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 65) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 79) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 75, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 67, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(81, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 65) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 79) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 67, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(76, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 65) : BOOL
130 : eq(127, 59) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 79) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 75, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 67, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 65) : BOOL
148 : eq(145, 59) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 75, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 67, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 65) : BOOL
166 : eq(163, 59) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 79) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 75, 172) : BV:8
174 : ite(169, 78, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 67, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 65) : BOOL
184 : eq(181, 59) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 79) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 75, 190) : BV:8
192 : ite(187, 78, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 67, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 65) : BOOL
201 : eq(198, 59) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 79) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 75, 207) : BV:8
209 : ite(204, 78, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 67, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda45836Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 268435456 { 0x10000000 +1.0e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda45837Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
27 : eq(25, 26) : BOOL
28 : 126 { 0x7e } : BV:8
29 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
30 : eq(25, 29) : BOOL
31 : 123 { 0x7b } : BV:8
32 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
33 : eq(25, 32) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
36 : eq(25, 35) : BOOL
37 : 188 { 0xbc -68 } : BV:8
38 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
39 : eq(25, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
42 : eq(25, 41) : BOOL
43 : 90 { 0x5a } : BV:8
44 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
45 : eq(25, 44) : BOOL
46 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
47 : eq(25, 46) : BOOL
48 : 249 { 0xf9 -7 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(45, 40, 50) : BV:8
52 : ite(42, 43, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : ite(36, 37, 53) : BV:8
55 : ite(33, 34, 54) : BV:8
56 : ite(30, 31, 55) : BV:8
57 : ite(27, 28, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 23, 24) : BV:32
60 : eq(59, 26) : BOOL
61 : eq(59, 29) : BOOL
62 : eq(59, 32) : BOOL
63 : eq(59, 35) : BOOL
64 : eq(59, 38) : BOOL
65 : eq(59, 41) : BOOL
66 : eq(59, 44) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 40, 68) : BV:8
70 : ite(65, 43, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : ite(63, 37, 71) : BV:8
73 : ite(62, 34, 72) : BV:8
74 : ite(61, 31, 73) : BV:8
75 : ite(60, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 24) : BV:32
78 : eq(77, 26) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : eq(77, 35) : BOOL
82 : eq(77, 38) : BOOL
83 : eq(77, 41) : BOOL
84 : eq(77, 44) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 43, 87) : BV:8
89 : ite(82, 40, 88) : BV:8
90 : ite(81, 37, 89) : BV:8
91 : ite(80, 34, 90) : BV:8
92 : ite(79, 31, 91) : BV:8
93 : ite(78, 28, 92) : BV:8
94 : bvadd(23, 24) : BV:32
95 : eq(94, 26) : BOOL
96 : eq(94, 29) : BOOL
97 : eq(94, 32) : BOOL
98 : eq(94, 35) : BOOL
99 : eq(94, 38) : BOOL
100 : eq(94, 41) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 40, 103) : BV:8
105 : ite(100, 43, 104) : BV:8
106 : ite(99, 40, 105) : BV:8
107 : ite(98, 37, 106) : BV:8
108 : ite(97, 34, 107) : BV:8
109 : ite(96, 31, 108) : BV:8
110 : ite(95, 28, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 4, 111) : BV:32
113 : lambda(19, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(18, 113) : MAP[BV:32 -> BV:32]
115 : sum(1, 2, 114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
116 : sym_const(115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 310378496 { 0x12800000 +1.0e166 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 639532947 { 0x261e7f93 +1.23826825e205 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45859Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45860Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
25 : eq(23, 24) : BOOL
26 : 126 { 0x7e } : BV:8
27 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
28 : eq(23, 27) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
34 : eq(23, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
40 : eq(23, 39) : BOOL
41 : 90 { 0x5a } : BV:8
42 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
45 : eq(23, 44) : BOOL
46 : 249 { 0xf9 -7 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 38, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 38, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 38, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(18, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1275483444 { 0x4c065534 +1.4947519e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 681570296 { 0x289feff8 +1.24951076e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 681570299 { 0x289feffb +1.24951112e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1232680892 { 0x497937bc +1.94701337e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1232680895 { 0x497937bf +1.94701373e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4022329308 { 0xefbfdfdc -272637988 -1.49901914e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4022329311 { 0xefbfdfdf -272637985 -1.49901950e96 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45719Var : BV:32
2 : Lambda45720Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 268435456 { 0x10000000 +1.0e161 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
55 : eq(53, 54) : BOOL
56 : 126 { 0x7e } : BV:8
57 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
58 : eq(53, 57) : BOOL
59 : 123 { 0x7b } : BV:8
60 : eq(53, 51) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
63 : eq(53, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
66 : eq(53, 65) : BOOL
67 : 191 { 0xbf -65 } : BV:8
68 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
69 : eq(53, 68) : BOOL
70 : 90 { 0x5a } : BV:8
71 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
72 : eq(53, 71) : BOOL
73 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
74 : eq(53, 73) : BOOL
75 : 249 { 0xf9 -7 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(72, 67, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(71, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 57) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 71) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 67, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 59, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(73, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 71) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 59, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(68, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 57) : BOOL
122 : eq(119, 51) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 71) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 67, 128) : BV:8
130 : ite(125, 70, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 59, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 57) : BOOL
140 : eq(137, 51) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 71) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 67, 146) : BV:8
148 : ite(143, 70, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 59, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 57) : BOOL
158 : eq(155, 51) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 71) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 67, 164) : BV:8
166 : ite(161, 70, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 59, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 57) : BOOL
176 : eq(173, 51) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 71) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 67, 182) : BV:8
184 : ite(179, 70, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 59, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 57) : BOOL
193 : eq(190, 51) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 71) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 67, 199) : BV:8
201 : ite(196, 70, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 59, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 207, 208) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45724Var : BV:32
2 : Lambda45725Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435457 { 0x10000001 +1.11e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 327071645 ] -> true, [ 327071646; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 327071645 ] -> true, [ 327071646; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45733Var : BV:32
2 : Lambda45734Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435457 { 0x10000001 +1.11e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45729Var : BV:32
2 : Lambda45730Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
14 : eq(12, 13) : BOOL
15 : 126 { 0x7e } : BV:8
16 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
17 : eq(12, 16) : BOOL
18 : 123 { 0x7b } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
22 : eq(12, 21) : BOOL
23 : 188 { 0xbc -68 } : BV:8
24 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
25 : eq(12, 24) : BOOL
26 : 191 { 0xbf -65 } : BV:8
27 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
28 : eq(12, 27) : BOOL
29 : 90 { 0x5a } : BV:8
30 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
33 : eq(12, 32) : BOOL
34 : 249 { 0xf9 -7 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 26, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(30, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 16) : BOOL
47 : eq(44, 10) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 30) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 26, 53) : BV:8
55 : ite(50, 29, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 18, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(32, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 16) : BOOL
64 : eq(61, 10) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 30) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 18, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(27, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 16) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 30) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 26, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 18, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 26, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 18, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 16) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 30) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 26, 123) : BV:8
125 : ite(120, 29, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 18, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 16) : BOOL
135 : eq(132, 10) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 30) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 26, 141) : BV:8
143 : ite(138, 29, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 18, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 16) : BOOL
152 : eq(149, 10) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 30) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 26, 158) : BV:8
160 : ite(155, 29, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 18, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45740Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45741Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
868405047
=counter_example_end
=global nodece 50 num_edges_traversed 1
=global nodece 50 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3.ce4522.num_edges_traversed2
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3.ce4522 2e1addee1f694c70202b2aaeaf5d631
=input.spec-%var-x-1
1 : Lambda45827Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45828Var : BV:32
18 : Lambda45829Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435456 { 0x10000000 +1.0e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435457 { 0x10000001 +1.11e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45830Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
82 : eq(80, 81) : BOOL
83 : 126 { 0x7e } : BV:8
84 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
85 : eq(80, 84) : BOOL
86 : 123 { 0x7b } : BV:8
87 : eq(80, 78) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
90 : eq(80, 89) : BOOL
91 : 188 { 0xbc -68 } : BV:8
92 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
93 : eq(80, 92) : BOOL
94 : 191 { 0xbf -65 } : BV:8
95 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
96 : eq(80, 95) : BOOL
97 : 90 { 0x5a } : BV:8
98 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
99 : eq(80, 98) : BOOL
100 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
101 : eq(80, 100) : BOOL
102 : 249 { 0xf9 -7 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(99, 94, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(98, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 84) : BOOL
115 : eq(112, 78) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 98) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 94, 121) : BV:8
123 : ite(118, 97, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 86, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(100, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 78) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 98) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 97, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 86, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(95, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 84) : BOOL
149 : eq(146, 78) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 98) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 94, 155) : BV:8
157 : ite(152, 97, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 86, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 84) : BOOL
167 : eq(164, 78) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 98) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 94, 173) : BV:8
175 : ite(170, 97, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 86, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 84) : BOOL
185 : eq(182, 78) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 98) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 94, 191) : BV:8
193 : ite(188, 97, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 86, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 84) : BOOL
203 : eq(200, 78) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 98) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 94, 209) : BV:8
211 : ite(206, 97, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 86, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 84) : BOOL
220 : eq(217, 78) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 98) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 94, 226) : BV:8
228 : ite(223, 97, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 86, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 234, 235) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45854Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45855Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
25 : eq(23, 24) : BOOL
26 : 126 { 0x7e } : BV:8
27 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
28 : eq(23, 27) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
34 : eq(23, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
40 : eq(23, 39) : BOOL
41 : 90 { 0x5a } : BV:8
42 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
45 : eq(23, 44) : BOOL
46 : 249 { 0xf9 -7 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 38, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 38, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 38, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(18, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2768240639 ] -> 0, [ 2768240640; 2768240640 ] -> 90, [ 2768240641; 2768240641 ] -> 249, [ 2768240642; 2768240642 ] -> 191, [ 2768240643; 2768240643 ] -> 253, [ 2768240644; 4009754619 ] -> 0, [ 4009754620; 4009754620 ] -> 188, [ 4009754621; 4009754621 ] -> 191, [ 4009754622; 4009754622 ] -> 123, [ 4009754623; 4009754623 ] -> 126, [ 4009754624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 681570295 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 681570296; 681570299 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 681570300; 1232680891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1232680892; 1232680895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1232680896; 4022329307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4022329308; 4022329311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4022329312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4022329308 { 0xefbfdfdc -272637988 -1.49901914e96 } : BV:32
=input.dst.llvm-%m
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 681570296 { 0x289feff8 +1.24951076e210 } : BV:32
=input.dst.llvm-%n
1 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1232680892 { 0x497937bc +1.94701337e19 } : BV:32
=input.dst.llvm-%x
1 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45847Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45848Var : BV:32
18 : Lambda45849Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435456 { 0x10000000 +1.0e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435457 { 0x10000001 +1.11e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45850Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
63 : eq(61, 62) : BOOL
64 : 126 { 0x7e } : BV:8
65 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
66 : eq(61, 65) : BOOL
67 : 123 { 0x7b } : BV:8
68 : eq(61, 59) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
71 : eq(61, 70) : BOOL
72 : 188 { 0xbc -68 } : BV:8
73 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
74 : eq(61, 73) : BOOL
75 : 191 { 0xbf -65 } : BV:8
76 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
77 : eq(61, 76) : BOOL
78 : 90 { 0x5a } : BV:8
79 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
80 : eq(61, 79) : BOOL
81 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
82 : eq(61, 81) : BOOL
83 : 249 { 0xf9 -7 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(80, 75, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(79, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 65) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 79) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 75, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 67, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(81, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 65) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 79) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 67, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(76, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 65) : BOOL
130 : eq(127, 59) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 79) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 75, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 67, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 65) : BOOL
148 : eq(145, 59) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 75, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 67, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 65) : BOOL
166 : eq(163, 59) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 79) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 75, 172) : BV:8
174 : ite(169, 78, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 67, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 65) : BOOL
184 : eq(181, 59) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 79) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 75, 190) : BV:8
192 : ite(187, 78, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 67, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 65) : BOOL
201 : eq(198, 59) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 79) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 75, 207) : BV:8
209 : ite(204, 78, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 67, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda45836Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 268435456 { 0x10000000 +1.0e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda45837Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
27 : eq(25, 26) : BOOL
28 : 126 { 0x7e } : BV:8
29 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
30 : eq(25, 29) : BOOL
31 : 123 { 0x7b } : BV:8
32 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
33 : eq(25, 32) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
36 : eq(25, 35) : BOOL
37 : 188 { 0xbc -68 } : BV:8
38 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
39 : eq(25, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
42 : eq(25, 41) : BOOL
43 : 90 { 0x5a } : BV:8
44 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
45 : eq(25, 44) : BOOL
46 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
47 : eq(25, 46) : BOOL
48 : 249 { 0xf9 -7 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(45, 40, 50) : BV:8
52 : ite(42, 43, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : ite(36, 37, 53) : BV:8
55 : ite(33, 34, 54) : BV:8
56 : ite(30, 31, 55) : BV:8
57 : ite(27, 28, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 23, 24) : BV:32
60 : eq(59, 26) : BOOL
61 : eq(59, 29) : BOOL
62 : eq(59, 32) : BOOL
63 : eq(59, 35) : BOOL
64 : eq(59, 38) : BOOL
65 : eq(59, 41) : BOOL
66 : eq(59, 44) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 40, 68) : BV:8
70 : ite(65, 43, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : ite(63, 37, 71) : BV:8
73 : ite(62, 34, 72) : BV:8
74 : ite(61, 31, 73) : BV:8
75 : ite(60, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 24) : BV:32
78 : eq(77, 26) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : eq(77, 35) : BOOL
82 : eq(77, 38) : BOOL
83 : eq(77, 41) : BOOL
84 : eq(77, 44) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 43, 87) : BV:8
89 : ite(82, 40, 88) : BV:8
90 : ite(81, 37, 89) : BV:8
91 : ite(80, 34, 90) : BV:8
92 : ite(79, 31, 91) : BV:8
93 : ite(78, 28, 92) : BV:8
94 : bvadd(23, 24) : BV:32
95 : eq(94, 26) : BOOL
96 : eq(94, 29) : BOOL
97 : eq(94, 32) : BOOL
98 : eq(94, 35) : BOOL
99 : eq(94, 38) : BOOL
100 : eq(94, 41) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 40, 103) : BV:8
105 : ite(100, 43, 104) : BV:8
106 : ite(99, 40, 105) : BV:8
107 : ite(98, 37, 106) : BV:8
108 : ite(97, 34, 107) : BV:8
109 : ite(96, 31, 108) : BV:8
110 : ite(95, 28, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 4, 111) : BV:32
113 : lambda(19, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(18, 113) : MAP[BV:32 -> BV:32]
115 : sum(1, 2, 114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
116 : sym_const(115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 310378496 { 0x12800000 +1.0e166 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 639532948 { 0x261e7f94 +1.23826837e205 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45859Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45860Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
25 : eq(23, 24) : BOOL
26 : 126 { 0x7e } : BV:8
27 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
28 : eq(23, 27) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
34 : eq(23, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
40 : eq(23, 39) : BOOL
41 : 90 { 0x5a } : BV:8
42 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
45 : eq(23, 44) : BOOL
46 : 249 { 0xf9 -7 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 38, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 38, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 38, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(18, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 310378495 { 0x127fffff +1.99999988e165 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1275483445 { 0x4c065535 +1.4947531e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 681570296 { 0x289feff8 +1.24951076e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 681570299 { 0x289feffb +1.24951112e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1232680892 { 0x497937bc +1.94701337e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1232680895 { 0x497937bf +1.94701373e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4022329308 { 0xefbfdfdc -272637988 -1.49901914e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4022329311 { 0xefbfdfdf -272637985 -1.49901950e96 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45719Var : BV:32
2 : Lambda45720Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 268435456 { 0x10000000 +1.0e161 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
55 : eq(53, 54) : BOOL
56 : 126 { 0x7e } : BV:8
57 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
58 : eq(53, 57) : BOOL
59 : 123 { 0x7b } : BV:8
60 : eq(53, 51) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
63 : eq(53, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
66 : eq(53, 65) : BOOL
67 : 191 { 0xbf -65 } : BV:8
68 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
69 : eq(53, 68) : BOOL
70 : 90 { 0x5a } : BV:8
71 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
72 : eq(53, 71) : BOOL
73 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
74 : eq(53, 73) : BOOL
75 : 249 { 0xf9 -7 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(72, 67, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(71, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 57) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 71) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 67, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 59, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(73, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 71) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 59, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(68, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 57) : BOOL
122 : eq(119, 51) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 71) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 67, 128) : BV:8
130 : ite(125, 70, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 59, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 57) : BOOL
140 : eq(137, 51) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 71) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 67, 146) : BV:8
148 : ite(143, 70, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 59, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 57) : BOOL
158 : eq(155, 51) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 71) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 67, 164) : BV:8
166 : ite(161, 70, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 59, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 57) : BOOL
176 : eq(173, 51) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 71) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 67, 182) : BV:8
184 : ite(179, 70, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 59, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 57) : BOOL
193 : eq(190, 51) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 71) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 67, 199) : BV:8
201 : ite(196, 70, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 59, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 207, 208) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45724Var : BV:32
2 : Lambda45725Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435457 { 0x10000001 +1.11e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 327071645 ] -> true, [ 327071646; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 327071645 ] -> true, [ 327071646; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45733Var : BV:32
2 : Lambda45734Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 327071645 { 0x137eb79d +1.98997843e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 327071646 { 0x137eb79e +1.98997855e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 327071647 { 0x137eb79f +1.98997867e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435457 { 0x10000001 +1.11e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45729Var : BV:32
2 : Lambda45730Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
14 : eq(12, 13) : BOOL
15 : 126 { 0x7e } : BV:8
16 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
17 : eq(12, 16) : BOOL
18 : 123 { 0x7b } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
22 : eq(12, 21) : BOOL
23 : 188 { 0xbc -68 } : BV:8
24 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
25 : eq(12, 24) : BOOL
26 : 191 { 0xbf -65 } : BV:8
27 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
28 : eq(12, 27) : BOOL
29 : 90 { 0x5a } : BV:8
30 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
33 : eq(12, 32) : BOOL
34 : 249 { 0xf9 -7 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 26, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(30, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 16) : BOOL
47 : eq(44, 10) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 30) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 26, 53) : BV:8
55 : ite(50, 29, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 18, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(32, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 16) : BOOL
64 : eq(61, 10) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 30) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 18, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(27, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 16) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 30) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 26, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 18, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 26, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 18, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 16) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 30) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 26, 123) : BV:8
125 : ite(120, 29, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 18, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 16) : BOOL
135 : eq(132, 10) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 30) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 26, 141) : BV:8
143 : ite(138, 29, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 18, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 16) : BOOL
152 : eq(149, 10) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 30) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 26, 158) : BV:8
160 : ite(155, 29, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 18, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45740Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45741Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2122039228 { 0x7e7bbfbc +1.96678876e125 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4009754623 { 0xeeffffff -285212673 -1.99999988e94 } : BV:32
10 : eq(8, 9) : BOOL
11 : 126 { 0x7e } : BV:8
12 : 4009754622 { 0xeefffffe -285212674 -1.99999976e94 } : BV:32
13 : eq(8, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 2768240643 { 0xa5000003 -1526726653 -1.35e203 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 4009754620 { 0xeefffffc -285212676 -1.99999952e94 } : BV:32
19 : eq(8, 18) : BOOL
20 : 188 { 0xbc -68 } : BV:8
21 : 4009754621 { 0xeefffffd -285212675 -1.99999964e94 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 2768240640 { 0xa5000000 -1526726656 -1.0e203 } : BV:32
25 : eq(8, 24) : BOOL
26 : 90 { 0x5a } : BV:8
27 : 2768240642 { 0xa5000002 -1526726654 -1.23e203 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2768240641 { 0xa5000001 -1526726655 -1.11e203 } : BV:32
30 : eq(8, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 23, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
868405047
=counter_example_end
=global nodece 51 num_edges_traversed 2
=global nodece 51 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3.ce4550.num_edges_traversed1
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce4550 5f6eb3ebbaac5f36176156d43f9fee48
=input.spec-%var-x-1
1 : Lambda49133Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49134Var : BV:32
17 : Lambda49135Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : 63 { 0x3f +1.751e129 } : BV:32
34 : bvule(17, 33) : BOOL
35 : and(32, 34) : BOOL
36 : 64 { 0x40 +1.762e129 } : BV:32
37 : bvule(36, 17) : BOOL
38 : bvule(17, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 65 { 0x41 +1.774e129 } : BV:32
41 : bvule(40, 17) : BOOL
42 : bvule(17, 9) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(31, 47) : BOOL
49 : ite(48, 6, 12) : BOOL
50 : lambda(17, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda49136Var : BV:32
52 : eq(16, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(21, 26) : BOOL
56 : ite(55, 12, 12) : BOOL
57 : ite(20, 6, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 33) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 9) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(31, 70) : BOOL
72 : ite(71, 6, 12) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
78 : bvmul(75, 16) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
81 : eq(79, 80) : BOOL
82 : 169 { 0xa9 -87 } : BV:8
83 : eq(79, 77) : BOOL
84 : 80 { 0x50 } : BV:8
85 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
86 : eq(79, 85) : BOOL
87 : 239 { 0xef -17 } : BV:8
88 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
89 : eq(79, 88) : BOOL
90 : 2 { 0x2 } : BV:8
91 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
92 : eq(79, 91) : BOOL
93 : 28 { 0x1c } : BV:8
94 : 0 { 0x0 } : BV:8
95 : ite(92, 93, 94) : BV:8
96 : ite(89, 90, 95) : BV:8
97 : ite(86, 87, 96) : BV:8
98 : ite(83, 84, 97) : BV:8
99 : ite(81, 82, 98) : BV:8
100 : bvadd(85, 78) : BV:32
101 : eq(100, 80) : BOOL
102 : eq(100, 77) : BOOL
103 : eq(100, 85) : BOOL
104 : eq(100, 88) : BOOL
105 : eq(100, 91) : BOOL
106 : ite(105, 93, 94) : BV:8
107 : ite(104, 90, 106) : BV:8
108 : ite(103, 87, 107) : BV:8
109 : ite(102, 84, 108) : BV:8
110 : ite(101, 82, 109) : BV:8
111 : bvadd(80, 78) : BV:32
112 : eq(111, 80) : BOOL
113 : eq(111, 77) : BOOL
114 : eq(111, 85) : BOOL
115 : eq(111, 88) : BOOL
116 : eq(111, 91) : BOOL
117 : ite(116, 93, 94) : BV:8
118 : ite(115, 90, 117) : BV:8
119 : ite(114, 87, 118) : BV:8
120 : ite(113, 84, 119) : BV:8
121 : ite(112, 82, 120) : BV:8
122 : bvadd(91, 78) : BV:32
123 : eq(122, 80) : BOOL
124 : eq(122, 77) : BOOL
125 : eq(122, 85) : BOOL
126 : eq(122, 88) : BOOL
127 : eq(122, 91) : BOOL
128 : ite(127, 93, 94) : BV:8
129 : ite(126, 90, 128) : BV:8
130 : ite(125, 87, 129) : BV:8
131 : ite(124, 84, 130) : BV:8
132 : ite(123, 82, 131) : BV:8
133 : bvconcat(99, 110, 121, 132) : BV:32
134 : bvadd(74, 76, 133) : BV:32
135 : eq(134, 80) : BOOL
136 : eq(134, 77) : BOOL
137 : eq(134, 85) : BOOL
138 : eq(134, 88) : BOOL
139 : eq(134, 91) : BOOL
140 : ite(139, 93, 94) : BV:8
141 : ite(138, 90, 140) : BV:8
142 : ite(137, 87, 141) : BV:8
143 : ite(136, 84, 142) : BV:8
144 : ite(135, 82, 143) : BV:8
145 : bvadd(24, 76, 133) : BV:32
146 : eq(145, 80) : BOOL
147 : eq(145, 77) : BOOL
148 : eq(145, 85) : BOOL
149 : eq(145, 88) : BOOL
150 : eq(145, 91) : BOOL
151 : ite(150, 93, 94) : BV:8
152 : ite(149, 90, 151) : BV:8
153 : ite(148, 87, 152) : BV:8
154 : ite(147, 84, 153) : BV:8
155 : ite(146, 82, 154) : BV:8
156 : bvadd(7, 76, 133) : BV:32
157 : eq(156, 80) : BOOL
158 : eq(156, 77) : BOOL
159 : eq(156, 85) : BOOL
160 : eq(156, 88) : BOOL
161 : eq(156, 91) : BOOL
162 : ite(161, 93, 94) : BV:8
163 : ite(160, 90, 162) : BV:8
164 : ite(159, 87, 163) : BV:8
165 : ite(158, 84, 164) : BV:8
166 : ite(157, 82, 165) : BV:8
167 : bvadd(76, 133) : BV:32
168 : eq(167, 80) : BOOL
169 : eq(167, 77) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 88) : BOOL
172 : eq(167, 91) : BOOL
173 : ite(172, 93, 94) : BV:8
174 : ite(171, 90, 173) : BV:8
175 : ite(170, 87, 174) : BV:8
176 : ite(169, 84, 175) : BV:8
177 : ite(168, 82, 176) : BV:8
178 : bvconcat(144, 155, 166, 177) : BV:32
179 : ite(54, 24, 178) : BV:32
180 : ite(73, 178, 179) : BV:32
181 : ite(54, 24, 180) : BV:32
182 : lambda(51, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(50, 182) : MAP[BV:32 -> BV:32]
184 : lambda(16, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(15, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda49160Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49161Var : BV:32
18 : eq(17, 2) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 80 { 0x50 } : BV:8
33 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : eq(26, 25) : BOOL
37 : 2 { 0x2 } : BV:8
38 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 28 { 0x1c } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : bvadd(19, 24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : eq(47, 33) : BOOL
51 : eq(47, 25) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 35, 54) : BV:8
56 : ite(49, 32, 55) : BV:8
57 : ite(48, 29, 56) : BV:8
58 : bvadd(20, 24, 25) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : eq(58, 33) : BOOL
62 : eq(58, 25) : BOOL
63 : eq(58, 38) : BOOL
64 : ite(63, 40, 41) : BV:8
65 : ite(62, 37, 64) : BV:8
66 : ite(61, 35, 65) : BV:8
67 : ite(60, 32, 66) : BV:8
68 : ite(59, 29, 67) : BV:8
69 : bvadd(24, 25) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : eq(69, 33) : BOOL
73 : eq(69, 25) : BOOL
74 : eq(69, 38) : BOOL
75 : ite(74, 40, 41) : BV:8
76 : ite(73, 37, 75) : BV:8
77 : ite(72, 35, 76) : BV:8
78 : ite(71, 32, 77) : BV:8
79 : ite(70, 29, 78) : BV:8
80 : bvconcat(46, 57, 68, 79) : BV:32
81 : ite(21, 2, 80) : BV:32
82 : ite(18, 19, 81) : BV:32
83 : lambda(17, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(16, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1357883675 ] -> 0, [ 1357883676; 1357883676 ] -> 2, [ 1357883677; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 28, [ 2147483645; 2147483645 ] -> 169, [ 2147483646; 2147483646 ] -> 239, [ 2147483647; 2147483647 ] -> 80, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2447352599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2447352600; 2447352603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2447352604; 2687700631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2687700632; 2687700635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2687700636; 3894538475 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3894538476; 3894538479 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3894538480; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2447352600 { 0x91dfa318 -1847614696 -1.74716472e164 } : BV:32
=input.dst.llvm-%m
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3894538476 { 0xe821f0ec -400428820 -1.26516485e81 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2687700632 { 0xa0330e98 -1607266664 -1.39888286e193 } : BV:32
=input.dst.llvm-%x
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49153Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49154Var : BV:32
17 : Lambda49155Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : 63 { 0x3f +1.751e129 } : BV:32
34 : bvule(17, 33) : BOOL
35 : and(32, 34) : BOOL
36 : 64 { 0x40 +1.762e129 } : BV:32
37 : bvule(36, 17) : BOOL
38 : bvule(17, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 65 { 0x41 +1.774e129 } : BV:32
41 : bvule(40, 17) : BOOL
42 : bvule(17, 9) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(31, 47) : BOOL
49 : ite(48, 6, 12) : BOOL
50 : lambda(17, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda49156Var : BV:32
52 : eq(16, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
59 : bvmul(56, 16) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 169 { 0xa9 -87 } : BV:8
64 : eq(60, 58) : BOOL
65 : 80 { 0x50 } : BV:8
66 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
67 : eq(60, 66) : BOOL
68 : 239 { 0xef -17 } : BV:8
69 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
70 : eq(60, 69) : BOOL
71 : 2 { 0x2 } : BV:8
72 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
73 : eq(60, 72) : BOOL
74 : 28 { 0x1c } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(62, 63, 79) : BV:8
81 : bvadd(66, 59) : BV:32
82 : eq(81, 61) : BOOL
83 : eq(81, 58) : BOOL
84 : eq(81, 66) : BOOL
85 : eq(81, 69) : BOOL
86 : eq(81, 72) : BOOL
87 : ite(86, 74, 75) : BV:8
88 : ite(85, 71, 87) : BV:8
89 : ite(84, 68, 88) : BV:8
90 : ite(83, 65, 89) : BV:8
91 : ite(82, 63, 90) : BV:8
92 : bvadd(61, 59) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 58) : BOOL
95 : eq(92, 66) : BOOL
96 : eq(92, 69) : BOOL
97 : eq(92, 72) : BOOL
98 : ite(97, 74, 75) : BV:8
99 : ite(96, 71, 98) : BV:8
100 : ite(95, 68, 99) : BV:8
101 : ite(94, 65, 100) : BV:8
102 : ite(93, 63, 101) : BV:8
103 : bvadd(72, 59) : BV:32
104 : eq(103, 61) : BOOL
105 : eq(103, 58) : BOOL
106 : eq(103, 66) : BOOL
107 : eq(103, 69) : BOOL
108 : eq(103, 72) : BOOL
109 : ite(108, 74, 75) : BV:8
110 : ite(107, 71, 109) : BV:8
111 : ite(106, 68, 110) : BV:8
112 : ite(105, 65, 111) : BV:8
113 : ite(104, 63, 112) : BV:8
114 : bvconcat(80, 91, 102, 113) : BV:32
115 : bvadd(55, 57, 114) : BV:32
116 : eq(115, 61) : BOOL
117 : eq(115, 58) : BOOL
118 : eq(115, 66) : BOOL
119 : eq(115, 69) : BOOL
120 : eq(115, 72) : BOOL
121 : ite(120, 74, 75) : BV:8
122 : ite(119, 71, 121) : BV:8
123 : ite(118, 68, 122) : BV:8
124 : ite(117, 65, 123) : BV:8
125 : ite(116, 63, 124) : BV:8
126 : bvadd(24, 57, 114) : BV:32
127 : eq(126, 61) : BOOL
128 : eq(126, 58) : BOOL
129 : eq(126, 66) : BOOL
130 : eq(126, 69) : BOOL
131 : eq(126, 72) : BOOL
132 : ite(131, 74, 75) : BV:8
133 : ite(130, 71, 132) : BV:8
134 : ite(129, 68, 133) : BV:8
135 : ite(128, 65, 134) : BV:8
136 : ite(127, 63, 135) : BV:8
137 : bvadd(7, 57, 114) : BV:32
138 : eq(137, 61) : BOOL
139 : eq(137, 58) : BOOL
140 : eq(137, 66) : BOOL
141 : eq(137, 69) : BOOL
142 : eq(137, 72) : BOOL
143 : ite(142, 74, 75) : BV:8
144 : ite(141, 71, 143) : BV:8
145 : ite(140, 68, 144) : BV:8
146 : ite(139, 65, 145) : BV:8
147 : ite(138, 63, 146) : BV:8
148 : bvadd(57, 114) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 58) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 69) : BOOL
153 : eq(148, 72) : BOOL
154 : ite(153, 74, 75) : BV:8
155 : ite(152, 71, 154) : BV:8
156 : ite(151, 68, 155) : BV:8
157 : ite(150, 65, 156) : BV:8
158 : ite(149, 63, 157) : BV:8
159 : bvconcat(125, 136, 147, 158) : BV:32
160 : ite(54, 24, 159) : BV:32
161 : lambda(51, 160) : FUNCTION[BV:32 -> BV:32]
162 : map(50, 161) : MAP[BV:32 -> BV:32]
163 : lambda(16, 162) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
164 : map(15, 163) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
165 : sym_const(164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda49142Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 63 { 0x3f +1.751e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 64 { 0x40 +1.762e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda49143Var : BV:32
20 : eq(19, 1) : BOOL
21 : eq(19, 4) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
29 : eq(27, 28) : BOOL
30 : 169 { 0xa9 -87 } : BV:8
31 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
32 : eq(27, 31) : BOOL
33 : 80 { 0x50 } : BV:8
34 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
35 : eq(27, 34) : BOOL
36 : 239 { 0xef -17 } : BV:8
37 : eq(27, 26) : BOOL
38 : 2 { 0x2 } : BV:8
39 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
40 : eq(27, 39) : BOOL
41 : 28 { 0x1c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : bvadd(22, 25, 26) : BV:32
49 : eq(48, 28) : BOOL
50 : eq(48, 31) : BOOL
51 : eq(48, 34) : BOOL
52 : eq(48, 26) : BOOL
53 : eq(48, 39) : BOOL
54 : ite(53, 41, 42) : BV:8
55 : ite(52, 38, 54) : BV:8
56 : ite(51, 36, 55) : BV:8
57 : ite(50, 33, 56) : BV:8
58 : ite(49, 30, 57) : BV:8
59 : bvadd(1, 25, 26) : BV:32
60 : eq(59, 28) : BOOL
61 : eq(59, 31) : BOOL
62 : eq(59, 34) : BOOL
63 : eq(59, 26) : BOOL
64 : eq(59, 39) : BOOL
65 : ite(64, 41, 42) : BV:8
66 : ite(63, 38, 65) : BV:8
67 : ite(62, 36, 66) : BV:8
68 : ite(61, 33, 67) : BV:8
69 : ite(60, 30, 68) : BV:8
70 : bvadd(25, 26) : BV:32
71 : eq(70, 28) : BOOL
72 : eq(70, 31) : BOOL
73 : eq(70, 34) : BOOL
74 : eq(70, 26) : BOOL
75 : eq(70, 39) : BOOL
76 : ite(75, 41, 42) : BV:8
77 : ite(74, 38, 76) : BV:8
78 : ite(73, 36, 77) : BV:8
79 : ite(72, 33, 78) : BV:8
80 : ite(71, 30, 79) : BV:8
81 : bvconcat(47, 58, 69, 80) : BV:32
82 : ite(21, 22, 81) : BV:32
83 : ite(20, 4, 82) : BV:32
84 : lambda(19, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(18, 84) : MAP[BV:32 -> BV:32]
86 : sum(1, 2, 85) : SUM[UNIT,MAP[BV:32 -> BV:32]]
87 : sym_const(86) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 63 { 0x3f +1.751e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 64 { 0x40 +1.762e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(1, 1) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(1, 15) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 1) : BV:32
24 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
27 : eq(25, 26) : BOOL
28 : 169 { 0xa9 -87 } : BV:8
29 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
30 : eq(25, 29) : BOOL
31 : 80 { 0x50 } : BV:8
32 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
33 : eq(25, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : eq(25, 24) : BOOL
36 : 2 { 0x2 } : BV:8
37 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
38 : eq(25, 37) : BOOL
39 : 28 { 0x1c } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(33, 34, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : bvadd(19, 23, 24) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : eq(46, 24) : BOOL
51 : eq(46, 37) : BOOL
52 : ite(51, 39, 40) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 31, 54) : BV:8
56 : ite(47, 28, 55) : BV:8
57 : bvadd(15, 23, 24) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : eq(57, 32) : BOOL
61 : eq(57, 24) : BOOL
62 : eq(57, 37) : BOOL
63 : ite(62, 39, 40) : BV:8
64 : ite(61, 36, 63) : BV:8
65 : ite(60, 34, 64) : BV:8
66 : ite(59, 31, 65) : BV:8
67 : ite(58, 28, 66) : BV:8
68 : bvadd(23, 24) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : eq(68, 32) : BOOL
72 : eq(68, 24) : BOOL
73 : eq(68, 37) : BOOL
74 : ite(73, 39, 40) : BV:8
75 : ite(72, 36, 74) : BV:8
76 : ite(71, 34, 75) : BV:8
77 : ite(70, 31, 76) : BV:8
78 : ite(69, 28, 77) : BV:8
79 : bvconcat(45, 56, 67, 78) : BV:32
80 : ite(20, 1, 79) : BV:32
81 : ite(18, 19, 80) : BV:32
82 : sum(16, 17, 81) : SUM[UNIT,BV:32]
83 : sym_const(82) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1312808848 { 0x4e3fdf90 +1.49901008e29 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda49165Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49166Var : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 80 { 0x50 } : BV:8
33 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : eq(26, 25) : BOOL
37 : 2 { 0x2 } : BV:8
38 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 28 { 0x1c } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : bvadd(21, 24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : eq(47, 33) : BOOL
51 : eq(47, 25) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 35, 54) : BV:8
56 : ite(49, 32, 55) : BV:8
57 : ite(48, 29, 56) : BV:8
58 : bvadd(18, 24, 25) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : eq(58, 33) : BOOL
62 : eq(58, 25) : BOOL
63 : eq(58, 38) : BOOL
64 : ite(63, 40, 41) : BV:8
65 : ite(62, 37, 64) : BV:8
66 : ite(61, 35, 65) : BV:8
67 : ite(60, 32, 66) : BV:8
68 : ite(59, 29, 67) : BV:8
69 : bvadd(24, 25) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : eq(69, 33) : BOOL
73 : eq(69, 25) : BOOL
74 : eq(69, 38) : BOOL
75 : ite(74, 40, 41) : BV:8
76 : ite(73, 37, 75) : BV:8
77 : ite(72, 35, 76) : BV:8
78 : ite(71, 32, 77) : BV:8
79 : ite(70, 29, 78) : BV:8
80 : bvconcat(46, 57, 68, 79) : BV:32
81 : ite(20, 21, 80) : BV:32
82 : ite(19, 2, 81) : BV:32
83 : lambda(17, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(16, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 589321627 { 0x2320559b +1.25261247e199 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3894538476 { 0xe821f0ec -400428820 -1.26516485e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3894538479 { 0xe821f0ef -400428817 -1.26516520e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2687700632 { 0xa0330e98 -1607266664 -1.39888286e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2687700635 { 0xa0330e9b -1607266661 -1.39888322e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2447352600 { 0x91dfa318 -1847614696 -1.74716472e164 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2447352603 { 0x91dfa31b -1847614693 -1.74716508e164 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49025Var : BV:32
2 : Lambda49026Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(3, 1) : BOOL
9 : bvule(1, 3) : BOOL
10 : and(8, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1 { 0x1 +1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : bvule(7, 1) : BOOL
23 : and(22, 15) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 12, 24) : BV:32
26 : ite(10, 3, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : bvule(3, 2) : BOOL
29 : 63 { 0x3f +1.751e129 } : BV:32
30 : bvule(2, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 64 { 0x40 +1.762e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 65 { 0x41 +1.774e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
54 : eq(52, 53) : BOOL
55 : 169 { 0xa9 -87 } : BV:8
56 : eq(52, 50) : BOOL
57 : 80 { 0x50 } : BV:8
58 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
59 : eq(52, 58) : BOOL
60 : 239 { 0xef -17 } : BV:8
61 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
62 : eq(52, 61) : BOOL
63 : 2 { 0x2 } : BV:8
64 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
65 : eq(52, 64) : BOOL
66 : 28 { 0x1c } : BV:8
67 : 0 { 0x0 } : BV:8
68 : ite(65, 66, 67) : BV:8
69 : ite(62, 63, 68) : BV:8
70 : ite(59, 60, 69) : BV:8
71 : ite(56, 57, 70) : BV:8
72 : ite(54, 55, 71) : BV:8
73 : bvadd(58, 51) : BV:32
74 : eq(73, 53) : BOOL
75 : eq(73, 50) : BOOL
76 : eq(73, 58) : BOOL
77 : eq(73, 61) : BOOL
78 : eq(73, 64) : BOOL
79 : ite(78, 66, 67) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : ite(76, 60, 80) : BV:8
82 : ite(75, 57, 81) : BV:8
83 : ite(74, 55, 82) : BV:8
84 : bvadd(53, 51) : BV:32
85 : eq(84, 53) : BOOL
86 : eq(84, 50) : BOOL
87 : eq(84, 58) : BOOL
88 : eq(84, 61) : BOOL
89 : eq(84, 64) : BOOL
90 : ite(89, 66, 67) : BV:8
91 : ite(88, 63, 90) : BV:8
92 : ite(87, 60, 91) : BV:8
93 : ite(86, 57, 92) : BV:8
94 : ite(85, 55, 93) : BV:8
95 : bvadd(64, 51) : BV:32
96 : eq(95, 53) : BOOL
97 : eq(95, 50) : BOOL
98 : eq(95, 58) : BOOL
99 : eq(95, 61) : BOOL
100 : eq(95, 64) : BOOL
101 : ite(100, 66, 67) : BV:8
102 : ite(99, 63, 101) : BV:8
103 : ite(98, 60, 102) : BV:8
104 : ite(97, 57, 103) : BV:8
105 : ite(96, 55, 104) : BV:8
106 : bvconcat(72, 83, 94, 105) : BV:32
107 : bvadd(47, 49, 106) : BV:32
108 : eq(107, 53) : BOOL
109 : eq(107, 50) : BOOL
110 : eq(107, 58) : BOOL
111 : eq(107, 61) : BOOL
112 : eq(107, 64) : BOOL
113 : ite(112, 66, 67) : BV:8
114 : ite(111, 63, 113) : BV:8
115 : ite(110, 60, 114) : BV:8
116 : ite(109, 57, 115) : BV:8
117 : ite(108, 55, 116) : BV:8
118 : bvadd(7, 49, 106) : BV:32
119 : eq(118, 53) : BOOL
120 : eq(118, 50) : BOOL
121 : eq(118, 58) : BOOL
122 : eq(118, 61) : BOOL
123 : eq(118, 64) : BOOL
124 : ite(123, 66, 67) : BV:8
125 : ite(122, 63, 124) : BV:8
126 : ite(121, 60, 125) : BV:8
127 : ite(120, 57, 126) : BV:8
128 : ite(119, 55, 127) : BV:8
129 : bvadd(12, 49, 106) : BV:32
130 : eq(129, 53) : BOOL
131 : eq(129, 50) : BOOL
132 : eq(129, 58) : BOOL
133 : eq(129, 61) : BOOL
134 : eq(129, 64) : BOOL
135 : ite(134, 66, 67) : BV:8
136 : ite(133, 63, 135) : BV:8
137 : ite(132, 60, 136) : BV:8
138 : ite(131, 57, 137) : BV:8
139 : ite(130, 55, 138) : BV:8
140 : bvadd(49, 106) : BV:32
141 : eq(140, 53) : BOOL
142 : eq(140, 50) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 61) : BOOL
145 : eq(140, 64) : BOOL
146 : ite(145, 66, 67) : BV:8
147 : ite(144, 63, 146) : BV:8
148 : ite(143, 60, 147) : BV:8
149 : ite(142, 57, 148) : BV:8
150 : ite(141, 55, 149) : BV:8
151 : bvconcat(117, 128, 139, 150) : BV:32
152 : ite(6, 7, 151) : BV:32
153 : ite(46, 151, 152) : BV:32
154 : ite(6, 7, 153) : BV:32
155 : lambda(1, 2, 154) : FUNCTION[BV:32,BV:32 -> BV:32]
156 : sym_const(155) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49030Var : BV:32
2 : Lambda49031Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : 63 { 0x3f +1.751e129 } : BV:32
22 : bvule(2, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 64 { 0x40 +1.762e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 65 { 0x41 +1.774e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49039Var : BV:32
2 : Lambda49040Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : 63 { 0x3f +1.751e129 } : BV:32
22 : bvule(2, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 64 { 0x40 +1.762e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 65 { 0x41 +1.774e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49035Var : BV:32
2 : Lambda49036Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 2) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : bvmul(9, 1) : BV:32
13 : bvadd(11, 12) : BV:32
14 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
15 : eq(13, 14) : BOOL
16 : 169 { 0xa9 -87 } : BV:8
17 : eq(13, 11) : BOOL
18 : 80 { 0x50 } : BV:8
19 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
20 : eq(13, 19) : BOOL
21 : 239 { 0xef -17 } : BV:8
22 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
23 : eq(13, 22) : BOOL
24 : 2 { 0x2 } : BV:8
25 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
26 : eq(13, 25) : BOOL
27 : 28 { 0x1c } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : bvadd(19, 12) : BV:32
35 : eq(34, 14) : BOOL
36 : eq(34, 11) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 16, 43) : BV:8
45 : bvadd(14, 12) : BV:32
46 : eq(45, 14) : BOOL
47 : eq(45, 11) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 16, 54) : BV:8
56 : bvadd(25, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : bvadd(8, 10, 67) : BV:32
69 : eq(68, 14) : BOOL
70 : eq(68, 11) : BOOL
71 : eq(68, 19) : BOOL
72 : eq(68, 22) : BOOL
73 : eq(68, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : bvadd(7, 10, 67) : BV:32
80 : eq(79, 14) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 19) : BOOL
83 : eq(79, 22) : BOOL
84 : eq(79, 25) : BOOL
85 : ite(84, 27, 28) : BV:8
86 : ite(83, 24, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 18, 87) : BV:8
89 : ite(80, 16, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 10, 67) : BV:32
92 : eq(91, 14) : BOOL
93 : eq(91, 11) : BOOL
94 : eq(91, 19) : BOOL
95 : eq(91, 22) : BOOL
96 : eq(91, 25) : BOOL
97 : ite(96, 27, 28) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 21, 98) : BV:8
100 : ite(93, 18, 99) : BV:8
101 : ite(92, 16, 100) : BV:8
102 : bvadd(10, 67) : BV:32
103 : eq(102, 14) : BOOL
104 : eq(102, 11) : BOOL
105 : eq(102, 19) : BOOL
106 : eq(102, 22) : BOOL
107 : eq(102, 25) : BOOL
108 : ite(107, 27, 28) : BV:8
109 : ite(106, 24, 108) : BV:8
110 : ite(105, 21, 109) : BV:8
111 : ite(104, 18, 110) : BV:8
112 : ite(103, 16, 111) : BV:8
113 : bvconcat(78, 89, 101, 112) : BV:32
114 : ite(6, 7, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49046Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 80 { 0x50 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 239 { 0xef -17 } : BV:8
21 : eq(11, 10) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 28 { 0x1c } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(6, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 18) : BOOL
36 : eq(32, 10) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 20, 39) : BV:8
41 : ite(34, 17, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : bvadd(2, 9, 10) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 10) : BOOL
48 : eq(43, 23) : BOOL
49 : ite(48, 25, 26) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 20, 50) : BV:8
52 : ite(45, 17, 51) : BV:8
53 : ite(44, 14, 52) : BV:8
54 : bvadd(9, 10) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : eq(54, 18) : BOOL
58 : eq(54, 10) : BOOL
59 : eq(54, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : ite(57, 20, 61) : BV:8
63 : ite(56, 17, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : bvconcat(31, 42, 53, 64) : BV:32
66 : ite(5, 6, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda49047Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 80 { 0x50 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 239 { 0xef -17 } : BV:8
21 : eq(11, 10) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 28 { 0x1c } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(6, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 18) : BOOL
36 : eq(32, 10) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 20, 39) : BV:8
41 : ite(34, 17, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : bvadd(2, 9, 10) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 10) : BOOL
48 : eq(43, 23) : BOOL
49 : ite(48, 25, 26) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 20, 50) : BV:8
52 : ite(45, 17, 51) : BV:8
53 : ite(44, 14, 52) : BV:8
54 : bvadd(9, 10) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : eq(54, 18) : BOOL
58 : eq(54, 10) : BOOL
59 : eq(54, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : ite(57, 20, 61) : BV:8
63 : ite(56, 17, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : bvconcat(31, 42, 53, 64) : BV:32
66 : ite(5, 6, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49054Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 80 { 0x50 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 239 { 0xef -17 } : BV:8
21 : eq(11, 10) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 28 { 0x1c } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(4, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 18) : BOOL
36 : eq(32, 10) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 20, 39) : BV:8
41 : ite(34, 17, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : bvadd(5, 9, 10) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 10) : BOOL
48 : eq(43, 23) : BOOL
49 : ite(48, 25, 26) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 20, 50) : BV:8
52 : ite(45, 17, 51) : BV:8
53 : ite(44, 14, 52) : BV:8
54 : bvadd(9, 10) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : eq(54, 18) : BOOL
58 : eq(54, 10) : BOOL
59 : eq(54, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : ite(57, 20, 61) : BV:8
63 : ite(56, 17, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : bvconcat(31, 42, 53, 64) : BV:32
66 : ite(6, 2, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
440869512
=counter_example_end
=global nodece 52 num_edges_traversed 1
=global nodece 52 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3.ce4603.num_edges_traversed2
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3.ce4603 2bbc049caf3e3e265af3b2ad690456d
=input.spec-%var-x-1
1 : Lambda49133Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49134Var : BV:32
17 : Lambda49135Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : 63 { 0x3f +1.751e129 } : BV:32
34 : bvule(17, 33) : BOOL
35 : and(32, 34) : BOOL
36 : 64 { 0x40 +1.762e129 } : BV:32
37 : bvule(36, 17) : BOOL
38 : bvule(17, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 65 { 0x41 +1.774e129 } : BV:32
41 : bvule(40, 17) : BOOL
42 : bvule(17, 9) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(31, 47) : BOOL
49 : ite(48, 6, 12) : BOOL
50 : lambda(17, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda49136Var : BV:32
52 : eq(16, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(21, 26) : BOOL
56 : ite(55, 12, 12) : BOOL
57 : ite(20, 6, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 33) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 9) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(31, 70) : BOOL
72 : ite(71, 6, 12) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
78 : bvmul(75, 16) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
81 : eq(79, 80) : BOOL
82 : 169 { 0xa9 -87 } : BV:8
83 : eq(79, 77) : BOOL
84 : 80 { 0x50 } : BV:8
85 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
86 : eq(79, 85) : BOOL
87 : 239 { 0xef -17 } : BV:8
88 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
89 : eq(79, 88) : BOOL
90 : 2 { 0x2 } : BV:8
91 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
92 : eq(79, 91) : BOOL
93 : 28 { 0x1c } : BV:8
94 : 0 { 0x0 } : BV:8
95 : ite(92, 93, 94) : BV:8
96 : ite(89, 90, 95) : BV:8
97 : ite(86, 87, 96) : BV:8
98 : ite(83, 84, 97) : BV:8
99 : ite(81, 82, 98) : BV:8
100 : bvadd(85, 78) : BV:32
101 : eq(100, 80) : BOOL
102 : eq(100, 77) : BOOL
103 : eq(100, 85) : BOOL
104 : eq(100, 88) : BOOL
105 : eq(100, 91) : BOOL
106 : ite(105, 93, 94) : BV:8
107 : ite(104, 90, 106) : BV:8
108 : ite(103, 87, 107) : BV:8
109 : ite(102, 84, 108) : BV:8
110 : ite(101, 82, 109) : BV:8
111 : bvadd(80, 78) : BV:32
112 : eq(111, 80) : BOOL
113 : eq(111, 77) : BOOL
114 : eq(111, 85) : BOOL
115 : eq(111, 88) : BOOL
116 : eq(111, 91) : BOOL
117 : ite(116, 93, 94) : BV:8
118 : ite(115, 90, 117) : BV:8
119 : ite(114, 87, 118) : BV:8
120 : ite(113, 84, 119) : BV:8
121 : ite(112, 82, 120) : BV:8
122 : bvadd(91, 78) : BV:32
123 : eq(122, 80) : BOOL
124 : eq(122, 77) : BOOL
125 : eq(122, 85) : BOOL
126 : eq(122, 88) : BOOL
127 : eq(122, 91) : BOOL
128 : ite(127, 93, 94) : BV:8
129 : ite(126, 90, 128) : BV:8
130 : ite(125, 87, 129) : BV:8
131 : ite(124, 84, 130) : BV:8
132 : ite(123, 82, 131) : BV:8
133 : bvconcat(99, 110, 121, 132) : BV:32
134 : bvadd(74, 76, 133) : BV:32
135 : eq(134, 80) : BOOL
136 : eq(134, 77) : BOOL
137 : eq(134, 85) : BOOL
138 : eq(134, 88) : BOOL
139 : eq(134, 91) : BOOL
140 : ite(139, 93, 94) : BV:8
141 : ite(138, 90, 140) : BV:8
142 : ite(137, 87, 141) : BV:8
143 : ite(136, 84, 142) : BV:8
144 : ite(135, 82, 143) : BV:8
145 : bvadd(24, 76, 133) : BV:32
146 : eq(145, 80) : BOOL
147 : eq(145, 77) : BOOL
148 : eq(145, 85) : BOOL
149 : eq(145, 88) : BOOL
150 : eq(145, 91) : BOOL
151 : ite(150, 93, 94) : BV:8
152 : ite(149, 90, 151) : BV:8
153 : ite(148, 87, 152) : BV:8
154 : ite(147, 84, 153) : BV:8
155 : ite(146, 82, 154) : BV:8
156 : bvadd(7, 76, 133) : BV:32
157 : eq(156, 80) : BOOL
158 : eq(156, 77) : BOOL
159 : eq(156, 85) : BOOL
160 : eq(156, 88) : BOOL
161 : eq(156, 91) : BOOL
162 : ite(161, 93, 94) : BV:8
163 : ite(160, 90, 162) : BV:8
164 : ite(159, 87, 163) : BV:8
165 : ite(158, 84, 164) : BV:8
166 : ite(157, 82, 165) : BV:8
167 : bvadd(76, 133) : BV:32
168 : eq(167, 80) : BOOL
169 : eq(167, 77) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 88) : BOOL
172 : eq(167, 91) : BOOL
173 : ite(172, 93, 94) : BV:8
174 : ite(171, 90, 173) : BV:8
175 : ite(170, 87, 174) : BV:8
176 : ite(169, 84, 175) : BV:8
177 : ite(168, 82, 176) : BV:8
178 : bvconcat(144, 155, 166, 177) : BV:32
179 : ite(54, 24, 178) : BV:32
180 : ite(73, 178, 179) : BV:32
181 : ite(54, 24, 180) : BV:32
182 : lambda(51, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(50, 182) : MAP[BV:32 -> BV:32]
184 : lambda(16, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(15, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda49160Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49161Var : BV:32
18 : eq(17, 2) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 80 { 0x50 } : BV:8
33 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : eq(26, 25) : BOOL
37 : 2 { 0x2 } : BV:8
38 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 28 { 0x1c } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : bvadd(19, 24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : eq(47, 33) : BOOL
51 : eq(47, 25) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 35, 54) : BV:8
56 : ite(49, 32, 55) : BV:8
57 : ite(48, 29, 56) : BV:8
58 : bvadd(20, 24, 25) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : eq(58, 33) : BOOL
62 : eq(58, 25) : BOOL
63 : eq(58, 38) : BOOL
64 : ite(63, 40, 41) : BV:8
65 : ite(62, 37, 64) : BV:8
66 : ite(61, 35, 65) : BV:8
67 : ite(60, 32, 66) : BV:8
68 : ite(59, 29, 67) : BV:8
69 : bvadd(24, 25) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : eq(69, 33) : BOOL
73 : eq(69, 25) : BOOL
74 : eq(69, 38) : BOOL
75 : ite(74, 40, 41) : BV:8
76 : ite(73, 37, 75) : BV:8
77 : ite(72, 35, 76) : BV:8
78 : ite(71, 32, 77) : BV:8
79 : ite(70, 29, 78) : BV:8
80 : bvconcat(46, 57, 68, 79) : BV:32
81 : ite(21, 2, 80) : BV:32
82 : ite(18, 19, 81) : BV:32
83 : lambda(17, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(16, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1357883675 ] -> 0, [ 1357883676; 1357883676 ] -> 2, [ 1357883677; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 28, [ 2147483645; 2147483645 ] -> 169, [ 2147483646; 2147483646 ] -> 239, [ 2147483647; 2147483647 ] -> 80, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2447352599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2447352600; 2447352603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2447352604; 2687700631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2687700632; 2687700635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2687700636; 3894538475 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3894538476; 3894538479 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3894538480; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2447352600 { 0x91dfa318 -1847614696 -1.74716472e164 } : BV:32
=input.dst.llvm-%m
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3894538476 { 0xe821f0ec -400428820 -1.26516485e81 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2687700632 { 0xa0330e98 -1607266664 -1.39888286e193 } : BV:32
=input.dst.llvm-%x
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49153Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49154Var : BV:32
17 : Lambda49155Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : 63 { 0x3f +1.751e129 } : BV:32
34 : bvule(17, 33) : BOOL
35 : and(32, 34) : BOOL
36 : 64 { 0x40 +1.762e129 } : BV:32
37 : bvule(36, 17) : BOOL
38 : bvule(17, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 65 { 0x41 +1.774e129 } : BV:32
41 : bvule(40, 17) : BOOL
42 : bvule(17, 9) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(31, 47) : BOOL
49 : ite(48, 6, 12) : BOOL
50 : lambda(17, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda49156Var : BV:32
52 : eq(16, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
59 : bvmul(56, 16) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 169 { 0xa9 -87 } : BV:8
64 : eq(60, 58) : BOOL
65 : 80 { 0x50 } : BV:8
66 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
67 : eq(60, 66) : BOOL
68 : 239 { 0xef -17 } : BV:8
69 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
70 : eq(60, 69) : BOOL
71 : 2 { 0x2 } : BV:8
72 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
73 : eq(60, 72) : BOOL
74 : 28 { 0x1c } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(62, 63, 79) : BV:8
81 : bvadd(66, 59) : BV:32
82 : eq(81, 61) : BOOL
83 : eq(81, 58) : BOOL
84 : eq(81, 66) : BOOL
85 : eq(81, 69) : BOOL
86 : eq(81, 72) : BOOL
87 : ite(86, 74, 75) : BV:8
88 : ite(85, 71, 87) : BV:8
89 : ite(84, 68, 88) : BV:8
90 : ite(83, 65, 89) : BV:8
91 : ite(82, 63, 90) : BV:8
92 : bvadd(61, 59) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 58) : BOOL
95 : eq(92, 66) : BOOL
96 : eq(92, 69) : BOOL
97 : eq(92, 72) : BOOL
98 : ite(97, 74, 75) : BV:8
99 : ite(96, 71, 98) : BV:8
100 : ite(95, 68, 99) : BV:8
101 : ite(94, 65, 100) : BV:8
102 : ite(93, 63, 101) : BV:8
103 : bvadd(72, 59) : BV:32
104 : eq(103, 61) : BOOL
105 : eq(103, 58) : BOOL
106 : eq(103, 66) : BOOL
107 : eq(103, 69) : BOOL
108 : eq(103, 72) : BOOL
109 : ite(108, 74, 75) : BV:8
110 : ite(107, 71, 109) : BV:8
111 : ite(106, 68, 110) : BV:8
112 : ite(105, 65, 111) : BV:8
113 : ite(104, 63, 112) : BV:8
114 : bvconcat(80, 91, 102, 113) : BV:32
115 : bvadd(55, 57, 114) : BV:32
116 : eq(115, 61) : BOOL
117 : eq(115, 58) : BOOL
118 : eq(115, 66) : BOOL
119 : eq(115, 69) : BOOL
120 : eq(115, 72) : BOOL
121 : ite(120, 74, 75) : BV:8
122 : ite(119, 71, 121) : BV:8
123 : ite(118, 68, 122) : BV:8
124 : ite(117, 65, 123) : BV:8
125 : ite(116, 63, 124) : BV:8
126 : bvadd(24, 57, 114) : BV:32
127 : eq(126, 61) : BOOL
128 : eq(126, 58) : BOOL
129 : eq(126, 66) : BOOL
130 : eq(126, 69) : BOOL
131 : eq(126, 72) : BOOL
132 : ite(131, 74, 75) : BV:8
133 : ite(130, 71, 132) : BV:8
134 : ite(129, 68, 133) : BV:8
135 : ite(128, 65, 134) : BV:8
136 : ite(127, 63, 135) : BV:8
137 : bvadd(7, 57, 114) : BV:32
138 : eq(137, 61) : BOOL
139 : eq(137, 58) : BOOL
140 : eq(137, 66) : BOOL
141 : eq(137, 69) : BOOL
142 : eq(137, 72) : BOOL
143 : ite(142, 74, 75) : BV:8
144 : ite(141, 71, 143) : BV:8
145 : ite(140, 68, 144) : BV:8
146 : ite(139, 65, 145) : BV:8
147 : ite(138, 63, 146) : BV:8
148 : bvadd(57, 114) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 58) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 69) : BOOL
153 : eq(148, 72) : BOOL
154 : ite(153, 74, 75) : BV:8
155 : ite(152, 71, 154) : BV:8
156 : ite(151, 68, 155) : BV:8
157 : ite(150, 65, 156) : BV:8
158 : ite(149, 63, 157) : BV:8
159 : bvconcat(125, 136, 147, 158) : BV:32
160 : ite(54, 24, 159) : BV:32
161 : lambda(51, 160) : FUNCTION[BV:32 -> BV:32]
162 : map(50, 161) : MAP[BV:32 -> BV:32]
163 : lambda(16, 162) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
164 : map(15, 163) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
165 : sym_const(164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda49142Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 63 { 0x3f +1.751e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 64 { 0x40 +1.762e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda49143Var : BV:32
20 : eq(19, 1) : BOOL
21 : eq(19, 4) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
29 : eq(27, 28) : BOOL
30 : 169 { 0xa9 -87 } : BV:8
31 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
32 : eq(27, 31) : BOOL
33 : 80 { 0x50 } : BV:8
34 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
35 : eq(27, 34) : BOOL
36 : 239 { 0xef -17 } : BV:8
37 : eq(27, 26) : BOOL
38 : 2 { 0x2 } : BV:8
39 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
40 : eq(27, 39) : BOOL
41 : 28 { 0x1c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : bvadd(22, 25, 26) : BV:32
49 : eq(48, 28) : BOOL
50 : eq(48, 31) : BOOL
51 : eq(48, 34) : BOOL
52 : eq(48, 26) : BOOL
53 : eq(48, 39) : BOOL
54 : ite(53, 41, 42) : BV:8
55 : ite(52, 38, 54) : BV:8
56 : ite(51, 36, 55) : BV:8
57 : ite(50, 33, 56) : BV:8
58 : ite(49, 30, 57) : BV:8
59 : bvadd(1, 25, 26) : BV:32
60 : eq(59, 28) : BOOL
61 : eq(59, 31) : BOOL
62 : eq(59, 34) : BOOL
63 : eq(59, 26) : BOOL
64 : eq(59, 39) : BOOL
65 : ite(64, 41, 42) : BV:8
66 : ite(63, 38, 65) : BV:8
67 : ite(62, 36, 66) : BV:8
68 : ite(61, 33, 67) : BV:8
69 : ite(60, 30, 68) : BV:8
70 : bvadd(25, 26) : BV:32
71 : eq(70, 28) : BOOL
72 : eq(70, 31) : BOOL
73 : eq(70, 34) : BOOL
74 : eq(70, 26) : BOOL
75 : eq(70, 39) : BOOL
76 : ite(75, 41, 42) : BV:8
77 : ite(74, 38, 76) : BV:8
78 : ite(73, 36, 77) : BV:8
79 : ite(72, 33, 78) : BV:8
80 : ite(71, 30, 79) : BV:8
81 : bvconcat(47, 58, 69, 80) : BV:32
82 : ite(21, 22, 81) : BV:32
83 : ite(20, 4, 82) : BV:32
84 : lambda(19, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(18, 84) : MAP[BV:32 -> BV:32]
86 : sum(1, 2, 85) : SUM[UNIT,MAP[BV:32 -> BV:32]]
87 : sym_const(86) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1312808849 { 0x4e3fdf91 +1.49901020e29 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda49165Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49166Var : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 80 { 0x50 } : BV:8
33 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : eq(26, 25) : BOOL
37 : 2 { 0x2 } : BV:8
38 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 28 { 0x1c } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : bvadd(21, 24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : eq(47, 33) : BOOL
51 : eq(47, 25) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 35, 54) : BV:8
56 : ite(49, 32, 55) : BV:8
57 : ite(48, 29, 56) : BV:8
58 : bvadd(18, 24, 25) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : eq(58, 33) : BOOL
62 : eq(58, 25) : BOOL
63 : eq(58, 38) : BOOL
64 : ite(63, 40, 41) : BV:8
65 : ite(62, 37, 64) : BV:8
66 : ite(61, 35, 65) : BV:8
67 : ite(60, 32, 66) : BV:8
68 : ite(59, 29, 67) : BV:8
69 : bvadd(24, 25) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : eq(69, 33) : BOOL
73 : eq(69, 25) : BOOL
74 : eq(69, 38) : BOOL
75 : ite(74, 40, 41) : BV:8
76 : ite(73, 37, 75) : BV:8
77 : ite(72, 35, 76) : BV:8
78 : ite(71, 32, 77) : BV:8
79 : ite(70, 29, 78) : BV:8
80 : bvconcat(46, 57, 68, 79) : BV:32
81 : ite(20, 21, 80) : BV:32
82 : ite(19, 2, 81) : BV:32
83 : lambda(17, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(16, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 589321628 { 0x2320559c +1.25261259e199 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3894538476 { 0xe821f0ec -400428820 -1.26516485e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3894538479 { 0xe821f0ef -400428817 -1.26516520e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2687700632 { 0xa0330e98 -1607266664 -1.39888286e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2687700635 { 0xa0330e9b -1607266661 -1.39888322e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2447352600 { 0x91dfa318 -1847614696 -1.74716472e164 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2447352603 { 0x91dfa31b -1847614693 -1.74716508e164 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49025Var : BV:32
2 : Lambda49026Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(3, 1) : BOOL
9 : bvule(1, 3) : BOOL
10 : and(8, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1 { 0x1 +1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : bvule(7, 1) : BOOL
23 : and(22, 15) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 12, 24) : BV:32
26 : ite(10, 3, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : bvule(3, 2) : BOOL
29 : 63 { 0x3f +1.751e129 } : BV:32
30 : bvule(2, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 64 { 0x40 +1.762e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 65 { 0x41 +1.774e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
54 : eq(52, 53) : BOOL
55 : 169 { 0xa9 -87 } : BV:8
56 : eq(52, 50) : BOOL
57 : 80 { 0x50 } : BV:8
58 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
59 : eq(52, 58) : BOOL
60 : 239 { 0xef -17 } : BV:8
61 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
62 : eq(52, 61) : BOOL
63 : 2 { 0x2 } : BV:8
64 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
65 : eq(52, 64) : BOOL
66 : 28 { 0x1c } : BV:8
67 : 0 { 0x0 } : BV:8
68 : ite(65, 66, 67) : BV:8
69 : ite(62, 63, 68) : BV:8
70 : ite(59, 60, 69) : BV:8
71 : ite(56, 57, 70) : BV:8
72 : ite(54, 55, 71) : BV:8
73 : bvadd(58, 51) : BV:32
74 : eq(73, 53) : BOOL
75 : eq(73, 50) : BOOL
76 : eq(73, 58) : BOOL
77 : eq(73, 61) : BOOL
78 : eq(73, 64) : BOOL
79 : ite(78, 66, 67) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : ite(76, 60, 80) : BV:8
82 : ite(75, 57, 81) : BV:8
83 : ite(74, 55, 82) : BV:8
84 : bvadd(53, 51) : BV:32
85 : eq(84, 53) : BOOL
86 : eq(84, 50) : BOOL
87 : eq(84, 58) : BOOL
88 : eq(84, 61) : BOOL
89 : eq(84, 64) : BOOL
90 : ite(89, 66, 67) : BV:8
91 : ite(88, 63, 90) : BV:8
92 : ite(87, 60, 91) : BV:8
93 : ite(86, 57, 92) : BV:8
94 : ite(85, 55, 93) : BV:8
95 : bvadd(64, 51) : BV:32
96 : eq(95, 53) : BOOL
97 : eq(95, 50) : BOOL
98 : eq(95, 58) : BOOL
99 : eq(95, 61) : BOOL
100 : eq(95, 64) : BOOL
101 : ite(100, 66, 67) : BV:8
102 : ite(99, 63, 101) : BV:8
103 : ite(98, 60, 102) : BV:8
104 : ite(97, 57, 103) : BV:8
105 : ite(96, 55, 104) : BV:8
106 : bvconcat(72, 83, 94, 105) : BV:32
107 : bvadd(47, 49, 106) : BV:32
108 : eq(107, 53) : BOOL
109 : eq(107, 50) : BOOL
110 : eq(107, 58) : BOOL
111 : eq(107, 61) : BOOL
112 : eq(107, 64) : BOOL
113 : ite(112, 66, 67) : BV:8
114 : ite(111, 63, 113) : BV:8
115 : ite(110, 60, 114) : BV:8
116 : ite(109, 57, 115) : BV:8
117 : ite(108, 55, 116) : BV:8
118 : bvadd(7, 49, 106) : BV:32
119 : eq(118, 53) : BOOL
120 : eq(118, 50) : BOOL
121 : eq(118, 58) : BOOL
122 : eq(118, 61) : BOOL
123 : eq(118, 64) : BOOL
124 : ite(123, 66, 67) : BV:8
125 : ite(122, 63, 124) : BV:8
126 : ite(121, 60, 125) : BV:8
127 : ite(120, 57, 126) : BV:8
128 : ite(119, 55, 127) : BV:8
129 : bvadd(12, 49, 106) : BV:32
130 : eq(129, 53) : BOOL
131 : eq(129, 50) : BOOL
132 : eq(129, 58) : BOOL
133 : eq(129, 61) : BOOL
134 : eq(129, 64) : BOOL
135 : ite(134, 66, 67) : BV:8
136 : ite(133, 63, 135) : BV:8
137 : ite(132, 60, 136) : BV:8
138 : ite(131, 57, 137) : BV:8
139 : ite(130, 55, 138) : BV:8
140 : bvadd(49, 106) : BV:32
141 : eq(140, 53) : BOOL
142 : eq(140, 50) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 61) : BOOL
145 : eq(140, 64) : BOOL
146 : ite(145, 66, 67) : BV:8
147 : ite(144, 63, 146) : BV:8
148 : ite(143, 60, 147) : BV:8
149 : ite(142, 57, 148) : BV:8
150 : ite(141, 55, 149) : BV:8
151 : bvconcat(117, 128, 139, 150) : BV:32
152 : ite(6, 7, 151) : BV:32
153 : ite(46, 151, 152) : BV:32
154 : ite(6, 7, 153) : BV:32
155 : lambda(1, 2, 154) : FUNCTION[BV:32,BV:32 -> BV:32]
156 : sym_const(155) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49030Var : BV:32
2 : Lambda49031Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : 63 { 0x3f +1.751e129 } : BV:32
22 : bvule(2, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 64 { 0x40 +1.762e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 65 { 0x41 +1.774e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49039Var : BV:32
2 : Lambda49040Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : 63 { 0x3f +1.751e129 } : BV:32
22 : bvule(2, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 64 { 0x40 +1.762e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 65 { 0x41 +1.774e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49035Var : BV:32
2 : Lambda49036Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 2) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : bvmul(9, 1) : BV:32
13 : bvadd(11, 12) : BV:32
14 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
15 : eq(13, 14) : BOOL
16 : 169 { 0xa9 -87 } : BV:8
17 : eq(13, 11) : BOOL
18 : 80 { 0x50 } : BV:8
19 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
20 : eq(13, 19) : BOOL
21 : 239 { 0xef -17 } : BV:8
22 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
23 : eq(13, 22) : BOOL
24 : 2 { 0x2 } : BV:8
25 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
26 : eq(13, 25) : BOOL
27 : 28 { 0x1c } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : bvadd(19, 12) : BV:32
35 : eq(34, 14) : BOOL
36 : eq(34, 11) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 16, 43) : BV:8
45 : bvadd(14, 12) : BV:32
46 : eq(45, 14) : BOOL
47 : eq(45, 11) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 16, 54) : BV:8
56 : bvadd(25, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : bvadd(8, 10, 67) : BV:32
69 : eq(68, 14) : BOOL
70 : eq(68, 11) : BOOL
71 : eq(68, 19) : BOOL
72 : eq(68, 22) : BOOL
73 : eq(68, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : bvadd(7, 10, 67) : BV:32
80 : eq(79, 14) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 19) : BOOL
83 : eq(79, 22) : BOOL
84 : eq(79, 25) : BOOL
85 : ite(84, 27, 28) : BV:8
86 : ite(83, 24, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 18, 87) : BV:8
89 : ite(80, 16, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 10, 67) : BV:32
92 : eq(91, 14) : BOOL
93 : eq(91, 11) : BOOL
94 : eq(91, 19) : BOOL
95 : eq(91, 22) : BOOL
96 : eq(91, 25) : BOOL
97 : ite(96, 27, 28) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 21, 98) : BV:8
100 : ite(93, 18, 99) : BV:8
101 : ite(92, 16, 100) : BV:8
102 : bvadd(10, 67) : BV:32
103 : eq(102, 14) : BOOL
104 : eq(102, 11) : BOOL
105 : eq(102, 19) : BOOL
106 : eq(102, 22) : BOOL
107 : eq(102, 25) : BOOL
108 : ite(107, 27, 28) : BV:8
109 : ite(106, 24, 108) : BV:8
110 : ite(105, 21, 109) : BV:8
111 : ite(104, 18, 110) : BV:8
112 : ite(103, 16, 111) : BV:8
113 : bvconcat(78, 89, 101, 112) : BV:32
114 : ite(6, 7, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49046Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 80 { 0x50 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 239 { 0xef -17 } : BV:8
21 : eq(11, 10) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 28 { 0x1c } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(6, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 18) : BOOL
36 : eq(32, 10) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 20, 39) : BV:8
41 : ite(34, 17, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : bvadd(2, 9, 10) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 10) : BOOL
48 : eq(43, 23) : BOOL
49 : ite(48, 25, 26) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 20, 50) : BV:8
52 : ite(45, 17, 51) : BV:8
53 : ite(44, 14, 52) : BV:8
54 : bvadd(9, 10) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : eq(54, 18) : BOOL
58 : eq(54, 10) : BOOL
59 : eq(54, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : ite(57, 20, 61) : BV:8
63 : ite(56, 17, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : bvconcat(31, 42, 53, 64) : BV:32
66 : ite(5, 6, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda49047Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 80 { 0x50 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 239 { 0xef -17 } : BV:8
21 : eq(11, 10) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 28 { 0x1c } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(6, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 18) : BOOL
36 : eq(32, 10) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 20, 39) : BV:8
41 : ite(34, 17, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : bvadd(2, 9, 10) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 10) : BOOL
48 : eq(43, 23) : BOOL
49 : ite(48, 25, 26) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 20, 50) : BV:8
52 : ite(45, 17, 51) : BV:8
53 : ite(44, 14, 52) : BV:8
54 : bvadd(9, 10) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : eq(54, 18) : BOOL
58 : eq(54, 10) : BOOL
59 : eq(54, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : ite(57, 20, 61) : BV:8
63 : ite(56, 17, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : bvconcat(31, 42, 53, 64) : BV:32
66 : ite(5, 6, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49054Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1357883676 { 0x50efa91c +1.87234830e34 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 80 { 0x50 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 239 { 0xef -17 } : BV:8
21 : eq(11, 10) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 28 { 0x1c } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(4, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 18) : BOOL
36 : eq(32, 10) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 20, 39) : BV:8
41 : ite(34, 17, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : bvadd(5, 9, 10) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 10) : BOOL
48 : eq(43, 23) : BOOL
49 : ite(48, 25, 26) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 20, 50) : BV:8
52 : ite(45, 17, 51) : BV:8
53 : ite(44, 14, 52) : BV:8
54 : bvadd(9, 10) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : eq(54, 18) : BOOL
58 : eq(54, 10) : BOOL
59 : eq(54, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : ite(57, 20, 61) : BV:8
63 : ite(56, 17, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : bvconcat(31, 42, 53, 64) : BV:32
66 : ite(6, 2, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
440869512
=counter_example_end
=global nodece 53 num_edges_traversed 2
=global nodece 53 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3v487.ce4551.num_edges_traversed1
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3v487.ce4551 aff5266914b54ceedb73e38c9ec9495
=input.spec-%var-x-1
1 : Lambda49214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49215Var : BV:32
17 : Lambda49216Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda49217Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 48) : BV:32
55 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
56 : bvmul(53, 16) : BV:32
57 : bvadd(55, 56) : BV:32
58 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
59 : eq(57, 58) : BOOL
60 : 143 { 0x8f -113 } : BV:8
61 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
62 : eq(57, 61) : BOOL
63 : 128 { 0x80 -128 } : BV:8
64 : eq(57, 55) : BOOL
65 : 88 { 0x58 } : BV:8
66 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
67 : eq(57, 66) : BOOL
68 : 4 { 0x4 } : BV:8
69 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
70 : eq(57, 69) : BOOL
71 : 1 { 0x1 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : bvadd(66, 56) : BV:32
79 : eq(78, 58) : BOOL
80 : eq(78, 61) : BOOL
81 : eq(78, 55) : BOOL
82 : eq(78, 66) : BOOL
83 : eq(78, 69) : BOOL
84 : ite(83, 71, 72) : BV:8
85 : ite(82, 68, 84) : BV:8
86 : ite(81, 65, 85) : BV:8
87 : ite(80, 63, 86) : BV:8
88 : ite(79, 60, 87) : BV:8
89 : bvadd(58, 56) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 61) : BOOL
92 : eq(89, 55) : BOOL
93 : eq(89, 66) : BOOL
94 : eq(89, 69) : BOOL
95 : ite(94, 71, 72) : BV:8
96 : ite(93, 68, 95) : BV:8
97 : ite(92, 65, 96) : BV:8
98 : ite(91, 63, 97) : BV:8
99 : ite(90, 60, 98) : BV:8
100 : bvadd(61, 56) : BV:32
101 : eq(100, 58) : BOOL
102 : eq(100, 61) : BOOL
103 : eq(100, 55) : BOOL
104 : eq(100, 66) : BOOL
105 : eq(100, 69) : BOOL
106 : ite(105, 71, 72) : BV:8
107 : ite(104, 68, 106) : BV:8
108 : ite(103, 65, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 60, 109) : BV:8
111 : bvconcat(77, 88, 99, 110) : BV:32
112 : bvadd(52, 54, 111) : BV:32
113 : eq(112, 58) : BOOL
114 : eq(112, 61) : BOOL
115 : eq(112, 55) : BOOL
116 : eq(112, 66) : BOOL
117 : eq(112, 69) : BOOL
118 : ite(117, 71, 72) : BV:8
119 : ite(116, 68, 118) : BV:8
120 : ite(115, 65, 119) : BV:8
121 : ite(114, 63, 120) : BV:8
122 : ite(113, 60, 121) : BV:8
123 : bvadd(24, 54, 111) : BV:32
124 : eq(123, 58) : BOOL
125 : eq(123, 61) : BOOL
126 : eq(123, 55) : BOOL
127 : eq(123, 66) : BOOL
128 : eq(123, 69) : BOOL
129 : ite(128, 71, 72) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 65, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 60, 132) : BV:8
134 : bvadd(7, 54, 111) : BV:32
135 : eq(134, 58) : BOOL
136 : eq(134, 61) : BOOL
137 : eq(134, 55) : BOOL
138 : eq(134, 66) : BOOL
139 : eq(134, 69) : BOOL
140 : ite(139, 71, 72) : BV:8
141 : ite(138, 68, 140) : BV:8
142 : ite(137, 65, 141) : BV:8
143 : ite(136, 63, 142) : BV:8
144 : ite(135, 60, 143) : BV:8
145 : bvadd(54, 111) : BV:32
146 : eq(145, 58) : BOOL
147 : eq(145, 61) : BOOL
148 : eq(145, 55) : BOOL
149 : eq(145, 66) : BOOL
150 : eq(145, 69) : BOOL
151 : ite(150, 71, 72) : BV:8
152 : ite(149, 68, 151) : BV:8
153 : ite(148, 65, 152) : BV:8
154 : ite(147, 63, 153) : BV:8
155 : ite(146, 60, 154) : BV:8
156 : bvconcat(122, 133, 144, 155) : BV:32
157 : ite(51, 7, 156) : BV:32
158 : lambda(48, 157) : FUNCTION[BV:32 -> BV:32]
159 : map(47, 158) : MAP[BV:32 -> BV:32]
160 : lambda(16, 159) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
161 : map(15, 160) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
162 : sym_const(161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda49241Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49242Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
24 : eq(22, 23) : BOOL
25 : 143 { 0x8f -113 } : BV:8
26 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
27 : eq(22, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
30 : eq(22, 29) : BOOL
31 : 88 { 0x58 } : BV:8
32 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
33 : eq(22, 32) : BOOL
34 : 4 { 0x4 } : BV:8
35 : eq(22, 21) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 32) : BOOL
49 : eq(44, 21) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(7, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 21) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 21) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(17, 7, 77) : BV:32
79 : lambda(16, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(15, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1476693887 ] -> 0, [ 1476693888; 1476693888 ] -> 1, [ 1476693889; 2839543803 ] -> 0, [ 2839543804; 2839543804 ] -> 128, [ 2839543805; 2839543805 ] -> 143, [ 2839543806; 2839543806 ] -> 4, [ 2839543807; 2839543807 ] -> 88, [ 2839543808; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 556619 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 556620; 556623 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 556624; 34115583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34115584; 34115587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 34115588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 556620 { 0x87e4c +1.6635427e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 34115584 { 0x2089000 +1.6689453e133 } : BV:32
=input.dst.llvm-%x
1 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49234Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49235Var : BV:32
17 : Lambda49236Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda49237Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : and(21, 26) : BOOL
53 : ite(52, 12, 12) : BOOL
54 : ite(20, 6, 53) : BOOL
55 : bvule(2, 48) : BOOL
56 : bvule(48, 2) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(7, 48) : BOOL
59 : bvule(48, 7) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(24, 48) : BOOL
62 : bvule(48, 9) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 24, 24) : BV:32
65 : ite(60, 7, 64) : BV:32
66 : ite(57, 2, 65) : BV:32
67 : eq(66, 2) : BOOL
68 : and(31, 67) : BOOL
69 : ite(68, 6, 12) : BOOL
70 : and(54, 69) : BOOL
71 : 3 { 0x3 +1.35e129 } : BV:32
72 : 4 { 0x4 +1.47e129 } : BV:32
73 : bvmul(72, 48) : BV:32
74 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
75 : bvmul(72, 16) : BV:32
76 : bvadd(74, 75) : BV:32
77 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
78 : eq(76, 77) : BOOL
79 : 143 { 0x8f -113 } : BV:8
80 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
81 : eq(76, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : eq(76, 74) : BOOL
84 : 88 { 0x58 } : BV:8
85 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
86 : eq(76, 85) : BOOL
87 : 4 { 0x4 } : BV:8
88 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
89 : eq(76, 88) : BOOL
90 : 1 { 0x1 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(83, 84, 93) : BV:8
95 : ite(81, 82, 94) : BV:8
96 : ite(78, 79, 95) : BV:8
97 : bvadd(85, 75) : BV:32
98 : eq(97, 77) : BOOL
99 : eq(97, 80) : BOOL
100 : eq(97, 74) : BOOL
101 : eq(97, 85) : BOOL
102 : eq(97, 88) : BOOL
103 : ite(102, 90, 91) : BV:8
104 : ite(101, 87, 103) : BV:8
105 : ite(100, 84, 104) : BV:8
106 : ite(99, 82, 105) : BV:8
107 : ite(98, 79, 106) : BV:8
108 : bvadd(77, 75) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 80) : BOOL
111 : eq(108, 74) : BOOL
112 : eq(108, 85) : BOOL
113 : eq(108, 88) : BOOL
114 : ite(113, 90, 91) : BV:8
115 : ite(112, 87, 114) : BV:8
116 : ite(111, 84, 115) : BV:8
117 : ite(110, 82, 116) : BV:8
118 : ite(109, 79, 117) : BV:8
119 : bvadd(80, 75) : BV:32
120 : eq(119, 77) : BOOL
121 : eq(119, 80) : BOOL
122 : eq(119, 74) : BOOL
123 : eq(119, 85) : BOOL
124 : eq(119, 88) : BOOL
125 : ite(124, 90, 91) : BV:8
126 : ite(123, 87, 125) : BV:8
127 : ite(122, 84, 126) : BV:8
128 : ite(121, 82, 127) : BV:8
129 : ite(120, 79, 128) : BV:8
130 : bvconcat(96, 107, 118, 129) : BV:32
131 : bvadd(71, 73, 130) : BV:32
132 : eq(131, 77) : BOOL
133 : eq(131, 80) : BOOL
134 : eq(131, 74) : BOOL
135 : eq(131, 85) : BOOL
136 : eq(131, 88) : BOOL
137 : ite(136, 90, 91) : BV:8
138 : ite(135, 87, 137) : BV:8
139 : ite(134, 84, 138) : BV:8
140 : ite(133, 82, 139) : BV:8
141 : ite(132, 79, 140) : BV:8
142 : bvadd(24, 73, 130) : BV:32
143 : eq(142, 77) : BOOL
144 : eq(142, 80) : BOOL
145 : eq(142, 74) : BOOL
146 : eq(142, 85) : BOOL
147 : eq(142, 88) : BOOL
148 : ite(147, 90, 91) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 84, 149) : BV:8
151 : ite(144, 82, 150) : BV:8
152 : ite(143, 79, 151) : BV:8
153 : bvadd(7, 73, 130) : BV:32
154 : eq(153, 77) : BOOL
155 : eq(153, 80) : BOOL
156 : eq(153, 74) : BOOL
157 : eq(153, 85) : BOOL
158 : eq(153, 88) : BOOL
159 : ite(158, 90, 91) : BV:8
160 : ite(157, 87, 159) : BV:8
161 : ite(156, 84, 160) : BV:8
162 : ite(155, 82, 161) : BV:8
163 : ite(154, 79, 162) : BV:8
164 : bvadd(73, 130) : BV:32
165 : eq(164, 77) : BOOL
166 : eq(164, 80) : BOOL
167 : eq(164, 74) : BOOL
168 : eq(164, 85) : BOOL
169 : eq(164, 88) : BOOL
170 : ite(169, 90, 91) : BV:8
171 : ite(168, 87, 170) : BV:8
172 : ite(167, 84, 171) : BV:8
173 : ite(166, 82, 172) : BV:8
174 : ite(165, 79, 173) : BV:8
175 : bvconcat(141, 152, 163, 174) : BV:32
176 : ite(51, 7, 175) : BV:32
177 : ite(70, 175, 176) : BV:32
178 : ite(51, 7, 177) : BV:32
179 : lambda(48, 178) : FUNCTION[BV:32 -> BV:32]
180 : map(47, 179) : MAP[BV:32 -> BV:32]
181 : lambda(16, 180) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
182 : map(15, 181) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
183 : sym_const(182) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda49223Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 4) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda49224Var : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
26 : eq(24, 25) : BOOL
27 : 143 { 0x8f -113 } : BV:8
28 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
29 : eq(24, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
32 : eq(24, 31) : BOOL
33 : 88 { 0x58 } : BV:8
34 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
35 : eq(24, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(24, 23) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(35, 36, 40) : BV:8
42 : ite(32, 33, 41) : BV:8
43 : ite(29, 30, 42) : BV:8
44 : ite(26, 27, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 22, 23) : BV:32
47 : eq(46, 25) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 23) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 30, 54) : BV:8
56 : ite(47, 27, 55) : BV:8
57 : bvadd(9, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 23) : BOOL
63 : ite(62, 38, 39) : BV:8
64 : ite(61, 36, 63) : BV:8
65 : ite(60, 33, 64) : BV:8
66 : ite(59, 30, 65) : BV:8
67 : ite(58, 27, 66) : BV:8
68 : bvadd(22, 23) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 34) : BOOL
73 : eq(68, 23) : BOOL
74 : ite(73, 38, 39) : BV:8
75 : ite(72, 36, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 30, 76) : BV:8
78 : ite(69, 27, 77) : BV:8
79 : bvconcat(44, 56, 67, 78) : BV:32
80 : ite(19, 9, 79) : BV:32
81 : lambda(18, 80) : FUNCTION[BV:32 -> BV:32]
82 : map(17, 81) : MAP[BV:32 -> BV:32]
83 : sum(1, 2, 82) : SUM[UNIT,MAP[BV:32 -> BV:32]]
84 : sym_const(83) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : eq(1, 1) : BOOL
16 : 3 { 0x3 +1.35e129 } : BV:32
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(17, 1) : BV:32
19 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
20 : bvadd(16, 18, 19) : BV:32
21 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
22 : eq(20, 21) : BOOL
23 : 143 { 0x8f -113 } : BV:8
24 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
25 : eq(20, 24) : BOOL
26 : 128 { 0x80 -128 } : BV:8
27 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
28 : eq(20, 27) : BOOL
29 : 88 { 0x58 } : BV:8
30 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
31 : eq(20, 30) : BOOL
32 : 4 { 0x4 } : BV:8
33 : eq(20, 19) : BOOL
34 : 1 { 0x1 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 32, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 18, 19) : BV:32
43 : eq(42, 21) : BOOL
44 : eq(42, 24) : BOOL
45 : eq(42, 27) : BOOL
46 : eq(42, 30) : BOOL
47 : eq(42, 19) : BOOL
48 : ite(47, 34, 35) : BV:8
49 : ite(46, 32, 48) : BV:8
50 : ite(45, 29, 49) : BV:8
51 : ite(44, 26, 50) : BV:8
52 : ite(43, 23, 51) : BV:8
53 : bvadd(5, 18, 19) : BV:32
54 : eq(53, 21) : BOOL
55 : eq(53, 24) : BOOL
56 : eq(53, 27) : BOOL
57 : eq(53, 30) : BOOL
58 : eq(53, 19) : BOOL
59 : ite(58, 34, 35) : BV:8
60 : ite(57, 32, 59) : BV:8
61 : ite(56, 29, 60) : BV:8
62 : ite(55, 26, 61) : BV:8
63 : ite(54, 23, 62) : BV:8
64 : bvadd(18, 19) : BV:32
65 : eq(64, 21) : BOOL
66 : eq(64, 24) : BOOL
67 : eq(64, 27) : BOOL
68 : eq(64, 30) : BOOL
69 : eq(64, 19) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 32, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : bvconcat(40, 52, 63, 74) : BV:32
76 : ite(15, 5, 75) : BV:32
77 : sum(13, 14, 76) : SUM[UNIT,BV:32]
78 : sym_const(77) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 137327265 { 0x82f72a1 +1.37068569e145 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda49246Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49247Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
24 : eq(22, 23) : BOOL
25 : 143 { 0x8f -113 } : BV:8
26 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
27 : eq(22, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
30 : eq(22, 29) : BOOL
31 : 88 { 0x58 } : BV:8
32 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
33 : eq(22, 32) : BOOL
34 : 4 { 0x4 } : BV:8
35 : eq(22, 21) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 32) : BOOL
49 : eq(44, 21) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(7, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 21) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 21) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(17, 7, 77) : BV:32
79 : lambda(16, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(15, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 185128925 { 0xb08d7dd +1.6908762e151 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 34115584 { 0x2089000 +1.6689453e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 34115587 { 0x2089003 +1.6689488e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 556620 { 0x87e4c +1.6635427e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 556623 { 0x87e4f +1.6635463e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49056Var : BV:32
2 : Lambda49057Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 2) : BV:32
11 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
12 : bvmul(9, 1) : BV:32
13 : bvadd(11, 12) : BV:32
14 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
15 : eq(13, 14) : BOOL
16 : 143 { 0x8f -113 } : BV:8
17 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
18 : eq(13, 17) : BOOL
19 : 128 { 0x80 -128 } : BV:8
20 : eq(13, 11) : BOOL
21 : 88 { 0x58 } : BV:8
22 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
23 : eq(13, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
26 : eq(13, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(18, 19, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : bvadd(22, 12) : BV:32
35 : eq(34, 14) : BOOL
36 : eq(34, 17) : BOOL
37 : eq(34, 11) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 19, 42) : BV:8
44 : ite(35, 16, 43) : BV:8
45 : bvadd(14, 12) : BV:32
46 : eq(45, 14) : BOOL
47 : eq(45, 17) : BOOL
48 : eq(45, 11) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 19, 53) : BV:8
55 : ite(46, 16, 54) : BV:8
56 : bvadd(17, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 17) : BOOL
59 : eq(56, 11) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : bvadd(8, 10, 67) : BV:32
69 : eq(68, 14) : BOOL
70 : eq(68, 17) : BOOL
71 : eq(68, 11) : BOOL
72 : eq(68, 22) : BOOL
73 : eq(68, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 19, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : bvadd(79, 10, 67) : BV:32
81 : eq(80, 14) : BOOL
82 : eq(80, 17) : BOOL
83 : eq(80, 11) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : ite(85, 27, 28) : BV:8
87 : ite(84, 24, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 19, 88) : BV:8
90 : ite(81, 16, 89) : BV:8
91 : bvadd(7, 10, 67) : BV:32
92 : eq(91, 14) : BOOL
93 : eq(91, 17) : BOOL
94 : eq(91, 11) : BOOL
95 : eq(91, 22) : BOOL
96 : eq(91, 25) : BOOL
97 : ite(96, 27, 28) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 21, 98) : BV:8
100 : ite(93, 19, 99) : BV:8
101 : ite(92, 16, 100) : BV:8
102 : bvadd(10, 67) : BV:32
103 : eq(102, 14) : BOOL
104 : eq(102, 17) : BOOL
105 : eq(102, 11) : BOOL
106 : eq(102, 22) : BOOL
107 : eq(102, 25) : BOOL
108 : ite(107, 27, 28) : BV:8
109 : ite(106, 24, 108) : BV:8
110 : ite(105, 21, 109) : BV:8
111 : ite(104, 19, 110) : BV:8
112 : ite(103, 16, 111) : BV:8
113 : bvconcat(78, 90, 101, 112) : BV:32
114 : ite(6, 7, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49058Var : BV:32
2 : Lambda49059Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49068Var : BV:32
2 : Lambda49069Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49072Var : BV:32
2 : Lambda49073Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(3, 1) : BOOL
9 : bvule(1, 3) : BOOL
10 : and(8, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : bvule(7, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 16, 16) : BOOL
18 : ite(10, 11, 17) : BOOL
19 : bvule(1, 7) : BOOL
20 : and(12, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 14) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(10, 3, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : bvule(3, 2) : BOOL
29 : bvule(2, 3) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(7, 2) : BOOL
32 : bvule(2, 7) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(21, 2) : BOOL
35 : bvule(2, 13) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 21, 21) : BV:32
38 : ite(33, 7, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(27, 40) : BOOL
42 : ite(41, 11, 16) : BOOL
43 : and(18, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 2) : BV:32
47 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
48 : bvmul(45, 1) : BV:32
49 : bvadd(47, 48) : BV:32
50 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
51 : eq(49, 50) : BOOL
52 : 143 { 0x8f -113 } : BV:8
53 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
54 : eq(49, 53) : BOOL
55 : 128 { 0x80 -128 } : BV:8
56 : eq(49, 47) : BOOL
57 : 88 { 0x58 } : BV:8
58 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
59 : eq(49, 58) : BOOL
60 : 4 { 0x4 } : BV:8
61 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
62 : eq(49, 61) : BOOL
63 : 1 { 0x1 } : BV:8
64 : 0 { 0x0 } : BV:8
65 : ite(62, 63, 64) : BV:8
66 : ite(59, 60, 65) : BV:8
67 : ite(56, 57, 66) : BV:8
68 : ite(54, 55, 67) : BV:8
69 : ite(51, 52, 68) : BV:8
70 : bvadd(58, 48) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 53) : BOOL
73 : eq(70, 47) : BOOL
74 : eq(70, 58) : BOOL
75 : eq(70, 61) : BOOL
76 : ite(75, 63, 64) : BV:8
77 : ite(74, 60, 76) : BV:8
78 : ite(73, 57, 77) : BV:8
79 : ite(72, 55, 78) : BV:8
80 : ite(71, 52, 79) : BV:8
81 : bvadd(50, 48) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 53) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 58) : BOOL
86 : eq(81, 61) : BOOL
87 : ite(86, 63, 64) : BV:8
88 : ite(85, 60, 87) : BV:8
89 : ite(84, 57, 88) : BV:8
90 : ite(83, 55, 89) : BV:8
91 : ite(82, 52, 90) : BV:8
92 : bvadd(53, 48) : BV:32
93 : eq(92, 50) : BOOL
94 : eq(92, 53) : BOOL
95 : eq(92, 47) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : ite(97, 63, 64) : BV:8
99 : ite(96, 60, 98) : BV:8
100 : ite(95, 57, 99) : BV:8
101 : ite(94, 55, 100) : BV:8
102 : ite(93, 52, 101) : BV:8
103 : bvconcat(69, 80, 91, 102) : BV:32
104 : bvadd(44, 46, 103) : BV:32
105 : eq(104, 50) : BOOL
106 : eq(104, 53) : BOOL
107 : eq(104, 47) : BOOL
108 : eq(104, 58) : BOOL
109 : eq(104, 61) : BOOL
110 : ite(109, 63, 64) : BV:8
111 : ite(108, 60, 110) : BV:8
112 : ite(107, 57, 111) : BV:8
113 : ite(106, 55, 112) : BV:8
114 : ite(105, 52, 113) : BV:8
115 : bvadd(21, 46, 103) : BV:32
116 : eq(115, 50) : BOOL
117 : eq(115, 53) : BOOL
118 : eq(115, 47) : BOOL
119 : eq(115, 58) : BOOL
120 : eq(115, 61) : BOOL
121 : ite(120, 63, 64) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 57, 122) : BV:8
124 : ite(117, 55, 123) : BV:8
125 : ite(116, 52, 124) : BV:8
126 : bvadd(7, 46, 103) : BV:32
127 : eq(126, 50) : BOOL
128 : eq(126, 53) : BOOL
129 : eq(126, 47) : BOOL
130 : eq(126, 58) : BOOL
131 : eq(126, 61) : BOOL
132 : ite(131, 63, 64) : BV:8
133 : ite(130, 60, 132) : BV:8
134 : ite(129, 57, 133) : BV:8
135 : ite(128, 55, 134) : BV:8
136 : ite(127, 52, 135) : BV:8
137 : bvadd(46, 103) : BV:32
138 : eq(137, 50) : BOOL
139 : eq(137, 53) : BOOL
140 : eq(137, 47) : BOOL
141 : eq(137, 58) : BOOL
142 : eq(137, 61) : BOOL
143 : ite(142, 63, 64) : BV:8
144 : ite(141, 60, 143) : BV:8
145 : ite(140, 57, 144) : BV:8
146 : ite(139, 55, 145) : BV:8
147 : ite(138, 52, 146) : BV:8
148 : bvconcat(114, 125, 136, 147) : BV:32
149 : ite(6, 7, 148) : BV:32
150 : ite(43, 148, 149) : BV:32
151 : ite(6, 7, 150) : BV:32
152 : lambda(1, 2, 151) : FUNCTION[BV:32,BV:32 -> BV:32]
153 : sym_const(152) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49077Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
11 : eq(9, 10) : BOOL
12 : 143 { 0x8f -113 } : BV:8
13 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
17 : eq(9, 16) : BOOL
18 : 88 { 0x58 } : BV:8
19 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
20 : eq(9, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda49078Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
11 : eq(9, 10) : BOOL
12 : 143 { 0x8f -113 } : BV:8
13 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
17 : eq(9, 16) : BOOL
18 : 88 { 0x58 } : BV:8
19 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
20 : eq(9, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49085Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
11 : eq(9, 10) : BOOL
12 : 143 { 0x8f -113 } : BV:8
13 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
17 : eq(9, 16) : BOOL
18 : 88 { 0x58 } : BV:8
19 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
20 : eq(9, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1309930004
=counter_example_end
=global nodece 54 num_edges_traversed 1
=global nodece 54 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3v487.ce4655.num_edges_traversed2
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(epsilon)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3v487.ce4655 959c75448eea05ad2dfa58ea7dc08a
=input.spec-%var-x-1
1 : Lambda49214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49215Var : BV:32
17 : Lambda49216Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda49217Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 48) : BV:32
55 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
56 : bvmul(53, 16) : BV:32
57 : bvadd(55, 56) : BV:32
58 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
59 : eq(57, 58) : BOOL
60 : 143 { 0x8f -113 } : BV:8
61 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
62 : eq(57, 61) : BOOL
63 : 128 { 0x80 -128 } : BV:8
64 : eq(57, 55) : BOOL
65 : 88 { 0x58 } : BV:8
66 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
67 : eq(57, 66) : BOOL
68 : 4 { 0x4 } : BV:8
69 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
70 : eq(57, 69) : BOOL
71 : 1 { 0x1 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : bvadd(66, 56) : BV:32
79 : eq(78, 58) : BOOL
80 : eq(78, 61) : BOOL
81 : eq(78, 55) : BOOL
82 : eq(78, 66) : BOOL
83 : eq(78, 69) : BOOL
84 : ite(83, 71, 72) : BV:8
85 : ite(82, 68, 84) : BV:8
86 : ite(81, 65, 85) : BV:8
87 : ite(80, 63, 86) : BV:8
88 : ite(79, 60, 87) : BV:8
89 : bvadd(58, 56) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 61) : BOOL
92 : eq(89, 55) : BOOL
93 : eq(89, 66) : BOOL
94 : eq(89, 69) : BOOL
95 : ite(94, 71, 72) : BV:8
96 : ite(93, 68, 95) : BV:8
97 : ite(92, 65, 96) : BV:8
98 : ite(91, 63, 97) : BV:8
99 : ite(90, 60, 98) : BV:8
100 : bvadd(61, 56) : BV:32
101 : eq(100, 58) : BOOL
102 : eq(100, 61) : BOOL
103 : eq(100, 55) : BOOL
104 : eq(100, 66) : BOOL
105 : eq(100, 69) : BOOL
106 : ite(105, 71, 72) : BV:8
107 : ite(104, 68, 106) : BV:8
108 : ite(103, 65, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 60, 109) : BV:8
111 : bvconcat(77, 88, 99, 110) : BV:32
112 : bvadd(52, 54, 111) : BV:32
113 : eq(112, 58) : BOOL
114 : eq(112, 61) : BOOL
115 : eq(112, 55) : BOOL
116 : eq(112, 66) : BOOL
117 : eq(112, 69) : BOOL
118 : ite(117, 71, 72) : BV:8
119 : ite(116, 68, 118) : BV:8
120 : ite(115, 65, 119) : BV:8
121 : ite(114, 63, 120) : BV:8
122 : ite(113, 60, 121) : BV:8
123 : bvadd(24, 54, 111) : BV:32
124 : eq(123, 58) : BOOL
125 : eq(123, 61) : BOOL
126 : eq(123, 55) : BOOL
127 : eq(123, 66) : BOOL
128 : eq(123, 69) : BOOL
129 : ite(128, 71, 72) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 65, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 60, 132) : BV:8
134 : bvadd(7, 54, 111) : BV:32
135 : eq(134, 58) : BOOL
136 : eq(134, 61) : BOOL
137 : eq(134, 55) : BOOL
138 : eq(134, 66) : BOOL
139 : eq(134, 69) : BOOL
140 : ite(139, 71, 72) : BV:8
141 : ite(138, 68, 140) : BV:8
142 : ite(137, 65, 141) : BV:8
143 : ite(136, 63, 142) : BV:8
144 : ite(135, 60, 143) : BV:8
145 : bvadd(54, 111) : BV:32
146 : eq(145, 58) : BOOL
147 : eq(145, 61) : BOOL
148 : eq(145, 55) : BOOL
149 : eq(145, 66) : BOOL
150 : eq(145, 69) : BOOL
151 : ite(150, 71, 72) : BV:8
152 : ite(149, 68, 151) : BV:8
153 : ite(148, 65, 152) : BV:8
154 : ite(147, 63, 153) : BV:8
155 : ite(146, 60, 154) : BV:8
156 : bvconcat(122, 133, 144, 155) : BV:32
157 : ite(51, 7, 156) : BV:32
158 : lambda(48, 157) : FUNCTION[BV:32 -> BV:32]
159 : map(47, 158) : MAP[BV:32 -> BV:32]
160 : lambda(16, 159) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
161 : map(15, 160) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
162 : sym_const(161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1476693887 ] -> 0, [ 1476693888; 1476693888 ] -> 1, [ 1476693889; 2839543803 ] -> 0, [ 2839543804; 2839543804 ] -> 128, [ 2839543805; 2839543805 ] -> 143, [ 2839543806; 2839543806 ] -> 4, [ 2839543807; 2839543807 ] -> 88, [ 2839543808; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 556619 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 556620; 556623 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 556624; 34115583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34115584; 34115587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 34115588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 556620 { 0x87e4c +1.6635427e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 34115584 { 0x2089000 +1.6689453e133 } : BV:32
=input.dst.llvm-%x
1 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49234Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda49235Var : BV:32
17 : Lambda49236Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda49237Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : and(21, 26) : BOOL
53 : ite(52, 12, 12) : BOOL
54 : ite(20, 6, 53) : BOOL
55 : bvule(2, 48) : BOOL
56 : bvule(48, 2) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(7, 48) : BOOL
59 : bvule(48, 7) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(24, 48) : BOOL
62 : bvule(48, 9) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 24, 24) : BV:32
65 : ite(60, 7, 64) : BV:32
66 : ite(57, 2, 65) : BV:32
67 : eq(66, 2) : BOOL
68 : and(31, 67) : BOOL
69 : ite(68, 6, 12) : BOOL
70 : and(54, 69) : BOOL
71 : 3 { 0x3 +1.35e129 } : BV:32
72 : 4 { 0x4 +1.47e129 } : BV:32
73 : bvmul(72, 48) : BV:32
74 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
75 : bvmul(72, 16) : BV:32
76 : bvadd(74, 75) : BV:32
77 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
78 : eq(76, 77) : BOOL
79 : 143 { 0x8f -113 } : BV:8
80 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
81 : eq(76, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : eq(76, 74) : BOOL
84 : 88 { 0x58 } : BV:8
85 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
86 : eq(76, 85) : BOOL
87 : 4 { 0x4 } : BV:8
88 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
89 : eq(76, 88) : BOOL
90 : 1 { 0x1 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(83, 84, 93) : BV:8
95 : ite(81, 82, 94) : BV:8
96 : ite(78, 79, 95) : BV:8
97 : bvadd(85, 75) : BV:32
98 : eq(97, 77) : BOOL
99 : eq(97, 80) : BOOL
100 : eq(97, 74) : BOOL
101 : eq(97, 85) : BOOL
102 : eq(97, 88) : BOOL
103 : ite(102, 90, 91) : BV:8
104 : ite(101, 87, 103) : BV:8
105 : ite(100, 84, 104) : BV:8
106 : ite(99, 82, 105) : BV:8
107 : ite(98, 79, 106) : BV:8
108 : bvadd(77, 75) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 80) : BOOL
111 : eq(108, 74) : BOOL
112 : eq(108, 85) : BOOL
113 : eq(108, 88) : BOOL
114 : ite(113, 90, 91) : BV:8
115 : ite(112, 87, 114) : BV:8
116 : ite(111, 84, 115) : BV:8
117 : ite(110, 82, 116) : BV:8
118 : ite(109, 79, 117) : BV:8
119 : bvadd(80, 75) : BV:32
120 : eq(119, 77) : BOOL
121 : eq(119, 80) : BOOL
122 : eq(119, 74) : BOOL
123 : eq(119, 85) : BOOL
124 : eq(119, 88) : BOOL
125 : ite(124, 90, 91) : BV:8
126 : ite(123, 87, 125) : BV:8
127 : ite(122, 84, 126) : BV:8
128 : ite(121, 82, 127) : BV:8
129 : ite(120, 79, 128) : BV:8
130 : bvconcat(96, 107, 118, 129) : BV:32
131 : bvadd(71, 73, 130) : BV:32
132 : eq(131, 77) : BOOL
133 : eq(131, 80) : BOOL
134 : eq(131, 74) : BOOL
135 : eq(131, 85) : BOOL
136 : eq(131, 88) : BOOL
137 : ite(136, 90, 91) : BV:8
138 : ite(135, 87, 137) : BV:8
139 : ite(134, 84, 138) : BV:8
140 : ite(133, 82, 139) : BV:8
141 : ite(132, 79, 140) : BV:8
142 : bvadd(24, 73, 130) : BV:32
143 : eq(142, 77) : BOOL
144 : eq(142, 80) : BOOL
145 : eq(142, 74) : BOOL
146 : eq(142, 85) : BOOL
147 : eq(142, 88) : BOOL
148 : ite(147, 90, 91) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 84, 149) : BV:8
151 : ite(144, 82, 150) : BV:8
152 : ite(143, 79, 151) : BV:8
153 : bvadd(7, 73, 130) : BV:32
154 : eq(153, 77) : BOOL
155 : eq(153, 80) : BOOL
156 : eq(153, 74) : BOOL
157 : eq(153, 85) : BOOL
158 : eq(153, 88) : BOOL
159 : ite(158, 90, 91) : BV:8
160 : ite(157, 87, 159) : BV:8
161 : ite(156, 84, 160) : BV:8
162 : ite(155, 82, 161) : BV:8
163 : ite(154, 79, 162) : BV:8
164 : bvadd(73, 130) : BV:32
165 : eq(164, 77) : BOOL
166 : eq(164, 80) : BOOL
167 : eq(164, 74) : BOOL
168 : eq(164, 85) : BOOL
169 : eq(164, 88) : BOOL
170 : ite(169, 90, 91) : BV:8
171 : ite(168, 87, 170) : BV:8
172 : ite(167, 84, 171) : BV:8
173 : ite(166, 82, 172) : BV:8
174 : ite(165, 79, 173) : BV:8
175 : bvconcat(141, 152, 163, 174) : BV:32
176 : ite(51, 7, 175) : BV:32
177 : ite(70, 175, 176) : BV:32
178 : ite(51, 7, 177) : BV:32
179 : lambda(48, 178) : FUNCTION[BV:32 -> BV:32]
180 : map(47, 179) : MAP[BV:32 -> BV:32]
181 : lambda(16, 180) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
182 : map(15, 181) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
183 : sym_const(182) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 705309344 { 0x2a0a2aa0 +1.7942581e213 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 461981866 { 0x1b8948aa +1.7253003e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 34115584 { 0x2089000 +1.6689453e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 34115587 { 0x2089003 +1.6689488e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 556620 { 0x87e4c +1.6635427e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 556623 { 0x87e4f +1.6635463e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49056Var : BV:32
2 : Lambda49057Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 2) : BV:32
11 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
12 : bvmul(9, 1) : BV:32
13 : bvadd(11, 12) : BV:32
14 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
15 : eq(13, 14) : BOOL
16 : 143 { 0x8f -113 } : BV:8
17 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
18 : eq(13, 17) : BOOL
19 : 128 { 0x80 -128 } : BV:8
20 : eq(13, 11) : BOOL
21 : 88 { 0x58 } : BV:8
22 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
23 : eq(13, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
26 : eq(13, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(18, 19, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : bvadd(22, 12) : BV:32
35 : eq(34, 14) : BOOL
36 : eq(34, 17) : BOOL
37 : eq(34, 11) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 19, 42) : BV:8
44 : ite(35, 16, 43) : BV:8
45 : bvadd(14, 12) : BV:32
46 : eq(45, 14) : BOOL
47 : eq(45, 17) : BOOL
48 : eq(45, 11) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 19, 53) : BV:8
55 : ite(46, 16, 54) : BV:8
56 : bvadd(17, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 17) : BOOL
59 : eq(56, 11) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : bvadd(8, 10, 67) : BV:32
69 : eq(68, 14) : BOOL
70 : eq(68, 17) : BOOL
71 : eq(68, 11) : BOOL
72 : eq(68, 22) : BOOL
73 : eq(68, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 19, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : bvadd(79, 10, 67) : BV:32
81 : eq(80, 14) : BOOL
82 : eq(80, 17) : BOOL
83 : eq(80, 11) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : ite(85, 27, 28) : BV:8
87 : ite(84, 24, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 19, 88) : BV:8
90 : ite(81, 16, 89) : BV:8
91 : bvadd(7, 10, 67) : BV:32
92 : eq(91, 14) : BOOL
93 : eq(91, 17) : BOOL
94 : eq(91, 11) : BOOL
95 : eq(91, 22) : BOOL
96 : eq(91, 25) : BOOL
97 : ite(96, 27, 28) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 21, 98) : BV:8
100 : ite(93, 19, 99) : BV:8
101 : ite(92, 16, 100) : BV:8
102 : bvadd(10, 67) : BV:32
103 : eq(102, 14) : BOOL
104 : eq(102, 17) : BOOL
105 : eq(102, 11) : BOOL
106 : eq(102, 22) : BOOL
107 : eq(102, 25) : BOOL
108 : ite(107, 27, 28) : BV:8
109 : ite(106, 24, 108) : BV:8
110 : ite(105, 21, 109) : BV:8
111 : ite(104, 19, 110) : BV:8
112 : ite(103, 16, 111) : BV:8
113 : bvconcat(78, 90, 101, 112) : BV:32
114 : ite(6, 7, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49058Var : BV:32
2 : Lambda49059Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49068Var : BV:32
2 : Lambda49069Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49072Var : BV:32
2 : Lambda49073Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(3, 1) : BOOL
9 : bvule(1, 3) : BOOL
10 : and(8, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : bvule(7, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 16, 16) : BOOL
18 : ite(10, 11, 17) : BOOL
19 : bvule(1, 7) : BOOL
20 : and(12, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 14) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(10, 3, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : bvule(3, 2) : BOOL
29 : bvule(2, 3) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(7, 2) : BOOL
32 : bvule(2, 7) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(21, 2) : BOOL
35 : bvule(2, 13) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 21, 21) : BV:32
38 : ite(33, 7, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(27, 40) : BOOL
42 : ite(41, 11, 16) : BOOL
43 : and(18, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 2) : BV:32
47 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
48 : bvmul(45, 1) : BV:32
49 : bvadd(47, 48) : BV:32
50 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
51 : eq(49, 50) : BOOL
52 : 143 { 0x8f -113 } : BV:8
53 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
54 : eq(49, 53) : BOOL
55 : 128 { 0x80 -128 } : BV:8
56 : eq(49, 47) : BOOL
57 : 88 { 0x58 } : BV:8
58 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
59 : eq(49, 58) : BOOL
60 : 4 { 0x4 } : BV:8
61 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
62 : eq(49, 61) : BOOL
63 : 1 { 0x1 } : BV:8
64 : 0 { 0x0 } : BV:8
65 : ite(62, 63, 64) : BV:8
66 : ite(59, 60, 65) : BV:8
67 : ite(56, 57, 66) : BV:8
68 : ite(54, 55, 67) : BV:8
69 : ite(51, 52, 68) : BV:8
70 : bvadd(58, 48) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 53) : BOOL
73 : eq(70, 47) : BOOL
74 : eq(70, 58) : BOOL
75 : eq(70, 61) : BOOL
76 : ite(75, 63, 64) : BV:8
77 : ite(74, 60, 76) : BV:8
78 : ite(73, 57, 77) : BV:8
79 : ite(72, 55, 78) : BV:8
80 : ite(71, 52, 79) : BV:8
81 : bvadd(50, 48) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 53) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 58) : BOOL
86 : eq(81, 61) : BOOL
87 : ite(86, 63, 64) : BV:8
88 : ite(85, 60, 87) : BV:8
89 : ite(84, 57, 88) : BV:8
90 : ite(83, 55, 89) : BV:8
91 : ite(82, 52, 90) : BV:8
92 : bvadd(53, 48) : BV:32
93 : eq(92, 50) : BOOL
94 : eq(92, 53) : BOOL
95 : eq(92, 47) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : ite(97, 63, 64) : BV:8
99 : ite(96, 60, 98) : BV:8
100 : ite(95, 57, 99) : BV:8
101 : ite(94, 55, 100) : BV:8
102 : ite(93, 52, 101) : BV:8
103 : bvconcat(69, 80, 91, 102) : BV:32
104 : bvadd(44, 46, 103) : BV:32
105 : eq(104, 50) : BOOL
106 : eq(104, 53) : BOOL
107 : eq(104, 47) : BOOL
108 : eq(104, 58) : BOOL
109 : eq(104, 61) : BOOL
110 : ite(109, 63, 64) : BV:8
111 : ite(108, 60, 110) : BV:8
112 : ite(107, 57, 111) : BV:8
113 : ite(106, 55, 112) : BV:8
114 : ite(105, 52, 113) : BV:8
115 : bvadd(21, 46, 103) : BV:32
116 : eq(115, 50) : BOOL
117 : eq(115, 53) : BOOL
118 : eq(115, 47) : BOOL
119 : eq(115, 58) : BOOL
120 : eq(115, 61) : BOOL
121 : ite(120, 63, 64) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 57, 122) : BV:8
124 : ite(117, 55, 123) : BV:8
125 : ite(116, 52, 124) : BV:8
126 : bvadd(7, 46, 103) : BV:32
127 : eq(126, 50) : BOOL
128 : eq(126, 53) : BOOL
129 : eq(126, 47) : BOOL
130 : eq(126, 58) : BOOL
131 : eq(126, 61) : BOOL
132 : ite(131, 63, 64) : BV:8
133 : ite(130, 60, 132) : BV:8
134 : ite(129, 57, 133) : BV:8
135 : ite(128, 55, 134) : BV:8
136 : ite(127, 52, 135) : BV:8
137 : bvadd(46, 103) : BV:32
138 : eq(137, 50) : BOOL
139 : eq(137, 53) : BOOL
140 : eq(137, 47) : BOOL
141 : eq(137, 58) : BOOL
142 : eq(137, 61) : BOOL
143 : ite(142, 63, 64) : BV:8
144 : ite(141, 60, 143) : BV:8
145 : ite(140, 57, 144) : BV:8
146 : ite(139, 55, 145) : BV:8
147 : ite(138, 52, 146) : BV:8
148 : bvconcat(114, 125, 136, 147) : BV:32
149 : ite(6, 7, 148) : BV:32
150 : ite(43, 148, 149) : BV:32
151 : ite(6, 7, 150) : BV:32
152 : lambda(1, 2, 151) : FUNCTION[BV:32,BV:32 -> BV:32]
153 : sym_const(152) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49077Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
11 : eq(9, 10) : BOOL
12 : 143 { 0x8f -113 } : BV:8
13 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
17 : eq(9, 16) : BOOL
18 : 88 { 0x58 } : BV:8
19 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
20 : eq(9, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda49078Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
11 : eq(9, 10) : BOOL
12 : 143 { 0x8f -113 } : BV:8
13 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
17 : eq(9, 16) : BOOL
18 : 88 { 0x58 } : BV:8
19 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
20 : eq(9, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49085Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1476693888 { 0x58048f80 +1.3562927e49 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2839543805 { 0xa93ffffd -1455423491 -1.49999964e211 } : BV:32
11 : eq(9, 10) : BOOL
12 : 143 { 0x8f -113 } : BV:8
13 : 2839543804 { 0xa93ffffc -1455423492 -1.49999952e211 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2839543807 { 0xa93fffff -1455423489 -1.49999988e211 } : BV:32
17 : eq(9, 16) : BOOL
18 : 88 { 0x58 } : BV:8
19 : 2839543806 { 0xa93ffffe -1455423490 -1.49999976e211 } : BV:32
20 : eq(9, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3412597724
=counter_example_end
=global nodece 55 num_edges_traversed 2
=global nodece 55 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 56
=global nodece 56 nodece z3.ce4663.num_edges_traversed1
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce4663 64435fa334f3fd62ed3169c0c19ba78
=input.spec-%var-x-1
1 : Lambda50074Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50075Var : BV:32
18 : Lambda50076Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50077Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
80 : eq(78, 79) : BOOL
81 : 36 { 0x24 } : BV:8
82 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
83 : eq(78, 82) : BOOL
84 : 5 { 0x5 } : BV:8
85 : eq(78, 76) : BOOL
86 : 115 { 0x73 } : BV:8
87 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
88 : eq(78, 87) : BOOL
89 : 248 { 0xf8 -8 } : BV:8
90 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
91 : eq(78, 90) : BOOL
92 : 199 { 0xc7 -57 } : BV:8
93 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
94 : eq(78, 93) : BOOL
95 : 204 { 0xcc -52 } : BV:8
96 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
97 : eq(78, 96) : BOOL
98 : 191 { 0xbf -65 } : BV:8
99 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
100 : eq(78, 99) : BOOL
101 : 127 { 0x7f } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(97, 98, 103) : BV:8
105 : ite(94, 95, 104) : BV:8
106 : ite(91, 92, 105) : BV:8
107 : ite(88, 89, 106) : BV:8
108 : ite(85, 86, 107) : BV:8
109 : ite(83, 84, 108) : BV:8
110 : ite(80, 81, 109) : BV:8
111 : bvadd(96, 77) : BV:32
112 : eq(111, 79) : BOOL
113 : eq(111, 82) : BOOL
114 : eq(111, 76) : BOOL
115 : eq(111, 87) : BOOL
116 : eq(111, 90) : BOOL
117 : eq(111, 93) : BOOL
118 : eq(111, 96) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 98, 120) : BV:8
122 : ite(117, 95, 121) : BV:8
123 : ite(116, 92, 122) : BV:8
124 : ite(115, 89, 123) : BV:8
125 : ite(114, 86, 124) : BV:8
126 : ite(113, 84, 125) : BV:8
127 : ite(112, 81, 126) : BV:8
128 : bvadd(99, 77) : BV:32
129 : eq(128, 79) : BOOL
130 : eq(128, 82) : BOOL
131 : eq(128, 76) : BOOL
132 : eq(128, 87) : BOOL
133 : eq(128, 90) : BOOL
134 : eq(128, 93) : BOOL
135 : eq(128, 96) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 98, 137) : BV:8
139 : ite(134, 95, 138) : BV:8
140 : ite(133, 92, 139) : BV:8
141 : ite(132, 89, 140) : BV:8
142 : ite(131, 86, 141) : BV:8
143 : ite(130, 84, 142) : BV:8
144 : ite(129, 81, 143) : BV:8
145 : bvadd(93, 77) : BV:32
146 : eq(145, 79) : BOOL
147 : eq(145, 82) : BOOL
148 : eq(145, 76) : BOOL
149 : eq(145, 87) : BOOL
150 : eq(145, 90) : BOOL
151 : eq(145, 93) : BOOL
152 : eq(145, 96) : BOOL
153 : eq(145, 99) : BOOL
154 : ite(153, 101, 102) : BV:8
155 : ite(152, 98, 154) : BV:8
156 : ite(151, 95, 155) : BV:8
157 : ite(150, 92, 156) : BV:8
158 : ite(149, 89, 157) : BV:8
159 : ite(148, 86, 158) : BV:8
160 : ite(147, 84, 159) : BV:8
161 : ite(146, 81, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : bvadd(34, 75, 162) : BV:32
164 : eq(163, 79) : BOOL
165 : eq(163, 82) : BOOL
166 : eq(163, 76) : BOOL
167 : eq(163, 87) : BOOL
168 : eq(163, 90) : BOOL
169 : eq(163, 93) : BOOL
170 : eq(163, 96) : BOOL
171 : eq(163, 99) : BOOL
172 : ite(171, 101, 102) : BV:8
173 : ite(170, 98, 172) : BV:8
174 : ite(169, 95, 173) : BV:8
175 : ite(168, 92, 174) : BV:8
176 : ite(167, 89, 175) : BV:8
177 : ite(166, 86, 176) : BV:8
178 : ite(165, 84, 177) : BV:8
179 : ite(164, 81, 178) : BV:8
180 : 2 { 0x2 +1.23e129 } : BV:32
181 : bvadd(180, 75, 162) : BV:32
182 : eq(181, 79) : BOOL
183 : eq(181, 82) : BOOL
184 : eq(181, 76) : BOOL
185 : eq(181, 87) : BOOL
186 : eq(181, 90) : BOOL
187 : eq(181, 93) : BOOL
188 : eq(181, 96) : BOOL
189 : eq(181, 99) : BOOL
190 : ite(189, 101, 102) : BV:8
191 : ite(188, 98, 190) : BV:8
192 : ite(187, 95, 191) : BV:8
193 : ite(186, 92, 192) : BV:8
194 : ite(185, 89, 193) : BV:8
195 : ite(184, 86, 194) : BV:8
196 : ite(183, 84, 195) : BV:8
197 : ite(182, 81, 196) : BV:8
198 : 1 { 0x1 +1.11e129 } : BV:32
199 : bvadd(198, 75, 162) : BV:32
200 : eq(199, 79) : BOOL
201 : eq(199, 82) : BOOL
202 : eq(199, 76) : BOOL
203 : eq(199, 87) : BOOL
204 : eq(199, 90) : BOOL
205 : eq(199, 93) : BOOL
206 : eq(199, 96) : BOOL
207 : eq(199, 99) : BOOL
208 : ite(207, 101, 102) : BV:8
209 : ite(206, 98, 208) : BV:8
210 : ite(205, 95, 209) : BV:8
211 : ite(204, 92, 210) : BV:8
212 : ite(203, 89, 211) : BV:8
213 : ite(202, 86, 212) : BV:8
214 : ite(201, 84, 213) : BV:8
215 : ite(200, 81, 214) : BV:8
216 : bvadd(75, 162) : BV:32
217 : eq(216, 79) : BOOL
218 : eq(216, 82) : BOOL
219 : eq(216, 76) : BOOL
220 : eq(216, 87) : BOOL
221 : eq(216, 90) : BOOL
222 : eq(216, 93) : BOOL
223 : eq(216, 96) : BOOL
224 : eq(216, 99) : BOOL
225 : ite(224, 101, 102) : BV:8
226 : ite(223, 98, 225) : BV:8
227 : ite(222, 95, 226) : BV:8
228 : ite(221, 92, 227) : BV:8
229 : ite(220, 89, 228) : BV:8
230 : ite(219, 86, 229) : BV:8
231 : ite(218, 84, 230) : BV:8
232 : ite(217, 81, 231) : BV:8
233 : bvconcat(179, 197, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 3834331655 { 0xe48b4207 -460635641 -1.8795249e74 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda50101Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50102Var : BV:32
18 : eq(17, 4) : BOOL
19 : bvmul(8, 17) : BV:32
20 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
21 : bvadd(4, 19, 20) : BV:32
22 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
23 : eq(21, 22) : BOOL
24 : 36 { 0x24 } : BV:8
25 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
26 : eq(21, 25) : BOOL
27 : 5 { 0x5 } : BV:8
28 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
29 : eq(21, 28) : BOOL
30 : 115 { 0x73 } : BV:8
31 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
32 : eq(21, 31) : BOOL
33 : 248 { 0xf8 -8 } : BV:8
34 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
35 : eq(21, 34) : BOOL
36 : 199 { 0xc7 -57 } : BV:8
37 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
38 : eq(21, 37) : BOOL
39 : 204 { 0xcc -52 } : BV:8
40 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
41 : eq(21, 40) : BOOL
42 : 191 { 0xbf -65 } : BV:8
43 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
44 : eq(21, 43) : BOOL
45 : 127 { 0x7f } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : ite(26, 27, 52) : BV:8
54 : ite(23, 24, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 19, 20) : BV:32
57 : eq(56, 22) : BOOL
58 : eq(56, 25) : BOOL
59 : eq(56, 28) : BOOL
60 : eq(56, 31) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 40) : BOOL
64 : eq(56, 43) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 42, 65) : BV:8
67 : ite(62, 39, 66) : BV:8
68 : ite(61, 36, 67) : BV:8
69 : ite(60, 33, 68) : BV:8
70 : ite(59, 30, 69) : BV:8
71 : ite(58, 27, 70) : BV:8
72 : ite(57, 24, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 19, 20) : BV:32
75 : eq(74, 22) : BOOL
76 : eq(74, 25) : BOOL
77 : eq(74, 28) : BOOL
78 : eq(74, 31) : BOOL
79 : eq(74, 34) : BOOL
80 : eq(74, 37) : BOOL
81 : eq(74, 40) : BOOL
82 : eq(74, 43) : BOOL
83 : ite(82, 45, 46) : BV:8
84 : ite(81, 42, 83) : BV:8
85 : ite(80, 39, 84) : BV:8
86 : ite(79, 36, 85) : BV:8
87 : ite(78, 33, 86) : BV:8
88 : ite(77, 30, 87) : BV:8
89 : ite(76, 27, 88) : BV:8
90 : ite(75, 24, 89) : BV:8
91 : bvadd(19, 20) : BV:32
92 : eq(91, 22) : BOOL
93 : eq(91, 25) : BOOL
94 : eq(91, 28) : BOOL
95 : eq(91, 31) : BOOL
96 : eq(91, 34) : BOOL
97 : eq(91, 37) : BOOL
98 : eq(91, 40) : BOOL
99 : eq(91, 43) : BOOL
100 : ite(99, 45, 46) : BV:8
101 : ite(98, 42, 100) : BV:8
102 : ite(97, 39, 101) : BV:8
103 : ite(96, 36, 102) : BV:8
104 : ite(95, 33, 103) : BV:8
105 : ite(94, 30, 104) : BV:8
106 : ite(93, 27, 105) : BV:8
107 : ite(92, 24, 106) : BV:8
108 : bvconcat(54, 72, 90, 107) : BV:32
109 : ite(18, 2, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 21827583 ] -> 0, [ 21827584; 21827584 ] -> 248, [ 21827585; 21827585 ] -> 199, [ 21827586; 21827586 ] -> 5, [ 21827587; 21827587 ] -> 36, [ 21827588; 1864370147 ] -> 0, [ 1864370148; 1864370148 ] -> 204, [ 1864370149; 1864370149 ] -> 127, [ 1864370150; 1864370150 ] -> 191, [ 1864370151; 1864370151 ] -> 115, [ 1864370152; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 963807619 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 963807620; 963807623 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 963807624; 1652898251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1652898252; 1652898255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1652898256; 2127545259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2127545260; 2127545263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2127545264; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2127545260 { 0x7ecfc3ac +1.62315893e126 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1652898252 { 0x628539cc +1.4082632e70 } : BV:32
=input.dst.llvm-%n
1 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 963807620 { 0x39728984 +1.89482164e243 } : BV:32
=input.dst.llvm-%x
1 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda50094Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50095Var : BV:32
18 : Lambda50096Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50097Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
61 : eq(59, 60) : BOOL
62 : 36 { 0x24 } : BV:8
63 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
64 : eq(59, 63) : BOOL
65 : 5 { 0x5 } : BV:8
66 : eq(59, 57) : BOOL
67 : 115 { 0x73 } : BV:8
68 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
69 : eq(59, 68) : BOOL
70 : 248 { 0xf8 -8 } : BV:8
71 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
72 : eq(59, 71) : BOOL
73 : 199 { 0xc7 -57 } : BV:8
74 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
75 : eq(59, 74) : BOOL
76 : 204 { 0xcc -52 } : BV:8
77 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
78 : eq(59, 77) : BOOL
79 : 191 { 0xbf -65 } : BV:8
80 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
81 : eq(59, 80) : BOOL
82 : 127 { 0x7f } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(72, 73, 86) : BV:8
88 : ite(69, 70, 87) : BV:8
89 : ite(66, 67, 88) : BV:8
90 : ite(64, 65, 89) : BV:8
91 : ite(61, 62, 90) : BV:8
92 : bvadd(77, 58) : BV:32
93 : eq(92, 60) : BOOL
94 : eq(92, 63) : BOOL
95 : eq(92, 57) : BOOL
96 : eq(92, 68) : BOOL
97 : eq(92, 71) : BOOL
98 : eq(92, 74) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 73, 103) : BV:8
105 : ite(96, 70, 104) : BV:8
106 : ite(95, 67, 105) : BV:8
107 : ite(94, 65, 106) : BV:8
108 : ite(93, 62, 107) : BV:8
109 : bvadd(80, 58) : BV:32
110 : eq(109, 60) : BOOL
111 : eq(109, 63) : BOOL
112 : eq(109, 57) : BOOL
113 : eq(109, 68) : BOOL
114 : eq(109, 71) : BOOL
115 : eq(109, 74) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 73, 120) : BV:8
122 : ite(113, 70, 121) : BV:8
123 : ite(112, 67, 122) : BV:8
124 : ite(111, 65, 123) : BV:8
125 : ite(110, 62, 124) : BV:8
126 : bvadd(74, 58) : BV:32
127 : eq(126, 60) : BOOL
128 : eq(126, 63) : BOOL
129 : eq(126, 57) : BOOL
130 : eq(126, 68) : BOOL
131 : eq(126, 71) : BOOL
132 : eq(126, 74) : BOOL
133 : eq(126, 77) : BOOL
134 : eq(126, 80) : BOOL
135 : ite(134, 82, 83) : BV:8
136 : ite(133, 79, 135) : BV:8
137 : ite(132, 76, 136) : BV:8
138 : ite(131, 73, 137) : BV:8
139 : ite(130, 70, 138) : BV:8
140 : ite(129, 67, 139) : BV:8
141 : ite(128, 65, 140) : BV:8
142 : ite(127, 62, 141) : BV:8
143 : bvconcat(91, 108, 125, 142) : BV:32
144 : bvadd(34, 56, 143) : BV:32
145 : eq(144, 60) : BOOL
146 : eq(144, 63) : BOOL
147 : eq(144, 57) : BOOL
148 : eq(144, 68) : BOOL
149 : eq(144, 71) : BOOL
150 : eq(144, 74) : BOOL
151 : eq(144, 77) : BOOL
152 : eq(144, 80) : BOOL
153 : ite(152, 82, 83) : BV:8
154 : ite(151, 79, 153) : BV:8
155 : ite(150, 76, 154) : BV:8
156 : ite(149, 73, 155) : BV:8
157 : ite(148, 70, 156) : BV:8
158 : ite(147, 67, 157) : BV:8
159 : ite(146, 65, 158) : BV:8
160 : ite(145, 62, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 56, 143) : BV:32
163 : eq(162, 60) : BOOL
164 : eq(162, 63) : BOOL
165 : eq(162, 57) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 74) : BOOL
169 : eq(162, 77) : BOOL
170 : eq(162, 80) : BOOL
171 : ite(170, 82, 83) : BV:8
172 : ite(169, 79, 171) : BV:8
173 : ite(168, 76, 172) : BV:8
174 : ite(167, 73, 173) : BV:8
175 : ite(166, 70, 174) : BV:8
176 : ite(165, 67, 175) : BV:8
177 : ite(164, 65, 176) : BV:8
178 : ite(163, 62, 177) : BV:8
179 : 1 { 0x1 +1.11e129 } : BV:32
180 : bvadd(179, 56, 143) : BV:32
181 : eq(180, 60) : BOOL
182 : eq(180, 63) : BOOL
183 : eq(180, 57) : BOOL
184 : eq(180, 68) : BOOL
185 : eq(180, 71) : BOOL
186 : eq(180, 74) : BOOL
187 : eq(180, 77) : BOOL
188 : eq(180, 80) : BOOL
189 : ite(188, 82, 83) : BV:8
190 : ite(187, 79, 189) : BV:8
191 : ite(186, 76, 190) : BV:8
192 : ite(185, 73, 191) : BV:8
193 : ite(184, 70, 192) : BV:8
194 : ite(183, 67, 193) : BV:8
195 : ite(182, 65, 194) : BV:8
196 : ite(181, 62, 195) : BV:8
197 : bvadd(56, 143) : BV:32
198 : eq(197, 60) : BOOL
199 : eq(197, 63) : BOOL
200 : eq(197, 57) : BOOL
201 : eq(197, 68) : BOOL
202 : eq(197, 71) : BOOL
203 : eq(197, 74) : BOOL
204 : eq(197, 77) : BOOL
205 : eq(197, 80) : BOOL
206 : ite(205, 82, 83) : BV:8
207 : ite(204, 79, 206) : BV:8
208 : ite(203, 76, 207) : BV:8
209 : ite(202, 73, 208) : BV:8
210 : ite(201, 70, 209) : BV:8
211 : ite(200, 67, 210) : BV:8
212 : ite(199, 65, 211) : BV:8
213 : ite(198, 62, 212) : BV:8
214 : bvconcat(160, 178, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : Lambda50083Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda50084Var : BV:32
20 : eq(19, 6) : BOOL
21 : eq(19, 4) : BOOL
22 : bvmul(10, 19) : BV:32
23 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
24 : bvadd(6, 22, 23) : BV:32
25 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
26 : eq(24, 25) : BOOL
27 : 36 { 0x24 } : BV:8
28 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
29 : eq(24, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
32 : eq(24, 31) : BOOL
33 : 115 { 0x73 } : BV:8
34 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
35 : eq(24, 34) : BOOL
36 : 248 { 0xf8 -8 } : BV:8
37 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
38 : eq(24, 37) : BOOL
39 : 199 { 0xc7 -57 } : BV:8
40 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
41 : eq(24, 40) : BOOL
42 : 204 { 0xcc -52 } : BV:8
43 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
44 : eq(24, 43) : BOOL
45 : 191 { 0xbf -65 } : BV:8
46 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
47 : eq(24, 46) : BOOL
48 : 127 { 0x7f } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(21, 4, 111) : BV:32
113 : ite(20, 4, 112) : BV:32
114 : lambda(19, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(18, 114) : MAP[BV:32 -> BV:32]
116 : sum(1, 2, 115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
117 : sym_const(116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3834331655 { 0xe48b4207 -460635641 -1.8795249e74 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3834331656 { 0xe48b4208 -460635640 -1.8795261e74 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(2, 2) : BOOL
19 : bvmul(7, 2) : BV:32
20 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
21 : bvadd(2, 19, 20) : BV:32
22 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
23 : eq(21, 22) : BOOL
24 : 36 { 0x24 } : BV:8
25 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
26 : eq(21, 25) : BOOL
27 : 5 { 0x5 } : BV:8
28 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
29 : eq(21, 28) : BOOL
30 : 115 { 0x73 } : BV:8
31 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
32 : eq(21, 31) : BOOL
33 : 248 { 0xf8 -8 } : BV:8
34 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
35 : eq(21, 34) : BOOL
36 : 199 { 0xc7 -57 } : BV:8
37 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
38 : eq(21, 37) : BOOL
39 : 204 { 0xcc -52 } : BV:8
40 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
41 : eq(21, 40) : BOOL
42 : 191 { 0xbf -65 } : BV:8
43 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
44 : eq(21, 43) : BOOL
45 : 127 { 0x7f } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : ite(26, 27, 52) : BV:8
54 : ite(23, 24, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 19, 20) : BV:32
57 : eq(56, 22) : BOOL
58 : eq(56, 25) : BOOL
59 : eq(56, 28) : BOOL
60 : eq(56, 31) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 40) : BOOL
64 : eq(56, 43) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 42, 65) : BV:8
67 : ite(62, 39, 66) : BV:8
68 : ite(61, 36, 67) : BV:8
69 : ite(60, 33, 68) : BV:8
70 : ite(59, 30, 69) : BV:8
71 : ite(58, 27, 70) : BV:8
72 : ite(57, 24, 71) : BV:8
73 : bvadd(15, 19, 20) : BV:32
74 : eq(73, 22) : BOOL
75 : eq(73, 25) : BOOL
76 : eq(73, 28) : BOOL
77 : eq(73, 31) : BOOL
78 : eq(73, 34) : BOOL
79 : eq(73, 37) : BOOL
80 : eq(73, 40) : BOOL
81 : eq(73, 43) : BOOL
82 : ite(81, 45, 46) : BV:8
83 : ite(80, 42, 82) : BV:8
84 : ite(79, 39, 83) : BV:8
85 : ite(78, 36, 84) : BV:8
86 : ite(77, 33, 85) : BV:8
87 : ite(76, 30, 86) : BV:8
88 : ite(75, 27, 87) : BV:8
89 : ite(74, 24, 88) : BV:8
90 : bvadd(19, 20) : BV:32
91 : eq(90, 22) : BOOL
92 : eq(90, 25) : BOOL
93 : eq(90, 28) : BOOL
94 : eq(90, 31) : BOOL
95 : eq(90, 34) : BOOL
96 : eq(90, 37) : BOOL
97 : eq(90, 40) : BOOL
98 : eq(90, 43) : BOOL
99 : ite(98, 45, 46) : BV:8
100 : ite(97, 42, 99) : BV:8
101 : ite(96, 39, 100) : BV:8
102 : ite(95, 36, 101) : BV:8
103 : ite(94, 33, 102) : BV:8
104 : ite(93, 30, 103) : BV:8
105 : ite(92, 27, 104) : BV:8
106 : ite(91, 24, 105) : BV:8
107 : bvconcat(54, 72, 89, 106) : BV:32
108 : ite(18, 1, 107) : BV:32
109 : sum(16, 17, 108) : SUM[UNIT,BV:32]
110 : sym_const(109) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1590858528 { 0x5ed29320 +1.64511489e62 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda50106Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50107Var : BV:32
18 : eq(17, 4) : BOOL
19 : eq(17, 2) : BOOL
20 : bvmul(8, 17) : BV:32
21 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
24 : eq(22, 23) : BOOL
25 : 36 { 0x24 } : BV:8
26 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
27 : eq(22, 26) : BOOL
28 : 5 { 0x5 } : BV:8
29 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
30 : eq(22, 29) : BOOL
31 : 115 { 0x73 } : BV:8
32 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
33 : eq(22, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
36 : eq(22, 35) : BOOL
37 : 199 { 0xc7 -57 } : BV:8
38 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
39 : eq(22, 38) : BOOL
40 : 204 { 0xcc -52 } : BV:8
41 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
42 : eq(22, 41) : BOOL
43 : 191 { 0xbf -65 } : BV:8
44 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
45 : eq(22, 44) : BOOL
46 : 127 { 0x7f } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(33, 34, 51) : BV:8
53 : ite(30, 31, 52) : BV:8
54 : ite(27, 28, 53) : BV:8
55 : ite(24, 25, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 20, 21) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 29) : BOOL
61 : eq(57, 32) : BOOL
62 : eq(57, 35) : BOOL
63 : eq(57, 38) : BOOL
64 : eq(57, 41) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 43, 66) : BV:8
68 : ite(63, 40, 67) : BV:8
69 : ite(62, 37, 68) : BV:8
70 : ite(61, 34, 69) : BV:8
71 : ite(60, 31, 70) : BV:8
72 : ite(59, 28, 71) : BV:8
73 : ite(58, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 20, 21) : BV:32
76 : eq(75, 23) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 35) : BOOL
81 : eq(75, 38) : BOOL
82 : eq(75, 41) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 43, 84) : BV:8
86 : ite(81, 40, 85) : BV:8
87 : ite(80, 37, 86) : BV:8
88 : ite(79, 34, 87) : BV:8
89 : ite(78, 31, 88) : BV:8
90 : ite(77, 28, 89) : BV:8
91 : ite(76, 25, 90) : BV:8
92 : bvadd(20, 21) : BV:32
93 : eq(92, 23) : BOOL
94 : eq(92, 26) : BOOL
95 : eq(92, 29) : BOOL
96 : eq(92, 32) : BOOL
97 : eq(92, 35) : BOOL
98 : eq(92, 38) : BOOL
99 : eq(92, 41) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 43, 101) : BV:8
103 : ite(98, 40, 102) : BV:8
104 : ite(97, 37, 103) : BV:8
105 : ite(96, 34, 104) : BV:8
106 : ite(95, 31, 105) : BV:8
107 : ite(94, 28, 106) : BV:8
108 : ite(93, 25, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(19, 2, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3834331655 { 0xe48b4207 -460635641 -1.8795249e74 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 415562309 { 0x18c4fa45 +1.53888761e178 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 2452424732 { 0x922d081c -1842542564 -1.35180997e165 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 2452424732 { 0x922d081c -1842542564 -1.35180997e165 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 604358660 { 0x2405c804 +1.4516649e201 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 604358660 { 0x2405c804 +1.4516649e201 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1652898252 { 0x628539cc +1.4082632e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1652898255 { 0x628539cf +1.4082667e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 963807620 { 0x39728984 +1.89482164e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 963807623 { 0x39728987 +1.89482200e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2127545260 { 0x7ecfc3ac +1.62315893e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2127545263 { 0x7ecfc3af +1.62315928e126 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49966Var : BV:32
2 : Lambda49967Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
53 : eq(51, 52) : BOOL
54 : 36 { 0x24 } : BV:8
55 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
56 : eq(51, 55) : BOOL
57 : 5 { 0x5 } : BV:8
58 : eq(51, 49) : BOOL
59 : 115 { 0x73 } : BV:8
60 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
61 : eq(51, 60) : BOOL
62 : 248 { 0xf8 -8 } : BV:8
63 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
64 : eq(51, 63) : BOOL
65 : 199 { 0xc7 -57 } : BV:8
66 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
67 : eq(51, 66) : BOOL
68 : 204 { 0xcc -52 } : BV:8
69 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
70 : eq(51, 69) : BOOL
71 : 191 { 0xbf -65 } : BV:8
72 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
73 : eq(51, 72) : BOOL
74 : 127 { 0x7f } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(58, 59, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(69, 50) : BV:32
85 : eq(84, 52) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 49) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(72, 50) : BV:32
102 : eq(101, 52) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 49) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 59, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : bvadd(66, 50) : BV:32
119 : eq(118, 52) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 49) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 59, 131) : BV:8
133 : ite(120, 57, 132) : BV:8
134 : ite(119, 54, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(30, 48, 135) : BV:32
137 : eq(136, 52) : BOOL
138 : eq(136, 55) : BOOL
139 : eq(136, 49) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 59, 149) : BV:8
151 : ite(138, 57, 150) : BV:8
152 : ite(137, 54, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 48, 135) : BV:32
155 : eq(154, 52) : BOOL
156 : eq(154, 55) : BOOL
157 : eq(154, 49) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 59, 167) : BV:8
169 : ite(156, 57, 168) : BV:8
170 : ite(155, 54, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 48, 135) : BV:32
173 : eq(172, 52) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 49) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 54, 187) : BV:8
189 : bvadd(48, 135) : BV:32
190 : eq(189, 52) : BOOL
191 : eq(189, 55) : BOOL
192 : eq(189, 49) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 59, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 54, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49971Var : BV:32
2 : Lambda49972Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3838509577 ] -> true, [ 3838509578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3838509577 ] -> true, [ 3838509578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49980Var : BV:32
2 : Lambda49981Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49976Var : BV:32
2 : Lambda49977Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
14 : eq(12, 13) : BOOL
15 : 36 { 0x24 } : BV:8
16 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
17 : eq(12, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : eq(12, 10) : BOOL
20 : 115 { 0x73 } : BV:8
21 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
22 : eq(12, 21) : BOOL
23 : 248 { 0xf8 -8 } : BV:8
24 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
25 : eq(12, 24) : BOOL
26 : 199 { 0xc7 -57 } : BV:8
27 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
28 : eq(12, 27) : BOOL
29 : 204 { 0xcc -52 } : BV:8
30 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
31 : eq(12, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
34 : eq(12, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49987Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
11 : eq(9, 10) : BOOL
12 : 36 { 0x24 } : BV:8
13 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
17 : eq(9, 16) : BOOL
18 : 115 { 0x73 } : BV:8
19 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
20 : eq(9, 19) : BOOL
21 : 248 { 0xf8 -8 } : BV:8
22 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
23 : eq(9, 22) : BOOL
24 : 199 { 0xc7 -57 } : BV:8
25 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
26 : eq(9, 25) : BOOL
27 : 204 { 0xcc -52 } : BV:8
28 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
29 : eq(9, 28) : BOOL
30 : 191 { 0xbf -65 } : BV:8
31 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda49988Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
11 : eq(9, 10) : BOOL
12 : 36 { 0x24 } : BV:8
13 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
17 : eq(9, 16) : BOOL
18 : 115 { 0x73 } : BV:8
19 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
20 : eq(9, 19) : BOOL
21 : 248 { 0xf8 -8 } : BV:8
22 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
23 : eq(9, 22) : BOOL
24 : 199 { 0xc7 -57 } : BV:8
25 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
26 : eq(9, 25) : BOOL
27 : 204 { 0xcc -52 } : BV:8
28 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
29 : eq(9, 28) : BOOL
30 : 191 { 0xbf -65 } : BV:8
31 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49995Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 36 { 0x24 } : BV:8
12 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 } : BV:8
15 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
16 : eq(8, 15) : BOOL
17 : 115 { 0x73 } : BV:8
18 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
19 : eq(8, 18) : BOOL
20 : 248 { 0xf8 -8 } : BV:8
21 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
22 : eq(8, 21) : BOOL
23 : 199 { 0xc7 -57 } : BV:8
24 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
25 : eq(8, 24) : BOOL
26 : 204 { 0xcc -52 } : BV:8
27 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
28 : eq(8, 27) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
31 : eq(8, 30) : BOOL
32 : 127 { 0x7f } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4014617930
=counter_example_end
=global nodece 56 num_edges_traversed 1
=global nodece 56 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce4706.num_edges_traversed2
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(epsilon)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce4706 f8c4f810a4b148693b1b3899092b2
=input.spec-%var-x-1
1 : Lambda50074Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50075Var : BV:32
18 : Lambda50076Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50077Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
80 : eq(78, 79) : BOOL
81 : 36 { 0x24 } : BV:8
82 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
83 : eq(78, 82) : BOOL
84 : 5 { 0x5 } : BV:8
85 : eq(78, 76) : BOOL
86 : 115 { 0x73 } : BV:8
87 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
88 : eq(78, 87) : BOOL
89 : 248 { 0xf8 -8 } : BV:8
90 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
91 : eq(78, 90) : BOOL
92 : 199 { 0xc7 -57 } : BV:8
93 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
94 : eq(78, 93) : BOOL
95 : 204 { 0xcc -52 } : BV:8
96 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
97 : eq(78, 96) : BOOL
98 : 191 { 0xbf -65 } : BV:8
99 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
100 : eq(78, 99) : BOOL
101 : 127 { 0x7f } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(97, 98, 103) : BV:8
105 : ite(94, 95, 104) : BV:8
106 : ite(91, 92, 105) : BV:8
107 : ite(88, 89, 106) : BV:8
108 : ite(85, 86, 107) : BV:8
109 : ite(83, 84, 108) : BV:8
110 : ite(80, 81, 109) : BV:8
111 : bvadd(96, 77) : BV:32
112 : eq(111, 79) : BOOL
113 : eq(111, 82) : BOOL
114 : eq(111, 76) : BOOL
115 : eq(111, 87) : BOOL
116 : eq(111, 90) : BOOL
117 : eq(111, 93) : BOOL
118 : eq(111, 96) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 98, 120) : BV:8
122 : ite(117, 95, 121) : BV:8
123 : ite(116, 92, 122) : BV:8
124 : ite(115, 89, 123) : BV:8
125 : ite(114, 86, 124) : BV:8
126 : ite(113, 84, 125) : BV:8
127 : ite(112, 81, 126) : BV:8
128 : bvadd(99, 77) : BV:32
129 : eq(128, 79) : BOOL
130 : eq(128, 82) : BOOL
131 : eq(128, 76) : BOOL
132 : eq(128, 87) : BOOL
133 : eq(128, 90) : BOOL
134 : eq(128, 93) : BOOL
135 : eq(128, 96) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 98, 137) : BV:8
139 : ite(134, 95, 138) : BV:8
140 : ite(133, 92, 139) : BV:8
141 : ite(132, 89, 140) : BV:8
142 : ite(131, 86, 141) : BV:8
143 : ite(130, 84, 142) : BV:8
144 : ite(129, 81, 143) : BV:8
145 : bvadd(93, 77) : BV:32
146 : eq(145, 79) : BOOL
147 : eq(145, 82) : BOOL
148 : eq(145, 76) : BOOL
149 : eq(145, 87) : BOOL
150 : eq(145, 90) : BOOL
151 : eq(145, 93) : BOOL
152 : eq(145, 96) : BOOL
153 : eq(145, 99) : BOOL
154 : ite(153, 101, 102) : BV:8
155 : ite(152, 98, 154) : BV:8
156 : ite(151, 95, 155) : BV:8
157 : ite(150, 92, 156) : BV:8
158 : ite(149, 89, 157) : BV:8
159 : ite(148, 86, 158) : BV:8
160 : ite(147, 84, 159) : BV:8
161 : ite(146, 81, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : bvadd(34, 75, 162) : BV:32
164 : eq(163, 79) : BOOL
165 : eq(163, 82) : BOOL
166 : eq(163, 76) : BOOL
167 : eq(163, 87) : BOOL
168 : eq(163, 90) : BOOL
169 : eq(163, 93) : BOOL
170 : eq(163, 96) : BOOL
171 : eq(163, 99) : BOOL
172 : ite(171, 101, 102) : BV:8
173 : ite(170, 98, 172) : BV:8
174 : ite(169, 95, 173) : BV:8
175 : ite(168, 92, 174) : BV:8
176 : ite(167, 89, 175) : BV:8
177 : ite(166, 86, 176) : BV:8
178 : ite(165, 84, 177) : BV:8
179 : ite(164, 81, 178) : BV:8
180 : 2 { 0x2 +1.23e129 } : BV:32
181 : bvadd(180, 75, 162) : BV:32
182 : eq(181, 79) : BOOL
183 : eq(181, 82) : BOOL
184 : eq(181, 76) : BOOL
185 : eq(181, 87) : BOOL
186 : eq(181, 90) : BOOL
187 : eq(181, 93) : BOOL
188 : eq(181, 96) : BOOL
189 : eq(181, 99) : BOOL
190 : ite(189, 101, 102) : BV:8
191 : ite(188, 98, 190) : BV:8
192 : ite(187, 95, 191) : BV:8
193 : ite(186, 92, 192) : BV:8
194 : ite(185, 89, 193) : BV:8
195 : ite(184, 86, 194) : BV:8
196 : ite(183, 84, 195) : BV:8
197 : ite(182, 81, 196) : BV:8
198 : 1 { 0x1 +1.11e129 } : BV:32
199 : bvadd(198, 75, 162) : BV:32
200 : eq(199, 79) : BOOL
201 : eq(199, 82) : BOOL
202 : eq(199, 76) : BOOL
203 : eq(199, 87) : BOOL
204 : eq(199, 90) : BOOL
205 : eq(199, 93) : BOOL
206 : eq(199, 96) : BOOL
207 : eq(199, 99) : BOOL
208 : ite(207, 101, 102) : BV:8
209 : ite(206, 98, 208) : BV:8
210 : ite(205, 95, 209) : BV:8
211 : ite(204, 92, 210) : BV:8
212 : ite(203, 89, 211) : BV:8
213 : ite(202, 86, 212) : BV:8
214 : ite(201, 84, 213) : BV:8
215 : ite(200, 81, 214) : BV:8
216 : bvadd(75, 162) : BV:32
217 : eq(216, 79) : BOOL
218 : eq(216, 82) : BOOL
219 : eq(216, 76) : BOOL
220 : eq(216, 87) : BOOL
221 : eq(216, 90) : BOOL
222 : eq(216, 93) : BOOL
223 : eq(216, 96) : BOOL
224 : eq(216, 99) : BOOL
225 : ite(224, 101, 102) : BV:8
226 : ite(223, 98, 225) : BV:8
227 : ite(222, 95, 226) : BV:8
228 : ite(221, 92, 227) : BV:8
229 : ite(220, 89, 228) : BV:8
230 : ite(219, 86, 229) : BV:8
231 : ite(218, 84, 230) : BV:8
232 : ite(217, 81, 231) : BV:8
233 : bvconcat(179, 197, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3834331656 { 0xe48b4208 -460635640 -1.8795261e74 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 21827583 ] -> 0, [ 21827584; 21827584 ] -> 248, [ 21827585; 21827585 ] -> 199, [ 21827586; 21827586 ] -> 5, [ 21827587; 21827587 ] -> 36, [ 21827588; 1864370147 ] -> 0, [ 1864370148; 1864370148 ] -> 204, [ 1864370149; 1864370149 ] -> 127, [ 1864370150; 1864370150 ] -> 191, [ 1864370151; 1864370151 ] -> 115, [ 1864370152; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 963807619 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 963807620; 963807623 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 963807624; 1652898251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1652898252; 1652898255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1652898256; 2127545259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2127545260; 2127545263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2127545264; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2127545260 { 0x7ecfc3ac +1.62315893e126 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1652898252 { 0x628539cc +1.4082632e70 } : BV:32
=input.dst.llvm-%n
1 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 963807620 { 0x39728984 +1.89482164e243 } : BV:32
=input.dst.llvm-%x
1 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda50094Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50095Var : BV:32
18 : Lambda50096Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50097Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
61 : eq(59, 60) : BOOL
62 : 36 { 0x24 } : BV:8
63 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
64 : eq(59, 63) : BOOL
65 : 5 { 0x5 } : BV:8
66 : eq(59, 57) : BOOL
67 : 115 { 0x73 } : BV:8
68 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
69 : eq(59, 68) : BOOL
70 : 248 { 0xf8 -8 } : BV:8
71 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
72 : eq(59, 71) : BOOL
73 : 199 { 0xc7 -57 } : BV:8
74 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
75 : eq(59, 74) : BOOL
76 : 204 { 0xcc -52 } : BV:8
77 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
78 : eq(59, 77) : BOOL
79 : 191 { 0xbf -65 } : BV:8
80 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
81 : eq(59, 80) : BOOL
82 : 127 { 0x7f } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(72, 73, 86) : BV:8
88 : ite(69, 70, 87) : BV:8
89 : ite(66, 67, 88) : BV:8
90 : ite(64, 65, 89) : BV:8
91 : ite(61, 62, 90) : BV:8
92 : bvadd(77, 58) : BV:32
93 : eq(92, 60) : BOOL
94 : eq(92, 63) : BOOL
95 : eq(92, 57) : BOOL
96 : eq(92, 68) : BOOL
97 : eq(92, 71) : BOOL
98 : eq(92, 74) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 73, 103) : BV:8
105 : ite(96, 70, 104) : BV:8
106 : ite(95, 67, 105) : BV:8
107 : ite(94, 65, 106) : BV:8
108 : ite(93, 62, 107) : BV:8
109 : bvadd(80, 58) : BV:32
110 : eq(109, 60) : BOOL
111 : eq(109, 63) : BOOL
112 : eq(109, 57) : BOOL
113 : eq(109, 68) : BOOL
114 : eq(109, 71) : BOOL
115 : eq(109, 74) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 73, 120) : BV:8
122 : ite(113, 70, 121) : BV:8
123 : ite(112, 67, 122) : BV:8
124 : ite(111, 65, 123) : BV:8
125 : ite(110, 62, 124) : BV:8
126 : bvadd(74, 58) : BV:32
127 : eq(126, 60) : BOOL
128 : eq(126, 63) : BOOL
129 : eq(126, 57) : BOOL
130 : eq(126, 68) : BOOL
131 : eq(126, 71) : BOOL
132 : eq(126, 74) : BOOL
133 : eq(126, 77) : BOOL
134 : eq(126, 80) : BOOL
135 : ite(134, 82, 83) : BV:8
136 : ite(133, 79, 135) : BV:8
137 : ite(132, 76, 136) : BV:8
138 : ite(131, 73, 137) : BV:8
139 : ite(130, 70, 138) : BV:8
140 : ite(129, 67, 139) : BV:8
141 : ite(128, 65, 140) : BV:8
142 : ite(127, 62, 141) : BV:8
143 : bvconcat(91, 108, 125, 142) : BV:32
144 : bvadd(34, 56, 143) : BV:32
145 : eq(144, 60) : BOOL
146 : eq(144, 63) : BOOL
147 : eq(144, 57) : BOOL
148 : eq(144, 68) : BOOL
149 : eq(144, 71) : BOOL
150 : eq(144, 74) : BOOL
151 : eq(144, 77) : BOOL
152 : eq(144, 80) : BOOL
153 : ite(152, 82, 83) : BV:8
154 : ite(151, 79, 153) : BV:8
155 : ite(150, 76, 154) : BV:8
156 : ite(149, 73, 155) : BV:8
157 : ite(148, 70, 156) : BV:8
158 : ite(147, 67, 157) : BV:8
159 : ite(146, 65, 158) : BV:8
160 : ite(145, 62, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 56, 143) : BV:32
163 : eq(162, 60) : BOOL
164 : eq(162, 63) : BOOL
165 : eq(162, 57) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 74) : BOOL
169 : eq(162, 77) : BOOL
170 : eq(162, 80) : BOOL
171 : ite(170, 82, 83) : BV:8
172 : ite(169, 79, 171) : BV:8
173 : ite(168, 76, 172) : BV:8
174 : ite(167, 73, 173) : BV:8
175 : ite(166, 70, 174) : BV:8
176 : ite(165, 67, 175) : BV:8
177 : ite(164, 65, 176) : BV:8
178 : ite(163, 62, 177) : BV:8
179 : 1 { 0x1 +1.11e129 } : BV:32
180 : bvadd(179, 56, 143) : BV:32
181 : eq(180, 60) : BOOL
182 : eq(180, 63) : BOOL
183 : eq(180, 57) : BOOL
184 : eq(180, 68) : BOOL
185 : eq(180, 71) : BOOL
186 : eq(180, 74) : BOOL
187 : eq(180, 77) : BOOL
188 : eq(180, 80) : BOOL
189 : ite(188, 82, 83) : BV:8
190 : ite(187, 79, 189) : BV:8
191 : ite(186, 76, 190) : BV:8
192 : ite(185, 73, 191) : BV:8
193 : ite(184, 70, 192) : BV:8
194 : ite(183, 67, 193) : BV:8
195 : ite(182, 65, 194) : BV:8
196 : ite(181, 62, 195) : BV:8
197 : bvadd(56, 143) : BV:32
198 : eq(197, 60) : BOOL
199 : eq(197, 63) : BOOL
200 : eq(197, 57) : BOOL
201 : eq(197, 68) : BOOL
202 : eq(197, 71) : BOOL
203 : eq(197, 74) : BOOL
204 : eq(197, 77) : BOOL
205 : eq(197, 80) : BOOL
206 : ite(205, 82, 83) : BV:8
207 : ite(204, 79, 206) : BV:8
208 : ite(203, 76, 207) : BV:8
209 : ite(202, 73, 208) : BV:8
210 : ite(201, 70, 209) : BV:8
211 : ite(200, 67, 210) : BV:8
212 : ite(199, 65, 211) : BV:8
213 : ite(198, 62, 212) : BV:8
214 : bvconcat(160, 178, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 711116210 { 0x2a62c5b2 +1.77165818e213 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3834331656 { 0xe48b4208 -460635640 -1.8795261e74 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 18397889 { 0x118bac1 +1.19319927e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1652898252 { 0x628539cc +1.4082632e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1652898255 { 0x628539cf +1.4082667e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 963807620 { 0x39728984 +1.89482164e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 963807623 { 0x39728987 +1.89482200e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2127545260 { 0x7ecfc3ac +1.62315893e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2127545263 { 0x7ecfc3af +1.62315928e126 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49966Var : BV:32
2 : Lambda49967Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
53 : eq(51, 52) : BOOL
54 : 36 { 0x24 } : BV:8
55 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
56 : eq(51, 55) : BOOL
57 : 5 { 0x5 } : BV:8
58 : eq(51, 49) : BOOL
59 : 115 { 0x73 } : BV:8
60 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
61 : eq(51, 60) : BOOL
62 : 248 { 0xf8 -8 } : BV:8
63 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
64 : eq(51, 63) : BOOL
65 : 199 { 0xc7 -57 } : BV:8
66 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
67 : eq(51, 66) : BOOL
68 : 204 { 0xcc -52 } : BV:8
69 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
70 : eq(51, 69) : BOOL
71 : 191 { 0xbf -65 } : BV:8
72 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
73 : eq(51, 72) : BOOL
74 : 127 { 0x7f } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(58, 59, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(69, 50) : BV:32
85 : eq(84, 52) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 49) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(72, 50) : BV:32
102 : eq(101, 52) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 49) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 59, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : bvadd(66, 50) : BV:32
119 : eq(118, 52) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 49) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 59, 131) : BV:8
133 : ite(120, 57, 132) : BV:8
134 : ite(119, 54, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(30, 48, 135) : BV:32
137 : eq(136, 52) : BOOL
138 : eq(136, 55) : BOOL
139 : eq(136, 49) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 59, 149) : BV:8
151 : ite(138, 57, 150) : BV:8
152 : ite(137, 54, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 48, 135) : BV:32
155 : eq(154, 52) : BOOL
156 : eq(154, 55) : BOOL
157 : eq(154, 49) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 59, 167) : BV:8
169 : ite(156, 57, 168) : BV:8
170 : ite(155, 54, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 48, 135) : BV:32
173 : eq(172, 52) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 49) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 54, 187) : BV:8
189 : bvadd(48, 135) : BV:32
190 : eq(189, 52) : BOOL
191 : eq(189, 55) : BOOL
192 : eq(189, 49) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 59, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 54, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49971Var : BV:32
2 : Lambda49972Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3838509577 ] -> true, [ 3838509578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3838509577 ] -> true, [ 3838509578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49980Var : BV:32
2 : Lambda49981Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3838509577 { 0xe4cb0209 -456457719 -1.58599960e74 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3838509578 { 0xe4cb020a -456457718 -1.58599972e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3838509579 { 0xe4cb020b -456457717 -1.58599984e74 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49976Var : BV:32
2 : Lambda49977Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
14 : eq(12, 13) : BOOL
15 : 36 { 0x24 } : BV:8
16 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
17 : eq(12, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : eq(12, 10) : BOOL
20 : 115 { 0x73 } : BV:8
21 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
22 : eq(12, 21) : BOOL
23 : 248 { 0xf8 -8 } : BV:8
24 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
25 : eq(12, 24) : BOOL
26 : 199 { 0xc7 -57 } : BV:8
27 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
28 : eq(12, 27) : BOOL
29 : 204 { 0xcc -52 } : BV:8
30 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
31 : eq(12, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
34 : eq(12, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49987Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
11 : eq(9, 10) : BOOL
12 : 36 { 0x24 } : BV:8
13 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
17 : eq(9, 16) : BOOL
18 : 115 { 0x73 } : BV:8
19 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
20 : eq(9, 19) : BOOL
21 : 248 { 0xf8 -8 } : BV:8
22 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
23 : eq(9, 22) : BOOL
24 : 199 { 0xc7 -57 } : BV:8
25 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
26 : eq(9, 25) : BOOL
27 : 204 { 0xcc -52 } : BV:8
28 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
29 : eq(9, 28) : BOOL
30 : 191 { 0xbf -65 } : BV:8
31 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda49988Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
11 : eq(9, 10) : BOOL
12 : 36 { 0x24 } : BV:8
13 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
17 : eq(9, 16) : BOOL
18 : 115 { 0x73 } : BV:8
19 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
20 : eq(9, 19) : BOOL
21 : 248 { 0xf8 -8 } : BV:8
22 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
23 : eq(9, 22) : BOOL
24 : 199 { 0xc7 -57 } : BV:8
25 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
26 : eq(9, 25) : BOOL
27 : 204 { 0xcc -52 } : BV:8
28 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
29 : eq(9, 28) : BOOL
30 : 191 { 0xbf -65 } : BV:8
31 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49995Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 604358648 { 0x2405c7f8 +1.4516506e201 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 21827587 { 0x14d1003 +1.60205113e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 36 { 0x24 } : BV:8
12 : 21827586 { 0x14d1002 +1.60205101e131 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 } : BV:8
15 : 1864370151 { 0x6f2007e7 +1.25024116e95 } : BV:32
16 : eq(8, 15) : BOOL
17 : 115 { 0x73 } : BV:8
18 : 21827584 { 0x14d1000 +1.60205078e131 } : BV:32
19 : eq(8, 18) : BOOL
20 : 248 { 0xf8 -8 } : BV:8
21 : 21827585 { 0x14d1001 +1.60205090e131 } : BV:32
22 : eq(8, 21) : BOOL
23 : 199 { 0xc7 -57 } : BV:8
24 : 1864370148 { 0x6f2007e4 +1.25024080e95 } : BV:32
25 : eq(8, 24) : BOOL
26 : 204 { 0xcc -52 } : BV:8
27 : 1864370150 { 0x6f2007e6 +1.25024104e95 } : BV:32
28 : eq(8, 27) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 1864370149 { 0x6f2007e5 +1.25024092e95 } : BV:32
31 : eq(8, 30) : BOOL
32 : 127 { 0x7f } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
311998802
=counter_example_end
=global nodece 57 num_edges_traversed 2
=global nodece 57 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce4768.num_edges_traversed1
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce4768 83f417349cd210b9a616a8293fb82c
=input.spec-%var-x-1
1 : Lambda50667Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50668Var : BV:32
18 : Lambda50669Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 262149 { 0x40005 +1.3125059e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 262151 { 0x40007 +1.3125083e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 262150 { 0x40006 +1.3125071e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50670Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
82 : eq(80, 81) : BOOL
83 : 135 { 0x87 -121 } : BV:8
84 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
85 : eq(80, 84) : BOOL
86 : 190 { 0xbe -66 } : BV:8
87 : eq(80, 78) : BOOL
88 : 111 { 0x6f } : BV:8
89 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
90 : eq(80, 89) : BOOL
91 : 100 { 0x64 } : BV:8
92 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
93 : eq(80, 92) : BOOL
94 : 131 { 0x83 -125 } : BV:8
95 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
96 : eq(80, 95) : BOOL
97 : 224 { 0xe0 -32 } : BV:8
98 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
99 : eq(80, 98) : BOOL
100 : 31 { 0x1f } : BV:8
101 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
102 : eq(80, 101) : BOOL
103 : 255 { 0xff -1 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 139345681 { 0x84e3f11 +1.61129963e145 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda50694Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 262149 { 0x40005 +1.3125059e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 262150 { 0x40006 +1.3125071e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50695Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 135 { 0x87 -121 } : BV:8
27 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 190 { 0xbe -66 } : BV:8
30 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
31 : eq(23, 30) : BOOL
32 : 111 { 0x6f } : BV:8
33 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
34 : eq(23, 33) : BOOL
35 : 100 { 0x64 } : BV:8
36 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
37 : eq(23, 36) : BOOL
38 : 131 { 0x83 -125 } : BV:8
39 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
40 : eq(23, 39) : BOOL
41 : 224 { 0xe0 -32 } : BV:8
42 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
43 : eq(23, 42) : BOOL
44 : 31 { 0x1f } : BV:8
45 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
46 : eq(23, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1187447735 ] -> 0, [ 1187447736; 1187447736 ] -> 224, [ 1187447737; 1187447737 ] -> 255, [ 1187447738; 1187447738 ] -> 31, [ 1187447739; 1187447739 ] -> 111, [ 1187447740; 1744830459 ] -> 0, [ 1744830460; 1744830460 ] -> 100, [ 1744830461; 1744830461 ] -> 131, [ 1744830462; 1744830462 ] -> 190, [ 1744830463; 1744830463 ] -> 135, [ 1744830464; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1080002903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1080002904; 1080002907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1080002908; 1130343527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1130343528; 1130343531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1130343532; 2608006555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2608006556; 2608006559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2608006560; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2608006556 { 0x9b73059c -1686960740 -1.89860868e183 } : BV:32
=input.dst.llvm-%m
1 : 262150 { 0x40006 +1.3125071e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1080002904 { 0x405f8958 +1.74637889e1 } : BV:32
=input.dst.llvm-%n
1 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1130343528 { 0x435fac68 +1.74744892e7 } : BV:32
=input.dst.llvm-%x
1 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda50687Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50688Var : BV:32
18 : Lambda50689Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 262149 { 0x40005 +1.3125059e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 262151 { 0x40007 +1.3125083e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 262150 { 0x40006 +1.3125071e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50690Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
63 : eq(61, 62) : BOOL
64 : 135 { 0x87 -121 } : BV:8
65 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
66 : eq(61, 65) : BOOL
67 : 190 { 0xbe -66 } : BV:8
68 : eq(61, 59) : BOOL
69 : 111 { 0x6f } : BV:8
70 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
71 : eq(61, 70) : BOOL
72 : 100 { 0x64 } : BV:8
73 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
74 : eq(61, 73) : BOOL
75 : 131 { 0x83 -125 } : BV:8
76 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
77 : eq(61, 76) : BOOL
78 : 224 { 0xe0 -32 } : BV:8
79 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
80 : eq(61, 79) : BOOL
81 : 31 { 0x1f } : BV:8
82 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
83 : eq(61, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda50676Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 262149 { 0x40005 +1.3125059e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 262150 { 0x40006 +1.3125071e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda50677Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 19) : BV:32
25 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
28 : eq(26, 27) : BOOL
29 : 135 { 0x87 -121 } : BV:8
30 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
31 : eq(26, 30) : BOOL
32 : 190 { 0xbe -66 } : BV:8
33 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
34 : eq(26, 33) : BOOL
35 : 111 { 0x6f } : BV:8
36 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
37 : eq(26, 36) : BOOL
38 : 100 { 0x64 } : BV:8
39 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
40 : eq(26, 39) : BOOL
41 : 131 { 0x83 -125 } : BV:8
42 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
43 : eq(26, 42) : BOOL
44 : 224 { 0xe0 -32 } : BV:8
45 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
46 : eq(26, 45) : BOOL
47 : 31 { 0x1f } : BV:8
48 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
49 : eq(26, 48) : BOOL
50 : 255 { 0xff -1 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(22, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 139345681 { 0x84e3f11 +1.61129963e145 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 139345682 { 0x84e3f12 +1.61129975e145 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 262149 { 0x40005 +1.3125059e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 262150 { 0x40006 +1.3125071e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(2, 2) : BV:32
22 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 135 { 0x87 -121 } : BV:8
27 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 190 { 0xbe -66 } : BV:8
30 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
31 : eq(23, 30) : BOOL
32 : 111 { 0x6f } : BV:8
33 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
34 : eq(23, 33) : BOOL
35 : 100 { 0x64 } : BV:8
36 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
37 : eq(23, 36) : BOOL
38 : 131 { 0x83 -125 } : BV:8
39 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
40 : eq(23, 39) : BOOL
41 : 224 { 0xe0 -32 } : BV:8
42 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
43 : eq(23, 42) : BOOL
44 : 31 { 0x1f } : BV:8
45 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
46 : eq(23, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : bvadd(16, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 45) : BOOL
84 : ite(83, 47, 48) : BV:8
85 : ite(82, 44, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 45) : BOOL
101 : ite(100, 47, 48) : BV:8
102 : ite(99, 44, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(56, 74, 91, 108) : BV:32
110 : ite(19, 1, 109) : BV:32
111 : sum(17, 18, 110) : SUM[UNIT,BV:32]
112 : sym_const(111) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 940298170 { 0x380bcfba +1.9227681e241 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda50699Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 262149 { 0x40005 +1.3125059e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 262150 { 0x40006 +1.3125071e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50700Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
26 : eq(24, 25) : BOOL
27 : 135 { 0x87 -121 } : BV:8
28 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
29 : eq(24, 28) : BOOL
30 : 190 { 0xbe -66 } : BV:8
31 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
32 : eq(24, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
35 : eq(24, 34) : BOOL
36 : 100 { 0x64 } : BV:8
37 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
38 : eq(24, 37) : BOOL
39 : 131 { 0x83 -125 } : BV:8
40 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
41 : eq(24, 40) : BOOL
42 : 224 { 0xe0 -32 } : BV:8
43 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
44 : eq(24, 43) : BOOL
45 : 31 { 0x1f } : BV:8
46 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
47 : eq(24, 46) : BOOL
48 : 255 { 0xff -1 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 139345681 { 0x84e3f11 +1.61129963e145 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 42505383 { 0x28894a7 +1.6703650e134 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 557382724 { 0x2138fc44 +1.44519853e195 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 557382724 { 0x2138fc44 +1.44519853e195 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2277409652 { 0x87be8374 -2017557644 -1.48838663e144 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 2277409652 { 0x87be8374 -2017557644 -1.48838663e144 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1080002904 { 0x405f8958 +1.74637889e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1080002907 { 0x405f895b +1.74637925e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1130343528 { 0x435fac68 +1.74744892e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1130343531 { 0x435fac6b +1.74744927e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2608006556 { 0x9b73059c -1686960740 -1.89860868e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2608006559 { 0x9b73059f -1686960737 -1.89860904e183 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda50559Var : BV:32
2 : Lambda50560Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 262149 { 0x40005 +1.3125059e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 262151 { 0x40007 +1.3125083e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 262150 { 0x40006 +1.3125071e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
55 : eq(53, 54) : BOOL
56 : 135 { 0x87 -121 } : BV:8
57 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
58 : eq(53, 57) : BOOL
59 : 190 { 0xbe -66 } : BV:8
60 : eq(53, 51) : BOOL
61 : 111 { 0x6f } : BV:8
62 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
63 : eq(53, 62) : BOOL
64 : 100 { 0x64 } : BV:8
65 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
66 : eq(53, 65) : BOOL
67 : 131 { 0x83 -125 } : BV:8
68 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
69 : eq(53, 68) : BOOL
70 : 224 { 0xe0 -32 } : BV:8
71 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
72 : eq(53, 71) : BOOL
73 : 31 { 0x1f } : BV:8
74 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
75 : eq(53, 74) : BOOL
76 : 255 { 0xff -1 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda50564Var : BV:32
2 : Lambda50565Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 262149 { 0x40005 +1.3125059e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 262151 { 0x40007 +1.3125083e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 262150 { 0x40006 +1.3125071e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2158705967 ] -> true, [ 2158705968; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2158705967 ] -> true, [ 2158705968; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda50573Var : BV:32
2 : Lambda50574Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 262149 { 0x40005 +1.3125059e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 262151 { 0x40007 +1.3125083e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 262150 { 0x40006 +1.3125071e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda50569Var : BV:32
2 : Lambda50570Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
14 : eq(12, 13) : BOOL
15 : 135 { 0x87 -121 } : BV:8
16 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
17 : eq(12, 16) : BOOL
18 : 190 { 0xbe -66 } : BV:8
19 : eq(12, 10) : BOOL
20 : 111 { 0x6f } : BV:8
21 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
22 : eq(12, 21) : BOOL
23 : 100 { 0x64 } : BV:8
24 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
25 : eq(12, 24) : BOOL
26 : 131 { 0x83 -125 } : BV:8
27 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
28 : eq(12, 27) : BOOL
29 : 224 { 0xe0 -32 } : BV:8
30 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
31 : eq(12, 30) : BOOL
32 : 31 { 0x1f } : BV:8
33 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
34 : eq(12, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 262149 ] -> true, [ 262150; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda50580Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
11 : eq(9, 10) : BOOL
12 : 135 { 0x87 -121 } : BV:8
13 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
17 : eq(9, 16) : BOOL
18 : 111 { 0x6f } : BV:8
19 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
20 : eq(9, 19) : BOOL
21 : 100 { 0x64 } : BV:8
22 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
23 : eq(9, 22) : BOOL
24 : 131 { 0x83 -125 } : BV:8
25 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
26 : eq(9, 25) : BOOL
27 : 224 { 0xe0 -32 } : BV:8
28 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
29 : eq(9, 28) : BOOL
30 : 31 { 0x1f } : BV:8
31 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
32 : eq(9, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda50581Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
11 : eq(9, 10) : BOOL
12 : 135 { 0x87 -121 } : BV:8
13 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
17 : eq(9, 16) : BOOL
18 : 111 { 0x6f } : BV:8
19 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
20 : eq(9, 19) : BOOL
21 : 100 { 0x64 } : BV:8
22 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
23 : eq(9, 22) : BOOL
24 : 131 { 0x83 -125 } : BV:8
25 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
26 : eq(9, 25) : BOOL
27 : 224 { 0xe0 -32 } : BV:8
28 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
29 : eq(9, 28) : BOOL
30 : 31 { 0x1f } : BV:8
31 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
32 : eq(9, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 262149 ] -> true, [ 262150; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 262149 ] -> true, [ 262150; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda50588Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 135 { 0x87 -121 } : BV:8
12 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
16 : eq(8, 15) : BOOL
17 : 111 { 0x6f } : BV:8
18 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
19 : eq(8, 18) : BOOL
20 : 100 { 0x64 } : BV:8
21 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
22 : eq(8, 21) : BOOL
23 : 131 { 0x83 -125 } : BV:8
24 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
25 : eq(8, 24) : BOOL
26 : 224 { 0xe0 -32 } : BV:8
27 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
28 : eq(8, 27) : BOOL
29 : 31 { 0x1f } : BV:8
30 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
31 : eq(8, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4290870036
=counter_example_end
=global nodece 58 num_edges_traversed 1
=global nodece 58 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce4821.num_edges_traversed2
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(epsilon)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce4821 71e8455e19841cacdc63d438965f9752
=input.spec-%var-x-1
1 : Lambda50667Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50668Var : BV:32
18 : Lambda50669Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 262149 { 0x40005 +1.3125059e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 262151 { 0x40007 +1.3125083e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 262150 { 0x40006 +1.3125071e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50670Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
82 : eq(80, 81) : BOOL
83 : 135 { 0x87 -121 } : BV:8
84 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
85 : eq(80, 84) : BOOL
86 : 190 { 0xbe -66 } : BV:8
87 : eq(80, 78) : BOOL
88 : 111 { 0x6f } : BV:8
89 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
90 : eq(80, 89) : BOOL
91 : 100 { 0x64 } : BV:8
92 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
93 : eq(80, 92) : BOOL
94 : 131 { 0x83 -125 } : BV:8
95 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
96 : eq(80, 95) : BOOL
97 : 224 { 0xe0 -32 } : BV:8
98 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
99 : eq(80, 98) : BOOL
100 : 31 { 0x1f } : BV:8
101 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
102 : eq(80, 101) : BOOL
103 : 255 { 0xff -1 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 139345681 { 0x84e3f11 +1.61129963e145 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda50694Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 262149 { 0x40005 +1.3125059e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 262150 { 0x40006 +1.3125071e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50695Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 135 { 0x87 -121 } : BV:8
27 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 190 { 0xbe -66 } : BV:8
30 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
31 : eq(23, 30) : BOOL
32 : 111 { 0x6f } : BV:8
33 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
34 : eq(23, 33) : BOOL
35 : 100 { 0x64 } : BV:8
36 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
37 : eq(23, 36) : BOOL
38 : 131 { 0x83 -125 } : BV:8
39 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
40 : eq(23, 39) : BOOL
41 : 224 { 0xe0 -32 } : BV:8
42 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
43 : eq(23, 42) : BOOL
44 : 31 { 0x1f } : BV:8
45 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
46 : eq(23, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1187447735 ] -> 0, [ 1187447736; 1187447736 ] -> 224, [ 1187447737; 1187447737 ] -> 255, [ 1187447738; 1187447738 ] -> 31, [ 1187447739; 1187447739 ] -> 111, [ 1187447740; 1744830459 ] -> 0, [ 1744830460; 1744830460 ] -> 100, [ 1744830461; 1744830461 ] -> 131, [ 1744830462; 1744830462 ] -> 190, [ 1744830463; 1744830463 ] -> 135, [ 1744830464; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1080002903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1080002904; 1080002907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1080002908; 1130343527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1130343528; 1130343531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1130343532; 2608006555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2608006556; 2608006559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2608006560; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2608006556 { 0x9b73059c -1686960740 -1.89860868e183 } : BV:32
=input.dst.llvm-%m
1 : 262150 { 0x40006 +1.3125071e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1080002904 { 0x405f8958 +1.74637889e1 } : BV:32
=input.dst.llvm-%n
1 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1130343528 { 0x435fac68 +1.74744892e7 } : BV:32
=input.dst.llvm-%x
1 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda50687Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50688Var : BV:32
18 : Lambda50689Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 262149 { 0x40005 +1.3125059e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 262151 { 0x40007 +1.3125083e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 262150 { 0x40006 +1.3125071e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda50690Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
63 : eq(61, 62) : BOOL
64 : 135 { 0x87 -121 } : BV:8
65 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
66 : eq(61, 65) : BOOL
67 : 190 { 0xbe -66 } : BV:8
68 : eq(61, 59) : BOOL
69 : 111 { 0x6f } : BV:8
70 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
71 : eq(61, 70) : BOOL
72 : 100 { 0x64 } : BV:8
73 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
74 : eq(61, 73) : BOOL
75 : 131 { 0x83 -125 } : BV:8
76 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
77 : eq(61, 76) : BOOL
78 : 224 { 0xe0 -32 } : BV:8
79 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
80 : eq(61, 79) : BOOL
81 : 31 { 0x1f } : BV:8
82 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
83 : eq(61, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda50676Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 262149 { 0x40005 +1.3125059e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 262150 { 0x40006 +1.3125071e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda50677Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 19) : BV:32
25 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
28 : eq(26, 27) : BOOL
29 : 135 { 0x87 -121 } : BV:8
30 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
31 : eq(26, 30) : BOOL
32 : 190 { 0xbe -66 } : BV:8
33 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
34 : eq(26, 33) : BOOL
35 : 111 { 0x6f } : BV:8
36 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
37 : eq(26, 36) : BOOL
38 : 100 { 0x64 } : BV:8
39 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
40 : eq(26, 39) : BOOL
41 : 131 { 0x83 -125 } : BV:8
42 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
43 : eq(26, 42) : BOOL
44 : 224 { 0xe0 -32 } : BV:8
45 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
46 : eq(26, 45) : BOOL
47 : 31 { 0x1f } : BV:8
48 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
49 : eq(26, 48) : BOOL
50 : 255 { 0xff -1 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(22, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 139345681 { 0x84e3f11 +1.61129963e145 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 139345682 { 0x84e3f12 +1.61129975e145 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 940298171 { 0x380bcfbb +1.9227693e241 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda50699Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 262149 { 0x40005 +1.3125059e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 262150 { 0x40006 +1.3125071e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda50700Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
26 : eq(24, 25) : BOOL
27 : 135 { 0x87 -121 } : BV:8
28 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
29 : eq(24, 28) : BOOL
30 : 190 { 0xbe -66 } : BV:8
31 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
32 : eq(24, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
35 : eq(24, 34) : BOOL
36 : 100 { 0x64 } : BV:8
37 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
38 : eq(24, 37) : BOOL
39 : 131 { 0x83 -125 } : BV:8
40 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
41 : eq(24, 40) : BOOL
42 : 224 { 0xe0 -32 } : BV:8
43 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
44 : eq(24, 43) : BOOL
45 : 31 { 0x1f } : BV:8
46 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
47 : eq(24, 46) : BOOL
48 : 255 { 0xff -1 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 139345681 { 0x84e3f11 +1.61129963e145 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 42505384 { 0x28894a8 +1.6703662e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1080002904 { 0x405f8958 +1.74637889e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1080002907 { 0x405f895b +1.74637925e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1130343528 { 0x435fac68 +1.74744892e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1130343531 { 0x435fac6b +1.74744927e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2608006556 { 0x9b73059c -1686960740 -1.89860868e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2608006559 { 0x9b73059f -1686960737 -1.89860904e183 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda50559Var : BV:32
2 : Lambda50560Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 262149 { 0x40005 +1.3125059e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 262151 { 0x40007 +1.3125083e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 262150 { 0x40006 +1.3125071e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
55 : eq(53, 54) : BOOL
56 : 135 { 0x87 -121 } : BV:8
57 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
58 : eq(53, 57) : BOOL
59 : 190 { 0xbe -66 } : BV:8
60 : eq(53, 51) : BOOL
61 : 111 { 0x6f } : BV:8
62 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
63 : eq(53, 62) : BOOL
64 : 100 { 0x64 } : BV:8
65 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
66 : eq(53, 65) : BOOL
67 : 131 { 0x83 -125 } : BV:8
68 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
69 : eq(53, 68) : BOOL
70 : 224 { 0xe0 -32 } : BV:8
71 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
72 : eq(53, 71) : BOOL
73 : 31 { 0x1f } : BV:8
74 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
75 : eq(53, 74) : BOOL
76 : 255 { 0xff -1 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda50564Var : BV:32
2 : Lambda50565Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 262149 { 0x40005 +1.3125059e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 262151 { 0x40007 +1.3125083e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 262150 { 0x40006 +1.3125071e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2158705967 ] -> true, [ 2158705968; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2158705967 ] -> true, [ 2158705968; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda50573Var : BV:32
2 : Lambda50574Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2158705967 { 0x80ab3d2f -2136261329 -1.33780467e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2158705969 { 0x80ab3d31 -2136261327 -1.33780491e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2158705968 { 0x80ab3d30 -2136261328 -1.33780479e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 262149 { 0x40005 +1.3125059e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 262151 { 0x40007 +1.3125083e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 262150 { 0x40006 +1.3125071e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda50569Var : BV:32
2 : Lambda50570Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
14 : eq(12, 13) : BOOL
15 : 135 { 0x87 -121 } : BV:8
16 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
17 : eq(12, 16) : BOOL
18 : 190 { 0xbe -66 } : BV:8
19 : eq(12, 10) : BOOL
20 : 111 { 0x6f } : BV:8
21 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
22 : eq(12, 21) : BOOL
23 : 100 { 0x64 } : BV:8
24 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
25 : eq(12, 24) : BOOL
26 : 131 { 0x83 -125 } : BV:8
27 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
28 : eq(12, 27) : BOOL
29 : 224 { 0xe0 -32 } : BV:8
30 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
31 : eq(12, 30) : BOOL
32 : 31 { 0x1f } : BV:8
33 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
34 : eq(12, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 262149 ] -> true, [ 262150; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda50580Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
11 : eq(9, 10) : BOOL
12 : 135 { 0x87 -121 } : BV:8
13 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
17 : eq(9, 16) : BOOL
18 : 111 { 0x6f } : BV:8
19 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
20 : eq(9, 19) : BOOL
21 : 100 { 0x64 } : BV:8
22 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
23 : eq(9, 22) : BOOL
24 : 131 { 0x83 -125 } : BV:8
25 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
26 : eq(9, 25) : BOOL
27 : 224 { 0xe0 -32 } : BV:8
28 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
29 : eq(9, 28) : BOOL
30 : 31 { 0x1f } : BV:8
31 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
32 : eq(9, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda50581Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
11 : eq(9, 10) : BOOL
12 : 135 { 0x87 -121 } : BV:8
13 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
17 : eq(9, 16) : BOOL
18 : 111 { 0x6f } : BV:8
19 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
20 : eq(9, 19) : BOOL
21 : 100 { 0x64 } : BV:8
22 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
23 : eq(9, 22) : BOOL
24 : 131 { 0x83 -125 } : BV:8
25 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
26 : eq(9, 25) : BOOL
27 : 224 { 0xe0 -32 } : BV:8
28 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
29 : eq(9, 28) : BOOL
30 : 31 { 0x1f } : BV:8
31 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
32 : eq(9, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 262149 ] -> true, [ 262150; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 262149 ] -> true, [ 262150; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda50588Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2277409636 { 0x87be8364 -2017557660 -1.48838472e144 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1744830463 { 0x67ffffff +1.99999988e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 135 { 0x87 -121 } : BV:8
12 : 1744830462 { 0x67fffffe +1.99999976e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 1187447739 { 0x46c703bb +1.55480134e14 } : BV:32
16 : eq(8, 15) : BOOL
17 : 111 { 0x6f } : BV:8
18 : 1744830460 { 0x67fffffc +1.99999952e80 } : BV:32
19 : eq(8, 18) : BOOL
20 : 100 { 0x64 } : BV:8
21 : 1744830461 { 0x67fffffd +1.99999964e80 } : BV:32
22 : eq(8, 21) : BOOL
23 : 131 { 0x83 -125 } : BV:8
24 : 1187447736 { 0x46c703b8 +1.55480098e14 } : BV:32
25 : eq(8, 24) : BOOL
26 : 224 { 0xe0 -32 } : BV:8
27 : 1187447738 { 0x46c703ba +1.55480122e14 } : BV:32
28 : eq(8, 27) : BOOL
29 : 31 { 0x1f } : BV:8
30 : 1187447737 { 0x46c703b9 +1.55480110e14 } : BV:32
31 : eq(8, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4290870036
=counter_example_end
=global nodece 59 num_edges_traversed 2
=global nodece 59 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce4864.num_edges_traversed1
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce4864 9626ec62bcb0c61d4b9c1b181d38a8a5
=input.spec-%var-x-1
1 : Lambda52248Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52249Var : BV:32
18 : Lambda52250Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52251Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
82 : eq(80, 81) : BOOL
83 : 3 { 0x3 } : BV:8
84 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
85 : eq(80, 84) : BOOL
86 : 104 { 0x68 } : BV:8
87 : eq(80, 78) : BOOL
88 : 205 { 0xcd -51 } : BV:8
89 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
90 : eq(80, 89) : BOOL
91 : 36 { 0x24 } : BV:8
92 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
93 : eq(80, 92) : BOOL
94 : 237 { 0xed -19 } : BV:8
95 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
96 : eq(80, 95) : BOOL
97 : 232 { 0xe8 -24 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 81) : BOOL
107 : eq(105, 84) : BOOL
108 : eq(105, 78) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 86, 115) : BV:8
117 : ite(106, 83, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 78) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 86, 128) : BV:8
130 : ite(119, 83, 129) : BV:8
131 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
132 : bvadd(131, 79) : BV:32
133 : eq(132, 81) : BOOL
134 : eq(132, 84) : BOOL
135 : eq(132, 78) : BOOL
136 : eq(132, 89) : BOOL
137 : eq(132, 92) : BOOL
138 : eq(132, 95) : BOOL
139 : ite(138, 97, 98) : BV:8
140 : ite(137, 94, 139) : BV:8
141 : ite(136, 91, 140) : BV:8
142 : ite(135, 88, 141) : BV:8
143 : ite(134, 86, 142) : BV:8
144 : ite(133, 83, 143) : BV:8
145 : bvconcat(104, 117, 130, 144) : BV:32
146 : bvadd(75, 77, 145) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 84) : BOOL
149 : eq(146, 78) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : ite(152, 97, 98) : BV:8
154 : ite(151, 94, 153) : BV:8
155 : ite(150, 91, 154) : BV:8
156 : ite(149, 88, 155) : BV:8
157 : ite(148, 86, 156) : BV:8
158 : ite(147, 83, 157) : BV:8
159 : 2 { 0x2 +1.23e129 } : BV:32
160 : bvadd(159, 77, 145) : BV:32
161 : eq(160, 81) : BOOL
162 : eq(160, 84) : BOOL
163 : eq(160, 78) : BOOL
164 : eq(160, 89) : BOOL
165 : eq(160, 92) : BOOL
166 : eq(160, 95) : BOOL
167 : ite(166, 97, 98) : BV:8
168 : ite(165, 94, 167) : BV:8
169 : ite(164, 91, 168) : BV:8
170 : ite(163, 88, 169) : BV:8
171 : ite(162, 86, 170) : BV:8
172 : ite(161, 83, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 77, 145) : BV:32
175 : eq(174, 81) : BOOL
176 : eq(174, 84) : BOOL
177 : eq(174, 78) : BOOL
178 : eq(174, 89) : BOOL
179 : eq(174, 92) : BOOL
180 : eq(174, 95) : BOOL
181 : ite(180, 97, 98) : BV:8
182 : ite(179, 94, 181) : BV:8
183 : ite(178, 91, 182) : BV:8
184 : ite(177, 88, 183) : BV:8
185 : ite(176, 86, 184) : BV:8
186 : ite(175, 83, 185) : BV:8
187 : bvadd(77, 145) : BV:32
188 : eq(187, 81) : BOOL
189 : eq(187, 84) : BOOL
190 : eq(187, 78) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : ite(193, 97, 98) : BV:8
195 : ite(192, 94, 194) : BV:8
196 : ite(191, 91, 195) : BV:8
197 : ite(190, 88, 196) : BV:8
198 : ite(189, 86, 197) : BV:8
199 : ite(188, 83, 198) : BV:8
200 : bvconcat(158, 172, 186, 199) : BV:32
201 : ite(55, 2, 200) : BV:32
202 : ite(74, 200, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : lambda(52, 203) : FUNCTION[BV:32 -> BV:32]
205 : map(51, 204) : MAP[BV:32 -> BV:32]
206 : lambda(17, 205) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
207 : map(16, 206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
208 : sym_const(207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 180879359 { 0xac7ffff +1.56249988e150 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda52275Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52276Var : BV:32
18 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
19 : eq(17, 18) : BOOL
20 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
28 : eq(26, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
31 : eq(26, 30) : BOOL
32 : 104 { 0x68 } : BV:8
33 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
34 : eq(26, 33) : BOOL
35 : 205 { 0xcd -51 } : BV:8
36 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
37 : eq(26, 36) : BOOL
38 : 36 { 0x24 } : BV:8
39 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
40 : eq(26, 39) : BOOL
41 : 237 { 0xed -19 } : BV:8
42 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
43 : eq(26, 42) : BOOL
44 : 232 { 0xe8 -24 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 24, 25) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : eq(53, 33) : BOOL
57 : eq(53, 36) : BOOL
58 : eq(53, 39) : BOOL
59 : eq(53, 42) : BOOL
60 : ite(59, 44, 45) : BV:8
61 : ite(58, 41, 60) : BV:8
62 : ite(57, 38, 61) : BV:8
63 : ite(56, 35, 62) : BV:8
64 : ite(55, 32, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 24, 25) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : eq(67, 33) : BOOL
71 : eq(67, 36) : BOOL
72 : eq(67, 39) : BOOL
73 : eq(67, 42) : BOOL
74 : ite(73, 44, 45) : BV:8
75 : ite(72, 41, 74) : BV:8
76 : ite(71, 38, 75) : BV:8
77 : ite(70, 35, 76) : BV:8
78 : ite(69, 32, 77) : BV:8
79 : ite(68, 29, 78) : BV:8
80 : bvadd(24, 25) : BV:32
81 : eq(80, 27) : BOOL
82 : eq(80, 30) : BOOL
83 : eq(80, 33) : BOOL
84 : eq(80, 36) : BOOL
85 : eq(80, 39) : BOOL
86 : eq(80, 42) : BOOL
87 : ite(86, 44, 45) : BV:8
88 : ite(85, 41, 87) : BV:8
89 : ite(84, 38, 88) : BV:8
90 : ite(83, 35, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 29, 91) : BV:8
93 : bvconcat(51, 65, 79, 92) : BV:32
94 : ite(21, 2, 93) : BV:32
95 : ite(19, 2, 94) : BV:32
96 : lambda(17, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(16, 96) : MAP[BV:32 -> BV:32]
98 : sym_const(97) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 417333248 ] -> 0, [ 417333249; 417333249 ] -> 232, [ 417333250; 417333250 ] -> 237, [ 417333251; 417333251 ] -> 205, [ 417333252; 1140850683 ] -> 0, [ 1140850684; 1140850684 ] -> 36, [ 1140850685; 1140850685 ] -> 0, [ 1140850686; 1140850686 ] -> 104, [ 1140850687; 1140850687 ] -> 3, [ 1140850688; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 277086283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 277086284; 277086287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 277086288; 1680647363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1680647364; 1680647367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1680647368; 3493466719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493466720; 3493466723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3493466724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 277086284 { 0x1084004c +1.3125905e162 } : BV:32
=input.dst.llvm-%m
1 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1680647364 { 0x642ca4c4 +1.34877824e73 } : BV:32
=input.dst.llvm-%n
1 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3493466720 { 0xd03a1260 -801500576 -1.45368576e33 } : BV:32
=input.dst.llvm-%x
1 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda52268Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52269Var : BV:32
18 : Lambda52270Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52271Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
63 : eq(61, 62) : BOOL
64 : 3 { 0x3 } : BV:8
65 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
66 : eq(61, 65) : BOOL
67 : 104 { 0x68 } : BV:8
68 : eq(61, 59) : BOOL
69 : 205 { 0xcd -51 } : BV:8
70 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
71 : eq(61, 70) : BOOL
72 : 36 { 0x24 } : BV:8
73 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
74 : eq(61, 73) : BOOL
75 : 237 { 0xed -19 } : BV:8
76 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
77 : eq(61, 76) : BOOL
78 : 232 { 0xe8 -24 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 62) : BOOL
88 : eq(86, 65) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 67, 96) : BV:8
98 : ite(87, 64, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 59) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 67, 109) : BV:8
111 : ite(100, 64, 110) : BV:8
112 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
113 : bvadd(112, 60) : BV:32
114 : eq(113, 62) : BOOL
115 : eq(113, 65) : BOOL
116 : eq(113, 59) : BOOL
117 : eq(113, 70) : BOOL
118 : eq(113, 73) : BOOL
119 : eq(113, 76) : BOOL
120 : ite(119, 78, 79) : BV:8
121 : ite(118, 75, 120) : BV:8
122 : ite(117, 72, 121) : BV:8
123 : ite(116, 69, 122) : BV:8
124 : ite(115, 67, 123) : BV:8
125 : ite(114, 64, 124) : BV:8
126 : bvconcat(85, 98, 111, 125) : BV:32
127 : bvadd(56, 58, 126) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 65) : BOOL
130 : eq(127, 59) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : ite(133, 78, 79) : BV:8
135 : ite(132, 75, 134) : BV:8
136 : ite(131, 72, 135) : BV:8
137 : ite(130, 69, 136) : BV:8
138 : ite(129, 67, 137) : BV:8
139 : ite(128, 64, 138) : BV:8
140 : 2 { 0x2 +1.23e129 } : BV:32
141 : bvadd(140, 58, 126) : BV:32
142 : eq(141, 62) : BOOL
143 : eq(141, 65) : BOOL
144 : eq(141, 59) : BOOL
145 : eq(141, 70) : BOOL
146 : eq(141, 73) : BOOL
147 : eq(141, 76) : BOOL
148 : ite(147, 78, 79) : BV:8
149 : ite(146, 75, 148) : BV:8
150 : ite(145, 72, 149) : BV:8
151 : ite(144, 69, 150) : BV:8
152 : ite(143, 67, 151) : BV:8
153 : ite(142, 64, 152) : BV:8
154 : 1 { 0x1 +1.11e129 } : BV:32
155 : bvadd(154, 58, 126) : BV:32
156 : eq(155, 62) : BOOL
157 : eq(155, 65) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 70) : BOOL
160 : eq(155, 73) : BOOL
161 : eq(155, 76) : BOOL
162 : ite(161, 78, 79) : BV:8
163 : ite(160, 75, 162) : BV:8
164 : ite(159, 72, 163) : BV:8
165 : ite(158, 69, 164) : BV:8
166 : ite(157, 67, 165) : BV:8
167 : ite(156, 64, 166) : BV:8
168 : bvadd(58, 126) : BV:32
169 : eq(168, 62) : BOOL
170 : eq(168, 65) : BOOL
171 : eq(168, 59) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : ite(174, 78, 79) : BV:8
176 : ite(173, 75, 175) : BV:8
177 : ite(172, 72, 176) : BV:8
178 : ite(171, 69, 177) : BV:8
179 : ite(170, 67, 178) : BV:8
180 : ite(169, 64, 179) : BV:8
181 : bvconcat(139, 153, 167, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : lambda(52, 182) : FUNCTION[BV:32 -> BV:32]
184 : map(51, 183) : MAP[BV:32 -> BV:32]
185 : lambda(17, 184) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
186 : map(16, 185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
187 : sym_const(186) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 128 { 0x80 +1.1525e129 } : BV:32
2 : unit : UNIT
3 : Lambda52257Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda52258Var : BV:32
20 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
21 : eq(19, 20) : BOOL
22 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
31 : eq(29, 30) : BOOL
32 : 3 { 0x3 } : BV:8
33 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
34 : eq(29, 33) : BOOL
35 : 104 { 0x68 } : BV:8
36 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
37 : eq(29, 36) : BOOL
38 : 205 { 0xcd -51 } : BV:8
39 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
40 : eq(29, 39) : BOOL
41 : 36 { 0x24 } : BV:8
42 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
43 : eq(29, 42) : BOOL
44 : 237 { 0xed -19 } : BV:8
45 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
46 : eq(29, 45) : BOOL
47 : 232 { 0xe8 -24 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 27, 28) : BV:32
57 : eq(56, 30) : BOOL
58 : eq(56, 33) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 39) : BOOL
61 : eq(56, 42) : BOOL
62 : eq(56, 45) : BOOL
63 : ite(62, 47, 48) : BV:8
64 : ite(61, 44, 63) : BV:8
65 : ite(60, 41, 64) : BV:8
66 : ite(59, 38, 65) : BV:8
67 : ite(58, 35, 66) : BV:8
68 : ite(57, 32, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 27, 28) : BV:32
71 : eq(70, 30) : BOOL
72 : eq(70, 33) : BOOL
73 : eq(70, 36) : BOOL
74 : eq(70, 39) : BOOL
75 : eq(70, 42) : BOOL
76 : eq(70, 45) : BOOL
77 : ite(76, 47, 48) : BV:8
78 : ite(75, 44, 77) : BV:8
79 : ite(74, 41, 78) : BV:8
80 : ite(73, 38, 79) : BV:8
81 : ite(72, 35, 80) : BV:8
82 : ite(71, 32, 81) : BV:8
83 : bvadd(27, 28) : BV:32
84 : eq(83, 30) : BOOL
85 : eq(83, 33) : BOOL
86 : eq(83, 36) : BOOL
87 : eq(83, 39) : BOOL
88 : eq(83, 42) : BOOL
89 : eq(83, 45) : BOOL
90 : ite(89, 47, 48) : BV:8
91 : ite(88, 44, 90) : BV:8
92 : ite(87, 41, 91) : BV:8
93 : ite(86, 38, 92) : BV:8
94 : ite(85, 35, 93) : BV:8
95 : ite(84, 32, 94) : BV:8
96 : bvconcat(54, 68, 82, 95) : BV:32
97 : ite(24, 4, 96) : BV:32
98 : ite(23, 4, 97) : BV:32
99 : ite(21, 4, 98) : BV:32
100 : lambda(19, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(18, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 180879359 { 0xac7ffff +1.56249988e150 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
20 : eq(2, 19) : BOOL
21 : eq(2, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 2) : BV:32
25 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
28 : eq(26, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
31 : eq(26, 30) : BOOL
32 : 104 { 0x68 } : BV:8
33 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
34 : eq(26, 33) : BOOL
35 : 205 { 0xcd -51 } : BV:8
36 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
37 : eq(26, 36) : BOOL
38 : 36 { 0x24 } : BV:8
39 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
40 : eq(26, 39) : BOOL
41 : 237 { 0xed -19 } : BV:8
42 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
43 : eq(26, 42) : BOOL
44 : 232 { 0xe8 -24 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 24, 25) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : eq(53, 33) : BOOL
57 : eq(53, 36) : BOOL
58 : eq(53, 39) : BOOL
59 : eq(53, 42) : BOOL
60 : ite(59, 44, 45) : BV:8
61 : ite(58, 41, 60) : BV:8
62 : ite(57, 38, 61) : BV:8
63 : ite(56, 35, 62) : BV:8
64 : ite(55, 32, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : bvadd(16, 24, 25) : BV:32
67 : eq(66, 27) : BOOL
68 : eq(66, 30) : BOOL
69 : eq(66, 33) : BOOL
70 : eq(66, 36) : BOOL
71 : eq(66, 39) : BOOL
72 : eq(66, 42) : BOOL
73 : ite(72, 44, 45) : BV:8
74 : ite(71, 41, 73) : BV:8
75 : ite(70, 38, 74) : BV:8
76 : ite(69, 35, 75) : BV:8
77 : ite(68, 32, 76) : BV:8
78 : ite(67, 29, 77) : BV:8
79 : bvadd(24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : ite(85, 44, 45) : BV:8
87 : ite(84, 41, 86) : BV:8
88 : ite(83, 38, 87) : BV:8
89 : ite(82, 35, 88) : BV:8
90 : ite(81, 32, 89) : BV:8
91 : ite(80, 29, 90) : BV:8
92 : bvconcat(51, 65, 78, 91) : BV:32
93 : ite(21, 1, 92) : BV:32
94 : ite(20, 1, 93) : BV:32
95 : sum(17, 18, 94) : SUM[UNIT,BV:32]
96 : sym_const(95) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 31904880 { 0x1e6d470 +1.80335807e132 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda52280Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52281Var : BV:32
18 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
19 : eq(17, 18) : BOOL
20 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
29 : eq(27, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
32 : eq(27, 31) : BOOL
33 : 104 { 0x68 } : BV:8
34 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
35 : eq(27, 34) : BOOL
36 : 205 { 0xcd -51 } : BV:8
37 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
38 : eq(27, 37) : BOOL
39 : 36 { 0x24 } : BV:8
40 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
41 : eq(27, 40) : BOOL
42 : 237 { 0xed -19 } : BV:8
43 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
44 : eq(27, 43) : BOOL
45 : 232 { 0xe8 -24 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 25, 26) : BV:32
55 : eq(54, 28) : BOOL
56 : eq(54, 31) : BOOL
57 : eq(54, 34) : BOOL
58 : eq(54, 37) : BOOL
59 : eq(54, 40) : BOOL
60 : eq(54, 43) : BOOL
61 : ite(60, 45, 46) : BV:8
62 : ite(59, 42, 61) : BV:8
63 : ite(58, 39, 62) : BV:8
64 : ite(57, 36, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 25, 26) : BV:32
69 : eq(68, 28) : BOOL
70 : eq(68, 31) : BOOL
71 : eq(68, 34) : BOOL
72 : eq(68, 37) : BOOL
73 : eq(68, 40) : BOOL
74 : eq(68, 43) : BOOL
75 : ite(74, 45, 46) : BV:8
76 : ite(73, 42, 75) : BV:8
77 : ite(72, 39, 76) : BV:8
78 : ite(71, 36, 77) : BV:8
79 : ite(70, 33, 78) : BV:8
80 : ite(69, 30, 79) : BV:8
81 : bvadd(25, 26) : BV:32
82 : eq(81, 28) : BOOL
83 : eq(81, 31) : BOOL
84 : eq(81, 34) : BOOL
85 : eq(81, 37) : BOOL
86 : eq(81, 40) : BOOL
87 : eq(81, 43) : BOOL
88 : ite(87, 45, 46) : BV:8
89 : ite(86, 42, 88) : BV:8
90 : ite(85, 39, 89) : BV:8
91 : ite(84, 36, 90) : BV:8
92 : ite(83, 33, 91) : BV:8
93 : ite(82, 30, 92) : BV:8
94 : bvconcat(52, 66, 80, 93) : BV:32
95 : ite(22, 2, 94) : BV:32
96 : ite(21, 2, 95) : BV:32
97 : ite(19, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 180879359 { 0xac7ffff +1.56249988e150 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1828848631 { 0x6d0203f7 +1.1574599e91 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 1291878400 { 0x4d008000 +1.390625e27 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1349025828 { 0x50688024 +1.81641054e33 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 1291878400 { 0x4d008000 +1.390625e27 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 1349025828 { 0x50688024 +1.81641054e33 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 723517436 { 0x2b1ffffc +1.24999952e215 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 723517436 { 0x2b1ffffc +1.24999952e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1680647364 { 0x642ca4c4 +1.34877824e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1680647367 { 0x642ca4c7 +1.34877860e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3493466720 { 0xd03a1260 -801500576 -1.45368576e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3493466723 { 0xd03a1263 -801500573 -1.45368611e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 277086284 { 0x1084004c +1.3125905e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 277086287 { 0x1084004f +1.3125941e162 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda52140Var : BV:32
2 : Lambda52141Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
55 : eq(53, 54) : BOOL
56 : 3 { 0x3 } : BV:8
57 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
58 : eq(53, 57) : BOOL
59 : 104 { 0x68 } : BV:8
60 : eq(53, 51) : BOOL
61 : 205 { 0xcd -51 } : BV:8
62 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
63 : eq(53, 62) : BOOL
64 : 36 { 0x24 } : BV:8
65 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
66 : eq(53, 65) : BOOL
67 : 237 { 0xed -19 } : BV:8
68 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
69 : eq(53, 68) : BOOL
70 : 232 { 0xe8 -24 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 54) : BOOL
80 : eq(78, 57) : BOOL
81 : eq(78, 51) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 59, 88) : BV:8
90 : ite(79, 56, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 51) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 59, 101) : BV:8
103 : ite(92, 56, 102) : BV:8
104 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
105 : bvadd(104, 52) : BV:32
106 : eq(105, 54) : BOOL
107 : eq(105, 57) : BOOL
108 : eq(105, 51) : BOOL
109 : eq(105, 62) : BOOL
110 : eq(105, 65) : BOOL
111 : eq(105, 68) : BOOL
112 : ite(111, 70, 71) : BV:8
113 : ite(110, 67, 112) : BV:8
114 : ite(109, 64, 113) : BV:8
115 : ite(108, 61, 114) : BV:8
116 : ite(107, 59, 115) : BV:8
117 : ite(106, 56, 116) : BV:8
118 : bvconcat(77, 90, 103, 117) : BV:32
119 : bvadd(48, 50, 118) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 57) : BOOL
122 : eq(119, 51) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 61, 128) : BV:8
130 : ite(121, 59, 129) : BV:8
131 : ite(120, 56, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 50, 118) : BV:32
134 : eq(133, 54) : BOOL
135 : eq(133, 57) : BOOL
136 : eq(133, 51) : BOOL
137 : eq(133, 62) : BOOL
138 : eq(133, 65) : BOOL
139 : eq(133, 68) : BOOL
140 : ite(139, 70, 71) : BV:8
141 : ite(138, 67, 140) : BV:8
142 : ite(137, 64, 141) : BV:8
143 : ite(136, 61, 142) : BV:8
144 : ite(135, 59, 143) : BV:8
145 : ite(134, 56, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 50, 118) : BV:32
148 : eq(147, 54) : BOOL
149 : eq(147, 57) : BOOL
150 : eq(147, 51) : BOOL
151 : eq(147, 62) : BOOL
152 : eq(147, 65) : BOOL
153 : eq(147, 68) : BOOL
154 : ite(153, 70, 71) : BV:8
155 : ite(152, 67, 154) : BV:8
156 : ite(151, 64, 155) : BV:8
157 : ite(150, 61, 156) : BV:8
158 : ite(149, 59, 157) : BV:8
159 : ite(148, 56, 158) : BV:8
160 : bvadd(50, 118) : BV:32
161 : eq(160, 54) : BOOL
162 : eq(160, 57) : BOOL
163 : eq(160, 51) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : ite(166, 70, 71) : BV:8
168 : ite(165, 67, 167) : BV:8
169 : ite(164, 64, 168) : BV:8
170 : ite(163, 61, 169) : BV:8
171 : ite(162, 59, 170) : BV:8
172 : ite(161, 56, 171) : BV:8
173 : bvconcat(131, 145, 159, 172) : BV:32
174 : ite(6, 3, 173) : BV:32
175 : ite(47, 173, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : lambda(1, 2, 176) : FUNCTION[BV:32,BV:32 -> BV:32]
178 : sym_const(177) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda52145Var : BV:32
2 : Lambda52146Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 322969599 ] -> true, [ 322969600; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 322969599 ] -> true, [ 322969600; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda52154Var : BV:32
2 : Lambda52155Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda52150Var : BV:32
2 : Lambda52151Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 3 { 0x3 } : BV:8
16 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
17 : eq(12, 16) : BOOL
18 : 104 { 0x68 } : BV:8
19 : eq(12, 10) : BOOL
20 : 205 { 0xcd -51 } : BV:8
21 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
22 : eq(12, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
25 : eq(12, 24) : BOOL
26 : 237 { 0xed -19 } : BV:8
27 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
28 : eq(12, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 13) : BOOL
39 : eq(37, 16) : BOOL
40 : eq(37, 10) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 18, 47) : BV:8
49 : ite(38, 15, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 10) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 15, 61) : BV:8
63 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
64 : bvadd(63, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 10) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : ite(70, 29, 30) : BV:8
72 : ite(69, 26, 71) : BV:8
73 : ite(68, 23, 72) : BV:8
74 : ite(67, 20, 73) : BV:8
75 : ite(66, 18, 74) : BV:8
76 : ite(65, 15, 75) : BV:8
77 : bvconcat(36, 49, 62, 76) : BV:32
78 : bvadd(7, 9, 77) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 16) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : ite(84, 29, 30) : BV:8
86 : ite(83, 26, 85) : BV:8
87 : ite(82, 23, 86) : BV:8
88 : ite(81, 20, 87) : BV:8
89 : ite(80, 18, 88) : BV:8
90 : ite(79, 15, 89) : BV:8
91 : 2 { 0x2 +1.23e129 } : BV:32
92 : bvadd(91, 9, 77) : BV:32
93 : eq(92, 13) : BOOL
94 : eq(92, 16) : BOOL
95 : eq(92, 10) : BOOL
96 : eq(92, 21) : BOOL
97 : eq(92, 24) : BOOL
98 : eq(92, 27) : BOOL
99 : ite(98, 29, 30) : BV:8
100 : ite(97, 26, 99) : BV:8
101 : ite(96, 23, 100) : BV:8
102 : ite(95, 20, 101) : BV:8
103 : ite(94, 18, 102) : BV:8
104 : ite(93, 15, 103) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 9, 77) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 10) : BOOL
110 : eq(106, 21) : BOOL
111 : eq(106, 24) : BOOL
112 : eq(106, 27) : BOOL
113 : ite(112, 29, 30) : BV:8
114 : ite(111, 26, 113) : BV:8
115 : ite(110, 23, 114) : BV:8
116 : ite(109, 20, 115) : BV:8
117 : ite(108, 18, 116) : BV:8
118 : ite(107, 15, 117) : BV:8
119 : bvadd(9, 77) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 16) : BOOL
122 : eq(119, 10) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : ite(125, 29, 30) : BV:8
127 : ite(124, 26, 126) : BV:8
128 : ite(123, 23, 127) : BV:8
129 : ite(122, 20, 128) : BV:8
130 : ite(121, 18, 129) : BV:8
131 : ite(120, 15, 130) : BV:8
132 : bvconcat(90, 104, 118, 131) : BV:32
133 : ite(6, 3, 132) : BV:32
134 : lambda(1, 2, 133) : FUNCTION[BV:32,BV:32 -> BV:32]
135 : sym_const(134) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 446693376 ] -> true, [ 446693377; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda52161Var : BV:32
2 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 3 { 0x3 } : BV:8
16 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
17 : eq(12, 16) : BOOL
18 : 104 { 0x68 } : BV:8
19 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
20 : eq(12, 19) : BOOL
21 : 205 { 0xcd -51 } : BV:8
22 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
23 : eq(12, 22) : BOOL
24 : 36 { 0x24 } : BV:8
25 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
26 : eq(12, 25) : BOOL
27 : 237 { 0xed -19 } : BV:8
28 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
29 : eq(12, 28) : BOOL
30 : 232 { 0xe8 -24 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda52162Var : BV:32
2 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 3 { 0x3 } : BV:8
16 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
17 : eq(12, 16) : BOOL
18 : 104 { 0x68 } : BV:8
19 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
20 : eq(12, 19) : BOOL
21 : 205 { 0xcd -51 } : BV:8
22 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
23 : eq(12, 22) : BOOL
24 : 36 { 0x24 } : BV:8
25 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
26 : eq(12, 25) : BOOL
27 : 237 { 0xed -19 } : BV:8
28 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
29 : eq(12, 28) : BOOL
30 : 232 { 0xe8 -24 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 446693376 ] -> true, [ 446693377; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 446693376 ] -> true, [ 446693377; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda52169Var : BV:32
2 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
13 : eq(11, 12) : BOOL
14 : 3 { 0x3 } : BV:8
15 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
16 : eq(11, 15) : BOOL
17 : 104 { 0x68 } : BV:8
18 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
19 : eq(11, 18) : BOOL
20 : 205 { 0xcd -51 } : BV:8
21 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
22 : eq(11, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
25 : eq(11, 24) : BOOL
26 : 237 { 0xed -19 } : BV:8
27 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
28 : eq(11, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : eq(38, 24) : BOOL
44 : eq(38, 27) : BOOL
45 : ite(44, 29, 30) : BV:8
46 : ite(43, 26, 45) : BV:8
47 : ite(42, 23, 46) : BV:8
48 : ite(41, 20, 47) : BV:8
49 : ite(40, 17, 48) : BV:8
50 : ite(39, 14, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 9, 10) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : eq(52, 18) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : ite(58, 29, 30) : BV:8
60 : ite(57, 26, 59) : BV:8
61 : ite(56, 23, 60) : BV:8
62 : ite(55, 20, 61) : BV:8
63 : ite(54, 17, 62) : BV:8
64 : ite(53, 14, 63) : BV:8
65 : bvadd(9, 10) : BV:32
66 : eq(65, 12) : BOOL
67 : eq(65, 15) : BOOL
68 : eq(65, 18) : BOOL
69 : eq(65, 21) : BOOL
70 : eq(65, 24) : BOOL
71 : eq(65, 27) : BOOL
72 : ite(71, 29, 30) : BV:8
73 : ite(70, 26, 72) : BV:8
74 : ite(69, 23, 73) : BV:8
75 : ite(68, 20, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 14, 76) : BV:8
78 : bvconcat(36, 50, 64, 77) : BV:32
79 : ite(6, 4, 78) : BV:32
80 : ite(3, 4, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3728663915
=counter_example_end
=global nodece 60 num_edges_traversed 1
=global nodece 60 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce4917.num_edges_traversed2
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(epsilon)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce4917 b1b2deaa5b3f9a479a49228d8cf7265
=input.spec-%var-x-1
1 : Lambda52248Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52249Var : BV:32
18 : Lambda52250Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52251Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
82 : eq(80, 81) : BOOL
83 : 3 { 0x3 } : BV:8
84 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
85 : eq(80, 84) : BOOL
86 : 104 { 0x68 } : BV:8
87 : eq(80, 78) : BOOL
88 : 205 { 0xcd -51 } : BV:8
89 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
90 : eq(80, 89) : BOOL
91 : 36 { 0x24 } : BV:8
92 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
93 : eq(80, 92) : BOOL
94 : 237 { 0xed -19 } : BV:8
95 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
96 : eq(80, 95) : BOOL
97 : 232 { 0xe8 -24 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 81) : BOOL
107 : eq(105, 84) : BOOL
108 : eq(105, 78) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 86, 115) : BV:8
117 : ite(106, 83, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 78) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 86, 128) : BV:8
130 : ite(119, 83, 129) : BV:8
131 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
132 : bvadd(131, 79) : BV:32
133 : eq(132, 81) : BOOL
134 : eq(132, 84) : BOOL
135 : eq(132, 78) : BOOL
136 : eq(132, 89) : BOOL
137 : eq(132, 92) : BOOL
138 : eq(132, 95) : BOOL
139 : ite(138, 97, 98) : BV:8
140 : ite(137, 94, 139) : BV:8
141 : ite(136, 91, 140) : BV:8
142 : ite(135, 88, 141) : BV:8
143 : ite(134, 86, 142) : BV:8
144 : ite(133, 83, 143) : BV:8
145 : bvconcat(104, 117, 130, 144) : BV:32
146 : bvadd(75, 77, 145) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 84) : BOOL
149 : eq(146, 78) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : ite(152, 97, 98) : BV:8
154 : ite(151, 94, 153) : BV:8
155 : ite(150, 91, 154) : BV:8
156 : ite(149, 88, 155) : BV:8
157 : ite(148, 86, 156) : BV:8
158 : ite(147, 83, 157) : BV:8
159 : 2 { 0x2 +1.23e129 } : BV:32
160 : bvadd(159, 77, 145) : BV:32
161 : eq(160, 81) : BOOL
162 : eq(160, 84) : BOOL
163 : eq(160, 78) : BOOL
164 : eq(160, 89) : BOOL
165 : eq(160, 92) : BOOL
166 : eq(160, 95) : BOOL
167 : ite(166, 97, 98) : BV:8
168 : ite(165, 94, 167) : BV:8
169 : ite(164, 91, 168) : BV:8
170 : ite(163, 88, 169) : BV:8
171 : ite(162, 86, 170) : BV:8
172 : ite(161, 83, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 77, 145) : BV:32
175 : eq(174, 81) : BOOL
176 : eq(174, 84) : BOOL
177 : eq(174, 78) : BOOL
178 : eq(174, 89) : BOOL
179 : eq(174, 92) : BOOL
180 : eq(174, 95) : BOOL
181 : ite(180, 97, 98) : BV:8
182 : ite(179, 94, 181) : BV:8
183 : ite(178, 91, 182) : BV:8
184 : ite(177, 88, 183) : BV:8
185 : ite(176, 86, 184) : BV:8
186 : ite(175, 83, 185) : BV:8
187 : bvadd(77, 145) : BV:32
188 : eq(187, 81) : BOOL
189 : eq(187, 84) : BOOL
190 : eq(187, 78) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : ite(193, 97, 98) : BV:8
195 : ite(192, 94, 194) : BV:8
196 : ite(191, 91, 195) : BV:8
197 : ite(190, 88, 196) : BV:8
198 : ite(189, 86, 197) : BV:8
199 : ite(188, 83, 198) : BV:8
200 : bvconcat(158, 172, 186, 199) : BV:32
201 : ite(55, 2, 200) : BV:32
202 : ite(74, 200, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : lambda(52, 203) : FUNCTION[BV:32 -> BV:32]
205 : map(51, 204) : MAP[BV:32 -> BV:32]
206 : lambda(17, 205) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
207 : map(16, 206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
208 : sym_const(207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 180879359 { 0xac7ffff +1.56249988e150 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda52275Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52276Var : BV:32
18 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
19 : eq(17, 18) : BOOL
20 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
28 : eq(26, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
31 : eq(26, 30) : BOOL
32 : 104 { 0x68 } : BV:8
33 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
34 : eq(26, 33) : BOOL
35 : 205 { 0xcd -51 } : BV:8
36 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
37 : eq(26, 36) : BOOL
38 : 36 { 0x24 } : BV:8
39 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
40 : eq(26, 39) : BOOL
41 : 237 { 0xed -19 } : BV:8
42 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
43 : eq(26, 42) : BOOL
44 : 232 { 0xe8 -24 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 24, 25) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : eq(53, 33) : BOOL
57 : eq(53, 36) : BOOL
58 : eq(53, 39) : BOOL
59 : eq(53, 42) : BOOL
60 : ite(59, 44, 45) : BV:8
61 : ite(58, 41, 60) : BV:8
62 : ite(57, 38, 61) : BV:8
63 : ite(56, 35, 62) : BV:8
64 : ite(55, 32, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 24, 25) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : eq(67, 33) : BOOL
71 : eq(67, 36) : BOOL
72 : eq(67, 39) : BOOL
73 : eq(67, 42) : BOOL
74 : ite(73, 44, 45) : BV:8
75 : ite(72, 41, 74) : BV:8
76 : ite(71, 38, 75) : BV:8
77 : ite(70, 35, 76) : BV:8
78 : ite(69, 32, 77) : BV:8
79 : ite(68, 29, 78) : BV:8
80 : bvadd(24, 25) : BV:32
81 : eq(80, 27) : BOOL
82 : eq(80, 30) : BOOL
83 : eq(80, 33) : BOOL
84 : eq(80, 36) : BOOL
85 : eq(80, 39) : BOOL
86 : eq(80, 42) : BOOL
87 : ite(86, 44, 45) : BV:8
88 : ite(85, 41, 87) : BV:8
89 : ite(84, 38, 88) : BV:8
90 : ite(83, 35, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 29, 91) : BV:8
93 : bvconcat(51, 65, 79, 92) : BV:32
94 : ite(21, 2, 93) : BV:32
95 : ite(19, 2, 94) : BV:32
96 : lambda(17, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(16, 96) : MAP[BV:32 -> BV:32]
98 : sym_const(97) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 417333248 ] -> 0, [ 417333249; 417333249 ] -> 232, [ 417333250; 417333250 ] -> 237, [ 417333251; 417333251 ] -> 205, [ 417333252; 1140850683 ] -> 0, [ 1140850684; 1140850684 ] -> 36, [ 1140850685; 1140850685 ] -> 0, [ 1140850686; 1140850686 ] -> 104, [ 1140850687; 1140850687 ] -> 3, [ 1140850688; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 277086283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 277086284; 277086287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 277086288; 1680647363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1680647364; 1680647367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1680647368; 3493466719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493466720; 3493466723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3493466724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 277086284 { 0x1084004c +1.3125905e162 } : BV:32
=input.dst.llvm-%m
1 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1680647364 { 0x642ca4c4 +1.34877824e73 } : BV:32
=input.dst.llvm-%n
1 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3493466720 { 0xd03a1260 -801500576 -1.45368576e33 } : BV:32
=input.dst.llvm-%x
1 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda52268Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52269Var : BV:32
18 : Lambda52270Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52271Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
63 : eq(61, 62) : BOOL
64 : 3 { 0x3 } : BV:8
65 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
66 : eq(61, 65) : BOOL
67 : 104 { 0x68 } : BV:8
68 : eq(61, 59) : BOOL
69 : 205 { 0xcd -51 } : BV:8
70 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
71 : eq(61, 70) : BOOL
72 : 36 { 0x24 } : BV:8
73 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
74 : eq(61, 73) : BOOL
75 : 237 { 0xed -19 } : BV:8
76 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
77 : eq(61, 76) : BOOL
78 : 232 { 0xe8 -24 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 62) : BOOL
88 : eq(86, 65) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 67, 96) : BV:8
98 : ite(87, 64, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 59) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 67, 109) : BV:8
111 : ite(100, 64, 110) : BV:8
112 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
113 : bvadd(112, 60) : BV:32
114 : eq(113, 62) : BOOL
115 : eq(113, 65) : BOOL
116 : eq(113, 59) : BOOL
117 : eq(113, 70) : BOOL
118 : eq(113, 73) : BOOL
119 : eq(113, 76) : BOOL
120 : ite(119, 78, 79) : BV:8
121 : ite(118, 75, 120) : BV:8
122 : ite(117, 72, 121) : BV:8
123 : ite(116, 69, 122) : BV:8
124 : ite(115, 67, 123) : BV:8
125 : ite(114, 64, 124) : BV:8
126 : bvconcat(85, 98, 111, 125) : BV:32
127 : bvadd(56, 58, 126) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 65) : BOOL
130 : eq(127, 59) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : ite(133, 78, 79) : BV:8
135 : ite(132, 75, 134) : BV:8
136 : ite(131, 72, 135) : BV:8
137 : ite(130, 69, 136) : BV:8
138 : ite(129, 67, 137) : BV:8
139 : ite(128, 64, 138) : BV:8
140 : 2 { 0x2 +1.23e129 } : BV:32
141 : bvadd(140, 58, 126) : BV:32
142 : eq(141, 62) : BOOL
143 : eq(141, 65) : BOOL
144 : eq(141, 59) : BOOL
145 : eq(141, 70) : BOOL
146 : eq(141, 73) : BOOL
147 : eq(141, 76) : BOOL
148 : ite(147, 78, 79) : BV:8
149 : ite(146, 75, 148) : BV:8
150 : ite(145, 72, 149) : BV:8
151 : ite(144, 69, 150) : BV:8
152 : ite(143, 67, 151) : BV:8
153 : ite(142, 64, 152) : BV:8
154 : 1 { 0x1 +1.11e129 } : BV:32
155 : bvadd(154, 58, 126) : BV:32
156 : eq(155, 62) : BOOL
157 : eq(155, 65) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 70) : BOOL
160 : eq(155, 73) : BOOL
161 : eq(155, 76) : BOOL
162 : ite(161, 78, 79) : BV:8
163 : ite(160, 75, 162) : BV:8
164 : ite(159, 72, 163) : BV:8
165 : ite(158, 69, 164) : BV:8
166 : ite(157, 67, 165) : BV:8
167 : ite(156, 64, 166) : BV:8
168 : bvadd(58, 126) : BV:32
169 : eq(168, 62) : BOOL
170 : eq(168, 65) : BOOL
171 : eq(168, 59) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : ite(174, 78, 79) : BV:8
176 : ite(173, 75, 175) : BV:8
177 : ite(172, 72, 176) : BV:8
178 : ite(171, 69, 177) : BV:8
179 : ite(170, 67, 178) : BV:8
180 : ite(169, 64, 179) : BV:8
181 : bvconcat(139, 153, 167, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : lambda(52, 182) : FUNCTION[BV:32 -> BV:32]
184 : map(51, 183) : MAP[BV:32 -> BV:32]
185 : lambda(17, 184) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
186 : map(16, 185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
187 : sym_const(186) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 128 { 0x80 +1.1525e129 } : BV:32
2 : unit : UNIT
3 : Lambda52257Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda52258Var : BV:32
20 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
21 : eq(19, 20) : BOOL
22 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
31 : eq(29, 30) : BOOL
32 : 3 { 0x3 } : BV:8
33 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
34 : eq(29, 33) : BOOL
35 : 104 { 0x68 } : BV:8
36 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
37 : eq(29, 36) : BOOL
38 : 205 { 0xcd -51 } : BV:8
39 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
40 : eq(29, 39) : BOOL
41 : 36 { 0x24 } : BV:8
42 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
43 : eq(29, 42) : BOOL
44 : 237 { 0xed -19 } : BV:8
45 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
46 : eq(29, 45) : BOOL
47 : 232 { 0xe8 -24 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 27, 28) : BV:32
57 : eq(56, 30) : BOOL
58 : eq(56, 33) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 39) : BOOL
61 : eq(56, 42) : BOOL
62 : eq(56, 45) : BOOL
63 : ite(62, 47, 48) : BV:8
64 : ite(61, 44, 63) : BV:8
65 : ite(60, 41, 64) : BV:8
66 : ite(59, 38, 65) : BV:8
67 : ite(58, 35, 66) : BV:8
68 : ite(57, 32, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 27, 28) : BV:32
71 : eq(70, 30) : BOOL
72 : eq(70, 33) : BOOL
73 : eq(70, 36) : BOOL
74 : eq(70, 39) : BOOL
75 : eq(70, 42) : BOOL
76 : eq(70, 45) : BOOL
77 : ite(76, 47, 48) : BV:8
78 : ite(75, 44, 77) : BV:8
79 : ite(74, 41, 78) : BV:8
80 : ite(73, 38, 79) : BV:8
81 : ite(72, 35, 80) : BV:8
82 : ite(71, 32, 81) : BV:8
83 : bvadd(27, 28) : BV:32
84 : eq(83, 30) : BOOL
85 : eq(83, 33) : BOOL
86 : eq(83, 36) : BOOL
87 : eq(83, 39) : BOOL
88 : eq(83, 42) : BOOL
89 : eq(83, 45) : BOOL
90 : ite(89, 47, 48) : BV:8
91 : ite(88, 44, 90) : BV:8
92 : ite(87, 41, 91) : BV:8
93 : ite(86, 38, 92) : BV:8
94 : ite(85, 35, 93) : BV:8
95 : ite(84, 32, 94) : BV:8
96 : bvconcat(54, 68, 82, 95) : BV:32
97 : ite(24, 4, 96) : BV:32
98 : ite(23, 4, 97) : BV:32
99 : ite(21, 4, 98) : BV:32
100 : lambda(19, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(18, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 180879359 { 0xac7ffff +1.56249988e150 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 322969602 { 0x13402002 +1.50097680e167 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 31904881 { 0x1e6d471 +1.80335819e132 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda52280Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52281Var : BV:32
18 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
19 : eq(17, 18) : BOOL
20 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
29 : eq(27, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
32 : eq(27, 31) : BOOL
33 : 104 { 0x68 } : BV:8
34 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
35 : eq(27, 34) : BOOL
36 : 205 { 0xcd -51 } : BV:8
37 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
38 : eq(27, 37) : BOOL
39 : 36 { 0x24 } : BV:8
40 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
41 : eq(27, 40) : BOOL
42 : 237 { 0xed -19 } : BV:8
43 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
44 : eq(27, 43) : BOOL
45 : 232 { 0xe8 -24 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 25, 26) : BV:32
55 : eq(54, 28) : BOOL
56 : eq(54, 31) : BOOL
57 : eq(54, 34) : BOOL
58 : eq(54, 37) : BOOL
59 : eq(54, 40) : BOOL
60 : eq(54, 43) : BOOL
61 : ite(60, 45, 46) : BV:8
62 : ite(59, 42, 61) : BV:8
63 : ite(58, 39, 62) : BV:8
64 : ite(57, 36, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 25, 26) : BV:32
69 : eq(68, 28) : BOOL
70 : eq(68, 31) : BOOL
71 : eq(68, 34) : BOOL
72 : eq(68, 37) : BOOL
73 : eq(68, 40) : BOOL
74 : eq(68, 43) : BOOL
75 : ite(74, 45, 46) : BV:8
76 : ite(73, 42, 75) : BV:8
77 : ite(72, 39, 76) : BV:8
78 : ite(71, 36, 77) : BV:8
79 : ite(70, 33, 78) : BV:8
80 : ite(69, 30, 79) : BV:8
81 : bvadd(25, 26) : BV:32
82 : eq(81, 28) : BOOL
83 : eq(81, 31) : BOOL
84 : eq(81, 34) : BOOL
85 : eq(81, 37) : BOOL
86 : eq(81, 40) : BOOL
87 : eq(81, 43) : BOOL
88 : ite(87, 45, 46) : BV:8
89 : ite(86, 42, 88) : BV:8
90 : ite(85, 39, 89) : BV:8
91 : ite(84, 36, 90) : BV:8
92 : ite(83, 33, 91) : BV:8
93 : ite(82, 30, 92) : BV:8
94 : bvconcat(52, 66, 80, 93) : BV:32
95 : ite(22, 2, 94) : BV:32
96 : ite(21, 2, 95) : BV:32
97 : ite(19, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 180879359 { 0xac7ffff +1.56249988e150 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 322969602 { 0x13402002 +1.50097680e167 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1828848632 { 0x6d0203f8 +1.1574611e91 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1680647364 { 0x642ca4c4 +1.34877824e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1680647367 { 0x642ca4c7 +1.34877860e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3493466720 { 0xd03a1260 -801500576 -1.45368576e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3493466723 { 0xd03a1263 -801500573 -1.45368611e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 277086284 { 0x1084004c +1.3125905e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 277086287 { 0x1084004f +1.3125941e162 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda52140Var : BV:32
2 : Lambda52141Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
55 : eq(53, 54) : BOOL
56 : 3 { 0x3 } : BV:8
57 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
58 : eq(53, 57) : BOOL
59 : 104 { 0x68 } : BV:8
60 : eq(53, 51) : BOOL
61 : 205 { 0xcd -51 } : BV:8
62 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
63 : eq(53, 62) : BOOL
64 : 36 { 0x24 } : BV:8
65 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
66 : eq(53, 65) : BOOL
67 : 237 { 0xed -19 } : BV:8
68 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
69 : eq(53, 68) : BOOL
70 : 232 { 0xe8 -24 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 54) : BOOL
80 : eq(78, 57) : BOOL
81 : eq(78, 51) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 59, 88) : BV:8
90 : ite(79, 56, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 51) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 59, 101) : BV:8
103 : ite(92, 56, 102) : BV:8
104 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
105 : bvadd(104, 52) : BV:32
106 : eq(105, 54) : BOOL
107 : eq(105, 57) : BOOL
108 : eq(105, 51) : BOOL
109 : eq(105, 62) : BOOL
110 : eq(105, 65) : BOOL
111 : eq(105, 68) : BOOL
112 : ite(111, 70, 71) : BV:8
113 : ite(110, 67, 112) : BV:8
114 : ite(109, 64, 113) : BV:8
115 : ite(108, 61, 114) : BV:8
116 : ite(107, 59, 115) : BV:8
117 : ite(106, 56, 116) : BV:8
118 : bvconcat(77, 90, 103, 117) : BV:32
119 : bvadd(48, 50, 118) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 57) : BOOL
122 : eq(119, 51) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 61, 128) : BV:8
130 : ite(121, 59, 129) : BV:8
131 : ite(120, 56, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 50, 118) : BV:32
134 : eq(133, 54) : BOOL
135 : eq(133, 57) : BOOL
136 : eq(133, 51) : BOOL
137 : eq(133, 62) : BOOL
138 : eq(133, 65) : BOOL
139 : eq(133, 68) : BOOL
140 : ite(139, 70, 71) : BV:8
141 : ite(138, 67, 140) : BV:8
142 : ite(137, 64, 141) : BV:8
143 : ite(136, 61, 142) : BV:8
144 : ite(135, 59, 143) : BV:8
145 : ite(134, 56, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 50, 118) : BV:32
148 : eq(147, 54) : BOOL
149 : eq(147, 57) : BOOL
150 : eq(147, 51) : BOOL
151 : eq(147, 62) : BOOL
152 : eq(147, 65) : BOOL
153 : eq(147, 68) : BOOL
154 : ite(153, 70, 71) : BV:8
155 : ite(152, 67, 154) : BV:8
156 : ite(151, 64, 155) : BV:8
157 : ite(150, 61, 156) : BV:8
158 : ite(149, 59, 157) : BV:8
159 : ite(148, 56, 158) : BV:8
160 : bvadd(50, 118) : BV:32
161 : eq(160, 54) : BOOL
162 : eq(160, 57) : BOOL
163 : eq(160, 51) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : ite(166, 70, 71) : BV:8
168 : ite(165, 67, 167) : BV:8
169 : ite(164, 64, 168) : BV:8
170 : ite(163, 61, 169) : BV:8
171 : ite(162, 59, 170) : BV:8
172 : ite(161, 56, 171) : BV:8
173 : bvconcat(131, 145, 159, 172) : BV:32
174 : ite(6, 3, 173) : BV:32
175 : ite(47, 173, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : lambda(1, 2, 176) : FUNCTION[BV:32,BV:32 -> BV:32]
178 : sym_const(177) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda52145Var : BV:32
2 : Lambda52146Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 322969599 ] -> true, [ 322969600; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 322969599 ] -> true, [ 322969600; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda52154Var : BV:32
2 : Lambda52155Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 322969599 { 0x13401fff +1.50097644e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 322969601 { 0x13402001 +1.50097668e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 446693376 { 0x1aa00000 +1.25000000e182 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 446693378 { 0x1aa00002 +1.25000023e182 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 446693377 { 0x1aa00001 +1.25000011e182 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda52150Var : BV:32
2 : Lambda52151Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 3 { 0x3 } : BV:8
16 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
17 : eq(12, 16) : BOOL
18 : 104 { 0x68 } : BV:8
19 : eq(12, 10) : BOOL
20 : 205 { 0xcd -51 } : BV:8
21 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
22 : eq(12, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
25 : eq(12, 24) : BOOL
26 : 237 { 0xed -19 } : BV:8
27 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
28 : eq(12, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 13) : BOOL
39 : eq(37, 16) : BOOL
40 : eq(37, 10) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 18, 47) : BV:8
49 : ite(38, 15, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 10) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 15, 61) : BV:8
63 : 417333248 { 0x18e00000 +1.75000000e178 } : BV:32
64 : bvadd(63, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 10) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : ite(70, 29, 30) : BV:8
72 : ite(69, 26, 71) : BV:8
73 : ite(68, 23, 72) : BV:8
74 : ite(67, 20, 73) : BV:8
75 : ite(66, 18, 74) : BV:8
76 : ite(65, 15, 75) : BV:8
77 : bvconcat(36, 49, 62, 76) : BV:32
78 : bvadd(7, 9, 77) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 16) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : ite(84, 29, 30) : BV:8
86 : ite(83, 26, 85) : BV:8
87 : ite(82, 23, 86) : BV:8
88 : ite(81, 20, 87) : BV:8
89 : ite(80, 18, 88) : BV:8
90 : ite(79, 15, 89) : BV:8
91 : 2 { 0x2 +1.23e129 } : BV:32
92 : bvadd(91, 9, 77) : BV:32
93 : eq(92, 13) : BOOL
94 : eq(92, 16) : BOOL
95 : eq(92, 10) : BOOL
96 : eq(92, 21) : BOOL
97 : eq(92, 24) : BOOL
98 : eq(92, 27) : BOOL
99 : ite(98, 29, 30) : BV:8
100 : ite(97, 26, 99) : BV:8
101 : ite(96, 23, 100) : BV:8
102 : ite(95, 20, 101) : BV:8
103 : ite(94, 18, 102) : BV:8
104 : ite(93, 15, 103) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 9, 77) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 10) : BOOL
110 : eq(106, 21) : BOOL
111 : eq(106, 24) : BOOL
112 : eq(106, 27) : BOOL
113 : ite(112, 29, 30) : BV:8
114 : ite(111, 26, 113) : BV:8
115 : ite(110, 23, 114) : BV:8
116 : ite(109, 20, 115) : BV:8
117 : ite(108, 18, 116) : BV:8
118 : ite(107, 15, 117) : BV:8
119 : bvadd(9, 77) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 16) : BOOL
122 : eq(119, 10) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : ite(125, 29, 30) : BV:8
127 : ite(124, 26, 126) : BV:8
128 : ite(123, 23, 127) : BV:8
129 : ite(122, 20, 128) : BV:8
130 : ite(121, 18, 129) : BV:8
131 : ite(120, 15, 130) : BV:8
132 : bvconcat(90, 104, 118, 131) : BV:32
133 : ite(6, 3, 132) : BV:32
134 : lambda(1, 2, 133) : FUNCTION[BV:32,BV:32 -> BV:32]
135 : sym_const(134) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 446693376 ] -> true, [ 446693377; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda52161Var : BV:32
2 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 3 { 0x3 } : BV:8
16 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
17 : eq(12, 16) : BOOL
18 : 104 { 0x68 } : BV:8
19 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
20 : eq(12, 19) : BOOL
21 : 205 { 0xcd -51 } : BV:8
22 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
23 : eq(12, 22) : BOOL
24 : 36 { 0x24 } : BV:8
25 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
26 : eq(12, 25) : BOOL
27 : 237 { 0xed -19 } : BV:8
28 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
29 : eq(12, 28) : BOOL
30 : 232 { 0xe8 -24 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda52162Var : BV:32
2 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 3 { 0x3 } : BV:8
16 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
17 : eq(12, 16) : BOOL
18 : 104 { 0x68 } : BV:8
19 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
20 : eq(12, 19) : BOOL
21 : 205 { 0xcd -51 } : BV:8
22 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
23 : eq(12, 22) : BOOL
24 : 36 { 0x24 } : BV:8
25 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
26 : eq(12, 25) : BOOL
27 : 237 { 0xed -19 } : BV:8
28 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
29 : eq(12, 28) : BOOL
30 : 232 { 0xe8 -24 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 446693376 ] -> true, [ 446693377; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 446693376 ] -> true, [ 446693377; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda52169Var : BV:32
2 : 180879360 { 0xac80000 +1.56250000e150 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 322969600 { 0x13402000 +1.50097656e167 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 57147428 { 0x3680024 +1.81250429e135 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
13 : eq(11, 12) : BOOL
14 : 3 { 0x3 } : BV:8
15 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
16 : eq(11, 15) : BOOL
17 : 104 { 0x68 } : BV:8
18 : 417333251 { 0x18e00003 +1.75000035e178 } : BV:32
19 : eq(11, 18) : BOOL
20 : 205 { 0xcd -51 } : BV:8
21 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
22 : eq(11, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 417333250 { 0x18e00002 +1.75000023e178 } : BV:32
25 : eq(11, 24) : BOOL
26 : 237 { 0xed -19 } : BV:8
27 : 417333249 { 0x18e00001 +1.75000011e178 } : BV:32
28 : eq(11, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : eq(38, 24) : BOOL
44 : eq(38, 27) : BOOL
45 : ite(44, 29, 30) : BV:8
46 : ite(43, 26, 45) : BV:8
47 : ite(42, 23, 46) : BV:8
48 : ite(41, 20, 47) : BV:8
49 : ite(40, 17, 48) : BV:8
50 : ite(39, 14, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 9, 10) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : eq(52, 18) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : ite(58, 29, 30) : BV:8
60 : ite(57, 26, 59) : BV:8
61 : ite(56, 23, 60) : BV:8
62 : ite(55, 20, 61) : BV:8
63 : ite(54, 17, 62) : BV:8
64 : ite(53, 14, 63) : BV:8
65 : bvadd(9, 10) : BV:32
66 : eq(65, 12) : BOOL
67 : eq(65, 15) : BOOL
68 : eq(65, 18) : BOOL
69 : eq(65, 21) : BOOL
70 : eq(65, 24) : BOOL
71 : eq(65, 27) : BOOL
72 : ite(71, 29, 30) : BV:8
73 : ite(70, 26, 72) : BV:8
74 : ite(69, 23, 73) : BV:8
75 : ite(68, 20, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 14, 76) : BV:8
78 : bvconcat(36, 50, 64, 77) : BV:32
79 : ite(6, 4, 78) : BV:32
80 : ite(3, 4, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3728663915
=counter_example_end
=global nodece 61 num_edges_traversed 2
=global nodece 61 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3v487.ce4960.num_edges_traversed1
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3v487.ce4960 542bcdb4f0a69bc8b371f61980f29b21
=input.spec-%var-x-1
1 : Lambda57015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57016Var : BV:32
18 : Lambda57017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda57018Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda57044Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57045Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 98303 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 98304; 98307 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 98308; 2122883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2122884; 2122887 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2122888; 2604749439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2604749440; 2604749443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2604749444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2122884 { 0x206484 +1.25306749e129 } : BV:32
=input.dst.llvm-%m
1 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 98304 { 0x18000 +1.1171875e129 } : BV:32
=input.dst.llvm-%n
1 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2604749440 { 0x9b415280 -1690217856 -1.51033020e183 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda57036Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57037Var : BV:32
18 : Lambda57038Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda57039Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda57025Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda57026Var : BV:32
20 : bvule(4, 19) : BOOL
21 : bvule(19, 12) : BOOL
22 : and(20, 21) : BOOL
23 : ite(22, 4, 4) : BV:32
24 : lambda(19, 23) : FUNCTION[BV:32 -> BV:32]
25 : map(18, 24) : MAP[BV:32 -> BV:32]
26 : sum(1, 2, 25) : SUM[UNIT,MAP[BV:32 -> BV:32]]
27 : sym_const(26) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1701533916 { 0x656b58dc +1.83864927e75 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : and(3, 10) : BOOL
19 : ite(18, 1, 1) : BV:32
20 : sum(16, 17, 19) : SUM[UNIT,BV:32]
21 : sym_const(20) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda57050Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57051Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1080762398 { 0x406b201e +1.83691763e1 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 98304 { 0x18000 +1.1171875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 98307 { 0x18003 +1.1171910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2604749440 { 0x9b415280 -1690217856 -1.51033020e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2604749443 { 0x9b415283 -1690217853 -1.51033055e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2122884 { 0x206484 +1.25306749e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2122887 { 0x206487 +1.25306785e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda56938Var : BV:32
2 : Lambda56939Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3725459455 ] -> true, [ 3725459456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3725459455 ] -> true, [ 3725459456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda56948Var : BV:32
2 : Lambda56949Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda56952Var : BV:32
2 : Lambda56953Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1509704287 ] -> true, [ 1509704288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 1509704287 ] -> true, [ 1509704288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1509704287 ] -> true, [ 1509704288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2135147761
=counter_example_end
=global nodece 62 num_edges_traversed 1
=global nodece 62 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 63
=global nodece 63 nodece z3v487.ce4990.num_edges_traversed2
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3v487.ce4990 6e265c618de971b7cdf2ca29595afc2f
=input.spec-%var-x-1
1 : Lambda57015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57016Var : BV:32
18 : Lambda57017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda57018Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda57118Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda57119Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : and(9, 15) : BOOL
47 : ite(46, 39, 39) : BOOL
48 : ite(7, 38, 47) : BOOL
49 : bvule(2, 42) : BOOL
50 : bvule(42, 22) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 25) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(29, 42) : BOOL
56 : bvule(42, 14) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 29, 29) : BV:32
59 : ite(54, 25, 58) : BV:32
60 : ite(51, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(20, 61) : BOOL
63 : ite(62, 38, 39) : BOOL
64 : and(48, 63) : BOOL
65 : ite(45, 2, 2) : BV:32
66 : ite(64, 2, 65) : BV:32
67 : ite(45, 2, 66) : BV:32
68 : lambda(42, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(41, 68) : MAP[BV:32 -> BV:32]
70 : sym_const(69) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 98303 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 98304; 98307 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 98308; 2122883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2122884; 2122887 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2122888; 2604749439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2604749440; 2604749443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2604749444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2122884 { 0x206484 +1.25306749e129 } : BV:32
=input.dst.llvm-%m
1 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 98304 { 0x18000 +1.1171875e129 } : BV:32
=input.dst.llvm-%n
1 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2604749440 { 0x9b415280 -1690217856 -1.51033020e183 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda57036Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57037Var : BV:32
18 : Lambda57038Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda57039Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda57108Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
31 : bvule(19, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
34 : bvule(33, 19) : BOOL
35 : bvule(19, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
38 : bvule(37, 19) : BOOL
39 : bvule(19, 10) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 1, 42) : BV:32
44 : eq(43, 1) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 7, 13) : BOOL
47 : lambda(19, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda57109Var : BV:32
49 : eq(2, 1) : BOOL
50 : eq(48, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(1, 48) : BOOL
53 : bvule(48, 30) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(33, 48) : BOOL
56 : bvule(48, 33) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(37, 48) : BOOL
59 : bvule(48, 10) : BOOL
60 : and(58, 59) : BOOL
61 : ite(60, 37, 37) : BV:32
62 : ite(57, 33, 61) : BV:32
63 : ite(54, 1, 62) : BV:32
64 : eq(63, 1) : BOOL
65 : and(28, 64) : BOOL
66 : ite(65, 7, 13) : BOOL
67 : and(15, 66) : BOOL
68 : ite(51, 1, 1) : BV:32
69 : ite(67, 1, 68) : BV:32
70 : ite(51, 1, 69) : BV:32
71 : lambda(48, 70) : FUNCTION[BV:32 -> BV:32]
72 : map(47, 71) : MAP[BV:32 -> BV:32]
73 : sum(17, 18, 72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
74 : sym_const(73) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1701533916 { 0x656b58dc +1.83864927e75 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda57124Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda57125Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : and(9, 15) : BOOL
47 : ite(46, 39, 39) : BOOL
48 : ite(7, 38, 47) : BOOL
49 : bvule(2, 42) : BOOL
50 : bvule(42, 22) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 25) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(29, 42) : BOOL
56 : bvule(42, 14) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 29, 29) : BV:32
59 : ite(54, 25, 58) : BV:32
60 : ite(51, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(20, 61) : BOOL
63 : ite(62, 38, 39) : BOOL
64 : and(48, 63) : BOOL
65 : ite(45, 2, 2) : BV:32
66 : ite(64, 2, 65) : BV:32
67 : ite(45, 2, 66) : BV:32
68 : lambda(42, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(41, 68) : MAP[BV:32 -> BV:32]
70 : sym_const(69) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1080762398 { 0x406b201e +1.83691763e1 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 98304 { 0x18000 +1.1171875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 98307 { 0x18003 +1.1171910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2604749440 { 0x9b415280 -1690217856 -1.51033020e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2604749443 { 0x9b415283 -1690217853 -1.51033055e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2122884 { 0x206484 +1.25306749e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2122887 { 0x206487 +1.25306785e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda56938Var : BV:32
2 : Lambda56939Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3725459455 ] -> true, [ 3725459456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3725459455 ] -> true, [ 3725459456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda56948Var : BV:32
2 : Lambda56949Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda56952Var : BV:32
2 : Lambda56953Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3725459455 { 0xde0dffff -569507841 -1.10937488e61 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3725459456 { 0xde0e0000 -569507840 -1.10937500e61 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3725459457 { 0xde0e0001 -569507839 -1.10937511e61 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1509704287 { 0x59fc425f +1.97077548e52 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1509704288 { 0x59fc4260 +1.97077560e52 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1509704289 { 0x59fc4261 +1.97077572e52 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1509704287 ] -> true, [ 1509704288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 1509704287 ] -> true, [ 1509704288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1509704287 ] -> true, [ 1509704288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2135147761
=counter_example_end
=global nodece 63 num_edges_traversed 2
=global nodece 63 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce5019.num_edges_traversed0
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce5019 58d51fde196793c9cb43e52fe9cdacc
=input.spec-%var-x-1
1 : Lambda62806Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda62807Var : BV:32
18 : Lambda62808Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda62809Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 168 { 0xa8 -88 } : BV:8
81 : eq(78, 74) : BOOL
82 : 212 { 0xd4 -44 } : BV:8
83 : eq(78, 36) : BOOL
84 : 245 { 0xf5 -11 } : BV:8
85 : eq(78, 40) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 245, [ 2; 2 ] -> 180, [ 3; 3 ] -> 212, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1093150351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1093150352; 1093150355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1093150356; 1515532167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1515532168; 1515532171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1515532172; 3443193451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3443193452; 3443193455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3443193456; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.llvm-%n
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda62819Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda62820Var : BV:32
18 : Lambda62821Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda62822Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 168 { 0xa8 -88 } : BV:8
62 : eq(59, 55) : BOOL
63 : 212 { 0xd4 -44 } : BV:8
64 : eq(59, 36) : BOOL
65 : 245 { 0xf5 -11 } : BV:8
66 : eq(59, 40) : BOOL
67 : 180 { 0xb4 -76 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1515532171 { 0x5a552f8b +1.66551339e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1093150355 { 0x41282693 +1.31367719e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3443193455 { 0xcd3af66f -851773841 -1.46064555e27 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda62736Var : BV:32
2 : Lambda62737Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : eq(51, 47) : BOOL
55 : 212 { 0xd4 -44 } : BV:8
56 : eq(51, 32) : BOOL
57 : 245 { 0xf5 -11 } : BV:8
58 : eq(51, 36) : BOOL
59 : 180 { 0xb4 -76 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda62741Var : BV:32
2 : Lambda62742Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda62750Var : BV:32
2 : Lambda62751Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda62746Var : BV:32
2 : Lambda62747Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 168 { 0xa8 -88 } : BV:8
14 : eq(11, 7) : BOOL
15 : 212 { 0xd4 -44 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 245 { 0xf5 -11 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 180 { 0xb4 -76 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
925520758
=counter_example_end
=global nodece 64 num_edges_traversed 0
=global nodece 64 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 65
=global nodece 65 nodece z3v487.ce5020.num_edges_traversed0
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(epsilon)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3v487.ce5020 f94b22aed251a9e6883c9f6b2c2cb1
=input.spec-%var-x-1
1 : Lambda62856Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda62857Var : BV:32
18 : Lambda62858Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
28 : bvule(27, 17) : BOOL
29 : bvule(17, 10) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 17) : BOOL
32 : bvule(17, 8) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 8, 8) : BV:32
35 : ite(30, 27, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda62859Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : 40 { 0x28 } : BV:8
73 : 16 { 0x10 +1.190e129 } : BV:32
74 : eq(70, 73) : BOOL
75 : 157 { 0x9d -99 } : BV:8
76 : 18 { 0x12 +1.214e129 } : BV:32
77 : eq(70, 76) : BOOL
78 : 133 { 0x85 -123 } : BV:8
79 : eq(70, 42) : BOOL
80 : 72 { 0x48 } : BV:8
81 : eq(70, 66) : BOOL
82 : 194 { 0xc2 -62 } : BV:8
83 : 17 { 0x11 +1.202e129 } : BV:32
84 : eq(70, 83) : BOOL
85 : 129 { 0x81 -127 } : BV:8
86 : 19 { 0x13 +1.226e129 } : BV:32
87 : eq(70, 86) : BOOL
88 : 10 { 0xa } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(77, 78, 93) : BV:8
95 : ite(74, 75, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : bvadd(46, 69) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 73) : BOOL
100 : eq(97, 76) : BOOL
101 : eq(97, 42) : BOOL
102 : eq(97, 66) : BOOL
103 : eq(97, 83) : BOOL
104 : eq(97, 86) : BOOL
105 : ite(104, 88, 89) : BV:8
106 : ite(103, 85, 105) : BV:8
107 : ite(102, 82, 106) : BV:8
108 : ite(101, 80, 107) : BV:8
109 : ite(100, 78, 108) : BV:8
110 : ite(99, 75, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : bvadd(42, 69) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 73) : BOOL
115 : eq(112, 76) : BOOL
116 : eq(112, 42) : BOOL
117 : eq(112, 66) : BOOL
118 : eq(112, 83) : BOOL
119 : eq(112, 86) : BOOL
120 : ite(119, 88, 89) : BV:8
121 : ite(118, 85, 120) : BV:8
122 : ite(117, 82, 121) : BV:8
123 : ite(116, 80, 122) : BV:8
124 : ite(115, 78, 123) : BV:8
125 : ite(114, 75, 124) : BV:8
126 : ite(113, 72, 125) : BV:8
127 : eq(69, 2) : BOOL
128 : eq(69, 73) : BOOL
129 : eq(69, 76) : BOOL
130 : eq(69, 42) : BOOL
131 : eq(69, 66) : BOOL
132 : eq(69, 83) : BOOL
133 : eq(69, 86) : BOOL
134 : ite(133, 88, 89) : BV:8
135 : ite(132, 85, 134) : BV:8
136 : ite(131, 82, 135) : BV:8
137 : ite(130, 80, 136) : BV:8
138 : ite(129, 78, 137) : BV:8
139 : ite(128, 75, 138) : BV:8
140 : ite(127, 72, 139) : BV:8
141 : bvconcat(96, 111, 126, 140) : BV:32
142 : bvadd(66, 68, 141) : BV:32
143 : eq(142, 2) : BOOL
144 : eq(142, 73) : BOOL
145 : eq(142, 76) : BOOL
146 : eq(142, 42) : BOOL
147 : eq(142, 66) : BOOL
148 : eq(142, 83) : BOOL
149 : eq(142, 86) : BOOL
150 : ite(149, 88, 89) : BV:8
151 : ite(148, 85, 150) : BV:8
152 : ite(147, 82, 151) : BV:8
153 : ite(146, 80, 152) : BV:8
154 : ite(145, 78, 153) : BV:8
155 : ite(144, 75, 154) : BV:8
156 : ite(143, 72, 155) : BV:8
157 : bvadd(46, 68, 141) : BV:32
158 : eq(157, 2) : BOOL
159 : eq(157, 73) : BOOL
160 : eq(157, 76) : BOOL
161 : eq(157, 42) : BOOL
162 : eq(157, 66) : BOOL
163 : eq(157, 83) : BOOL
164 : eq(157, 86) : BOOL
165 : ite(164, 88, 89) : BV:8
166 : ite(163, 85, 165) : BV:8
167 : ite(162, 82, 166) : BV:8
168 : ite(161, 80, 167) : BV:8
169 : ite(160, 78, 168) : BV:8
170 : ite(159, 75, 169) : BV:8
171 : ite(158, 72, 170) : BV:8
172 : bvadd(42, 68, 141) : BV:32
173 : eq(172, 2) : BOOL
174 : eq(172, 73) : BOOL
175 : eq(172, 76) : BOOL
176 : eq(172, 42) : BOOL
177 : eq(172, 66) : BOOL
178 : eq(172, 83) : BOOL
179 : eq(172, 86) : BOOL
180 : ite(179, 88, 89) : BV:8
181 : ite(178, 85, 180) : BV:8
182 : ite(177, 82, 181) : BV:8
183 : ite(176, 80, 182) : BV:8
184 : ite(175, 78, 183) : BV:8
185 : ite(174, 75, 184) : BV:8
186 : ite(173, 72, 185) : BV:8
187 : bvadd(68, 141) : BV:32
188 : eq(187, 2) : BOOL
189 : eq(187, 73) : BOOL
190 : eq(187, 76) : BOOL
191 : eq(187, 42) : BOOL
192 : eq(187, 66) : BOOL
193 : eq(187, 83) : BOOL
194 : eq(187, 86) : BOOL
195 : ite(194, 88, 89) : BV:8
196 : ite(193, 85, 195) : BV:8
197 : ite(192, 82, 196) : BV:8
198 : ite(191, 80, 197) : BV:8
199 : ite(190, 78, 198) : BV:8
200 : ite(189, 75, 199) : BV:8
201 : ite(188, 72, 200) : BV:8
202 : bvconcat(156, 171, 186, 201) : BV:32
203 : ite(65, 2, 202) : BV:32
204 : ite(63, 2, 203) : BV:32
205 : lambda(60, 204) : FUNCTION[BV:32 -> BV:32]
206 : map(59, 205) : MAP[BV:32 -> BV:32]
207 : lambda(17, 206) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
208 : map(16, 207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
209 : sym_const(208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 40, [ 1; 1 ] -> 72, [ 2; 2 ] -> 0, [ 3; 3 ] -> 194, [ 4; 15 ] -> 0, [ 16; 16 ] -> 157, [ 17; 17 ] -> 129, [ 18; 18 ] -> 133, [ 19; 19 ] -> 10, [ 20; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 2396151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2396152; 2396155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2396156; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda62869Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda62870Var : BV:32
18 : Lambda62871Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
28 : bvule(27, 17) : BOOL
29 : bvule(17, 10) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 17) : BOOL
32 : bvule(17, 8) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 8, 8) : BV:32
35 : ite(30, 27, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda62872Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 25) : BOOL
67 : and(31, 29) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : or(83, 84) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : 40 { 0x28 } : BV:8
95 : 16 { 0x10 +1.190e129 } : BV:32
96 : eq(92, 95) : BOOL
97 : 157 { 0x9d -99 } : BV:8
98 : 18 { 0x12 +1.214e129 } : BV:32
99 : eq(92, 98) : BOOL
100 : 133 { 0x85 -123 } : BV:8
101 : eq(92, 42) : BOOL
102 : 72 { 0x48 } : BV:8
103 : eq(92, 88) : BOOL
104 : 194 { 0xc2 -62 } : BV:8
105 : 17 { 0x11 +1.202e129 } : BV:32
106 : eq(92, 105) : BOOL
107 : 129 { 0x81 -127 } : BV:8
108 : 19 { 0x13 +1.226e129 } : BV:32
109 : eq(92, 108) : BOOL
110 : 10 { 0xa } : BV:8
111 : 0 { 0x0 } : BV:8
112 : ite(109, 110, 111) : BV:8
113 : ite(106, 107, 112) : BV:8
114 : ite(103, 104, 113) : BV:8
115 : ite(101, 102, 114) : BV:8
116 : ite(99, 100, 115) : BV:8
117 : ite(96, 97, 116) : BV:8
118 : ite(93, 94, 117) : BV:8
119 : bvadd(46, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 95) : BOOL
122 : eq(119, 98) : BOOL
123 : eq(119, 42) : BOOL
124 : eq(119, 88) : BOOL
125 : eq(119, 105) : BOOL
126 : eq(119, 108) : BOOL
127 : ite(126, 110, 111) : BV:8
128 : ite(125, 107, 127) : BV:8
129 : ite(124, 104, 128) : BV:8
130 : ite(123, 102, 129) : BV:8
131 : ite(122, 100, 130) : BV:8
132 : ite(121, 97, 131) : BV:8
133 : ite(120, 94, 132) : BV:8
134 : bvadd(42, 91) : BV:32
135 : eq(134, 2) : BOOL
136 : eq(134, 95) : BOOL
137 : eq(134, 98) : BOOL
138 : eq(134, 42) : BOOL
139 : eq(134, 88) : BOOL
140 : eq(134, 105) : BOOL
141 : eq(134, 108) : BOOL
142 : ite(141, 110, 111) : BV:8
143 : ite(140, 107, 142) : BV:8
144 : ite(139, 104, 143) : BV:8
145 : ite(138, 102, 144) : BV:8
146 : ite(137, 100, 145) : BV:8
147 : ite(136, 97, 146) : BV:8
148 : ite(135, 94, 147) : BV:8
149 : eq(91, 2) : BOOL
150 : eq(91, 95) : BOOL
151 : eq(91, 98) : BOOL
152 : eq(91, 42) : BOOL
153 : eq(91, 88) : BOOL
154 : eq(91, 105) : BOOL
155 : eq(91, 108) : BOOL
156 : ite(155, 110, 111) : BV:8
157 : ite(154, 107, 156) : BV:8
158 : ite(153, 104, 157) : BV:8
159 : ite(152, 102, 158) : BV:8
160 : ite(151, 100, 159) : BV:8
161 : ite(150, 97, 160) : BV:8
162 : ite(149, 94, 161) : BV:8
163 : bvconcat(118, 133, 148, 162) : BV:32
164 : bvadd(88, 90, 163) : BV:32
165 : eq(164, 2) : BOOL
166 : eq(164, 95) : BOOL
167 : eq(164, 98) : BOOL
168 : eq(164, 42) : BOOL
169 : eq(164, 88) : BOOL
170 : eq(164, 105) : BOOL
171 : eq(164, 108) : BOOL
172 : ite(171, 110, 111) : BV:8
173 : ite(170, 107, 172) : BV:8
174 : ite(169, 104, 173) : BV:8
175 : ite(168, 102, 174) : BV:8
176 : ite(167, 100, 175) : BV:8
177 : ite(166, 97, 176) : BV:8
178 : ite(165, 94, 177) : BV:8
179 : bvadd(46, 90, 163) : BV:32
180 : eq(179, 2) : BOOL
181 : eq(179, 95) : BOOL
182 : eq(179, 98) : BOOL
183 : eq(179, 42) : BOOL
184 : eq(179, 88) : BOOL
185 : eq(179, 105) : BOOL
186 : eq(179, 108) : BOOL
187 : ite(186, 110, 111) : BV:8
188 : ite(185, 107, 187) : BV:8
189 : ite(184, 104, 188) : BV:8
190 : ite(183, 102, 189) : BV:8
191 : ite(182, 100, 190) : BV:8
192 : ite(181, 97, 191) : BV:8
193 : ite(180, 94, 192) : BV:8
194 : bvadd(42, 90, 163) : BV:32
195 : eq(194, 2) : BOOL
196 : eq(194, 95) : BOOL
197 : eq(194, 98) : BOOL
198 : eq(194, 42) : BOOL
199 : eq(194, 88) : BOOL
200 : eq(194, 105) : BOOL
201 : eq(194, 108) : BOOL
202 : ite(201, 110, 111) : BV:8
203 : ite(200, 107, 202) : BV:8
204 : ite(199, 104, 203) : BV:8
205 : ite(198, 102, 204) : BV:8
206 : ite(197, 100, 205) : BV:8
207 : ite(196, 97, 206) : BV:8
208 : ite(195, 94, 207) : BV:8
209 : bvadd(90, 163) : BV:32
210 : eq(209, 2) : BOOL
211 : eq(209, 95) : BOOL
212 : eq(209, 98) : BOOL
213 : eq(209, 42) : BOOL
214 : eq(209, 88) : BOOL
215 : eq(209, 105) : BOOL
216 : eq(209, 108) : BOOL
217 : ite(216, 110, 111) : BV:8
218 : ite(215, 107, 217) : BV:8
219 : ite(214, 104, 218) : BV:8
220 : ite(213, 102, 219) : BV:8
221 : ite(212, 100, 220) : BV:8
222 : ite(211, 97, 221) : BV:8
223 : ite(210, 94, 222) : BV:8
224 : bvconcat(178, 193, 208, 223) : BV:32
225 : ite(65, 2, 224) : BV:32
226 : ite(63, 2, 225) : BV:32
227 : ite(87, 224, 226) : BV:32
228 : ite(65, 2, 227) : BV:32
229 : ite(63, 2, 228) : BV:32
230 : lambda(60, 229) : FUNCTION[BV:32 -> BV:32]
231 : map(59, 230) : MAP[BV:32 -> BV:32]
232 : lambda(17, 231) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
233 : map(16, 232) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
234 : sym_const(233) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2396155 { 0x248ffb +1.28564393e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda62755Var : BV:32
2 : Lambda62756Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 3) : BOOL
16 : 40 { 0x28 } : BV:8
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(14, 17) : BOOL
19 : 157 { 0x9d -99 } : BV:8
20 : 18 { 0x12 +1.214e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 133 { 0x85 -123 } : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(14, 23) : BOOL
25 : 72 { 0x48 } : BV:8
26 : eq(14, 10) : BOOL
27 : 194 { 0xc2 -62 } : BV:8
28 : 17 { 0x11 +1.202e129 } : BV:32
29 : eq(14, 28) : BOOL
30 : 129 { 0x81 -127 } : BV:8
31 : 19 { 0x13 +1.226e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 10 { 0xa } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13) : BV:32
44 : eq(43, 3) : BOOL
45 : eq(43, 17) : BOOL
46 : eq(43, 20) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 10) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 25, 53) : BV:8
55 : ite(46, 22, 54) : BV:8
56 : ite(45, 19, 55) : BV:8
57 : ite(44, 16, 56) : BV:8
58 : bvadd(23, 13) : BV:32
59 : eq(58, 3) : BOOL
60 : eq(58, 17) : BOOL
61 : eq(58, 20) : BOOL
62 : eq(58, 23) : BOOL
63 : eq(58, 10) : BOOL
64 : eq(58, 28) : BOOL
65 : eq(58, 31) : BOOL
66 : ite(65, 33, 34) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 25, 68) : BV:8
70 : ite(61, 22, 69) : BV:8
71 : ite(60, 19, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : eq(13, 3) : BOOL
74 : eq(13, 17) : BOOL
75 : eq(13, 20) : BOOL
76 : eq(13, 23) : BOOL
77 : eq(13, 10) : BOOL
78 : eq(13, 28) : BOOL
79 : eq(13, 31) : BOOL
80 : ite(79, 33, 34) : BV:8
81 : ite(78, 30, 80) : BV:8
82 : ite(77, 27, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 22, 83) : BV:8
85 : ite(74, 19, 84) : BV:8
86 : ite(73, 16, 85) : BV:8
87 : bvconcat(41, 57, 72, 86) : BV:32
88 : bvadd(10, 12, 87) : BV:32
89 : eq(88, 3) : BOOL
90 : eq(88, 17) : BOOL
91 : eq(88, 20) : BOOL
92 : eq(88, 23) : BOOL
93 : eq(88, 10) : BOOL
94 : eq(88, 28) : BOOL
95 : eq(88, 31) : BOOL
96 : ite(95, 33, 34) : BV:8
97 : ite(94, 30, 96) : BV:8
98 : ite(93, 27, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 22, 99) : BV:8
101 : ite(90, 19, 100) : BV:8
102 : ite(89, 16, 101) : BV:8
103 : bvadd(42, 12, 87) : BV:32
104 : eq(103, 3) : BOOL
105 : eq(103, 17) : BOOL
106 : eq(103, 20) : BOOL
107 : eq(103, 23) : BOOL
108 : eq(103, 10) : BOOL
109 : eq(103, 28) : BOOL
110 : eq(103, 31) : BOOL
111 : ite(110, 33, 34) : BV:8
112 : ite(109, 30, 111) : BV:8
113 : ite(108, 27, 112) : BV:8
114 : ite(107, 25, 113) : BV:8
115 : ite(106, 22, 114) : BV:8
116 : ite(105, 19, 115) : BV:8
117 : ite(104, 16, 116) : BV:8
118 : bvadd(23, 12, 87) : BV:32
119 : eq(118, 3) : BOOL
120 : eq(118, 17) : BOOL
121 : eq(118, 20) : BOOL
122 : eq(118, 23) : BOOL
123 : eq(118, 10) : BOOL
124 : eq(118, 28) : BOOL
125 : eq(118, 31) : BOOL
126 : ite(125, 33, 34) : BV:8
127 : ite(124, 30, 126) : BV:8
128 : ite(123, 27, 127) : BV:8
129 : ite(122, 25, 128) : BV:8
130 : ite(121, 22, 129) : BV:8
131 : ite(120, 19, 130) : BV:8
132 : ite(119, 16, 131) : BV:8
133 : bvadd(12, 87) : BV:32
134 : eq(133, 3) : BOOL
135 : eq(133, 17) : BOOL
136 : eq(133, 20) : BOOL
137 : eq(133, 23) : BOOL
138 : eq(133, 10) : BOOL
139 : eq(133, 28) : BOOL
140 : eq(133, 31) : BOOL
141 : ite(140, 33, 34) : BV:8
142 : ite(139, 30, 141) : BV:8
143 : ite(138, 27, 142) : BV:8
144 : ite(137, 25, 143) : BV:8
145 : ite(136, 22, 144) : BV:8
146 : ite(135, 19, 145) : BV:8
147 : ite(134, 16, 146) : BV:8
148 : bvconcat(102, 117, 132, 147) : BV:32
149 : ite(9, 3, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda62757Var : BV:32
2 : Lambda62758Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
19 : bvule(18, 1) : BOOL
20 : bvule(1, 18) : BOOL
21 : and(19, 20) : BOOL
22 : ite(21, 18, 18) : BV:32
23 : ite(17, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 15) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda62767Var : BV:32
2 : Lambda62768Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
19 : bvule(18, 1) : BOOL
20 : bvule(1, 18) : BOOL
21 : and(19, 20) : BOOL
22 : ite(21, 18, 18) : BV:32
23 : ite(17, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 15) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda62771Var : BV:32
2 : Lambda62772Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : bvule(3, 1) : BOOL
11 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(7, 1) : BOOL
27 : and(26, 12) : BOOL
28 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
29 : bvule(28, 1) : BOOL
30 : and(29, 18) : BOOL
31 : bvule(1, 15) : BOOL
32 : and(16, 31) : BOOL
33 : ite(32, 15, 15) : BV:32
34 : ite(30, 28, 33) : BV:32
35 : ite(27, 7, 34) : BV:32
36 : ite(25, 3, 35) : BV:32
37 : eq(36, 7) : BOOL
38 : bvule(3, 2) : BOOL
39 : bvule(2, 3) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 3, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : or(53, 55) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 3) : BOOL
65 : 40 { 0x28 } : BV:8
66 : 16 { 0x10 +1.190e129 } : BV:32
67 : eq(63, 66) : BOOL
68 : 157 { 0x9d -99 } : BV:8
69 : 18 { 0x12 +1.214e129 } : BV:32
70 : eq(63, 69) : BOOL
71 : 133 { 0x85 -123 } : BV:8
72 : eq(63, 41) : BOOL
73 : 72 { 0x48 } : BV:8
74 : eq(63, 59) : BOOL
75 : 194 { 0xc2 -62 } : BV:8
76 : 17 { 0x11 +1.202e129 } : BV:32
77 : eq(63, 76) : BOOL
78 : 129 { 0x81 -127 } : BV:8
79 : 19 { 0x13 +1.226e129 } : BV:32
80 : eq(63, 79) : BOOL
81 : 10 { 0xa } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : bvadd(45, 62) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 66) : BOOL
93 : eq(90, 69) : BOOL
94 : eq(90, 41) : BOOL
95 : eq(90, 59) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 73, 100) : BV:8
102 : ite(93, 71, 101) : BV:8
103 : ite(92, 68, 102) : BV:8
104 : ite(91, 65, 103) : BV:8
105 : bvadd(41, 62) : BV:32
106 : eq(105, 3) : BOOL
107 : eq(105, 66) : BOOL
108 : eq(105, 69) : BOOL
109 : eq(105, 41) : BOOL
110 : eq(105, 59) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 73, 115) : BV:8
117 : ite(108, 71, 116) : BV:8
118 : ite(107, 68, 117) : BV:8
119 : ite(106, 65, 118) : BV:8
120 : eq(62, 3) : BOOL
121 : eq(62, 66) : BOOL
122 : eq(62, 69) : BOOL
123 : eq(62, 41) : BOOL
124 : eq(62, 59) : BOOL
125 : eq(62, 76) : BOOL
126 : eq(62, 79) : BOOL
127 : ite(126, 81, 82) : BV:8
128 : ite(125, 78, 127) : BV:8
129 : ite(124, 75, 128) : BV:8
130 : ite(123, 73, 129) : BV:8
131 : ite(122, 71, 130) : BV:8
132 : ite(121, 68, 131) : BV:8
133 : ite(120, 65, 132) : BV:8
134 : bvconcat(89, 104, 119, 133) : BV:32
135 : bvadd(59, 61, 134) : BV:32
136 : eq(135, 3) : BOOL
137 : eq(135, 66) : BOOL
138 : eq(135, 69) : BOOL
139 : eq(135, 41) : BOOL
140 : eq(135, 59) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : ite(142, 81, 82) : BV:8
144 : ite(141, 78, 143) : BV:8
145 : ite(140, 75, 144) : BV:8
146 : ite(139, 73, 145) : BV:8
147 : ite(138, 71, 146) : BV:8
148 : ite(137, 68, 147) : BV:8
149 : ite(136, 65, 148) : BV:8
150 : bvadd(45, 61, 134) : BV:32
151 : eq(150, 3) : BOOL
152 : eq(150, 66) : BOOL
153 : eq(150, 69) : BOOL
154 : eq(150, 41) : BOOL
155 : eq(150, 59) : BOOL
156 : eq(150, 76) : BOOL
157 : eq(150, 79) : BOOL
158 : ite(157, 81, 82) : BV:8
159 : ite(156, 78, 158) : BV:8
160 : ite(155, 75, 159) : BV:8
161 : ite(154, 73, 160) : BV:8
162 : ite(153, 71, 161) : BV:8
163 : ite(152, 68, 162) : BV:8
164 : ite(151, 65, 163) : BV:8
165 : bvadd(41, 61, 134) : BV:32
166 : eq(165, 3) : BOOL
167 : eq(165, 66) : BOOL
168 : eq(165, 69) : BOOL
169 : eq(165, 41) : BOOL
170 : eq(165, 59) : BOOL
171 : eq(165, 76) : BOOL
172 : eq(165, 79) : BOOL
173 : ite(172, 81, 82) : BV:8
174 : ite(171, 78, 173) : BV:8
175 : ite(170, 75, 174) : BV:8
176 : ite(169, 73, 175) : BV:8
177 : ite(168, 71, 176) : BV:8
178 : ite(167, 68, 177) : BV:8
179 : ite(166, 65, 178) : BV:8
180 : bvadd(61, 134) : BV:32
181 : eq(180, 3) : BOOL
182 : eq(180, 66) : BOOL
183 : eq(180, 69) : BOOL
184 : eq(180, 41) : BOOL
185 : eq(180, 59) : BOOL
186 : eq(180, 76) : BOOL
187 : eq(180, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 78, 188) : BV:8
190 : ite(185, 75, 189) : BV:8
191 : ite(184, 73, 190) : BV:8
192 : ite(183, 71, 191) : BV:8
193 : ite(182, 68, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(9, 3, 195) : BV:32
197 : ite(6, 3, 196) : BV:32
198 : ite(58, 195, 197) : BV:32
199 : ite(9, 3, 198) : BV:32
200 : ite(6, 3, 199) : BV:32
201 : lambda(1, 2, 200) : FUNCTION[BV:32,BV:32 -> BV:32]
202 : sym_const(201) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2022966925
=counter_example_end
=global nodece 65 num_edges_traversed 0
=global nodece 65 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 66
=global nodece 66 nodece z3.ce5358.num_edges_traversed2
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(epsilon)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3.ce5358 83b2177d2846165b0b158bc591e5484
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137962127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137962128; 137962131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 137962132; 807997699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807997700; 807997703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807997704; 1512563519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1512563520; 1512563523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1512563524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda64027Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda64028Var : BV:32
14 : lambda(13, 1) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : sum(9, 10, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sym_const(16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807997703 { 0x30291107 +1.32083213e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 137962131 { 0x8392293 +1.44636762e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1512563523 { 0x5a27e343 +1.31162297e53 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 66 num_edges_traversed 2
=global nodece 66 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 67
=global nodece 67 nodece z3v487.ce5340.num_edges_traversed2
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3v487.ce5340 48cddfad9557781fd2c336ca51ce64cb
=retaddr_const
1 : 459523490 { 0x1b63c5a2 +1.77946877e183 } : BV:32
=input.spec-%var-x-1
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 7603007 ] -> 0, [ 7603008; 7603008 ] -> 4, [ 7603009; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 7603007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7603008; 7603011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 7603012; 438370319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 438370320; 438370323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 438370324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda63965Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda63966Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 15) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 15) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 171169745 { 0xa33d7d1 +1.40502369e149 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 459523490 { 0x1b63c5a2 +1.77946877e183 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7603011 { 0x740343 +1.90634953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 438370323 { 0x1a210013 +1.25781476e181 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda817Var : BV:32
2 : Lambda818Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda825Var : BV:32
2 : Lambda826Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2975070850
=counter_example_end
=global nodece 67 num_edges_traversed 2
=global nodece 67 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 68
=global nodece 68 nodece z3.ce5322.num_edges_traversed2
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3.ce5322 f8ee1e92d53ae3beb2fde4f94d9eb3
=retaddr_const
1 : 325794367 { 0x136b3a3f +1.83771502e167 } : BV:32
=input.spec-%var-x-1
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 645922815 ] -> 8, [ 645922816; 645922819 ] -> 0, [ 645922820; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 645922815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 645922816; 645922819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 645922820; 2820053559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820053560; 2820053563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2820053564; 3494369115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3494369116; 3494369119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3494369120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.llvm-%m
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.llvm-%x
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda63903Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda63904Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : bvadd(8, 17, 18) : BV:32
45 : eq(44, 20) : BOOL
46 : eq(44, 23) : BOOL
47 : eq(44, 25) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 22, 29) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 22, 50) : BV:8
52 : ite(45, 22, 51) : BV:8
53 : bvadd(17, 18) : BV:32
54 : eq(53, 20) : BOOL
55 : eq(53, 23) : BOOL
56 : eq(53, 25) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 22, 29) : BV:8
59 : ite(56, 22, 58) : BV:8
60 : ite(55, 22, 59) : BV:8
61 : ite(54, 22, 60) : BV:8
62 : bvconcat(33, 43, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 20) : BOOL
65 : eq(63, 23) : BOOL
66 : eq(63, 25) : BOOL
67 : eq(63, 27) : BOOL
68 : ite(67, 22, 29) : BV:8
69 : ite(66, 22, 68) : BV:8
70 : ite(65, 22, 69) : BV:8
71 : ite(64, 22, 70) : BV:8
72 : bvadd(34, 16, 62) : BV:32
73 : eq(72, 20) : BOOL
74 : eq(72, 23) : BOOL
75 : eq(72, 25) : BOOL
76 : eq(72, 27) : BOOL
77 : ite(76, 22, 29) : BV:8
78 : ite(75, 22, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 22, 79) : BV:8
81 : bvadd(8, 16, 62) : BV:32
82 : eq(81, 20) : BOOL
83 : eq(81, 23) : BOOL
84 : eq(81, 25) : BOOL
85 : eq(81, 27) : BOOL
86 : ite(85, 22, 29) : BV:8
87 : ite(84, 22, 86) : BV:8
88 : ite(83, 22, 87) : BV:8
89 : ite(82, 22, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 20) : BOOL
92 : eq(90, 23) : BOOL
93 : eq(90, 25) : BOOL
94 : eq(90, 27) : BOOL
95 : ite(94, 22, 29) : BV:8
96 : ite(93, 22, 95) : BV:8
97 : ite(92, 22, 96) : BV:8
98 : ite(91, 22, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : sum(9, 10, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 897265922 { 0x357b3102 +1.96243309e235 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 325794367 { 0x136b3a3f +1.83771502e167 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 645922819 { 0x26800003 +1.35e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2820053563 { 0xa8169a3b -1474913733 -1.17658174e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3494369119 { 0xd047d75f -800598177 -1.56126010e33 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda828Var : BV:32
2 : Lambda829Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda836Var : BV:32
2 : Lambda837Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1222028159
=counter_example_end
=global nodece 68 num_edges_traversed 2
=global nodece 68 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 69
=global nodece 69 nodece z3.ce5304.num_edges_traversed2
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce5304 70249ef17c7d4c10126e3805924f6ad
=retaddr_const
1 : 427322464 { 0x19786c60 +1.94080734e179 } : BV:32
=input.spec-%var-x-1
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4247212035 ] -> 0, [ 4247212036; 4247212036 ] -> 2, [ 4247212037; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3094625979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094625980; 3094625983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3094625984; 3103785023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3103785024; 3103785027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3103785028; 4247212035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4247212036; 4247212039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4247212040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda63841Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda63842Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1896763661 { 0x710e510d +1.11184847e99 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 427322464 { 0x19786c60 +1.94080734e179 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3103785027 { 0xb9000043 -1191182269 -1.798e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3094625983 { 0xb8743ebf -1200341313 -1.90816485e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4247212039 { 0xfd275007 -47755257 -1.30712974e123 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1137Var : BV:32
2 : Lambda1138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1145Var : BV:32
2 : Lambda1146Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3669973894
=counter_example_end
=global nodece 69 num_edges_traversed 2
=global nodece 69 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 70
=global nodece 70 nodece z3v487.ce5286.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3v487.ce5286 cd62c5bd64fe9b3a07019dc40a153e5
=retaddr_const
1 : 737520530 { 0x2bf5ab92 +1.91929841e216 } : BV:32
=input.spec-%var-x-1
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1879429855 ] -> 0, [ 1879429856; 1879429856 ] -> 1, [ 1879429857; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1085498959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1085498960; 1085498963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1085498964; 1879429855 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1879429856; 1879429859 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1879429860; 3225801363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3225801364; 3225801367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3225801368; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1085498960 { 0x40b36650 +1.40155982e2 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3225801364 { 0xc045d294 -1069165932 -1.54548883e1 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda63779Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda63780Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 194177071 { 0xb92e82f +1.14771068e152 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 737520530 { 0x2bf5ab92 +1.91929841e216 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1085498960 { 0x40b36650 +1.40155982e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1085498963 { 0x40b36653 +1.40156018e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3225801364 { 0xc045d294 -1069165932 -1.54548883e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3225801367 { 0xc045d297 -1069165929 -1.54548919e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1879429859 { 0x7005d2e3 +1.4549825e97 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1362Var : BV:32
2 : Lambda1363Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1370Var : BV:32
2 : Lambda1371Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1879429856 { 0x7005d2e0 +1.4549789e97 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2606379763
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 71
=global nodece 71 nodece z3.ce5268.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3.ce5268 2aa5e24477382739ad7b6fcae8578c2b
=retaddr_const
1 : 561871738 { 0x217d7b7a +1.98033070e195 } : BV:32
=input.spec-%var-x-1
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3129957035 ] -> 0, [ 3129957036; 3129957039 ] -> 255, [ 3129957040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2231376759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2231376760; 2231376763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2231376764; 3129483643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129483644; 3129483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3129483648; 3129957035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129957036; 3129957039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3129957040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda63717Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda63718Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 1) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : bvadd(8, 17, 1) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 26) : BOOL
48 : ite(47, 21, 28) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 1) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 26) : BOOL
57 : ite(56, 21, 28) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(32, 42, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 26) : BOOL
67 : ite(66, 21, 28) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(33, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 26) : BOOL
76 : ite(75, 21, 28) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(8, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 26) : BOOL
85 : ite(84, 21, 28) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 26) : BOOL
94 : ite(93, 21, 28) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : sum(9, 10, 100) : SUM[UNIT,MAP[BV:32 -> BV:32]]
102 : sym_const(101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 376111491 { 0x166b0183 +1.83598363e173 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 561871738 { 0x217d7b7a +1.98033070e195 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2231376763 { 0x85001b7b -2063590533 -1.83863e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3129483647 { 0xba88217f -1165483649 -1.6352221e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2046Var : BV:32
2 : Lambda2047Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2054Var : BV:32
2 : Lambda2055Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3032852315
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 72
=global nodece 72 nodece z3v487.ce5196.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3v487.ce5196 35da658581d4678d3f257bca2d6c2e
=retaddr_const
1 : 1227124977 { 0x492470f1 +1.28469669e19 } : BV:32
=input.spec-%var-x-1
1 : Lambda29836Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29837Var : BV:32
18 : Lambda29838Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29839Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048580; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29861Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29862Var : BV:32
18 : Lambda29863Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29864Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda63485Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda63486Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1440867014 { 0x55e1e2c6 +1.76473307e44 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 738610315 { 0x2c064c8b +1.4921090e217 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1643700266 { 0x61f8e02a +1.94434094e68 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1227124977 { 0x492470f1 +1.28469669e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048579 { 0x100003 +1.12500035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
931862321
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 73
=global nodece 73 nodece z3v487.ce5178.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3v487.ce5178 aa45caa702d97854d519352c1beff9b
=retaddr_const
1 : 1730561001 { 0x672643e9 +1.29894745e79 } : BV:32
=input.spec-%var-x-1
1 : Lambda33710Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33711Var : BV:32
18 : Lambda33712Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33713Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 2097155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097156; 2097159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097160; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097156 { 0x200004 +1.25000047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33736Var : BV:32
18 : Lambda33737Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33738Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda63423Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda63424Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 60471100 { 0x39ab73c +1.20871686e136 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1385598812 { 0x52968f5c +1.17624998e38 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1730366767 { 0x67234d2f +1.27579295e79 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1730561001 { 0x672643e9 +1.29894745e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097156 { 0x200004 +1.25000047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097159 { 0x200007 +1.25000083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3735780448
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 74
=global nodece 74 nodece z3.ce5160.num_edges_traversed2
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3.ce5160 99d5c3d06cbdd2f69e1c41ceecd3b9
=retaddr_const
1 : 1033502117 { 0x3d99fda5 +1.20305311e252 } : BV:32
=input.spec-%var-x-1
1 : Lambda37474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37475Var : BV:32
18 : Lambda37476Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda37477Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1399082519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1399082520; 1399082523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1399082524; 1525054255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1525054256; 1525054259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1525054260; 4226068651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4226068652; 4226068655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4226068656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1399082520 { 0x53644e18 +1.78363323e39 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1525054256 { 0x5ae67b30 +1.80063438e54 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4226068652 { 0xfbe4b0ac -68898644 -1.78664159e120 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37500Var : BV:32
18 : Lambda37501Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda37502Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda63361Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda63362Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1204836206 { 0x47d0576e +1.62766814e16 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1993119772 { 0x76cc981c +1.59839200e110 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1706729539 { 0x65baa043 +1.45801579e76 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1033502117 { 0x3d99fda5 +1.20305311e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1525054256 { 0x5ae67b30 +1.80063438e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1525054259 { 0x5ae67b33 +1.80063474e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4226068652 { 0xfbe4b0ac -68898644 -1.78664159e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4226068655 { 0xfbe4b0af -68898641 -1.78664195e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1399082520 { 0x53644e18 +1.78363323e39 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1399082523 { 0x53644e1b +1.78363358e39 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4178231291
=counter_example_end
=global nodece 74 num_edges_traversed 2
=global nodece 74 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 75
=global nodece 75 nodece z3v487.ce5142.num_edges_traversed2
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(epsilon)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3v487.ce5142 af28ab11c1a2f47ee2276b2669bb94b5
=retaddr_const
1 : 1053943450 { 0x3ed1e69a +1.63984990e254 } : BV:32
=input.spec-%var-x-1
1 : Lambda41308Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41309Var : BV:32
18 : Lambda41310Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda41311Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483656; 2214592511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2214592512; 2214592515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2214592516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda41333Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41334Var : BV:32
18 : Lambda41335Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda41336Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda63299Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda63300Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 72549480 { 0x4530468 +1.64857196e137 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2088806359 { 0x7c80a7d7 +1.512206e122 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1943878915 { 0x73dd3d03 +1.72842442e104 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1053943450 { 0x3ed1e69a +1.63984990e254 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2214592515 { 0x84000003 -2080374781 -1.35e137 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
528661937
=counter_example_end
=global nodece 75 num_edges_traversed 2
=global nodece 75 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 76
=global nodece 76 nodece z3v487.ce5118.num_edges_traversed2
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3v487.ce5118 738e4289931da2bf5eb113c3f898bf29
=retaddr_const
1 : 1464281644 { 0x57472a2c +1.55597448e47 } : BV:32
=input.spec-%var-x-1
1 : Lambda44645Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda44646Var : BV:32
17 : Lambda44647Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda44648Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda44670Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda44671Var : BV:32
17 : Lambda44672Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda44673Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : and(8, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(6, 7, 11) : BOOL
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : ite(12, 13, 1) : BV:32
15 : unit : UNIT
16 : Lambda63219Var : BV:32
17 : lambda(16, 10) : FUNCTION[BV:32 -> BOOL]
18 : Lambda63220Var : BV:32
19 : lambda(18, 1) : FUNCTION[BV:32 -> BV:32]
20 : map(17, 19) : MAP[BV:32 -> BV:32]
21 : sum(14, 15, 20) : SUM[UNIT,MAP[BV:32 -> BV:32]]
22 : sym_const(21) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1074009398 { 0x40041536 +1.3189730e1 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1642629843 { 0x61e88ad3 +1.81673657e68 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 314325186 { 0x12bc38c2 +1.47048211e166 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1464281644 { 0x57472a2c +1.55597448e47 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2501248865
=counter_example_end
=global nodece 76 num_edges_traversed 2
=global nodece 76 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 41
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 44
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 45
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 77
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 done
=inductive-invariants point_set point z3.ce64
=inductive-invariants point_set point z3.ce64 expr point z3.ce64
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 4 for input.dst.llvm-%m
134744072
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 6 for input.dst.llvm-%x
134744072
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 done
=inductive-invariants point_set point z3v487.ce88
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 done
=inductive-invariants point_set point z3.ce87
=inductive-invariants point_set point z3.ce87 expr point z3.ce87
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 done
=inductive-invariants point_set point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 6 for input.dst.llvm-%x
32
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 done
=inductive-invariants point_set point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 done
=inductive-invariants point_set point z3v487.ce51
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 done
=inductive-invariants point_set point z3.ce112
=inductive-invariants point_set point z3.ce112 expr point z3.ce112
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce112 expr point z3.ce112 done
=inductive-invariants point_set point z3v487.ce232
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 done
=inductive-invariants point_set point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 done
=inductive-invariants point_set point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 done
=inductive-invariants point_set point z3v487.ce63
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 done
=inductive-invariants point_set point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 done
=inductive-invariants point_set point z3.ce231
=inductive-invariants point_set point z3.ce231 expr point z3.ce231
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 done
=inductive-invariants point_set point z3v487.ce255
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 done
=inductive-invariants point_set point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 done
=inductive-invariants point_set point z3.ce303
=inductive-invariants point_set point z3.ce303 expr point z3.ce303
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 done
=inductive-invariants point_set point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 done
=inductive-invariants point_set point z3.ce280
=inductive-invariants point_set point z3.ce280 expr point z3.ce280
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 6 for input.dst.llvm-%x
4208686592
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 done
=inductive-invariants point_set point z3v487.ce304
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 done
=inductive-invariants point_set point z3v487.ce111
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce111 expr point z3v487.ce111 done
=inductive-invariants point_set point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 done
=inductive-invariants point_set point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 done
=inductive-invariants point_set point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 4 for input.dst.llvm-%m
2155905152
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 done
=inductive-invariants point_set point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 done
=inductive-invariants point_set point z3.ce338
=inductive-invariants point_set point z3.ce338 expr point z3.ce338
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 4 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 done
=inductive-invariants point_set point z3v487.ce339
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 done
=inductive-invariants point_set point z3v487.ce2071
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2071 expr point z3v487.ce2071 done
=inductive-invariants point_set point z3v487.ce2029
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2029 expr point z3v487.ce2029 done
=inductive-invariants point_set point z3v487.ce1945
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1945 expr point z3v487.ce1945 done
=inductive-invariants point_set point z3.ce1818
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1818 expr point z3.ce1818 done
=inductive-invariants point_set point z3v487.ce1819
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 done
=inductive-invariants point_set point z3v487.ce1903
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1903 expr point z3v487.ce1903 done
=inductive-invariants point_set point z3.ce1860
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 done
=inductive-invariants point_set point z3v487.ce1861
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 done
=inductive-invariants point_set point z3.ce2028
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2028 expr point z3.ce2028 done
=inductive-invariants point_set point z3.ce1987
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1987 expr point z3.ce1987 done
=inductive-invariants point_set point z3.ce1902
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1902 expr point z3.ce1902 done
=inductive-invariants point_set point z3.ce2070
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2070 expr point z3.ce2070 done
=inductive-invariants point_set point z3.ce1944
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1944 expr point z3.ce1944 done
=inductive-invariants point_set point z3.ce2154
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2154 expr point z3.ce2154 done
=inductive-invariants point_set point z3v487.ce1986
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1986 expr point z3v487.ce1986 done
=inductive-invariants point_set point z3.ce2112
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2112 expr point z3.ce2112 done
=inductive-invariants point_set point z3v487.ce2113
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2113 expr point z3v487.ce2113 done
=inductive-invariants point_set point z3.ce2196
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2196 expr point z3.ce2196 done
=inductive-invariants point_set point z3v487.ce2155
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2155 expr point z3v487.ce2155 done
=inductive-invariants point_set point z3.ce2238
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2238 expr point z3.ce2238 done
=inductive-invariants point_set point z3v487.ce2197
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2197 expr point z3v487.ce2197 done
=inductive-invariants point_set point z3v487.ce2280
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2280 expr point z3v487.ce2280 done
=inductive-invariants point_set point z3v487.ce2239
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2239 expr point z3v487.ce2239 done
=inductive-invariants point_set point z3v487.ce2322
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2322 expr point z3v487.ce2322 done
=inductive-invariants point_set point z3.ce2281
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2281 expr point z3.ce2281 done
=inductive-invariants point_set point z3.ce2323
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2323 expr point z3.ce2323 done
=inductive-invariants point_set point z3.ce3214
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 5 for input.dst.llvm-%n
16
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3214 expr point z3.ce3214 done
=inductive-invariants point_set point z3v487.ce3264
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3264 expr point z3v487.ce3264 done
=inductive-invariants point_set point z3.ce3238
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3238 expr point z3.ce3238 done
=inductive-invariants point_set point z3v487.ce3224
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3224 expr point z3v487.ce3224 done
=inductive-invariants point_set point z3v487.ce3330
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 40 for input.spec-%var-i-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 done
=inductive-invariants point_set point z3.ce3284
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 6 for input.dst.llvm-%x
32
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3284 expr point z3.ce3284 done
=inductive-invariants point_set point z3v487.ce3294
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3294 expr point z3v487.ce3294 done
=inductive-invariants point_set point z3v487.ce3475
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3475 expr point z3v487.ce3475 done
=inductive-invariants point_set point z3.ce3502
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3502 expr point z3.ce3502 done
=inductive-invariants point_set point z3v487.ce3501
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 5 for input.dst.llvm-%n
3
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3501 expr point z3v487.ce3501 done
=inductive-invariants point_set point z3v487.ce3547
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3547 expr point z3v487.ce3547 done
=inductive-invariants point_set point z3.ce3548
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 5 for input.dst.llvm-%n
1073741826
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3548 expr point z3.ce3548 done
=inductive-invariants point_set point z3.ce3697
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 2 for input.spec-%var-i-1.L3%7%bbentry
5
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 done
=inductive-invariants point_set point z3v487.ce3698
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 2 for input.spec-%var-i-1.L3%7%bbentry
5
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3698 expr point z3v487.ce3698 done
=inductive-invariants point_set point z3.ce3743
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 2 for input.spec-%var-i-1.L3%7%bbentry
102401489
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 4 for input.dst.llvm-%m
128
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 5 for input.dst.llvm-%n
341116880
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
102401489
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 40 for input.spec-%var-i-0.L3%19%bbentry
102401489
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
102401490
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3743 expr point z3.ce3743 done
=inductive-invariants point_set point z3v487.ce3599
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3599 expr point z3v487.ce3599 done
=inductive-invariants point_set point z3.ce3600
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 5 for input.dst.llvm-%n
2147483650
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3600 expr point z3.ce3600 done
=inductive-invariants point_set point z3v487.ce3645
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 4 for input.dst.llvm-%m
64
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 40 for input.spec-%var-i-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3645 expr point z3v487.ce3645 done
=inductive-invariants point_set point z3.ce3646
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 5 for input.dst.llvm-%n
33554434
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 40 for input.spec-%var-i-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3646 expr point z3.ce3646 done
=inductive-invariants point_set point z3v487.ce3744
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 2 for input.spec-%var-i-1.L3%7%bbentry
1083082321
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 4 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 5 for input.dst.llvm-%n
3225881924
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1083082321
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 40 for input.spec-%var-i-0.L3%19%bbentry
1083082321
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1083082322
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3744 expr point z3v487.ce3744 done
=inductive-invariants point_set point z3v487.ce3796
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 5 for input.dst.llvm-%n
4294279024
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3796 expr point z3v487.ce3796 done
=inductive-invariants point_set point z3.ce3795
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 4 for input.dst.llvm-%m
512
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 5 for input.dst.llvm-%n
4016830072
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483647
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3795 expr point z3.ce3795 done
=inductive-invariants point_set point z3v487.ce3847
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3847 expr point z3v487.ce3847 done
=inductive-invariants point_set point z3v487.ce3893
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 2 for input.spec-%var-i-1.L3%7%bbentry
2150930433
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 5 for input.dst.llvm-%n
2686003456
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2150930433
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 40 for input.spec-%var-i-0.L3%19%bbentry
2150930433
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2150930434
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3893 expr point z3v487.ce3893 done
=inductive-invariants point_set point z3.ce3848
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 5 for input.dst.llvm-%n
3221208634
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3848 expr point z3.ce3848 done
=inductive-invariants point_set point z3v487.ce3927
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 2 for input.spec-%var-i-1.L3%7%bbentry
2150930434
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 5 for input.dst.llvm-%n
2686003456
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2150930434
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 40 for input.spec-%var-i-0.L3%19%bbentry
2150930434
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2150930435
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3927 expr point z3v487.ce3927 done
=inductive-invariants point_set point z3.ce3894
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 2 for input.spec-%var-i-1.L3%7%bbentry
2421378625
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 5 for input.dst.llvm-%n
3257248898
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2421378625
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 40 for input.spec-%var-i-0.L3%19%bbentry
2421378625
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2421378626
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3894 expr point z3.ce3894 done
=inductive-invariants point_set point z3v487.ce3978
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 4 for input.dst.llvm-%m
16
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 40 for input.spec-%var-i-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3978 expr point z3v487.ce3978 done
=inductive-invariants point_set point z3.ce3977
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 40 for input.spec-%var-i-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3977 expr point z3.ce3977 done
=inductive-invariants point_set point z3v487.ce4029
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4029 expr point z3v487.ce4029 done
=inductive-invariants point_set point z3.ce4030
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4030 expr point z3.ce4030 done
=inductive-invariants point_set point z3v487.ce4295
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 4 for input.dst.llvm-%m
2155905152
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 41 for input.spec-%var-ret-0.L3%19%bbentry
2139062144
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2139062144
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4295 expr point z3v487.ce4295 done
=inductive-invariants point_set point z3.ce4122
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 2 for input.spec-%var-i-1.L3%7%bbentry
310378495
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 4 for input.dst.llvm-%m
268435456
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 5 for input.dst.llvm-%n
327071646
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 6 for input.dst.llvm-%x
2768240640
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
310378495
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 40 for input.spec-%var-i-0.L3%19%bbentry
310378495
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
310378496
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 done
=inductive-invariants point_set point z3v487.ce4106
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 2 for input.spec-%var-i-1.L3%7%bbentry
289947647
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 4 for input.dst.llvm-%m
256
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 5 for input.dst.llvm-%n
2232950784
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 6 for input.dst.llvm-%x
1091064832
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
289947647
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 40 for input.spec-%var-i-0.L3%19%bbentry
289947647
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
289947648
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4106 expr point z3v487.ce4106 done
=inductive-invariants point_set point z3.ce4358
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4358 expr point z3.ce4358 done
=inductive-invariants point_set point z3.ce4395
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4395 expr point z3.ce4395 done
=inductive-invariants point_set point z3v487.ce4468
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 4 for input.dst.llvm-%m
64
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 40 for input.spec-%var-i-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4468 expr point z3v487.ce4468 done
=inductive-invariants point_set point z3.ce4550
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 4 for input.dst.llvm-%m
64
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 6 for input.dst.llvm-%x
2147483644
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4550 expr point z3.ce4550 done
=inductive-invariants point_set point z3v487.ce4551
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 6 for input.dst.llvm-%x
2839543804
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4551 expr point z3v487.ce4551 done
=inductive-invariants point_set point z3.ce4706
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 2 for input.spec-%var-i-1.L3%7%bbentry
3834331656
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 5 for input.dst.llvm-%n
3838509578
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 6 for input.dst.llvm-%x
1864370148
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3834331656
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 40 for input.spec-%var-i-0.L3%19%bbentry
3834331656
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3834331657
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4706 expr point z3.ce4706 done
=inductive-invariants point_set point z3v487.ce4769
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 2 for input.spec-%var-i-1.L3%7%bbentry
1048575
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 4 for input.dst.llvm-%m
9
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 5 for input.dst.llvm-%n
1835008
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 6 for input.dst.llvm-%x
4290772992
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1048575
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 40 for input.spec-%var-i-0.L3%19%bbentry
1048575
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1048576
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4769 expr point z3v487.ce4769 done
=inductive-invariants point_set point z3.ce4768
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 2 for input.spec-%var-i-1.L3%7%bbentry
139345681
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 4 for input.dst.llvm-%m
262150
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 5 for input.dst.llvm-%n
2158705968
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 6 for input.dst.llvm-%x
1187447736
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
139345681
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 40 for input.spec-%var-i-0.L3%19%bbentry
139345681
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
139345682
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4768 expr point z3.ce4768 done
=inductive-invariants point_set point z3.ce4663
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 2 for input.spec-%var-i-1.L3%7%bbentry
3834331655
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 5 for input.dst.llvm-%n
3838509578
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 6 for input.dst.llvm-%x
1864370148
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3834331655
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 40 for input.spec-%var-i-0.L3%19%bbentry
3834331655
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3834331656
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4663 expr point z3.ce4663 done
=inductive-invariants point_set point z3v487.ce4664
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 2 for input.spec-%var-i-1.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 4 for input.dst.llvm-%m
514
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 5 for input.dst.llvm-%n
3221191944
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 40 for input.spec-%var-i-0.L3%19%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4664 expr point z3v487.ce4664 done
=inductive-invariants point_set point z3v487.ce4865
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 2 for input.spec-%var-i-1.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 4 for input.dst.llvm-%m
536870916
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 6 for input.dst.llvm-%x
1207959552
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 39 for input.spec-%var-j-0.L3%19%bbentry
536870913
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 40 for input.spec-%var-i-0.L3%19%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536870913
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4865 expr point z3v487.ce4865 done
=inductive-invariants point_set point z3.ce4864
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 2 for input.spec-%var-i-1.L3%7%bbentry
180879359
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 4 for input.dst.llvm-%m
446693377
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 5 for input.dst.llvm-%n
322969600
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 6 for input.dst.llvm-%x
417333248
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
180879359
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 39 for input.spec-%var-j-0.L3%19%bbentry
322969601
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 40 for input.spec-%var-i-0.L3%19%bbentry
180879359
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
180879360
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
322969601
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4864 expr point z3.ce4864 done
=inductive-invariants point_set point z3v487.ce4960
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 4 for input.dst.llvm-%m
1509704288
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 5 for input.dst.llvm-%n
3725459456
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4960 expr point z3v487.ce4960 done
=inductive-invariants point_set point z3v487.ce4990
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 4 for input.dst.llvm-%m
1509704288
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 5 for input.dst.llvm-%n
3725459456
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4990 expr point z3v487.ce4990 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L3%19%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce64
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce87
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce28
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce63
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce111
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce3224
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce4960
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=10; number of preds=3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 8->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3224
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce3501
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce3697
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce3599
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3847
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce4029
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce64
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce183
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce3224
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce3501
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce3697
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3v487.ce3599
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce3847
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3v487.ce4029
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce64
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3v487.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3v487.ce3224
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name local-sizes-are-equal
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L3%19%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 45
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.45
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-32-free_var_idx.44
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.43
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.42
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-1.L3%7%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.40
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 6
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce28
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce51
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce1818
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce1860
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce1902
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce3294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce4295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce4122
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce4395
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce4550
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce4551
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3v487.ce4990
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=13; number of visited CEs=14; number of preds=7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 45->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 45->0; 
40
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->1; 41->0; 42->0; 43->0; 44->0; 45->0; 
42
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->0; 42->1; 43->0; 44->0; 45->0; 
43
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->4294967295; 40->0; 41->0; 42->0; 43->1; 44->0; 45->0; 
44
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->1; 45->0; 
45
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->4294967295; 42->0; 43->0; 44->0; 45->1; 
matrix done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce4295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce4768
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce4663
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce3330
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce3294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce3743
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce3645
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3893
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce3294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce3547
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce3645
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce3795
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3.ce3977
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce51
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce338
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce1944
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce3330
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3v487.ce3294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3.ce3743
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 4: z3v487.ce3645
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 5: z3v487.ce3893
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 1: z3v487.ce4295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 2: z3.ce4768
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 3: z3.ce4663
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini name dst-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini expr_group_type HOUDINI with 48 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 47
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 49
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 51
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 59
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 63
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 1: z3v487.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 2: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 3: z3.ce338
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 4: z3v487.ce3294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 5: z3v487.ce3893
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 6: z3v487.ce4295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 7: z3.ce4550
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 8: z3.ce4864
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based name spec-coupling-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 73
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 74
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 77
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini name local-sizes-are-equal
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-1.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L3%19%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvugt(4, 1) : BOOL
6 : not(5) : BOOL
7 : or(5, 6) : BOOL
8 : and(3, 7) : BOOL
9 : not(8) : BOOL
10 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
11 : input.spec-%var-j-0.L3%19%bbentry : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 0 { 0x0 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
16 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
17 : map_get(15, 16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
18 : 1 { 0x1 +1.0e1025 } : INT
19 : sum_is(17, 18) : BOOL
20 : and(14, 19) : BOOL
21 : sum_is(12, 18) : BOOL
22 : input.spec-%var-i-0.L3%19%bbentry : BV:32
23 : bvugt(22, 11) : BOOL
24 : not(23) : BOOL
25 : or(23, 24) : BOOL
26 : and(21, 25) : BOOL
27 : or(20, 26) : BOOL
28 : or(9, 27) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L3%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%19%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=SRC Ranking expr 3
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 2
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 3
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 4
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 5
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 6
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140505 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140394 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140506 : select(140392, 140393, 140505, 140394, 140378, 140379) : BV:32
=RhsExpr
140395 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140507 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140396 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140508 : select(140392, 140393, 140507, 140396, 140378, 140379) : BV:32
=RhsExpr
140397 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140509 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140510 : select(140392, 140393, 140509, 140398, 140378, 140379) : BV:32
=RhsExpr
140399 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140399 : input.dst.llvm-%x : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140405 : islangaligned(140399, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
141077 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
141079 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
141080 : bvule(141077, 141079) : BOOL
140375 : 4 { 0x4 +1.47e129 } : BV:32
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141081 : bvadd(140375, 140337) : BV:32
141082 : bvadd(141077, 141081) : BV:32
141083 : eq(141079, 141082) : BOOL
141084 : and(141080, 141083) : BOOL
141085 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
141086 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
141087 : bvule(141085, 141086) : BOOL
141088 : and(141084, 141087) : BOOL
141089 : bvadd(141085, 141081) : BV:32
141090 : eq(141086, 141089) : BOOL
141091 : and(141088, 141090) : BOOL
141092 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
141093 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
141094 : bvule(141092, 141093) : BOOL
141095 : and(141091, 141094) : BOOL
141096 : bvadd(141092, 141081) : BV:32
141097 : eq(141093, 141096) : BOOL
141098 : and(141095, 141097) : BOOL
141099 : bvuge(141077, 141085) : BOOL
141100 : bvule(141077, 141086) : BOOL
141101 : and(141099, 141100) : BOOL
141103 : bvuge(141079, 141085) : BOOL
141104 : bvule(141079, 141086) : BOOL
141105 : and(141103, 141104) : BOOL
141106 : not(141105) : BOOL
141107 : andnot1(141101, 141106) : BOOL
141102 : bvuge(141085, 141077) : BOOL
141108 : bvule(141085, 141079) : BOOL
141109 : and(141102, 141108) : BOOL
141111 : bvuge(141086, 141077) : BOOL
141112 : bvule(141086, 141079) : BOOL
141113 : and(141111, 141112) : BOOL
141114 : not(141113) : BOOL
141115 : andnot1(141109, 141114) : BOOL
141110 : and(141107, 141115) : BOOL
141116 : bvuge(141077, 141092) : BOOL
141117 : bvule(141077, 141093) : BOOL
141118 : and(141116, 141117) : BOOL
141120 : bvuge(141079, 141092) : BOOL
141121 : bvule(141079, 141093) : BOOL
141122 : and(141120, 141121) : BOOL
141123 : not(141122) : BOOL
141124 : andnot1(141118, 141123) : BOOL
141127 : and(141110, 141124) : BOOL
141119 : bvuge(141092, 141077) : BOOL
141125 : bvule(141092, 141079) : BOOL
141126 : and(141119, 141125) : BOOL
141128 : bvuge(141093, 141077) : BOOL
141129 : bvule(141093, 141079) : BOOL
141130 : and(141128, 141129) : BOOL
141131 : not(141130) : BOOL
141132 : andnot1(141126, 141131) : BOOL
141133 : and(141127, 141132) : BOOL
141134 : bvuge(141085, 141092) : BOOL
141135 : bvule(141085, 141093) : BOOL
141136 : and(141134, 141135) : BOOL
141138 : bvuge(141086, 141092) : BOOL
141139 : bvule(141086, 141093) : BOOL
141140 : and(141138, 141139) : BOOL
141141 : not(141140) : BOOL
141142 : andnot1(141136, 141141) : BOOL
141145 : and(141133, 141142) : BOOL
141137 : bvuge(141092, 141085) : BOOL
141143 : bvule(141092, 141086) : BOOL
141144 : and(141137, 141143) : BOOL
141146 : bvuge(141093, 141085) : BOOL
141147 : bvule(141093, 141086) : BOOL
141148 : and(141146, 141147) : BOOL
141149 : not(141148) : BOOL
141150 : andnot1(141144, 141149) : BOOL
141151 : and(141145, 141150) : BOOL
141152 : and(141098, 141151) : BOOL
140396 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
141153 : 3 { 0x3 +1.35e129 } : BV:32
141154 : bvand(140396, 141153) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141155 : eq(141154, 140276) : BOOL
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
141156 : bvand(140398, 141153) : BV:32
141157 : eq(141156, 140276) : BOOL
141158 : and(141155, 141157) : BOOL
140394 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
141159 : bvand(140394, 141153) : BV:32
141160 : eq(141159, 140276) : BOOL
141161 : and(141158, 141160) : BOOL
141162 : and(141152, 141161) : BOOL
141163 : eq(140396, 141077) : BOOL
141164 : eq(140398, 141085) : BOOL
141165 : and(141163, 141164) : BOOL
141166 : eq(140394, 141092) : BOOL
141167 : and(141165, 141166) : BOOL
141168 : and(141162, 141167) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140359 : Lambda0Var : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140363 : bvule(140276, 140359) : BOOL
140397 : input.dst.llvm-%n : BV:32
141170 : bvult(140359, 140397) : BOOL
141171 : and(140363, 141170) : BOOL
141172 : lambda(140359, 141171) : FUNCTION[BV:32 -> BOOL]
140360 : Lambda1Var : BV:32
140367 : bvule(140276, 140360) : BOOL
140395 : input.dst.llvm-%m : BV:32
141173 : bvult(140360, 140395) : BOOL
141192 : and(140367, 141173) : BOOL
141193 : lambda(140360, 141192) : FUNCTION[BV:32 -> BOOL]
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
141169 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
140375 : 4 { 0x4 +1.47e129 } : BV:32
140381 : bvmul(140360, 140375) : BV:32
140376 : bvmul(140359, 140375) : BV:32
140399 : input.dst.llvm-%x : BV:32
141213 : bvadd(140376, 140399) : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
141233 : select(140392, 140393, 141169, 141213, 140378, 140379) : BV:32
141234 : bvadd(140381, 141233) : BV:32
141235 : select(140392, 140393, 141169, 141234, 140378, 140379) : BV:32
141236 : lambda(140360, 141235) : FUNCTION[BV:32 -> BV:32]
141237 : map(141193, 141236) : MAP[BV:32 -> BV:32]
141238 : lambda(140359, 141237) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141239 : map(141172, 141238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141240 : eq(140273, 141239) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
fold-conjunct
=LhsExpr
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140395 : input.dst.llvm-%m : BV:32
140710 : bvult(140700, 140395) : BOOL
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140701 : bvugt(140699, 140700) : BOOL
204367 : not(140701) : BOOL
204368 : or(140701, 204367) : BOOL
204379 : and(140710, 204368) : BOOL
140555 : 4 { 0x4 +1.0e1025 } : BV:64
140426 : 32 { 0x20 +1.0e1025 } : INT
140729 : bvsign_ext(140699, 140426) : BV:64
140880 : bvmul(140555, 140729) : BV:64
140430 : 63 { 0x3f +1.0e1025 } : INT
140881 : bvextract(140880, 140430, 140426) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140728 : bvslt(140699, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140894 : ite(140728, 140337, 140276) : BV:32
140896 : eq(140881, 140894) : BOOL
140378 : 4 { 0x4 +1.0e1025 } : INT
140898 : isindexforsize(140896, 140378) : BOOL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140900 : isgepoffset(140824, 140821) : BOOL
140904 : islangaligned(140824, 140378) : BOOL
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140906 : islangaligned(140830, 140378) : BOOL
140909 : and(140904, 140906) : BOOL
140744 : bvsign_ext(140700, 140426) : BV:64
140922 : bvmul(140555, 140744) : BV:64
140923 : bvextract(140922, 140430, 140426) : BV:32
140743 : bvslt(140700, 140276) : BOOL
140936 : ite(140743, 140337, 140276) : BV:32
140938 : eq(140923, 140936) : BOOL
140940 : isindexforsize(140938, 140378) : BOOL
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140942 : isgepoffset(140835, 140833) : BOOL
140947 : and(140898, 140900, 140904, 140909, 140940, 140942) : BOOL
140862 : islangaligned(140835, 140378) : BOOL
204456 : and(140947, 140862) : BOOL
140275 : 1 { 0x1 } : BOOL
205561 : eq(204456, 140275) : BOOL
206693 : implies(204367, 205561) : BOOL
206694 : implies(140701, 205561) : BOOL
206695 : and(206693, 206694) : BOOL
205570 : eq(206695, 140275) : BOOL
206691 : implies(204379, 205570) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 5
=bv_rank at L3%19%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 9
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
