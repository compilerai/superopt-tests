=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%7%bbentry L3%8%d L3%9%bbentry L3%11%bbentry L3%19%bbentry L3%20%d L3%21%bbentry L3%23%bbentry L3%27%d L3%28%bbentry L3%29%bbentry L3%32%bbentry E0%0%d
=Edges:
L0%0%d => L3%7%bbentry
L3%7%bbentry => L3%8%d
L3%8%d => L3%11%bbentry
L3%8%d => L3%9%bbentry
L3%9%bbentry => E0%0%d
L3%11%bbentry => L3%19%bbentry
L3%19%bbentry => L3%20%d
L3%20%d => L3%23%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%7%bbentry (backedge) 
L3%23%bbentry => L3%27%d
L3%27%d => L3%29%bbentry
L3%27%d => L3%28%bbentry
L3%28%bbentry => L3%32%bbentry
L3%29%bbentry => L3%32%bbentry
L3%32%bbentry => L3%19%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%19%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%23%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%27%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%28%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%29%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%32%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%7%bbentry => L3%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%8%d => L3%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%8%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%11%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%19%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%23%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-1.L3%7%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%23%bbentry => L3%27%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%27%d
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%27%d
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L3%27%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*intrinsic_app_bvugt)
tfg_edge_comment end

=Edge: L3%27%d => L3%29%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_false_split
tfg_edge_comment end

=Edge: L3%27%d => L3%28%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_true_split
tfg_edge_comment end

=Edge: L3%28%bbentry => L3%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvadd)*ite_true_merge)
tfg_edge_comment end

=Edge: L3%29%bbentry => L3%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvsub)*ite_false_merge)
tfg_edge_comment end

=Edge: L3%32%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 35 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 36 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%8%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%20%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%27%d
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=Loc 40 in src.spec.foo.
REGMEM
spec-%var-i-1.L3%7%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 42 in src.spec.foo.
REGMEM
spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-16.E0%0%d
1 : input.spec-%tmpvar-16.E0%0%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%27%d
1 : input.spec-%tmpvar-1.L3%27%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%27%d
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L3%27%d
1 : input.spec-%var-x_ij-0.L3%27%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L3%7%bbentry
1 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L3%7%bbentry
1 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L3%19%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%tmpvar-14.L3%7%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%tmpvar-8.L3%7%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%7%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%7%bbentry
1 : input.spec-%var-u-0.L3%7%bbentry : UNIT
=Loc 63 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=Loc 64 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%19%bbentry
1 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=Loc 66 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L3%19%bbentry
1 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 68 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%tmpvar-4.L3%32%bbentry : BV:32
=Loc 69 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%tmpvar-5.L3%32%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%7%bbentry
40, 41, 48, 
=live locs at L3%8%d
37, 40, 41, 48, 
=live locs at L3%9%bbentry
48, 
=live locs at L3%11%bbentry
37, 40, 41, 48, 
=live locs at L3%19%bbentry
41, 42, 43, 52, 57, 61, 
=live locs at L3%20%d
38, 41, 42, 43, 52, 57, 61, 
=live locs at L3%21%bbentry
41, 57, 61, 
=live locs at L3%23%bbentry
38, 41, 42, 43, 52, 57, 61, 
=live locs at L3%27%d
39, 41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%28%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%29%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%32%bbentry
41, 43, 51, 52, 57, 63, 
=live locs at E0%0%d
47[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 35, 36
=loc definedness at L3%7%bbentry
1, 35, 36, 40, 41, 48, 54, 55, 56
=loc definedness at L3%8%d
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%9%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%11%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%19%bbentry
1, 35, 36, 37, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%20%d
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%21%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%23%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%27%d
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%28%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%29%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%32%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67
=loc definedness at E0%0%d
1, 35, 36, 37, 40, 41, 44, 45, 46, 47, 48, 49, 54, 55, 56

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%7%bbentry
40, 41
=branch affecting variable locs at L3%8%d
37, 40, 41
=branch affecting variable locs at L3%9%bbentry

=branch affecting variable locs at L3%11%bbentry
37, 40, 41
=branch affecting variable locs at L3%19%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L3%20%d
38, 41, 42, 43, 52, 57
=branch affecting variable locs at L3%21%bbentry
41, 57
=branch affecting variable locs at L3%23%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L3%27%d
39, 41, 43, 51, 52, 57
=branch affecting variable locs at L3%28%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L3%29%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L3%32%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 40 {input.spec-%var-i-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 41 {input.spec-%var-x-0.L3%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 48 {input.spec-%var-ret-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 54 {input.spec-%tmpvar-18.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 55 {input.spec-%tmpvar-19.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d for loc_id 37 {input.spec-%tmpvar-10.L3%8%d }
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 44 {input.spec-%tmpvar-16.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 45 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 46 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 47 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 49 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 42 {input.spec-%var-j-0.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 43 {input.spec-%var-x_i-0.L3%19%bbentry }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-i-0.L3%19%bbentry }
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 57 {input.spec-%tmpvar-12.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 65 {input.spec-%tmpvar-11.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 66 {input.spec-%tmpvar-13.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 67 {input.spec-%var-x_i-1.L3%19%bbentry }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d for loc_id 38 {input.spec-%tmpvar-0.L3%20%d }
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 40 {input.spec-%var-i-1.L3%7%bbentry }
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 48 {input.spec-%var-ret-1.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 58 {input.spec-%tmpvar-14.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 59 {input.spec-%tmpvar-8.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 60 {input.spec-%tmpvar-9.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 62 {input.spec-%var-u-0.L3%7%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 39 {input.spec-%tmpvar-3.L3%27%d }
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 50 {input.spec-%tmpvar-1.L3%27%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 51 {input.spec-%tmpvar-2.L3%27%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 53 {input.spec-%var-x_ij-0.L3%27%d }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d done
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%28%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%28%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%29%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%29%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry for loc_id 63 {input.spec-%tmpvar-6.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry for loc_id 68 {input.spec-%tmpvar-4.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry for loc_id 63 {input.spec-%tmpvar-6.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry for loc_id 69 {input.spec-%tmpvar-5.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 42 {input.spec-%var-j-0.L3%19%bbentry }
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%7%bbentry:
vacuous mls at L3%8%d:
vacuous mls at L3%9%bbentry:
vacuous mls at L3%11%bbentry:
vacuous mls at L3%19%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%23%bbentry:
vacuous mls at L3%27%d:
vacuous mls at L3%28%bbentry:
vacuous mls at L3%29%bbentry:
vacuous mls at L3%32%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%7%bbentry:
non-vacuous mls at L3%8%d:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at L3%11%bbentry:
non-vacuous mls at L3%19%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%23%bbentry:
non-vacuous mls at L3%27%d:
non-vacuous mls at L3%28%bbentry:
non-vacuous mls at L3%29%bbentry:
non-vacuous mls at L3%32%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 41
=loc_expr
140584 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 50
=loc_expr
140617 : input.spec-%tmpvar-1.L3%27%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140618 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140619 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 65
=loc_expr
140624 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 66
=loc_expr
140625 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 50 expr
1 : input.spec-%tmpvar-1.L3%27%d : BV:32
=loc 50 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=loc 55 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 65 expr
1 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=loc 65 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 66 expr
1 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=loc 66 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 50 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%bbentry=>L3%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%9%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%11%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%11%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%19%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%23%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%23%bbentry=>L3%27%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%27%d=>L3%28%bbentry
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%27%d=>L3%29%bbentry
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%28%bbentry=>L3%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%29%bbentry=>L3%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%32%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%7%bbentry
=spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%bbentry=>L3%8%d
=spec-%tmpvar-10.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>E0%0%d
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%11%bbentry=>L3%19%bbentry
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%19%bbentry=>L3%20%d
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%23%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%7%bbentry
=spec-%var-i-1.L3%7%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%23%bbentry=>L3%27%d
=spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%27%d
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L3%27%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%27%d=>L3%28%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%27%d=>L3%29%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%28%bbentry=>L3%32%bbentry
=spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%29%bbentry=>L3%32%bbentry
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%32%bbentry=>L3%19%bbentry
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%27%d
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%27%d done
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%28%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%28%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%29%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%29%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%28%bbentry=>L3%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%28%bbentry=>L3%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%29%bbentry=>L3%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%29%bbentry=>L3%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%7%bbentry for src.spec.foo
=suffixpath_at_L3%7%bbentry.graph_edge_composition
(L0%0%d=>L3%7%bbentry)
=suffixpath_at_L3%8%d for src.spec.foo
=suffixpath_at_L3%8%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*(L3%7%bbentry=>L3%8%d))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%9%bbentry)))
=suffixpath_at_L3%11%bbentry for src.spec.foo
=suffixpath_at_L3%11%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%11%bbentry)))
=suffixpath_at_L3%19%bbentry for src.spec.foo
=suffixpath_at_L3%19%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*(L3%11%bbentry=>L3%19%bbentry))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*(L3%19%bbentry=>L3%20%d)))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry))))))
=suffixpath_at_L3%23%bbentry for src.spec.foo
=suffixpath_at_L3%23%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%23%bbentry))))))
=suffixpath_at_L3%27%d for src.spec.foo
=suffixpath_at_L3%27%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*(L3%23%bbentry=>L3%27%d)))))))
=suffixpath_at_L3%28%bbentry for src.spec.foo
=suffixpath_at_L3%28%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*(L3%27%d=>L3%28%bbentry))))))))
=suffixpath_at_L3%29%bbentry for src.spec.foo
=suffixpath_at_L3%29%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*(L3%27%d=>L3%29%bbentry))))))))
=suffixpath_at_L3%32%bbentry for src.spec.foo
=suffixpath_at_L3%32%bbentry.graph_edge_composition
(((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*((L3%27%d=>L3%28%bbentry)*(L3%28%bbentry=>L3%32%bbentry)))))))))+((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*((L3%27%d=>L3%29%bbentry)*(L3%29%bbentry=>L3%32%bbentry))))))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%9%bbentry)*(L3%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry done
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d done
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry done
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry done
tfg.assumes_around_edge at L3%23%bbentry=>L3%27%d
tfg.assumes_around_edge at L3%23%bbentry=>L3%27%d done
tfg.assumes_around_edge at L3%27%d=>L3%28%bbentry
tfg.assumes_around_edge at L3%27%d=>L3%28%bbentry done
tfg.assumes_around_edge at L3%27%d=>L3%29%bbentry
tfg.assumes_around_edge at L3%27%d=>L3%29%bbentry done
tfg.assumes_around_edge at L3%28%bbentry=>L3%32%bbentry
tfg.assumes_around_edge at L3%28%bbentry=>L3%32%bbentry done
tfg.assumes_around_edge at L3%29%bbentry=>L3%32%bbentry
tfg.assumes_around_edge at L3%29%bbentry=>L3%32%bbentry done
tfg.assumes_around_edge at L3%32%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%32%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.body3%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end10%1%d Lfor.inc8%1%d Lif.else%1%d Lif.end%1%bbentry Lif.then%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end10%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc8%1%d
Lfor.body3%1%d => Lfor.body3%2%d
Lfor.body3%2%d => Lif.then%1%d
Lfor.body3%2%d => Lif.else%1%d
Lif.then%1%d => Lif.end%1%bbentry
Lif.else%1%d => Lif.end%1%bbentry
Lif.end%1%bbentry => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc8%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end10%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end10%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc8%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.4 for call-context {*;foo}
mlvar.dst.llvm.foo.3 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end10%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc8%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.body3%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %cmp4 = icmp ugt i32 %i.0, %j.0, !dbg !36
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.else%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lif.then%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40))*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40)))*((  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40*  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40)*(((  %add = add i32 %ret.1, %1, !dbg !41*  br label %if.end, !dbg !42)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end, !dbg !42))*(  br label %if.end, !dbg !42*  br label %if.end, !dbg !42))))
tfg_edge_comment end

=Edge: Lif.else%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.3 : MEMLABEL
4 : mlvar.dst.llvm.foo.2 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.2 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*(  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43))*(  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43*  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43))*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43)))*((  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43*  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43)*(((  %sub = sub i32 %ret.1, %3, !dbg !44*  br label %if.end)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end))*(  br label %if.end*  br label %if.end))))
tfg_edge_comment end

=Edge: Lif.end%1%bbentry => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((((bb_entry*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*(  %inc = add i32 %j.0, 1, !dbg !47*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  br label %for.cond1, !dbg !48, !llvm.loop !49)*(  br label %for.cond1, !dbg !48, !llvm.loop !49*  br label %for.cond1, !dbg !48, !llvm.loop !49))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.inc8%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc9 = add i32 %i.0, 1, !dbg !52*  br label %for.cond, !dbg !53, !llvm.loop !54)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !53, !llvm.loop !54))*  br label %for.cond, !dbg !53, !llvm.loop !54)*(  br label %for.cond, !dbg !53, !llvm.loop !54*  br label %for.cond, !dbg !53, !llvm.loop !54))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end10%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !56
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100061 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100062 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100063 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100064 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100065 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100066 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100067 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100087 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100088 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100089 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100090 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=Loc 100091 in dst.llvm.foo.
REGMEM
dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=Loc 100092 in dst.llvm.foo.
REGMEM
dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=Loc 100093 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=Loc 100094 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=Loc 100095 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100096 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100097 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100098 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100099 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100100 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100101 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=Loc 100102 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=Loc 100103 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=Loc 100104 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=Loc 100105 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100106 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100107 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100108 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100109 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100110 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100111 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=Loc 100112 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=Loc 100113 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=Loc 100114 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=Loc 100115 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100116 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073, 
=live locs at Lfor.body3%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.body3%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100068, 100069, 100070, 100083, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 
=live locs at Lfor.cond%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 100075, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100076, 100083, 
=live locs at Lfor.end10%1%d
100065, 100073[f], 
=live locs at Lfor.inc8%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100083, 
=live locs at Lif.else%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lif.end%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100090, 
=live locs at Lif.then%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at E0%0%d
100065, 100073[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.body3%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.body3%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.end10%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.inc8%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.else%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.end%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100090, 100115, 100116
=loc definedness at Lif.then%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at E0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100071, 100072, 100073, 100074, 100075, 100077, 100078, 100079, 100115, 100116

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100069
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.body3%2%d
100006, 100012, 100068, 100069, 100070
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100069
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100069, 100075
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100069, 100070, 100076
=branch affecting variable locs at Lfor.end10%1%d

=branch affecting variable locs at Lfor.inc8%1%d
100006, 100012, 100069
=branch affecting variable locs at Lif.else%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.end%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.then%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100115 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100116 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100085 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d for loc_id 100068 {input.dst.llvm-%cmp4.Lfor.body3%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100075 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100076 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100071 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100072 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100074 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%inc9.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100091 {input.dst.llvm-%2.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100092 {input.dst.llvm-%3.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100093 {input.dst.llvm-%arrayidx6.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100094 {input.dst.llvm-%arrayidx7.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100095 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100096 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100097 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100098 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100099 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100100 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100101 {input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100102 {input.dst.llvm-%sub.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100087 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100088 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100089 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100103 {input.dst.llvm-%0.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100104 {input.dst.llvm-%1.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100105 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100106 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100107 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100108 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100109 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100110 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100111 {input.dst.llvm-%add.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100112 {input.dst.llvm-%arrayidx.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100113 {input.dst.llvm-%arrayidx5.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100114 {input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.body3%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end10%1%d:
vacuous mls at Lfor.inc8%1%d:
vacuous mls at Lif.else%1%d:
vacuous mls at Lif.end%1%bbentry:
vacuous mls at Lif.then%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.body3%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end10%1%d:
non-vacuous mls at Lfor.inc8%1%d:
non-vacuous mls at Lif.else%1%d:
non-vacuous mls at Lif.end%1%bbentry:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140394 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140395 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140393 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100046
=loc_expr
140497 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100048
=loc_expr
140498 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100049
=loc_expr
140500 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100050
=loc_expr
140502 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140504 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100056
=loc_expr
140405 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100057
=loc_expr
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100058
=loc_expr
140399 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100059
=loc_expr
140400 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100071
=loc_expr
140769 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140770 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140771 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140772 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140773 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140776 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140777 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140781 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100115
=loc_expr
140806 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100116
=loc_expr
140807 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100074 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100074 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100115 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100115 spreled-expr
140405 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100116 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100116 spreled-expr
140404 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100090 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100091 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100092 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100093 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100094 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100095 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100098 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100099 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100101 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100106 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100108 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100109 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100111 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100074 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100115 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.else%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.then%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end10%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc8%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end10%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.body3%2%d
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.else%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end10%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc8%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end10%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%d=>Lif.end%1%bbentry
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lif.end%1%bbentry
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.body3%2%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*(Lfor.body3%1%d=>Lfor.body3%2%d)))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end10%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end10%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end10%1%d)))
=suffixpath_at_Lfor.inc8%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc8%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc8%1%d))))))
=suffixpath_at_Lif.else%1%d for dst.llvm.foo
=suffixpath_at_Lif.else%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.else%1%d))))))))
=suffixpath_at_Lif.end%1%bbentry for dst.llvm.foo
=suffixpath_at_Lif.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lif.end%1%bbentry)))))))))+((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lif.end%1%bbentry))))))))))
=suffixpath_at_Lif.then%1%d for dst.llvm.foo
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.then%1%d))))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end10%1%d)*(Lfor.end10%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140393 : input.dst.llvm-%x : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140406 : islangaligned(140393, 140379) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d done
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140556 : 4 { 0x4 +1.0e1025 } : BV:64
140701 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140427 : 32 { 0x20 +1.0e1025 } : INT
140731 : bvsign_ext(140701, 140427) : BV:64
140882 : bvmul(140556, 140731) : BV:64
140431 : 63 { 0x3f +1.0e1025 } : INT
140883 : bvextract(140882, 140431, 140427) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140730 : bvslt(140701, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140896 : ite(140730, 140337, 140276) : BV:32
140898 : eq(140883, 140896) : BOOL
140379 : 4 { 0x4 +1.0e1025 } : INT
140900 : isindexforsize(140898, 140379) : BOOL
140393 : input.dst.llvm-%x : BV:32
140376 : 4 { 0x4 +1.47e129 } : BV:32
140823 : bvmul(140376, 140701) : BV:32
140826 : bvadd(140393, 140823) : BV:32
140902 : isgepoffset(140826, 140823) : BOOL
140906 : islangaligned(140826, 140379) : BOOL
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140544 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140380 : 0 { 0x0 } : BOOL
140832 : select(140396, 140397, 140544, 140826, 140379, 140380) : BV:32
140908 : islangaligned(140832, 140379) : BOOL
140911 : and(140906, 140908) : BOOL
140702 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140746 : bvsign_ext(140702, 140427) : BV:64
140924 : bvmul(140556, 140746) : BV:64
140925 : bvextract(140924, 140431, 140427) : BV:32
140745 : bvslt(140702, 140276) : BOOL
140938 : ite(140745, 140337, 140276) : BV:32
140940 : eq(140925, 140938) : BOOL
140942 : isindexforsize(140940, 140379) : BOOL
140835 : bvmul(140376, 140702) : BV:32
140837 : bvadd(140832, 140835) : BV:32
140944 : isgepoffset(140837, 140835) : BOOL
140949 : and(140900, 140902, 140906, 140911, 140942, 140944) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140544 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140393 : input.dst.llvm-%x : BV:32
140376 : 4 { 0x4 +1.47e129 } : BV:32
140701 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140823 : bvmul(140376, 140701) : BV:32
140826 : bvadd(140393, 140823) : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140380 : 0 { 0x0 } : BOOL
140832 : select(140396, 140397, 140544, 140826, 140379, 140380) : BV:32
140702 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140835 : bvmul(140376, 140702) : BV:32
140837 : bvadd(140832, 140835) : BV:32
140864 : islangaligned(140837, 140379) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140556 : 4 { 0x4 +1.0e1025 } : BV:64
140701 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140427 : 32 { 0x20 +1.0e1025 } : INT
140731 : bvsign_ext(140701, 140427) : BV:64
140882 : bvmul(140556, 140731) : BV:64
140431 : 63 { 0x3f +1.0e1025 } : INT
140883 : bvextract(140882, 140431, 140427) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140730 : bvslt(140701, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140896 : ite(140730, 140337, 140276) : BV:32
140898 : eq(140883, 140896) : BOOL
140379 : 4 { 0x4 +1.0e1025 } : INT
140900 : isindexforsize(140898, 140379) : BOOL
140393 : input.dst.llvm-%x : BV:32
140376 : 4 { 0x4 +1.47e129 } : BV:32
140823 : bvmul(140376, 140701) : BV:32
140826 : bvadd(140393, 140823) : BV:32
140902 : isgepoffset(140826, 140823) : BOOL
140906 : islangaligned(140826, 140379) : BOOL
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140544 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140380 : 0 { 0x0 } : BOOL
140832 : select(140396, 140397, 140544, 140826, 140379, 140380) : BV:32
140908 : islangaligned(140832, 140379) : BOOL
140911 : and(140906, 140908) : BOOL
140702 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140746 : bvsign_ext(140702, 140427) : BV:64
140924 : bvmul(140556, 140746) : BV:64
140925 : bvextract(140924, 140431, 140427) : BV:32
140745 : bvslt(140702, 140276) : BOOL
140938 : ite(140745, 140337, 140276) : BV:32
140940 : eq(140925, 140938) : BOOL
140942 : isindexforsize(140940, 140379) : BOOL
140835 : bvmul(140376, 140702) : BV:32
140837 : bvadd(140832, 140835) : BV:32
140944 : isgepoffset(140837, 140835) : BOOL
140949 : and(140900, 140902, 140906, 140911, 140942, 140944) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140544 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140393 : input.dst.llvm-%x : BV:32
140376 : 4 { 0x4 +1.47e129 } : BV:32
140701 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140823 : bvmul(140376, 140701) : BV:32
140826 : bvadd(140393, 140823) : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140380 : 0 { 0x0 } : BOOL
140832 : select(140396, 140397, 140544, 140826, 140379, 140380) : BV:32
140702 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140835 : bvmul(140376, 140702) : BV:32
140837 : bvadd(140832, 140835) : BV:32
140864 : islangaligned(140837, 140379) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 10
=pc
Lfor.end10%1%d
=linename
line 11
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc8%1%d
=linename
line 3
=pc
Lfor.inc8%2%d
=linename
line 3
=pc
Lif.else%1%d
=linename
line 8
=pc
Lif.else%2%d
=linename
line 8
=pc
Lif.else%3%d
=linename
line 8
=pc
Lif.else%4%d
=linename
line 8
=pc
Lif.else%5%d
=linename
line 8
=pc
Lif.end%1%d
=linename
line 9
=pc
Lif.then%1%d
=linename
line 6
=pc
Lif.then%2%d
=linename
line 6
=pc
Lif.then%3%d
=linename
line 6
=pc
Lif.then%4%d
=linename
line 6
=pc
Lif.then%5%d
=linename
line 6
=pc
Lif.then%6%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 13
=pc
Lfor.body3%2%d
=column_name
 at column 11
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end10%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc8%1%d
=column_name
 at column 31
=pc
Lfor.inc8%2%d
=column_name
 at column 3
=pc
Lif.else%1%d
=column_name
 at column 16
=pc
Lif.else%2%d
=column_name
 at column 16
=pc
Lif.else%3%d
=column_name
 at column 16
=pc
Lif.else%4%d
=column_name
 at column 16
=pc
Lif.else%5%d
=column_name
 at column 13
=pc
Lif.end%1%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 16
=pc
Lif.then%2%d
=column_name
 at column 16
=pc
Lif.then%3%d
=column_name
 at column 16
=pc
Lif.then%4%d
=column_name
 at column 16
=pc
Lif.then%5%d
=column_name
 at column 13
=pc
Lif.then%6%d
=column_name
 at column 9
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 13)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 10
=pc
Lfor.end10%1%d
=line_and_column
line 11
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc8%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc8%2%d
=line_and_column
(line 3 at column 3)
=pc
Lif.else%1%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%2%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%3%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%4%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%5%d
=line_and_column
(line 8 at column 13)
=pc
Lif.end%1%d
=line_and_column
line 9
=pc
Lif.then%1%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%2%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%3%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%4%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%5%d
=line_and_column
(line 6 at column 13)
=pc
Lif.then%6%d
=line_and_column
(line 6 at column 9)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset : L0%0%d : (input.dst.llvm-%0 + input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset)
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx5]_4
input.dst.llvm-%add : Lif.then%6%bbentry : ret'
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx6]_4
input.dst.llvm-%3 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx7]_4
input.dst.llvm-%sub : Lif.else%6%bbentry : ret'
input.dst.llvm-%ret.2 : Lif.end%1%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%ret.2
input.dst.llvm-%inc9 : Lfor.inc8%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%arrayidx5 : L0%0%d : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.then : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx6 : L0%0%d : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset
input.dst.llvm-%arrayidx7 : L0%0%d : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.else : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : L0%0%d : input.dst.llvm-%ret.2.Lif.end%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx5
=dst.llvm-%arrayidx5 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx5 val_scevb
=dst.llvm-%arrayidx5 val_scevb scev
=dst.llvm-%arrayidx5 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr done
=dst.llvm-%arrayidx5 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb
=dst.llvm-%arrayidx5 atuse_scevb scev
=dst.llvm-%arrayidx5 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx5 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atexit_scev
=dst.llvm-%arrayidx5 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx5 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%ret.2
=dst.llvm-%ret.2 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.2 val_scevb
=dst.llvm-%ret.2 val_scevb scev
=dst.llvm-%ret.2 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 val_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 val_scevb scev scev_expr done
=dst.llvm-%ret.2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb
=dst.llvm-%ret.2 atuse_scevb scev
=dst.llvm-%ret.2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 atuse_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atuse_scevb scev scev_expr done
=dst.llvm-%ret.2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atexit_scev
=dst.llvm-%ret.2 atexit_scev loop: L0%0%d
=dst.llvm-%ret.2 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.2 atexit_scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atexit_scev scev_expr done
=dst.llvm-%arrayidx6
=dst.llvm-%arrayidx6 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx6 val_scevb
=dst.llvm-%arrayidx6 val_scevb scev
=dst.llvm-%arrayidx6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr done
=dst.llvm-%arrayidx6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb
=dst.llvm-%arrayidx6 atuse_scevb scev
=dst.llvm-%arrayidx6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atexit_scev
=dst.llvm-%arrayidx6 atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atexit_scev scev_expr done
=dst.llvm-%2
=dst.llvm-%2 loop pc: Lfor.cond1%1%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev
=dst.llvm-%2 atexit_scev loop: L0%0%d
=dst.llvm-%2 atexit_scev scev_overflow_flag: 
=dst.llvm-%2 atexit_scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atexit_scev scev_expr done
=dst.llvm-%arrayidx7
=dst.llvm-%arrayidx7 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx7 val_scevb
=dst.llvm-%arrayidx7 val_scevb scev
=dst.llvm-%arrayidx7 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr done
=dst.llvm-%arrayidx7 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb
=dst.llvm-%arrayidx7 atuse_scevb scev
=dst.llvm-%arrayidx7 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx7 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atexit_scev
=dst.llvm-%arrayidx7 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx7 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
20 : input.dst.llvm-%2 : BV32
22 : scev_op_add(15, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr done
=dst.llvm-%3
=dst.llvm-%3 loop pc: Lfor.cond1%1%d
=dst.llvm-%3 val_scevb
=dst.llvm-%3 val_scevb scev
=dst.llvm-%3 val_scevb scev loop: L0%0%d
=dst.llvm-%3 val_scevb scev scev_overflow_flag: 
=dst.llvm-%3 val_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 val_scevb scev scev_expr done
=dst.llvm-%3 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb
=dst.llvm-%3 atuse_scevb scev
=dst.llvm-%3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%3 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%3 atuse_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atuse_scevb scev scev_expr done
=dst.llvm-%3 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atexit_scev
=dst.llvm-%3 atexit_scev loop: L0%0%d
=dst.llvm-%3 atexit_scev scev_overflow_flag: 
=dst.llvm-%3 atexit_scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atexit_scev scev_expr done
=dst.llvm-%sub
=dst.llvm-%sub loop pc: Lfor.cond1%1%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev
=dst.llvm-%sub atexit_scev loop: L0%0%d
=dst.llvm-%sub atexit_scev scev_overflow_flag: 
=dst.llvm-%sub atexit_scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
28 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc9
=dst.llvm-%inc9 loop pc: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb
=dst.llvm-%inc9 val_scevb scev
=dst.llvm-%inc9 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 val_scevb scev scev_expr done
=dst.llvm-%inc9 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb
=dst.llvm-%inc9 atuse_scevb scev
=dst.llvm-%inc9 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 atuse_scevb scev scev_expr done
=dst.llvm-%inc9 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atexit_scev
=dst.llvm-%inc9 atexit_scev loop: L0%0%d
=dst.llvm-%inc9 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc9 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
30 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc9 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.end10%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc8%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 21 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 22 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns for expr 54
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 54 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 54 edges done
=reaching defns for expr 55
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 55 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 55 edges done
=reaching defns for expr 56
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 56 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 56 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%add.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp4.Lfor.body3%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%3.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc9.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple6.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%7%bbentry_Lfor.cond%1%bbentry L3%19%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc8%1%d#{0,0})*(Lfor.inc8%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*(((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*((L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})*((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{1,0})))))+((L3%20%d#{0,0}=>L3%23%bbentry#{0,0})*((L3%23%bbentry#{0,0}=>L3%27%d#{0,0})*((((L3%27%d#{0,0}=>L3%28%bbentry#{0,0})*(L3%28%bbentry#{0,0}=>L3%32%bbentry#{0,0}))+((L3%27%d#{0,0}=>L3%29%bbentry#{0,0})*(L3%29%bbentry#{0,0}=>L3%32%bbentry#{0,0})))*(L3%32%bbentry#{0,0}=>L3%19%bbentry#{1,0}))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*((Lfor.body3%1%d#{0,0}=>Lfor.body3%2%d#{0,0})*((((Lfor.body3%2%d#{0,0}=>Lif.else%1%d#{0,0})*(Lif.else%1%d#{0,0}=>Lif.end%1%bbentry#{0,0}))+((Lfor.body3%2%d#{0,0}=>Lif.then%1%d#{0,0})*(Lif.then%1%d#{0,0}=>Lif.end%1%bbentry#{0,0})))*(Lif.end%1%bbentry#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end10%1%d#{0,0})*(Lfor.end10%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B4.C1.D2.E1
=Locs end
=Liveness in foo.A2.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%7%bbentry_Lfor.cond%1%bbentry

=live locs at L3%19%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B4.C1.D2.E1

=Branch affecting variable locs in foo.A2.B4.C1.D2.E1

=Relevant Memlabels in foo.A2.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 c056c543225736c4dbff313217aa29
=input.spec-%var-x-1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1072488283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1072488284; 1072488287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1072488288; 1496640175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1496640176; 1496640179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1496640180; 4258622623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4258622624; 4258622627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4258622628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1072488287 { 0x3fecdf5f +1.85056674e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4258622627 { 0xfdd56ca3 -36344669 -1.66737782e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1496640179 { 0x5934eab3 +1.41341245e51 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 422255218eb85622dcbe8bec4b156e5
=input.spec-%var-x-1
1 : Lambda77 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda80 : BV:32
11 : Lambda78 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda79 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 264935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 264936; 264939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 264940; 942163231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 942163232; 942163235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 942163236; 2684642531 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2684642532; 2684642535 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2684642536; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 264936 { 0x40ae8 +1.3158283e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2684642532 { 0xa00464e4 -1610324764 -1.3432893e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 942163232 { 0x38284520 +1.31460952e241 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda86 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda89 : BV:32
11 : Lambda87 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda88 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2684642532 { 0xa00464e4 -1610324764 -1.3432893e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2684642535 { 0xa00464e7 -1610324761 -1.3432929e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 942163232 { 0x38284520 +1.31460952e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 942163235 { 0x38284523 +1.31460988e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 264936 { 0x40ae8 +1.3158283e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 264939 { 0x40aeb +1.3158318e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce25.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce25 e4b88dd66aed231d6e575bb17826e44
=input.spec-%var-x-1
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 707125783 ] -> 0, [ 707125784; 707125784 ] -> 128, [ 707125785; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 626279043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 626279044; 626279047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 626279048; 707125783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 707125784; 707125787 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 707125788; 1244027327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1244027328; 1244027331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1244027332; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 626279047 { 0x25544287 +1.65828025e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1244027331 { 0x4a2659c3 +1.29961431e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 707125787 { 0x2a25e21b +1.29596269e213 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda122 : BV:32
2 : Lambda123 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda127 : BV:32
2 : Lambda128 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1269331065
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce26.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce26 935776a05bffab475b33f42f7d44cda
=input.spec-%var-x-1
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 527 ] -> 0, [ 528; 528 ] -> 2, [ 529; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 528; 531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 532; 895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 896; 899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 900; 66051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 66052; 66055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 66056; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 899 { 0x383 +1.10716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 66055 { 0x10207 +1.787436e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 531 { 0x213 +1.6330e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda133 : BV:32
2 : Lambda134 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda138 : BV:32
2 : Lambda139 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1641489885
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce47.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce47 e55ef178a16e3f17f2565c6bd3f059c7
=input.spec-%var-x-1
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3712 { 0xe80 +1.44250e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3711 ] -> 0, [ 3712; 3712 ] -> 1, [ 3713; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3712; 3715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3716; 200195 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 200196; 200199 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 200200; 1179663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179664; 1179667 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1179668; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3712 { 0xe80 +1.44250e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 200196 { 0x30e04 +1.2386522e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3712 { 0xe80 +1.44250e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 200196 { 0x30e04 +1.2386522e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 200199 { 0x30e07 +1.2386558e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1179667 { 0x120013 +1.14062726e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3712 { 0xe80 +1.44250e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3715 { 0xe83 +1.44286e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda202 : BV:32
2 : Lambda203 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3712 { 0xe80 +1.44250e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda207 : BV:32
2 : Lambda208 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3712 { 0xe80 +1.44250e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4226644475
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce69.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce69 61f748a47b507c782923f653b080aba9
=input.spec-%var-x-1
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 33554464 { 0x2000020 +1.381e133 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 269557767 ] -> 0, [ 269557768; 269557768 ] -> 32, [ 269557769; 269557770 ] -> 0, [ 269557771; 269557771 ] -> 2, [ 269557772; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3346099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3346100; 3346103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3346104; 269557767 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269557768; 269557771 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 269557772; 1343766599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1343766600; 1343766603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1343766604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3346103 { 0x330eb7 +1.39888656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1343766603 { 0x5018404b +1.18946206e33 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda282 : BV:32
2 : Lambda283 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda287 : BV:32
2 : Lambda288 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3947113804
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3v487.ce91.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce91 78c3fc9a5fd26bca65ee1a5cfa91d274
=input.spec-%var-x-1
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda396 : BV:32
11 : Lambda394 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda395 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 16732019 ] -> 0, [ 16732020; 16732020 ] -> 16, [ 16732021; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16732019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16732020; 16732023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16732024; 16945127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16945128; 16945131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16945132; 2147632071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147632072; 2147632075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147632076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda396 : BV:32
11 : Lambda394 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda395 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 16945131 { 0x1028feb +1.2001702e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16732023 { 0xff4f77 +1.99461257e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147632075 { 0x800243cb -2147335221 -1.1769387e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda362 : BV:32
2 : Lambda363 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda367 : BV:32
2 : Lambda368 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2441249403
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce92.num_edges_traversed2
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce92 fc41b2b4888f1e20b4ad2462296e581
=input.spec-%var-x-1
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2442 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2443 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2446 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2447 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2450 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2451 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda375 : BV:32
2 : Lambda376 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda380 : BV:32
2 : Lambda381 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1840430835
=counter_example_end
=global nodece 7 num_edges_traversed 2
=global nodece 7 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce113.num_edges_traversed2
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce113 82466d668572017384c7ad668efd379
=input.spec-%var-x-1
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 22167719 ] -> 0, [ 22167720; 22167720 ] -> 8, [ 22167721; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 22167719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 22167720; 22167723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 22167724; 541147215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 541147216; 541147219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 541147220; 2157989975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2157989976; 2157989979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2157989980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2157989976 { 0x80a05058 -2136977320 -1.25245189e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 541147216 { 0x20414050 +1.50977516e193 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2426 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2427 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
13 : eq(11, 12) : BOOL
14 : 8 { 0x8 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2430 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2431 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2434 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2435 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 22167723 { 0x15240ab +1.64259850e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 541147216 { 0x20414050 +1.50977516e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 541147219 { 0x20414053 +1.50977551e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2157989976 { 0x80a05058 -2136977320 -1.25245189e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2157989979 { 0x80a0505b -2136977317 -1.25245225e130 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda446 : BV:32
2 : Lambda447 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda451 : BV:32
2 : Lambda452 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
867572303
=counter_example_end
=global nodece 8 num_edges_traversed 2
=global nodece 8 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce114.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce114 434a6f0cc9fb42ff35ee2589f82be24
=input.spec-%var-x-1
1 : Lambda499 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda502 : BV:32
18 : Lambda500 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda501 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3303498735 ] -> 0, [ 3303498736; 3303498736 ] -> 2, [ 3303498737; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1902474199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1902474200; 1902474203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1902474204; 2779208627 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2779208628; 2779208631 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2779208632; 3303498735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3303498736; 3303498739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3303498740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 658628867 { 0x2741e103 +1.51467931e207 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda499 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda502 : BV:32
18 : Lambda500 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda501 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2410 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2411 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
13 : eq(11, 12) : BOOL
14 : 2 { 0x2 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2414 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2415 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2418 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2419 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 658628867 { 0x2741e103 +1.51467931e207 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3303498739 { 0xc4e763f3 -991468557 -1.80773770e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1902474203 { 0x716573db +1.79259812e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2779208631 { 0xa5a75bb7 -1515758665 -1.30748641e204 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda459 : BV:32
2 : Lambda460 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda464 : BV:32
2 : Lambda465 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4043559341
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce135.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce135 6dab05119c91628d66951acdfe7cc4
=input.spec-%var-x-1
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1184607 ] -> 0, [ 1184608; 1184608 ] -> 1, [ 1184609; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1184607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1184608; 1184611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1184612; 319850147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 319850148; 319850151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 319850152; 1266783119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1266783120; 1266783123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1266783124; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 319850148 { 0x131086a4 +1.12910890e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1266783120 { 0x4b819390 +1.1231575e24 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2394 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2395 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2398 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2399 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2402 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2403 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1184611 { 0x121363 +1.14121663e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1266783120 { 0x4b819390 +1.1231575e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1266783123 { 0x4b819393 +1.1231610e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 319850148 { 0x131086a4 +1.12910890e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 319850151 { 0x131086a7 +1.12910926e167 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda530 : BV:32
2 : Lambda531 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda535 : BV:32
2 : Lambda536 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce157.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce157 6326a079e6b97f12d48e7ee6db2228a1
=input.spec-%var-x-1
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1777298643 ] -> 4, [ 1777298644; 1777298647 ] -> 0, [ 1777298648; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1524960039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1524960040; 1524960043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1524960044; 1777298643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1777298644; 1777298647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1777298648; 3349973779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3349973780; 3349973783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3349973784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3349973783 { 0xc7ac8b17 -944993513 -1.34799468e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1524960043 { 0x5ae50b2b +1.78940331e54 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda612 : BV:32
2 : Lambda613 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda617 : BV:32
2 : Lambda618 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1609363582
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce179.num_edges_traversed2
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce179 ba64be695828795de367f66843a2c6
=input.spec-%var-x-1
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1618590963 ] -> 0, [ 1618590964; 1618590967 ] -> 255, [ 1618590968; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 922566007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 922566008; 922566011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 922566012; 1618590963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1618590964; 1618590967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1618590968; 1621415375 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1621415376; 1621415379 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1621415380; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1778129394 { 0x69fc19f2 +1.96954178e84 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2374 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2375 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
18 : eq(11, 17) : BOOL
19 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
20 : eq(11, 19) : BOOL
21 : 0 { 0x0 } : BV:8
22 : ite(20, 14, 21) : BV:8
23 : ite(18, 14, 22) : BV:8
24 : ite(16, 14, 23) : BV:8
25 : ite(13, 14, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : eq(27, 17) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 14, 21) : BV:8
33 : ite(30, 14, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 14, 34) : BV:8
36 : bvadd(1, 9, 10) : BV:32
37 : eq(36, 12) : BOOL
38 : eq(36, 15) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 14, 21) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 14, 42) : BV:8
44 : ite(37, 14, 43) : BV:8
45 : bvadd(9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 14, 21) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : ite(47, 14, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : bvconcat(25, 35, 44, 53) : BV:32
55 : lambda(6, 54) : FUNCTION[BV:32 -> BV:32]
56 : map(5, 55) : MAP[BV:32 -> BV:32]
57 : sum(1, 2, 56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
58 : sym_const(57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2378 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2379 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
16 : eq(9, 15) : BOOL
17 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2382 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2383 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
16 : eq(9, 15) : BOOL
17 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778129394 { 0x69fc19f2 +1.96954178e84 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 922566011 { 0x36fd3d7b +1.97843873e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1621415379 { 0x60a4d5d3 +1.28777539e66 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda708 : BV:32
2 : Lambda709 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda713 : BV:32
2 : Lambda714 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1106379559
=counter_example_end
=global nodece 12 num_edges_traversed 2
=global nodece 12 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce201.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce201 9aa8dab2b2ab7063e252170c551afb8
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce223.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce223 f332fd61eefa3a11183d1f1a73399cb
=input.spec-%var-x-1
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 7 ] -> 255, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 144547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 144548; 144551 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 144552; 8297615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8297616; 8297619 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8297620; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 8297619 { 0x7e9c93 +1.98915326e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 144551 { 0x234a7 +1.1723182e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda875 : BV:32
2 : Lambda876 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda880 : BV:32
2 : Lambda881 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2015713600
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3v487.ce1244.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce1244 556a638efd366db74d4167284fc3df2d
=input.spec-%var-x-1
1 : Lambda2189 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2192 : BV:32
18 : Lambda2190 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2191 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2194 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2197 : BV:32
18 : Lambda2195 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2196 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2338 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2339 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2342 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2343 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2346 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2347 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2149 : BV:32
2 : Lambda2150 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2158 : BV:32
2 : Lambda2159 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2162 : BV:32
2 : Lambda2163 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3619306968
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce1245.num_edges_traversed0
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1245 f93562b5efb375d1361a4e49a3d4c
=input.spec-%var-x-1
1 : Lambda2209 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2212 : BV:32
18 : Lambda2210 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda2211 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 100 { 0x64 } : BV:8
28 : eq(25, 21) : BOOL
29 : 220 { 0xdc -36 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 224 { 0xe0 -32 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 100, [ 1; 1 ] -> 224, [ 2; 2 ] -> 251, [ 3; 3 ] -> 220, [ 4; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 965663723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 965663724; 965663727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 965663728; 1449050095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1449050096; 1449050099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1449050100; 2867653343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2867653344; 2867653347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2867653348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 965663724 { 0x398edbec +1.11608648e244 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1449050096 { 0x565ebff0 +1.74023246e45 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2867653344 { 0xaaeceae0 -1427313952 -1.85091781e214 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2216 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2219 : BV:32
18 : Lambda2217 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda2218 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 100 { 0x64 } : BV:8
28 : eq(25, 21) : BOOL
29 : 220 { 0xdc -36 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 224 { 0xe0 -32 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1449050096 { 0x565ebff0 +1.74023246e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1449050099 { 0x565ebff3 +1.74023282e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2867653344 { 0xaaeceae0 -1427313952 -1.85091781e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2867653347 { 0xaaeceae3 -1427313949 -1.85091817e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 965663724 { 0x398edbec +1.11608648e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 965663727 { 0x398edbef +1.11608684e244 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2170 : BV:32
2 : Lambda2171 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 100 { 0x64 } : BV:8
11 : eq(7, 3) : BOOL
12 : 220 { 0xdc -36 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 224 { 0xe0 -32 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2172 : BV:32
2 : Lambda2173 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 100 { 0x64 } : BV:8
11 : eq(7, 3) : BOOL
12 : 220 { 0xdc -36 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 224 { 0xe0 -32 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2279904250
=counter_example_end
=global nodece 16 num_edges_traversed 0
=global nodece 16 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce4012.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce4012 3027488e388aaaf21289ecf3c8226a32
=input.spec-%var-x-1
1 : Lambda7737 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7740 : BV:32
18 : Lambda7738 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7739 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : bvmul(37, 17) : BV:32
77 : bvadd(34, 76) : BV:32
78 : eq(77, 2) : BOOL
79 : 254 { 0xfe -2 } : BV:8
80 : eq(77, 34) : BOOL
81 : 253 { 0xfd -3 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(77, 82) : BOOL
84 : 2 { 0x2 +1.23e129 } : BV:32
85 : eq(77, 84) : BOOL
86 : 90 { 0x5a } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 81, 88) : BV:8
90 : ite(80, 81, 89) : BV:8
91 : ite(78, 79, 90) : BV:8
92 : bvadd(84, 76) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 34) : BOOL
95 : eq(92, 82) : BOOL
96 : eq(92, 84) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 81, 97) : BV:8
99 : ite(94, 81, 98) : BV:8
100 : ite(93, 79, 99) : BV:8
101 : bvadd(82, 76) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 34) : BOOL
104 : eq(101, 82) : BOOL
105 : eq(101, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 81, 106) : BV:8
108 : ite(103, 81, 107) : BV:8
109 : ite(102, 79, 108) : BV:8
110 : eq(76, 2) : BOOL
111 : eq(76, 34) : BOOL
112 : eq(76, 82) : BOOL
113 : eq(76, 84) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 81, 114) : BV:8
116 : ite(111, 81, 115) : BV:8
117 : ite(110, 79, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(34, 75, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 34) : BOOL
122 : eq(119, 82) : BOOL
123 : eq(119, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 81, 124) : BV:8
126 : ite(121, 81, 125) : BV:8
127 : ite(120, 79, 126) : BV:8
128 : bvadd(84, 75, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 34) : BOOL
131 : eq(128, 82) : BOOL
132 : eq(128, 84) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 81, 133) : BV:8
135 : ite(130, 81, 134) : BV:8
136 : ite(129, 79, 135) : BV:8
137 : bvadd(82, 75, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 34) : BOOL
140 : eq(137, 82) : BOOL
141 : eq(137, 84) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 81, 142) : BV:8
144 : ite(139, 81, 143) : BV:8
145 : ite(138, 79, 144) : BV:8
146 : bvadd(75, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 34) : BOOL
149 : eq(146, 82) : BOOL
150 : eq(146, 84) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 81, 151) : BV:8
153 : ite(148, 81, 152) : BV:8
154 : ite(147, 79, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(55, 2, 155) : BV:32
157 : ite(74, 155, 156) : BV:32
158 : ite(55, 2, 157) : BV:32
159 : lambda(52, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(51, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 254, [ 1; 1 ] -> 253, [ 2; 2 ] -> 90, [ 3; 3 ] -> 253, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1988873635 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1988873636; 1988873639 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1988873640; 2010853167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2010853168; 2010853171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2010853172; 2024608171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2024608172; 2024608175 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2024608176; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1988873636 { 0x768bcda4 +1.9221315e110 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2024608172 { 0x78ad11ac +1.35210180e114 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2010853168 { 0x77db2f30 +1.71237754e112 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7742 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7745 : BV:32
18 : Lambda7743 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7744 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : bvmul(37, 17) : BV:32
58 : bvadd(34, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : 254 { 0xfe -2 } : BV:8
61 : eq(58, 34) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(58, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(58, 65) : BOOL
67 : 90 { 0x5a } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 62, 69) : BV:8
71 : ite(61, 62, 70) : BV:8
72 : ite(59, 60, 71) : BV:8
73 : bvadd(65, 57) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 34) : BOOL
76 : eq(73, 63) : BOOL
77 : eq(73, 65) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 62, 78) : BV:8
80 : ite(75, 62, 79) : BV:8
81 : ite(74, 60, 80) : BV:8
82 : bvadd(63, 57) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 34) : BOOL
85 : eq(82, 63) : BOOL
86 : eq(82, 65) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 62, 88) : BV:8
90 : ite(83, 60, 89) : BV:8
91 : eq(57, 2) : BOOL
92 : eq(57, 34) : BOOL
93 : eq(57, 63) : BOOL
94 : eq(57, 65) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 62, 95) : BV:8
97 : ite(92, 62, 96) : BV:8
98 : ite(91, 60, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(34, 56, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 34) : BOOL
103 : eq(100, 63) : BOOL
104 : eq(100, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 62, 105) : BV:8
107 : ite(102, 62, 106) : BV:8
108 : ite(101, 60, 107) : BV:8
109 : bvadd(65, 56, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 34) : BOOL
112 : eq(109, 63) : BOOL
113 : eq(109, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 62, 114) : BV:8
116 : ite(111, 62, 115) : BV:8
117 : ite(110, 60, 116) : BV:8
118 : bvadd(63, 56, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 34) : BOOL
121 : eq(118, 63) : BOOL
122 : eq(118, 65) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 62, 123) : BV:8
125 : ite(120, 62, 124) : BV:8
126 : ite(119, 60, 125) : BV:8
127 : bvadd(56, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 34) : BOOL
130 : eq(127, 63) : BOOL
131 : eq(127, 65) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 62, 132) : BV:8
134 : ite(129, 62, 133) : BV:8
135 : ite(128, 60, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(55, 2, 136) : BV:32
138 : lambda(52, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(51, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda8974 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda8975 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvmul(10, 27) : BV:32
31 : 4250598910 { 0xfd5afdfe -44368386 -1.71087622e123 } : BV:32
32 : bvadd(7, 30, 31) : BV:32
33 : eq(32, 5) : BOOL
34 : 254 { 0xfe -2 } : BV:8
35 : eq(32, 7) : BOOL
36 : 253 { 0xfd -3 } : BV:8
37 : eq(32, 1) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(32, 38) : BOOL
40 : 90 { 0x5a } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 36, 42) : BV:8
44 : ite(35, 36, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : bvadd(38, 30, 31) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 7) : BOOL
49 : eq(46, 1) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 40, 41) : BV:8
52 : ite(49, 36, 51) : BV:8
53 : ite(48, 36, 52) : BV:8
54 : ite(47, 34, 53) : BV:8
55 : bvadd(1, 30, 31) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 7) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 38) : BOOL
60 : ite(59, 40, 41) : BV:8
61 : ite(58, 36, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : bvadd(30, 31) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 7) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 38) : BOOL
69 : ite(68, 40, 41) : BV:8
70 : ite(67, 36, 69) : BV:8
71 : ite(66, 36, 70) : BV:8
72 : ite(65, 34, 71) : BV:8
73 : bvconcat(45, 54, 63, 72) : BV:32
74 : ite(29, 5, 73) : BV:32
75 : lambda(27, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(26, 75) : MAP[BV:32 -> BV:32]
77 : sum(1, 2, 76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
78 : sym_const(77) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda8978 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda8979 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvmul(8, 25) : BV:32
29 : 4250598910 { 0xfd5afdfe -44368386 -1.71087622e123 } : BV:32
30 : bvadd(5, 28, 29) : BV:32
31 : eq(30, 3) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : eq(30, 5) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : eq(30, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : eq(30, 37) : BOOL
39 : 90 { 0x5a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 34, 41) : BV:8
43 : ite(33, 34, 42) : BV:8
44 : ite(31, 32, 43) : BV:8
45 : bvadd(37, 28, 29) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 5) : BOOL
48 : eq(45, 35) : BOOL
49 : eq(45, 37) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 34, 51) : BV:8
53 : ite(46, 32, 52) : BV:8
54 : bvadd(35, 28, 29) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 5) : BOOL
57 : eq(54, 35) : BOOL
58 : eq(54, 37) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 34, 59) : BV:8
61 : ite(56, 34, 60) : BV:8
62 : ite(55, 32, 61) : BV:8
63 : bvadd(28, 29) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 5) : BOOL
66 : eq(63, 35) : BOOL
67 : eq(63, 37) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 34, 68) : BV:8
70 : ite(65, 34, 69) : BV:8
71 : ite(64, 32, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(27, 3, 72) : BV:32
74 : lambda(25, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(24, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda8982 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda8983 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvmul(8, 25) : BV:32
29 : 4250598910 { 0xfd5afdfe -44368386 -1.71087622e123 } : BV:32
30 : bvadd(5, 28, 29) : BV:32
31 : eq(30, 3) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : eq(30, 5) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : eq(30, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : eq(30, 37) : BOOL
39 : 90 { 0x5a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 34, 41) : BV:8
43 : ite(33, 34, 42) : BV:8
44 : ite(31, 32, 43) : BV:8
45 : bvadd(37, 28, 29) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 5) : BOOL
48 : eq(45, 35) : BOOL
49 : eq(45, 37) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 34, 51) : BV:8
53 : ite(46, 32, 52) : BV:8
54 : bvadd(35, 28, 29) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 5) : BOOL
57 : eq(54, 35) : BOOL
58 : eq(54, 37) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 34, 59) : BV:8
61 : ite(56, 34, 60) : BV:8
62 : ite(55, 32, 61) : BV:8
63 : bvadd(28, 29) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 5) : BOOL
66 : eq(63, 35) : BOOL
67 : eq(63, 37) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 34, 68) : BV:8
70 : ite(65, 34, 69) : BV:8
71 : ite(64, 32, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(27, 3, 72) : BV:32
74 : lambda(25, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(24, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2024608172 { 0x78ad11ac +1.35210180e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2024608175 { 0x78ad11af +1.35210216e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2010853168 { 0x77db2f30 +1.71237754e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2010853171 { 0x77db2f33 +1.71237790e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1988873636 { 0x768bcda4 +1.9221315e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1988873639 { 0x768bcda7 +1.9221351e110 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda7694 : BV:32
2 : Lambda7695 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda7699 : BV:32
2 : Lambda7700 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : bvmul(33, 1) : BV:32
50 : bvadd(30, 49) : BV:32
51 : eq(50, 3) : BOOL
52 : 254 { 0xfe -2 } : BV:8
53 : eq(50, 30) : BOOL
54 : 253 { 0xfd -3 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(50, 55) : BOOL
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(50, 57) : BOOL
59 : 90 { 0x5a } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 54, 61) : BV:8
63 : ite(53, 54, 62) : BV:8
64 : ite(51, 52, 63) : BV:8
65 : bvadd(57, 49) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 30) : BOOL
68 : eq(65, 55) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 54, 70) : BV:8
72 : ite(67, 54, 71) : BV:8
73 : ite(66, 52, 72) : BV:8
74 : bvadd(55, 49) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 30) : BOOL
77 : eq(74, 55) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 54, 79) : BV:8
81 : ite(76, 54, 80) : BV:8
82 : ite(75, 52, 81) : BV:8
83 : eq(49, 3) : BOOL
84 : eq(49, 30) : BOOL
85 : eq(49, 55) : BOOL
86 : eq(49, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 54, 87) : BV:8
89 : ite(84, 54, 88) : BV:8
90 : ite(83, 52, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(30, 48, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 30) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 54, 97) : BV:8
99 : ite(94, 54, 98) : BV:8
100 : ite(93, 52, 99) : BV:8
101 : bvadd(57, 48, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 30) : BOOL
104 : eq(101, 55) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 54, 106) : BV:8
108 : ite(103, 54, 107) : BV:8
109 : ite(102, 52, 108) : BV:8
110 : bvadd(55, 48, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 30) : BOOL
113 : eq(110, 55) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 54, 115) : BV:8
117 : ite(112, 54, 116) : BV:8
118 : ite(111, 52, 117) : BV:8
119 : bvadd(48, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 30) : BOOL
122 : eq(119, 55) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 54, 124) : BV:8
126 : ite(121, 54, 125) : BV:8
127 : ite(120, 52, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(47, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda7705 : BV:32
2 : Lambda7706 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7701 : BV:32
2 : Lambda7702 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 254 { 0xfe -2 } : BV:8
14 : eq(11, 7) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 90 { 0x5a } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(17, 15, 22) : BV:8
24 : ite(14, 15, 23) : BV:8
25 : ite(12, 13, 24) : BV:8
26 : bvadd(18, 10) : BV:32
27 : eq(26, 3) : BOOL
28 : eq(26, 7) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 20, 21) : BV:8
32 : ite(29, 15, 31) : BV:8
33 : ite(28, 15, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : bvadd(16, 10) : BV:32
36 : eq(35, 3) : BOOL
37 : eq(35, 7) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 18) : BOOL
40 : ite(39, 20, 21) : BV:8
41 : ite(38, 15, 40) : BV:8
42 : ite(37, 15, 41) : BV:8
43 : ite(36, 13, 42) : BV:8
44 : eq(10, 3) : BOOL
45 : eq(10, 7) : BOOL
46 : eq(10, 16) : BOOL
47 : eq(10, 18) : BOOL
48 : ite(47, 20, 21) : BV:8
49 : ite(46, 15, 48) : BV:8
50 : ite(45, 15, 49) : BV:8
51 : ite(44, 13, 50) : BV:8
52 : bvconcat(25, 34, 43, 51) : BV:32
53 : bvadd(7, 9, 52) : BV:32
54 : eq(53, 3) : BOOL
55 : eq(53, 7) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 18) : BOOL
58 : ite(57, 20, 21) : BV:8
59 : ite(56, 15, 58) : BV:8
60 : ite(55, 15, 59) : BV:8
61 : ite(54, 13, 60) : BV:8
62 : bvadd(18, 9, 52) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 7) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 18) : BOOL
67 : ite(66, 20, 21) : BV:8
68 : ite(65, 15, 67) : BV:8
69 : ite(64, 15, 68) : BV:8
70 : ite(63, 13, 69) : BV:8
71 : bvadd(16, 9, 52) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 7) : BOOL
74 : eq(71, 16) : BOOL
75 : eq(71, 18) : BOOL
76 : ite(75, 20, 21) : BV:8
77 : ite(74, 15, 76) : BV:8
78 : ite(73, 15, 77) : BV:8
79 : ite(72, 13, 78) : BV:8
80 : bvadd(9, 52) : BV:32
81 : eq(80, 3) : BOOL
82 : eq(80, 7) : BOOL
83 : eq(80, 16) : BOOL
84 : eq(80, 18) : BOOL
85 : ite(84, 20, 21) : BV:8
86 : ite(83, 15, 85) : BV:8
87 : ite(82, 15, 86) : BV:8
88 : ite(81, 13, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : ite(6, 3, 89) : BV:32
91 : lambda(1, 2, 90) : FUNCTION[BV:32,BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1845656564
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce4052.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce4052 acca66819280f51dc16ed270f92cfa6a
=input.spec-%var-x-1
1 : Lambda7845 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7848 : BV:32
18 : Lambda7846 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda7847 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 140 { 0x8c -116 } : BV:8
81 : eq(78, 74) : BOOL
82 : 225 { 0xe1 -31 } : BV:8
83 : eq(78, 36) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : eq(78, 40) : BOOL
86 : 216 { 0xd8 -40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 140, [ 1; 1 ] -> 223, [ 2; 2 ] -> 216, [ 3; 3 ] -> 225, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059478939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059478940; 1059478943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059478944; 2715420247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2715420248; 2715420251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2715420252; 3966472715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3966472716; 3966472719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3966472720; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7853 : BV:32
18 : Lambda7851 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda7852 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 140 { 0x8c -116 } : BV:8
62 : eq(59, 55) : BOOL
63 : 225 { 0xe1 -31 } : BV:8
64 : eq(59, 36) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : eq(59, 40) : BOOL
67 : 216 { 0xd8 -40 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9012 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9013 : BV:32
26 : eq(25, 5) : BOOL
27 : and(4, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
32 : bvadd(28, 30, 31) : BV:32
33 : eq(32, 5) : BOOL
34 : 140 { 0x8c -116 } : BV:8
35 : eq(32, 28) : BOOL
36 : 225 { 0xe1 -31 } : BV:8
37 : eq(32, 1) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : eq(32, 12) : BOOL
40 : 216 { 0xd8 -40 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(35, 36, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : bvadd(12, 30, 31) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 1) : BOOL
50 : eq(46, 12) : BOOL
51 : ite(50, 40, 41) : BV:8
52 : ite(49, 38, 51) : BV:8
53 : ite(48, 36, 52) : BV:8
54 : ite(47, 34, 53) : BV:8
55 : bvadd(1, 30, 31) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 28) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 12) : BOOL
60 : ite(59, 40, 41) : BV:8
61 : ite(58, 38, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : bvadd(30, 31) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 12) : BOOL
69 : ite(68, 40, 41) : BV:8
70 : ite(67, 38, 69) : BV:8
71 : ite(66, 36, 70) : BV:8
72 : ite(65, 34, 71) : BV:8
73 : bvconcat(45, 54, 63, 72) : BV:32
74 : ite(27, 5, 73) : BV:32
75 : lambda(25, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(24, 75) : MAP[BV:32 -> BV:32]
77 : sum(1, 2, 76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
78 : sym_const(77) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9016 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9017 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9020 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9021 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3966472719 { 0xec6b920f -328494577 -1.84039485e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2715420251 { 0xa1da065b -1579547045 -1.70331895e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059478943 { 0x3f265d9f +1.29973208e255 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda7802 : BV:32
2 : Lambda7803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda7807 : BV:32
2 : Lambda7808 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 524288 { 0x80000 +1.6250000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 524289 { 0x80001 +1.6250011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 140 { 0x8c -116 } : BV:8
54 : eq(51, 47) : BOOL
55 : 225 { 0xe1 -31 } : BV:8
56 : eq(51, 32) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : eq(51, 36) : BOOL
59 : 216 { 0xd8 -40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda7813 : BV:32
2 : Lambda7814 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7809 : BV:32
2 : Lambda7810 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 140 { 0x8c -116 } : BV:8
14 : eq(11, 7) : BOOL
15 : 225 { 0xe1 -31 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 216 { 0xd8 -40 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1639020001
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3v487.ce4092.num_edges_traversed1
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce4092 ae26563c6ef8f71070206119453b767
=input.spec-%var-x-1
1 : Lambda7966 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7969 : BV:32
18 : Lambda7967 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32768 { 0x8000 +1.390625e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 32769 { 0x8001 +1.390636e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7968 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.llvm-%m
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 52611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 52612; 52615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 52616; 2147516287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147516288; 2147516291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147516292; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147516288 { 0x80007f80 -2147451008 -1.389099e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 52612 { 0xcd84 +1.627183e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7971 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7974 : BV:32
18 : Lambda7972 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32768 { 0x8000 +1.390625e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 32769 { 0x8001 +1.390636e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7973 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9050 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 32767 { 0x7fff +1.390613e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 32768 { 0x8000 +1.390625e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 32769 { 0x8001 +1.390636e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda9051 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9054 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 32769 { 0x8001 +1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9055 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9058 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 32769 { 0x8001 +1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9059 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147516288 { 0x80007f80 -2147451008 -1.389099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147516291 { 0x80007f83 -2147451005 -1.389134e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 52612 { 0xcd84 +1.627183e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 52615 { 0xcd87 +1.627219e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda7926 : BV:32
2 : Lambda7927 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32768 { 0x8000 +1.390625e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 32769 { 0x8001 +1.390636e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda7935 : BV:32
2 : Lambda7936 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32768 { 0x8000 +1.390625e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 32769 { 0x8001 +1.390636e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7939 : BV:32
2 : Lambda7940 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 8191 { 0x1fff +1.97644e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8192 { 0x2000 +1.97656e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 8193 { 0x2001 +1.97668e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 32767 { 0x7fff +1.390613e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 32768 { 0x8000 +1.390625e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 32769 { 0x8001 +1.390636e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4008617019
=counter_example_end
=global nodece 19 num_edges_traversed 1
=global nodece 19 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce4132.num_edges_traversed1
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce4132 2899771a397caaf21ab7373d48df6170
=input.spec-%var-x-1
1 : Lambda8092 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8095 : BV:32
18 : Lambda8093 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda8094 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(22, 27) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : 243 { 0xf3 -13 } : BV:8
72 : eq(69, 65) : BOOL
73 : 215 { 0xd7 -41 } : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : eq(69, 74) : BOOL
76 : 255 { 0xff -1 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(69, 77) : BOOL
79 : 247 { 0xf7 -9 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : bvadd(77, 68) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 65) : BOOL
88 : eq(85, 74) : BOOL
89 : eq(85, 77) : BOOL
90 : ite(89, 79, 80) : BV:8
91 : ite(88, 76, 90) : BV:8
92 : ite(87, 73, 91) : BV:8
93 : ite(86, 71, 92) : BV:8
94 : bvadd(74, 68) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 74) : BOOL
98 : eq(94, 77) : BOOL
99 : ite(98, 79, 80) : BV:8
100 : ite(97, 76, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 71, 101) : BV:8
103 : eq(68, 2) : BOOL
104 : eq(68, 65) : BOOL
105 : eq(68, 74) : BOOL
106 : eq(68, 77) : BOOL
107 : ite(106, 79, 80) : BV:8
108 : ite(105, 76, 107) : BV:8
109 : ite(104, 73, 108) : BV:8
110 : ite(103, 71, 109) : BV:8
111 : bvconcat(84, 93, 102, 110) : BV:32
112 : bvadd(65, 67, 111) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 65) : BOOL
115 : eq(112, 74) : BOOL
116 : eq(112, 77) : BOOL
117 : ite(116, 79, 80) : BV:8
118 : ite(115, 76, 117) : BV:8
119 : ite(114, 73, 118) : BV:8
120 : ite(113, 71, 119) : BV:8
121 : bvadd(77, 67, 111) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 65) : BOOL
124 : eq(121, 74) : BOOL
125 : eq(121, 77) : BOOL
126 : ite(125, 79, 80) : BV:8
127 : ite(124, 76, 126) : BV:8
128 : ite(123, 73, 127) : BV:8
129 : ite(122, 71, 128) : BV:8
130 : bvadd(74, 67, 111) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 65) : BOOL
133 : eq(130, 74) : BOOL
134 : eq(130, 77) : BOOL
135 : ite(134, 79, 80) : BV:8
136 : ite(133, 76, 135) : BV:8
137 : ite(132, 73, 136) : BV:8
138 : ite(131, 71, 137) : BV:8
139 : bvadd(67, 111) : BV:32
140 : eq(139, 2) : BOOL
141 : eq(139, 65) : BOOL
142 : eq(139, 74) : BOOL
143 : eq(139, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 73, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : bvconcat(120, 129, 138, 147) : BV:32
149 : ite(49, 2, 148) : BV:32
150 : ite(64, 148, 149) : BV:32
151 : ite(49, 2, 150) : BV:32
152 : lambda(46, 151) : FUNCTION[BV:32 -> BV:32]
153 : map(45, 152) : MAP[BV:32 -> BV:32]
154 : lambda(17, 153) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
155 : map(16, 154) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
156 : sym_const(155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 243, [ 1; 1 ] -> 255, [ 2; 2 ] -> 247, [ 3; 3 ] -> 215, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1886261579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1886261580; 1886261583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1886261584; 2644049335 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2644049336; 2644049339 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2644049340; 3429399283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3429399284; 3429399287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3429399288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2644049336 { 0x9d98fdb8 -1650917960 -1.19524288e188 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1886261580 { 0x706e114c +1.85990285e97 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3429399284 { 0xcc687af4 -865568012 -1.81625223e25 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda8097 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8100 : BV:32
18 : Lambda8098 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda8099 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 2) : BOOL
56 : 243 { 0xf3 -13 } : BV:8
57 : eq(54, 50) : BOOL
58 : 215 { 0xd7 -41 } : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : eq(54, 59) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(54, 62) : BOOL
64 : 247 { 0xf7 -9 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(57, 58, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : bvadd(62, 53) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 50) : BOOL
73 : eq(70, 59) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 58, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : bvadd(59, 53) : BV:32
80 : eq(79, 2) : BOOL
81 : eq(79, 50) : BOOL
82 : eq(79, 59) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 58, 85) : BV:8
87 : ite(80, 56, 86) : BV:8
88 : eq(53, 2) : BOOL
89 : eq(53, 50) : BOOL
90 : eq(53, 59) : BOOL
91 : eq(53, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 58, 93) : BV:8
95 : ite(88, 56, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(50, 52, 96) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 50) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 58, 103) : BV:8
105 : ite(98, 56, 104) : BV:8
106 : bvadd(62, 52, 96) : BV:32
107 : eq(106, 2) : BOOL
108 : eq(106, 50) : BOOL
109 : eq(106, 59) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 56, 113) : BV:8
115 : bvadd(59, 52, 96) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 50) : BOOL
118 : eq(115, 59) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 58, 121) : BV:8
123 : ite(116, 56, 122) : BV:8
124 : bvadd(52, 96) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 50) : BOOL
127 : eq(124, 59) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 58, 130) : BV:8
132 : ite(125, 56, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9158 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 10, 10) : BV:32
15 : ite(9, 5, 14) : BV:32
16 : eq(15, 5) : BOOL
17 : and(4, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 4, 18) : BOOL
20 : lambda(3, 19) : FUNCTION[BV:32 -> BOOL]
21 : Lambda9159 : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 21) : BV:32
27 : 3623354355 { 0xd7f7fff3 -671612941 -1.93749845e48 } : BV:32
28 : bvadd(24, 26, 27) : BV:32
29 : eq(28, 5) : BOOL
30 : 243 { 0xf3 -13 } : BV:8
31 : eq(28, 24) : BOOL
32 : 215 { 0xd7 -41 } : BV:8
33 : eq(28, 1) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : eq(28, 35) : BOOL
37 : 247 { 0xf7 -9 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(29, 30, 41) : BV:8
43 : bvadd(35, 26, 27) : BV:32
44 : eq(43, 5) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 1) : BOOL
47 : eq(43, 35) : BOOL
48 : ite(47, 37, 38) : BV:8
49 : ite(46, 34, 48) : BV:8
50 : ite(45, 32, 49) : BV:8
51 : ite(44, 30, 50) : BV:8
52 : bvadd(1, 26, 27) : BV:32
53 : eq(52, 5) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 1) : BOOL
56 : eq(52, 35) : BOOL
57 : ite(56, 37, 38) : BV:8
58 : ite(55, 34, 57) : BV:8
59 : ite(54, 32, 58) : BV:8
60 : ite(53, 30, 59) : BV:8
61 : bvadd(26, 27) : BV:32
62 : eq(61, 5) : BOOL
63 : eq(61, 24) : BOOL
64 : eq(61, 1) : BOOL
65 : eq(61, 35) : BOOL
66 : ite(65, 37, 38) : BV:8
67 : ite(64, 34, 66) : BV:8
68 : ite(63, 32, 67) : BV:8
69 : ite(62, 30, 68) : BV:8
70 : bvconcat(42, 51, 60, 69) : BV:32
71 : ite(23, 5, 70) : BV:32
72 : lambda(21, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(20, 72) : MAP[BV:32 -> BV:32]
74 : sum(1, 2, 73) : SUM[UNIT,MAP[BV:32 -> BV:32]]
75 : sym_const(74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9162 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda9163 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 3623354355 { 0xd7f7fff3 -671612941 -1.93749845e48 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : 243 { 0xf3 -13 } : BV:8
29 : eq(26, 22) : BOOL
30 : 215 { 0xd7 -41 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(26, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : eq(26, 34) : BOOL
36 : 247 { 0xf7 -9 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : bvadd(34, 24, 25) : BV:32
43 : eq(42, 3) : BOOL
44 : eq(42, 22) : BOOL
45 : eq(42, 31) : BOOL
46 : eq(42, 34) : BOOL
47 : ite(46, 36, 37) : BV:8
48 : ite(45, 33, 47) : BV:8
49 : ite(44, 30, 48) : BV:8
50 : ite(43, 28, 49) : BV:8
51 : bvadd(31, 24, 25) : BV:32
52 : eq(51, 3) : BOOL
53 : eq(51, 22) : BOOL
54 : eq(51, 31) : BOOL
55 : eq(51, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 28, 58) : BV:8
60 : bvadd(24, 25) : BV:32
61 : eq(60, 3) : BOOL
62 : eq(60, 22) : BOOL
63 : eq(60, 31) : BOOL
64 : eq(60, 34) : BOOL
65 : ite(64, 36, 37) : BV:8
66 : ite(63, 33, 65) : BV:8
67 : ite(62, 30, 66) : BV:8
68 : ite(61, 28, 67) : BV:8
69 : bvconcat(41, 50, 59, 68) : BV:32
70 : ite(21, 3, 69) : BV:32
71 : lambda(19, 70) : FUNCTION[BV:32 -> BV:32]
72 : map(18, 71) : MAP[BV:32 -> BV:32]
73 : sym_const(72) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9166 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda9167 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 3623354355 { 0xd7f7fff3 -671612941 -1.93749845e48 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : 243 { 0xf3 -13 } : BV:8
29 : eq(26, 22) : BOOL
30 : 215 { 0xd7 -41 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(26, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : eq(26, 34) : BOOL
36 : 247 { 0xf7 -9 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : bvadd(34, 24, 25) : BV:32
43 : eq(42, 3) : BOOL
44 : eq(42, 22) : BOOL
45 : eq(42, 31) : BOOL
46 : eq(42, 34) : BOOL
47 : ite(46, 36, 37) : BV:8
48 : ite(45, 33, 47) : BV:8
49 : ite(44, 30, 48) : BV:8
50 : ite(43, 28, 49) : BV:8
51 : bvadd(31, 24, 25) : BV:32
52 : eq(51, 3) : BOOL
53 : eq(51, 22) : BOOL
54 : eq(51, 31) : BOOL
55 : eq(51, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 28, 58) : BV:8
60 : bvadd(24, 25) : BV:32
61 : eq(60, 3) : BOOL
62 : eq(60, 22) : BOOL
63 : eq(60, 31) : BOOL
64 : eq(60, 34) : BOOL
65 : ite(64, 36, 37) : BV:8
66 : ite(63, 33, 65) : BV:8
67 : ite(62, 30, 66) : BV:8
68 : ite(61, 28, 67) : BV:8
69 : bvconcat(41, 50, 59, 68) : BV:32
70 : ite(21, 3, 69) : BV:32
71 : lambda(19, 70) : FUNCTION[BV:32 -> BV:32]
72 : map(18, 71) : MAP[BV:32 -> BV:32]
73 : sym_const(72) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1886261580 { 0x706e114c +1.85990285e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1886261583 { 0x706e114f +1.85990321e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3429399284 { 0xcc687af4 -865568012 -1.81625223e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3429399287 { 0xcc687af7 -865568009 -1.81625258e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2644049336 { 0x9d98fdb8 -1650917960 -1.19524288e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2644049339 { 0x9d98fdbb -1650917957 -1.19524323e188 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda8049 : BV:32
2 : Lambda8050 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(14, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 14, 14) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda8054 : BV:32
2 : Lambda8055 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 243 { 0xf3 -13 } : BV:8
49 : eq(46, 42) : BOOL
50 : 215 { 0xd7 -41 } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 255 { 0xff -1 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 247 { 0xf7 -9 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 42) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 42) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : eq(45, 3) : BOOL
81 : eq(45, 42) : BOOL
82 : eq(45, 51) : BOOL
83 : eq(45, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 53, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : ite(80, 48, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(42, 44, 88) : BV:32
90 : eq(89, 3) : BOOL
91 : eq(89, 42) : BOOL
92 : eq(89, 51) : BOOL
93 : eq(89, 54) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 53, 94) : BV:8
96 : ite(91, 50, 95) : BV:8
97 : ite(90, 48, 96) : BV:8
98 : bvadd(54, 44, 88) : BV:32
99 : eq(98, 3) : BOOL
100 : eq(98, 42) : BOOL
101 : eq(98, 51) : BOOL
102 : eq(98, 54) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 53, 103) : BV:8
105 : ite(100, 50, 104) : BV:8
106 : ite(99, 48, 105) : BV:8
107 : bvadd(51, 44, 88) : BV:32
108 : eq(107, 3) : BOOL
109 : eq(107, 42) : BOOL
110 : eq(107, 51) : BOOL
111 : eq(107, 54) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 53, 112) : BV:8
114 : ite(109, 50, 113) : BV:8
115 : ite(108, 48, 114) : BV:8
116 : bvadd(44, 88) : BV:32
117 : eq(116, 3) : BOOL
118 : eq(116, 42) : BOOL
119 : eq(116, 51) : BOOL
120 : eq(116, 54) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 53, 121) : BV:8
123 : ite(118, 50, 122) : BV:8
124 : ite(117, 48, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(6, 3, 125) : BV:32
127 : ite(41, 125, 126) : BV:32
128 : ite(6, 3, 127) : BV:32
129 : lambda(1, 2, 128) : FUNCTION[BV:32,BV:32 -> BV:32]
130 : sym_const(129) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda8060 : BV:32
2 : Lambda8061 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(14, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 14, 14) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda8056 : BV:32
2 : Lambda8057 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 243 { 0xf3 -13 } : BV:8
14 : eq(11, 7) : BOOL
15 : 215 { 0xd7 -41 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1027554623
=counter_example_end
=global nodece 20 num_edges_traversed 1
=global nodece 20 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3v487.ce5289.num_edges_traversed0
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce5289 917a07f479b1b99d4fe5eeb4f9572f
=input.spec-%var-x-1
1 : Lambda12167 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12170 : BV:32
18 : Lambda12168 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12169 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 132; 135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 136; 8126479 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8126480; 8126483 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8126484; 2390753283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2390753284; 2390753287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2390753288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12180 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12183 : BV:32
18 : Lambda12181 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12182 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda12173 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda12174 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12187 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12190 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12191 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 135 { 0x87 +1.1609e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2390753287 { 0x8e800007 -1904214009 -1.83e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8126483 { 0x7c0013 +1.96875226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1514689376
=counter_example_end
=global nodece 21 num_edges_traversed 0
=global nodece 21 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 22
=global nodece 22 nodece z3.ce5290.num_edges_traversed0
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce5290 612844703b358bc7f1181f54c9c10
=input.spec-%var-x-1
1 : Lambda12211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12214 : BV:32
18 : Lambda12212 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12213 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3553850027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3553850028; 3553850031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3553850032; 3799832003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3799832004; 3799832007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3799832008; 4064437311 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4064437312; 4064437315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4064437316; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4064437312 { 0xf2426440 -230529984 -1.51868438e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3553850028 { 0xd3d372ac -741117268 -1.65193700e40 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3799832004 { 0xe27cd5c4 -495135292 -1.97527360e69 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12224 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12227 : BV:32
18 : Lambda12225 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12226 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda12217 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda12218 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12230 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12231 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12235 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3553850028 { 0xd3d372ac -741117268 -1.65193700e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3553850031 { 0xd3d372af -741117265 -1.65193736e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3799832004 { 0xe27cd5c4 -495135292 -1.97527360e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3799832007 { 0xe27cd5c7 -495135289 -1.97527396e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4064437312 { 0xf2426440 -230529984 -1.51868438e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4064437315 { 0xf2426443 -230529981 -1.51868474e101 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3066304885
=counter_example_end
=global nodece 22 num_edges_traversed 0
=global nodece 22 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 23
=global nodece 23 nodece z3.ce5384.num_edges_traversed4
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce5384 beeeba88174136353697ce52e4cf185
=input.spec-%var-x-1
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda12246 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda12247 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12250 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12251 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12254 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12255 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda375 : BV:32
2 : Lambda376 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda380 : BV:32
2 : Lambda381 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1840430835
=counter_example_end
=global nodece 23 num_edges_traversed 4
=global nodece 23 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce5419.num_edges_traversed6
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce5419 3fa212aa0b23a73a5d9bb956bae68db
=input.spec-%var-x-1
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda12266 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda12267 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12270 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12271 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12274 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12275 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda375 : BV:32
2 : Lambda376 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda380 : BV:32
2 : Lambda381 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1840430835
=counter_example_end
=global nodece 24 num_edges_traversed 6
=global nodece 24 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce5454.num_edges_traversed7
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce5454 2f7b8f5d5f15eab83da11d989fd4759
=input.spec-%var-x-1
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda418 : BV:32
18 : Lambda416 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda417 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda375 : BV:32
2 : Lambda376 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda380 : BV:32
2 : Lambda381 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1840430835
=counter_example_end
=global nodece 25 num_edges_traversed 7
=global nodece 25 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3v487.ce5374.num_edges_traversed3
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce5374 17fbc82fcfc9fba8e82525ac9d05
=input.spec-%var-x-1
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 22167719 ] -> 0, [ 22167720; 22167720 ] -> 8, [ 22167721; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 22167719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 22167720; 22167723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 22167724; 541147215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 541147216; 541147219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 541147220; 2157989975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2157989976; 2157989979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2157989980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2157989976 { 0x80a05058 -2136977320 -1.25245189e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 541147216 { 0x20414050 +1.50977516e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 22167723 { 0x15240ab +1.64259850e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 541147216 { 0x20414050 +1.50977516e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 541147219 { 0x20414053 +1.50977551e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2157989976 { 0x80a05058 -2136977320 -1.25245189e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2157989979 { 0x80a0505b -2136977317 -1.25245225e130 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda446 : BV:32
2 : Lambda447 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda451 : BV:32
2 : Lambda452 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22167720 { 0x15240a8 +1.64259815e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
867572303
=counter_example_end
=global nodece 26 num_edges_traversed 3
=global nodece 26 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3.ce5364.num_edges_traversed3
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce5364 9b9360e7e5e2aca6da33b56e2e9fd1
=input.spec-%var-x-1
1 : Lambda499 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda502 : BV:32
18 : Lambda500 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda501 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3303498735 ] -> 0, [ 3303498736; 3303498736 ] -> 2, [ 3303498737; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1902474199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1902474200; 1902474203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1902474204; 2779208627 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2779208628; 2779208631 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2779208632; 3303498735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3303498736; 3303498739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3303498740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda499 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda502 : BV:32
18 : Lambda500 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda501 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 658628867 { 0x2741e103 +1.51467931e207 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3303498739 { 0xc4e763f3 -991468557 -1.80773770e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1902474203 { 0x716573db +1.79259812e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2779208631 { 0xa5a75bb7 -1515758665 -1.30748641e204 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda459 : BV:32
2 : Lambda460 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda464 : BV:32
2 : Lambda465 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4043559341
=counter_example_end
=global nodece 27 num_edges_traversed 3
=global nodece 27 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce5354.num_edges_traversed3
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(epsilon)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce5354 eee7742657e783ce4ad11f7755c02948
=input.spec-%var-x-1
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1184607 ] -> 0, [ 1184608; 1184608 ] -> 1, [ 1184609; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1184607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1184608; 1184611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1184612; 319850147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 319850148; 319850151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 319850152; 1266783119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1266783120; 1266783123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1266783124; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 319850148 { 0x131086a4 +1.12910890e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1266783120 { 0x4b819390 +1.1231575e24 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1184611 { 0x121363 +1.14121663e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1266783120 { 0x4b819390 +1.1231575e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1266783123 { 0x4b819393 +1.1231610e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 319850148 { 0x131086a4 +1.12910890e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 319850151 { 0x131086a7 +1.12910926e167 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda530 : BV:32
2 : Lambda531 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda535 : BV:32
2 : Lambda536 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1184608 { 0x121360 +1.14121627e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 28 num_edges_traversed 3
=global nodece 28 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3.ce5344.num_edges_traversed3
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3.ce5344 287817ff1d7925f25ca7fff5ef3ceffd
=input.spec-%var-x-1
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1618590963 ] -> 0, [ 1618590964; 1618590967 ] -> 255, [ 1618590968; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 922566007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 922566008; 922566011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 922566012; 1618590963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1618590964; 1618590967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1618590968; 1621415375 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1621415376; 1621415379 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1621415380; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778129394 { 0x69fc19f2 +1.96954178e84 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 922566011 { 0x36fd3d7b +1.97843873e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1621415379 { 0x60a4d5d3 +1.28777539e66 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda708 : BV:32
2 : Lambda709 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda713 : BV:32
2 : Lambda714 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1106379559
=counter_example_end
=global nodece 29 num_edges_traversed 3
=global nodece 29 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 30
=global nodece 30 nodece z3v487.ce5310.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3v487.ce5310 22e0cfe98754c1a11b1060dc2c788a21
=input.spec-%var-x-1
1 : Lambda12167 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12170 : BV:32
18 : Lambda12168 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12169 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 132; 135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 136; 8126479 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8126480; 8126483 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8126484; 2390753283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2390753284; 2390753287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2390753288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12180 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12183 : BV:32
18 : Lambda12181 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12182 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2059567693 { 0x7ac2824d +1.51960146e118 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1730263874 { 0x6721bb42 +1.26352715e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 135 { 0x87 +1.1609e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2390753287 { 0x8e800007 -1904214009 -1.83e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8126483 { 0x7c0013 +1.96875226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1011426728
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 31
=global nodece 31 nodece z3v487.ce5583.num_edges_traversed1
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce5583 981963b5d158815337d8feb8d70275e
=input.spec-%var-x-1
1 : Lambda12835 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12838 : BV:32
18 : Lambda12836 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12837 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 183 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 184; 187 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 188; 3103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3104; 3107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3108; 2147483675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483676; 2147483679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483680; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3104 { 0xc20 +1.37002e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483676 { 0x8000001c -2147483620 -1.333e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 184 { 0xb8 +1.2193e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12848 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12851 : BV:32
18 : Lambda12849 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12850 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda12841 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda12842 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 551464392 { 0x20deadc8 +1.73967838e194 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12854 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12855 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12858 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12859 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1547336228 { 0x5c3a7a24 +1.45685243e57 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483676 { 0x8000001c -2147483620 -1.333e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483679 { 0x8000001f -2147483617 -1.369e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 184 { 0xb8 +1.2193e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 187 { 0xbb +1.2229e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3104 { 0xc20 +1.37002e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3107 { 0xc23 +1.37038e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2699471338
=counter_example_end
=global nodece 31 num_edges_traversed 1
=global nodece 31 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3.ce5646.num_edges_traversed1
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce5646 bf58edc29ffa756bf8f531ad0eb9d
=input.spec-%var-x-1
1 : Lambda13226 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13229 : BV:32
18 : Lambda13227 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13228 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 66 { 0x42 +1.786e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 240, [ 1; 1 ] -> 255, [ 2; 2 ] -> 223, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1210561407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1210561408; 1210561411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1210561412; 1500699135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1500699136; 1500699139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1500699140; 4042915859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4042915860; 4042915863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4042915864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13233 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13236 : BV:32
18 : Lambda13234 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13235 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda13269 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda13270 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : eq(11, 7) : BOOL
16 : 239 { 0xef -17 } : BV:8
17 : eq(11, 1) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 223 { 0xdf -33 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13273 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13274 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13277 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13278 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1210561411 { 0x4827b383 +1.31016576e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1500699139 { 0x5972da03 +1.89727818e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4042915863 { 0xf0fa0017 -252051433 -1.95312774e98 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda13193 : BV:32
2 : Lambda13194 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda13195 : BV:32
2 : Lambda13196 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1282042378
=counter_example_end
=global nodece 32 num_edges_traversed 1
=global nodece 32 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 33
=global nodece 33 nodece z3.ce5679.num_edges_traversed3
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3.ce5679 aa3e59dedcbac9147cc25bcb27d1e344
=input.spec-%var-x-1
1 : Lambda13226 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13229 : BV:32
18 : Lambda13227 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13228 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 66 { 0x42 +1.786e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 240, [ 1; 1 ] -> 255, [ 2; 2 ] -> 223, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1210561407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1210561408; 1210561411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1210561412; 1500699135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1500699136; 1500699139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1500699140; 4042915859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4042915860; 4042915863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4042915864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13233 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13236 : BV:32
18 : Lambda13234 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13235 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda13289 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda13290 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : eq(11, 7) : BOOL
16 : 239 { 0xef -17 } : BV:8
17 : eq(11, 1) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 223 { 0xdf -33 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1863350231 { 0x6f1077d7 +1.12865722e95 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13293 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13294 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13297 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13298 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 900103939 { 0x35a67f03 +1.30075109e236 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1210561411 { 0x4827b383 +1.31016576e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1500699139 { 0x5972da03 +1.89727818e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4042915863 { 0xf0fa0017 -252051433 -1.95312774e98 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda13193 : BV:32
2 : Lambda13194 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda13195 : BV:32
2 : Lambda13196 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3815732754
=counter_example_end
=global nodece 33 num_edges_traversed 3
=global nodece 33 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 34
=global nodece 34 nodece z3.ce5714.num_edges_traversed4
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(epsilon)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce5714 499dd2691c49fe78beafd2fca61579a
=input.spec-%var-x-1
1 : Lambda13226 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13229 : BV:32
18 : Lambda13227 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13228 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 66 { 0x42 +1.786e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 240, [ 1; 1 ] -> 255, [ 2; 2 ] -> 223, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1210561407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1210561408; 1210561411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1210561412; 1500699135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1500699136; 1500699139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1500699140; 4042915859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4042915860; 4042915863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4042915864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13233 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13236 : BV:32
18 : Lambda13234 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13235 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1863350232 { 0x6f1077d8 +1.12865734e95 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 900103940 { 0x35a67f04 +1.30075120e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1210561411 { 0x4827b383 +1.31016576e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1500699139 { 0x5972da03 +1.89727818e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4042915863 { 0xf0fa0017 -252051433 -1.95312774e98 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda13193 : BV:32
2 : Lambda13194 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda13195 : BV:32
2 : Lambda13196 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3815732754
=counter_example_end
=global nodece 34 num_edges_traversed 4
=global nodece 34 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 35
=global nodece 35 nodece z3v487.ce5740.num_edges_traversed1
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3v487.ce5740 9a1c91adc2af2231f34a1f5ac603cae
=input.spec-%var-x-1
1 : Lambda13807 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13810 : BV:32
18 : Lambda13808 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13809 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 20; 10251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 10252; 10255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 10256; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 10252 { 0x280c +1.122213e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13820 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13823 : BV:32
18 : Lambda13821 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13822 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda13813 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda13814 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 444074487 { 0x1a7809f7 +1.93780410e181 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda13827 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13830 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda13831 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2070624225 { 0x7b6b37e1 +1.83764278e119 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 10252 { 0x280c +1.122213e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 10255 { 0x280f +1.122249e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
154790306
=counter_example_end
=global nodece 35 num_edges_traversed 1
=global nodece 35 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 36
=global nodece 36 nodece z3v487.ce5803.num_edges_traversed1
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce5803 b281e19e02929ca401b192ba33ee265
=input.spec-%var-x-1
1 : Lambda13984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13987 : BV:32
18 : Lambda13985 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13986 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 67108863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67108864; 67108867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 67108868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13997 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14000 : BV:32
18 : Lambda13998 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13999 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda13990 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda13991 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1814544015 { 0x6c27be8f +1.31050288e89 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14003 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda14004 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14007 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda14008 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1218224662 { 0x489ca216 +1.22369647e18 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 67108867 { 0x4000003 +1.35e137 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2870024300
=counter_example_end
=global nodece 36 num_edges_traversed 1
=global nodece 36 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 37
=global nodece 37 nodece z3.ce5847.num_edges_traversed1
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3.ce5847 6baac43d7beea27a9f6bf9a53785afc0
=input.spec-%var-x-1
1 : Lambda14329 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3007537184 { 0xb3436020 -1287430112 -1.52637100e231 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3007537185 { 0xb3436021 -1287430111 -1.52637112e231 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14332 : BV:32
18 : Lambda14330 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14331 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 248 { 0xf8 -8 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 251 { 0xfb -5 } : BV:8
33 : 222 { 0xde -34 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1788035616 { 0x6a934220 +1.15045547e86 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3007537185 { 0xb3436021 -1287430111 -1.52637112e231 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 248, [ 1; 1 ] -> 251, [ 2; 2 ] -> 222, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1067331975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1067331976; 1067331979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1067331980; 2454220787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2454220788; 2454220791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2454220792; 3453530863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3453530864; 3453530867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3453530868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3453530864 { 0xcdd8b2f0 -841436432 -1.69296073e28 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2454220788 { 0x92486ff4 -1840746508 -1.56591653e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1067331976 { 0x3f9e3188 +1.23588657e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14336 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3007537184 { 0xb3436020 -1287430112 -1.52637100e231 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3007537185 { 0xb3436021 -1287430111 -1.52637112e231 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14339 : BV:32
18 : Lambda14337 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14338 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 248 { 0xf8 -8 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 251 { 0xfb -5 } : BV:8
33 : 222 { 0xde -34 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda14372 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda14373 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 3739147998 { 0xdededede -555819298 -1.74117636e62 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 248 { 0xf8 -8 } : BV:8
15 : eq(11, 7) : BOOL
16 : 239 { 0xef -17 } : BV:8
17 : eq(11, 1) : BOOL
18 : 251 { 0xfb -5 } : BV:8
19 : 222 { 0xde -34 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1788035616 { 0x6a934220 +1.15045547e86 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1788035617 { 0x6a934221 +1.15045559e86 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14376 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14377 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3739147998 { 0xdededede -555819298 -1.74117636e62 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 248 { 0xf8 -8 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 251 { 0xfb -5 } : BV:8
18 : 222 { 0xde -34 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14380 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14381 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3739147998 { 0xdededede -555819298 -1.74117636e62 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 248 { 0xf8 -8 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 251 { 0xfb -5 } : BV:8
18 : 222 { 0xde -34 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1788035616 { 0x6a934220 +1.15045547e86 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2454220788 { 0x92486ff4 -1840746508 -1.56591653e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2454220791 { 0x92486ff7 -1840746505 -1.56591689e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1067331976 { 0x3f9e3188 +1.23588657e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1067331979 { 0x3f9e318b +1.23588693e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3453530864 { 0xcdd8b2f0 -841436432 -1.69296073e28 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3453530867 { 0xcdd8b2f3 -841436429 -1.69296109e28 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3007537184 ] -> true, [ 3007537185; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda14296 : BV:32
2 : Lambda14297 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 248 { 0xf8 -8 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 251 { 0xfb -5 } : BV:8
16 : 222 { 0xde -34 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3007537184 ] -> true, [ 3007537185; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda14298 : BV:32
2 : Lambda14299 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 248 { 0xf8 -8 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 251 { 0xfb -5 } : BV:8
16 : 222 { 0xde -34 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4049505038
=counter_example_end
=global nodece 37 num_edges_traversed 1
=global nodece 37 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 38
=global nodece 38 nodece z3.ce5880.num_edges_traversed2
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(epsilon)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce5880 db90f8f8bef46542d5544dbc5df6f20
=input.spec-%var-x-1
1 : Lambda14329 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3007537184 { 0xb3436020 -1287430112 -1.52637100e231 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3007537185 { 0xb3436021 -1287430111 -1.52637112e231 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14332 : BV:32
18 : Lambda14330 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14331 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 248 { 0xf8 -8 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 251 { 0xfb -5 } : BV:8
33 : 222 { 0xde -34 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1788035617 { 0x6a934221 +1.15045559e86 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3007537185 { 0xb3436021 -1287430111 -1.52637112e231 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 248, [ 1; 1 ] -> 251, [ 2; 2 ] -> 222, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1067331975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1067331976; 1067331979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1067331980; 2454220787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2454220788; 2454220791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2454220792; 3453530863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3453530864; 3453530867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3453530868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3453530864 { 0xcdd8b2f0 -841436432 -1.69296073e28 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2454220788 { 0x92486ff4 -1840746508 -1.56591653e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1067331976 { 0x3f9e3188 +1.23588657e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14336 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3007537184 { 0xb3436020 -1287430112 -1.52637100e231 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3007537185 { 0xb3436021 -1287430111 -1.52637112e231 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14339 : BV:32
18 : Lambda14337 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14338 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 248 { 0xf8 -8 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 251 { 0xfb -5 } : BV:8
33 : 222 { 0xde -34 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 509062918 { 0x1e57af06 +1.68502879e189 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1788035617 { 0x6a934221 +1.15045559e86 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1731761873 { 0x673896d1 +1.44210255e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2454220788 { 0x92486ff4 -1840746508 -1.56591653e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2454220791 { 0x92486ff7 -1840746505 -1.56591689e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1067331976 { 0x3f9e3188 +1.23588657e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1067331979 { 0x3f9e318b +1.23588693e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3453530864 { 0xcdd8b2f0 -841436432 -1.69296073e28 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3453530867 { 0xcdd8b2f3 -841436429 -1.69296109e28 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3007537184 ] -> true, [ 3007537185; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda14296 : BV:32
2 : Lambda14297 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 248 { 0xf8 -8 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 251 { 0xfb -5 } : BV:8
16 : 222 { 0xde -34 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3007537184 ] -> true, [ 3007537185; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda14298 : BV:32
2 : Lambda14299 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 248 { 0xf8 -8 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 251 { 0xfb -5 } : BV:8
16 : 222 { 0xde -34 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1339726998
=counter_example_end
=global nodece 38 num_edges_traversed 2
=global nodece 38 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 39
=global nodece 39 nodece z3v487.ce5928.num_edges_traversed1
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce5928 c9382272fe62663d6d88fac238d8f8
=input.spec-%var-x-1
1 : Lambda14507 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3164492487 { 0xbc9e52c7 -1130474809 -1.23690116e250 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14510 : BV:32
18 : Lambda14508 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14509 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 2147492703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147492704; 2147492707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147492708; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147492704 { 0x80002360 -2147474592 -1.107955e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14516 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3164492487 { 0xbc9e52c7 -1130474809 -1.23690116e250 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14519 : BV:32
18 : Lambda14517 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14518 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda14548 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda14549 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14552 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14553 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14556 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14557 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147492704 { 0x80002360 -2147474592 -1.107955e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147492707 { 0x80002363 -2147474589 -1.107991e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3164492487 ] -> true, [ 3164492488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3164492487 ] -> true, [ 3164492488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1457548299
=counter_example_end
=global nodece 39 num_edges_traversed 1
=global nodece 39 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 40
=global nodece 40 nodece z3v487.ce5961.num_edges_traversed3
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3v487.ce5961 70c220aff9cb19b547cbec730e0aa0
=input.spec-%var-x-1
1 : Lambda14507 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3164492487 { 0xbc9e52c7 -1130474809 -1.23690116e250 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14510 : BV:32
18 : Lambda14508 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14509 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 2147492703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147492704; 2147492707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147492708; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147492704 { 0x80002360 -2147474592 -1.107955e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14516 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3164492487 { 0xbc9e52c7 -1130474809 -1.23690116e250 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14519 : BV:32
18 : Lambda14517 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14518 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda14568 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda14569 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 291272068 { 0x115c7584 +1.72233629e163 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14572 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14573 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14576 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14577 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 532640872 { 0x1fbf7468 +1.49573993e192 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147492704 { 0x80002360 -2147474592 -1.107955e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147492707 { 0x80002363 -2147474589 -1.107991e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3164492487 ] -> true, [ 3164492488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3164492487 ] -> true, [ 3164492488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1032888691
=counter_example_end
=global nodece 40 num_edges_traversed 3
=global nodece 40 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce5996.num_edges_traversed4
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce5996 5e5d91af57acb73c5e3a3d538f628598
=input.spec-%var-x-1
1 : Lambda14507 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3164492487 { 0xbc9e52c7 -1130474809 -1.23690116e250 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14510 : BV:32
18 : Lambda14508 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14509 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 2147492703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147492704; 2147492707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147492708; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147492704 { 0x80002360 -2147474592 -1.107955e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14516 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3164492487 { 0xbc9e52c7 -1130474809 -1.23690116e250 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3164492488 { 0xbc9e52c8 -1130474808 -1.23690128e250 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14519 : BV:32
18 : Lambda14517 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14518 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 291272069 { 0x115c7585 +1.72233641e163 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 532640873 { 0x1fbf7469 +1.49574005e192 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147492704 { 0x80002360 -2147474592 -1.107955e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147492707 { 0x80002363 -2147474589 -1.107991e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3164492487 ] -> true, [ 3164492488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3164492487 ] -> true, [ 3164492488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1032888691
=counter_example_end
=global nodece 41 num_edges_traversed 4
=global nodece 41 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 42
=global nodece 42 nodece z3v487.ce6022.num_edges_traversed1
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce6022 7c433d6792d45a9f6203fb72bd5a976
=input.spec-%var-x-1
1 : Lambda14934 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3194682686 { 0xbe6afd3e -1100284610 -1.83585333e253 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3194682687 { 0xbe6afd3f -1100284609 -1.83585345e253 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14937 : BV:32
18 : Lambda14935 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14936 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3087007743 { 0xb7ffffff -1207959553 -1.99999988e240 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3194682687 { 0xbe6afd3f -1100284609 -1.83585345e253 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 32767 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32768; 32771 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 32772; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14947 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3194682686 { 0xbe6afd3e -1100284610 -1.83585333e253 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3194682687 { 0xbe6afd3f -1100284609 -1.83585345e253 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14950 : BV:32
18 : Lambda14948 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14949 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda14940 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda14941 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1391476194 { 0x52f03de2 +1.87688851e38 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3087007742 { 0xb7fffffe -1207959554 -1.99999976e240 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3087007743 { 0xb7ffffff -1207959553 -1.99999988e240 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14953 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda14954 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14957 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda14958 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3087007743 { 0xb7ffffff -1207959553 -1.99999988e240 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 443105958 { 0x1a6942a6 +1.82234644e181 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 3087007743 { 0xb7ffffff -1207959553 -1.99999988e240 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 3087007743 { 0xb7ffffff -1207959553 -1.99999988e240 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 32771 { 0x8003 +1.390660e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3194682686 ] -> true, [ 3194682687; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3194682686 ] -> true, [ 3194682687; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
799934380
=counter_example_end
=global nodece 42 num_edges_traversed 1
=global nodece 42 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 43
=global nodece 43 nodece z3.ce6085.num_edges_traversed1
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3.ce6085 87f259ecde2f1ea37697d1690db1eb5
=input.spec-%var-x-1
1 : Lambda15223 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15226 : BV:32
17 : Lambda15224 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15225 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 253, [ 4294967288; 4294967288 ] -> 181, [ 4294967289; 4294967289 ] -> 246, [ 4294967290; 4294967290 ] -> 27, [ 4294967291; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 115723351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 115723352; 115723355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 115723356; 736885603 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 736885604; 736885607 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 736885608; 2494515579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2494515580; 2494515583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2494515584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15230 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15233 : BV:32
17 : Lambda15231 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15232 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda15266 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda15267 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 4246468277 { 0xfd1bf6b5 -48499019 -1.21846640e123 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 246 { 0xf6 -10 } : BV:8
15 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 27 { 0x1b } : BV:8
18 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 181 { 0xb5 -75 } : BV:8
21 : 253 { 0xfd -3 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : eq(26, 18) : BOOL
30 : ite(29, 20, 21) : BV:8
31 : ite(28, 17, 30) : BV:8
32 : ite(27, 14, 31) : BV:8
33 : bvadd(1, 9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : ite(36, 20, 21) : BV:8
38 : ite(35, 17, 37) : BV:8
39 : ite(34, 14, 38) : BV:8
40 : bvadd(9, 10) : BV:32
41 : eq(40, 12) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : ite(43, 20, 21) : BV:8
45 : ite(42, 17, 44) : BV:8
46 : ite(41, 14, 45) : BV:8
47 : bvconcat(24, 32, 39, 46) : BV:32
48 : lambda(6, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(5, 48) : MAP[BV:32 -> BV:32]
50 : sum(1, 2, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda15270 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15271 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4246468277 { 0xfd1bf6b5 -48499019 -1.21846640e123 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 246 { 0xf6 -10 } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 27 { 0x1b } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 181 { 0xb5 -75 } : BV:8
19 : 253 { 0xfd -3 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda15274 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15275 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4246468277 { 0xfd1bf6b5 -48499019 -1.21846640e123 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 246 { 0xf6 -10 } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 27 { 0x1b } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 181 { 0xb5 -75 } : BV:8
19 : 253 { 0xfd -3 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 736885607 { 0x2bebfb67 +1.84360969e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 115723355 { 0x6e5cc5b +1.79529893e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2494515583 { 0x94af497f -1800451713 -1.36943042e170 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15190 : BV:32
2 : Lambda15191 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15192 : BV:32
2 : Lambda15193 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3070048933
=counter_example_end
=global nodece 43 num_edges_traversed 1
=global nodece 43 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 44
=global nodece 44 nodece z3.ce6118.num_edges_traversed2
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3.ce6118 ecf0440909ae1b235fdcd69733a92bb
=input.spec-%var-x-1
1 : Lambda15223 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15226 : BV:32
17 : Lambda15224 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15225 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 253, [ 4294967288; 4294967288 ] -> 181, [ 4294967289; 4294967289 ] -> 246, [ 4294967290; 4294967290 ] -> 27, [ 4294967291; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 115723351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 115723352; 115723355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 115723356; 736885603 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 736885604; 736885607 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 736885608; 2494515579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2494515580; 2494515583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2494515584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15230 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15233 : BV:32
17 : Lambda15231 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15232 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 457379734 { 0x1b430f96 +1.52391314e183 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 619030961 { 0x24e5a9b1 +1.79424107e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 736885607 { 0x2bebfb67 +1.84360969e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 115723355 { 0x6e5cc5b +1.79529893e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2494515583 { 0x94af497f -1800451713 -1.36943042e170 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15190 : BV:32
2 : Lambda15191 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15192 : BV:32
2 : Lambda15193 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3702002637
=counter_example_end
=global nodece 44 num_edges_traversed 2
=global nodece 44 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 45
=global nodece 45 nodece z3.ce6148.num_edges_traversed1
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce6148 b2d6ecb17f53f6afd6888f56024fb33
=input.spec-%var-x-1
1 : Lambda15646 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15649 : BV:32
17 : Lambda15647 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15648 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 41943043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 41943044; 41943047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 41943048; 2878023327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2878023328; 2878023331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2878023332; 2952823471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2952823472; 2952823475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2952823476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15659 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15662 : BV:32
17 : Lambda15660 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15661 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 64 { 0x40 +1.762e129 } : BV:32
2 : unit : UNIT
3 : Lambda15652 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda15653 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 735184678 { 0x2bd20726 +1.64084315e216 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda15665 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda15666 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda15669 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda15670 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1553404948 { 0x5c971414 +1.18030023e58 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2878023331 { 0xab8b26a3 -1416943965 -1.8711659e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 41943047 { 0x2800007 +1.83e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2952823475 { 0xb00082b3 -1342143821 -1.398862e225 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
458102581
=counter_example_end
=global nodece 45 num_edges_traversed 1
=global nodece 45 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 46
=global nodece 46 nodece z3.ce6192.num_edges_traversed0
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3.ce6192 c0a9c89fd6c77d91672bfeb5a7172989
=input.spec-%var-x-1
1 : Lambda16005 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16008 : BV:32
18 : Lambda16006 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16007 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
82 : eq(80, 81) : BOOL
83 : 192 { 0xc0 -64 } : BV:8
84 : eq(80, 78) : BOOL
85 : 175 { 0xaf -81 } : BV:8
86 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
87 : eq(80, 86) : BOOL
88 : 121 { 0x79 } : BV:8
89 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
90 : eq(80, 89) : BOOL
91 : 184 { 0xb8 -72 } : BV:8
92 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
93 : eq(80, 92) : BOOL
94 : 47 { 0x2f } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(82, 83, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 81) : BOOL
103 : eq(101, 78) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 83, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 83, 121) : BV:8
123 : bvadd(86, 79) : BV:32
124 : eq(123, 81) : BOOL
125 : eq(123, 78) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 83, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 78) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 83, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 83, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 78) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 83, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 81) : BOOL
172 : eq(170, 78) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 83, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
=input.dst.llvm-%n
1 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 14679855 ] -> 0, [ 14679856; 14679856 ] -> 121, [ 14679857; 14679857 ] -> 47, [ 14679858; 14679858 ] -> 184, [ 14679859; 14679859 ] -> 175, [ 14679860; 117440510 ] -> 0, [ 117440511; 117440511 ] -> 192, [ 117440512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 334788735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 334788736; 334788739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 334788740; 1274435803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1274435804; 1274435807 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1274435808; 1342058743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1342058744; 1342058747 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1342058748; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1342058744 { 0x4ffe30f8 +1.98586940e32 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1274435804 { 0x4bf658dc +1.92458677e24 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 334788736 { 0x13f47880 +1.90992736e168 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16013 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16016 : BV:32
18 : Lambda16014 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16015 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
63 : eq(61, 62) : BOOL
64 : 192 { 0xc0 -64 } : BV:8
65 : eq(61, 59) : BOOL
66 : 175 { 0xaf -81 } : BV:8
67 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
68 : eq(61, 67) : BOOL
69 : 121 { 0x79 } : BV:8
70 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
71 : eq(61, 70) : BOOL
72 : 184 { 0xb8 -72 } : BV:8
73 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
74 : eq(61, 73) : BOOL
75 : 47 { 0x2f } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 62) : BOOL
84 : eq(82, 59) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 64, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 64, 102) : BV:8
104 : bvadd(67, 60) : BV:32
105 : eq(104, 62) : BOOL
106 : eq(104, 59) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 64, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 59) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 64, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 64, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 59) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 62) : BOOL
153 : eq(151, 59) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 64, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda16010 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16011 : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
27 : eq(25, 26) : BOOL
28 : 192 { 0xc0 -64 } : BV:8
29 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
30 : eq(25, 29) : BOOL
31 : 175 { 0xaf -81 } : BV:8
32 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
33 : eq(25, 32) : BOOL
34 : 121 { 0x79 } : BV:8
35 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
36 : eq(25, 35) : BOOL
37 : 184 { 0xb8 -72 } : BV:8
38 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
39 : eq(25, 38) : BOOL
40 : 47 { 0x2f } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(30, 31, 44) : BV:8
46 : ite(27, 28, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 23, 24) : BV:32
49 : eq(48, 26) : BOOL
50 : eq(48, 29) : BOOL
51 : eq(48, 32) : BOOL
52 : eq(48, 35) : BOOL
53 : eq(48, 38) : BOOL
54 : ite(53, 40, 41) : BV:8
55 : ite(52, 37, 54) : BV:8
56 : ite(51, 34, 55) : BV:8
57 : ite(50, 31, 56) : BV:8
58 : ite(49, 28, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : ite(65, 40, 41) : BV:8
67 : ite(64, 37, 66) : BV:8
68 : ite(63, 34, 67) : BV:8
69 : ite(62, 31, 68) : BV:8
70 : ite(61, 28, 69) : BV:8
71 : bvadd(23, 24) : BV:32
72 : eq(71, 26) : BOOL
73 : eq(71, 29) : BOOL
74 : eq(71, 32) : BOOL
75 : eq(71, 35) : BOOL
76 : eq(71, 38) : BOOL
77 : ite(76, 40, 41) : BV:8
78 : ite(75, 37, 77) : BV:8
79 : ite(74, 34, 78) : BV:8
80 : ite(73, 31, 79) : BV:8
81 : ite(72, 28, 80) : BV:8
82 : bvconcat(46, 58, 70, 81) : BV:32
83 : ite(20, 4, 82) : BV:32
84 : lambda(19, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(18, 84) : MAP[BV:32 -> BV:32]
86 : sum(1, 2, 85) : SUM[UNIT,MAP[BV:32 -> BV:32]]
87 : sym_const(86) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 25690164 { 0x1880034 +1.6250619e132 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16018 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16019 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
25 : eq(23, 24) : BOOL
26 : 192 { 0xc0 -64 } : BV:8
27 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
28 : eq(23, 27) : BOOL
29 : 175 { 0xaf -81 } : BV:8
30 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
31 : eq(23, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
34 : eq(23, 33) : BOOL
35 : 184 { 0xb8 -72 } : BV:8
36 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
37 : eq(23, 36) : BOOL
38 : 47 { 0x2f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16021 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16022 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
25 : eq(23, 24) : BOOL
26 : 192 { 0xc0 -64 } : BV:8
27 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
28 : eq(23, 27) : BOOL
29 : 175 { 0xaf -81 } : BV:8
30 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
31 : eq(23, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
34 : eq(23, 33) : BOOL
35 : 184 { 0xb8 -72 } : BV:8
36 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
37 : eq(23, 36) : BOOL
38 : 47 { 0x2f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1274435804 { 0x4bf658dc +1.92458677e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1274435807 { 0x4bf658df +1.92458713e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 334788736 { 0x13f47880 +1.90992736e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 334788739 { 0x13f47883 +1.90992772e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1342058744 { 0x4ffe30f8 +1.98586940e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1342058747 { 0x4ffe30fb +1.98586976e32 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2168717331 ] -> true, [ 2168717332; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15932 : BV:32
2 : Lambda15933 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15937 : BV:32
2 : Lambda15938 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
55 : eq(53, 54) : BOOL
56 : 192 { 0xc0 -64 } : BV:8
57 : eq(53, 51) : BOOL
58 : 175 { 0xaf -81 } : BV:8
59 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
60 : eq(53, 59) : BOOL
61 : 121 { 0x79 } : BV:8
62 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
63 : eq(53, 62) : BOOL
64 : 184 { 0xb8 -72 } : BV:8
65 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
66 : eq(53, 65) : BOOL
67 : 47 { 0x2f } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(55, 56, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 54) : BOOL
76 : eq(74, 51) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 56, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 56, 94) : BV:8
96 : bvadd(59, 52) : BV:32
97 : eq(96, 54) : BOOL
98 : eq(96, 51) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 56, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 51) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 56, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 56, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 51) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 56, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 54) : BOOL
145 : eq(143, 51) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 56, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2168717331 ] -> true, [ 2168717332; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15943 : BV:32
2 : Lambda15944 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15939 : BV:32
2 : Lambda15940 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : eq(12, 10) : BOOL
17 : 175 { 0xaf -81 } : BV:8
18 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
19 : eq(12, 18) : BOOL
20 : 121 { 0x79 } : BV:8
21 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
22 : eq(12, 21) : BOOL
23 : 184 { 0xb8 -72 } : BV:8
24 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
25 : eq(12, 24) : BOOL
26 : 47 { 0x2f } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 13) : BOOL
35 : eq(33, 10) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 15, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 15, 53) : BV:8
55 : bvadd(18, 11) : BV:32
56 : eq(55, 13) : BOOL
57 : eq(55, 10) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 15, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 10) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 15, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 15, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 10) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 15, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 13) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 15, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda15950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15954 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15958 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3733531539
=counter_example_end
=global nodece 46 num_edges_traversed 0
=global nodece 46 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3v487.ce6193.num_edges_traversed0
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce6193 c53b98a71117e51ae2e82edc52546b1
=input.spec-%var-x-1
1 : Lambda16038 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3223844845 { 0xc027f7ed -1071122451 -1.31225359e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3223844846 { 0xc027f7ee -1071122450 -1.31225371e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16041 : BV:32
18 : Lambda16039 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3223844847 { 0xc027f7ef -1071122449 -1.31225383e1 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 63 { 0x3f +1.751e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 64 { 0x40 +1.762e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65 { 0x41 +1.774e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16040 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2097483 { 0x20014b +1.25003945e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
63 : eq(61, 62) : BOOL
64 : 100 { 0x64 } : BV:8
65 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
66 : eq(61, 65) : BOOL
67 : 34 { 0x22 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : 2097482 { 0x20014a +1.25003933e129 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : eq(72, 65) : BOOL
75 : ite(74, 67, 68) : BV:8
76 : ite(73, 64, 75) : BV:8
77 : 2097481 { 0x200149 +1.25003921e129 } : BV:32
78 : bvadd(77, 60) : BV:32
79 : eq(78, 62) : BOOL
80 : eq(78, 65) : BOOL
81 : ite(80, 67, 68) : BV:8
82 : ite(79, 64, 81) : BV:8
83 : 2097480 { 0x200148 +1.25003910e129 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 64, 87) : BV:8
89 : bvconcat(70, 76, 82, 88) : BV:32
90 : bvadd(56, 58, 89) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 65) : BOOL
93 : ite(92, 67, 68) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : 2 { 0x2 +1.23e129 } : BV:32
96 : bvadd(95, 58, 89) : BV:32
97 : eq(96, 62) : BOOL
98 : eq(96, 65) : BOOL
99 : ite(98, 67, 68) : BV:8
100 : ite(97, 64, 99) : BV:8
101 : 1 { 0x1 +1.11e129 } : BV:32
102 : bvadd(101, 58, 89) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 64, 105) : BV:8
107 : bvadd(58, 89) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : ite(109, 67, 68) : BV:8
111 : ite(108, 64, 110) : BV:8
112 : bvconcat(94, 100, 106, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : lambda(52, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(51, 114) : MAP[BV:32 -> BV:32]
116 : lambda(17, 115) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
117 : map(16, 116) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
118 : sym_const(117) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2155872255 { 0x807fffff -2139095041 -1.99999988e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2097480 { 0x200148 +1.25003910e129 } : BV:32
=input.dst.llvm-%n
1 : 3223844846 { 0xc027f7ee -1071122450 -1.31225371e1 } : BV:32
=input.dst.llvm-%m
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 35651909 ] -> 0, [ 35651910; 35651910 ] -> 100, [ 35651911; 35651911 ] -> 34, [ 35651912; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 602934335 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 602934336; 602934339 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 602934340; 2188772867 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2188772868; 2188772871 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2188772872; 2191785987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2191785988; 2191785991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2191785992; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2188772868 { 0x82760604 -2106194428 -1.92205858e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2191785988 { 0x82a40004 -2103181308 -1.28125047e134 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 602934336 { 0x23f00c40 +1.87537384e200 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16046 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3223844845 { 0xc027f7ed -1071122451 -1.31225359e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3223844846 { 0xc027f7ee -1071122450 -1.31225371e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16049 : BV:32
18 : Lambda16047 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3223844847 { 0xc027f7ef -1071122449 -1.31225383e1 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 63 { 0x3f +1.751e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 64 { 0x40 +1.762e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65 { 0x41 +1.774e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16048 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2097483 { 0x20014b +1.25003945e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
82 : eq(80, 81) : BOOL
83 : 100 { 0x64 } : BV:8
84 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
85 : eq(80, 84) : BOOL
86 : 34 { 0x22 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : 2097482 { 0x20014a +1.25003933e129 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : eq(91, 84) : BOOL
94 : ite(93, 86, 87) : BV:8
95 : ite(92, 83, 94) : BV:8
96 : 2097481 { 0x200149 +1.25003921e129 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : ite(99, 86, 87) : BV:8
101 : ite(98, 83, 100) : BV:8
102 : 2097480 { 0x200148 +1.25003910e129 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 83, 106) : BV:8
108 : bvconcat(89, 95, 101, 107) : BV:32
109 : bvadd(75, 77, 108) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : ite(111, 86, 87) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 77, 108) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 86, 87) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 77, 108) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 83, 124) : BV:8
126 : bvadd(77, 108) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : ite(128, 86, 87) : BV:8
130 : ite(127, 83, 129) : BV:8
131 : bvconcat(113, 119, 125, 130) : BV:32
132 : ite(55, 2, 131) : BV:32
133 : ite(74, 131, 132) : BV:32
134 : ite(55, 2, 133) : BV:32
135 : lambda(52, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(51, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda16043 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 63 { 0x3f +1.751e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 64 { 0x40 +1.762e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16044 : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 576978944 { 0x22640000 +1.78125000e197 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
27 : eq(25, 26) : BOOL
28 : 100 { 0x64 } : BV:8
29 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
30 : eq(25, 29) : BOOL
31 : 34 { 0x22 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 23, 24) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(23, 24) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : ite(20, 4, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : sum(1, 2, 55) : SUM[UNIT,MAP[BV:32 -> BV:32]]
57 : sym_const(56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2155872255 { 0x807fffff -2139095041 -1.99999988e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2155872256 { 0x80800000 -2139095040 -1.0e130 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16051 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16052 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 576978944 { 0x22640000 +1.78125000e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
25 : eq(23, 24) : BOOL
26 : 100 { 0x64 } : BV:8
27 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
28 : eq(23, 27) : BOOL
29 : 34 { 0x22 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : eq(34, 27) : BOOL
37 : ite(36, 29, 30) : BV:8
38 : ite(35, 26, 37) : BV:8
39 : 1 { 0x1 +1.11e129 } : BV:32
40 : bvadd(39, 21, 22) : BV:32
41 : eq(40, 24) : BOOL
42 : eq(40, 27) : BOOL
43 : ite(42, 29, 30) : BV:8
44 : ite(41, 26, 43) : BV:8
45 : bvadd(21, 22) : BV:32
46 : eq(45, 24) : BOOL
47 : eq(45, 27) : BOOL
48 : ite(47, 29, 30) : BV:8
49 : ite(46, 26, 48) : BV:8
50 : bvconcat(32, 38, 44, 49) : BV:32
51 : ite(18, 2, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sym_const(53) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16054 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16055 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 576978944 { 0x22640000 +1.78125000e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
25 : eq(23, 24) : BOOL
26 : 100 { 0x64 } : BV:8
27 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
28 : eq(23, 27) : BOOL
29 : 34 { 0x22 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : eq(34, 27) : BOOL
37 : ite(36, 29, 30) : BV:8
38 : ite(35, 26, 37) : BV:8
39 : 1 { 0x1 +1.11e129 } : BV:32
40 : bvadd(39, 21, 22) : BV:32
41 : eq(40, 24) : BOOL
42 : eq(40, 27) : BOOL
43 : ite(42, 29, 30) : BV:8
44 : ite(41, 26, 43) : BV:8
45 : bvadd(21, 22) : BV:32
46 : eq(45, 24) : BOOL
47 : eq(45, 27) : BOOL
48 : ite(47, 29, 30) : BV:8
49 : ite(46, 26, 48) : BV:8
50 : bvconcat(32, 38, 44, 49) : BV:32
51 : ite(18, 2, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sym_const(53) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2155872255 { 0x807fffff -2139095041 -1.99999988e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2191785988 { 0x82a40004 -2103181308 -1.28125047e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2191785991 { 0x82a40007 -2103181305 -1.28125083e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 602934336 { 0x23f00c40 +1.87537384e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 602934339 { 0x23f00c43 +1.87537419e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2188772868 { 0x82760604 -2106194428 -1.92205858e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2188772871 { 0x82760607 -2106194425 -1.92205893e133 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3223844845 ] -> true, [ 3223844846; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15963 : BV:32
2 : Lambda15964 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3223844845 { 0xc027f7ed -1071122451 -1.31225359e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3223844847 { 0xc027f7ef -1071122449 -1.31225383e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3223844846 { 0xc027f7ee -1071122450 -1.31225371e1 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 63 { 0x3f +1.751e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 64 { 0x40 +1.762e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65 { 0x41 +1.774e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15968 : BV:32
2 : Lambda15969 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2097483 { 0x20014b +1.25003945e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
14 : eq(12, 13) : BOOL
15 : 100 { 0x64 } : BV:8
16 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
17 : eq(12, 16) : BOOL
18 : 34 { 0x22 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : 2097482 { 0x20014a +1.25003933e129 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : eq(23, 16) : BOOL
26 : ite(25, 18, 19) : BV:8
27 : ite(24, 15, 26) : BV:8
28 : 2097481 { 0x200149 +1.25003921e129 } : BV:32
29 : bvadd(28, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 16) : BOOL
32 : ite(31, 18, 19) : BV:8
33 : ite(30, 15, 32) : BV:8
34 : 2097480 { 0x200148 +1.25003910e129 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : ite(37, 18, 19) : BV:8
39 : ite(36, 15, 38) : BV:8
40 : bvconcat(21, 27, 33, 39) : BV:32
41 : bvadd(7, 9, 40) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 16) : BOOL
44 : ite(43, 18, 19) : BV:8
45 : ite(42, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 9, 40) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : ite(49, 18, 19) : BV:8
51 : ite(48, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 9, 40) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : bvadd(9, 40) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : ite(60, 18, 19) : BV:8
62 : ite(59, 15, 61) : BV:8
63 : bvconcat(45, 51, 57, 62) : BV:32
64 : ite(6, 3, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3223844845 ] -> true, [ 3223844846; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15972 : BV:32
2 : Lambda15973 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3223844845 { 0xc027f7ed -1071122451 -1.31225359e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3223844847 { 0xc027f7ef -1071122449 -1.31225383e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3223844846 { 0xc027f7ee -1071122450 -1.31225371e1 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 63 { 0x3f +1.751e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 64 { 0x40 +1.762e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65 { 0x41 +1.774e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15976 : BV:32
2 : Lambda15977 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3223844845 { 0xc027f7ed -1071122451 -1.31225359e1 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3223844846 { 0xc027f7ee -1071122450 -1.31225371e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3223844847 { 0xc027f7ef -1071122449 -1.31225383e1 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 63 { 0x3f +1.751e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 64 { 0x40 +1.762e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65 { 0x41 +1.774e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2097483 { 0x20014b +1.25003945e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
55 : eq(53, 54) : BOOL
56 : 100 { 0x64 } : BV:8
57 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
58 : eq(53, 57) : BOOL
59 : 34 { 0x22 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : 2097482 { 0x20014a +1.25003933e129 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : eq(64, 57) : BOOL
67 : ite(66, 59, 60) : BV:8
68 : ite(65, 56, 67) : BV:8
69 : 2097481 { 0x200149 +1.25003921e129 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : ite(72, 59, 60) : BV:8
74 : ite(71, 56, 73) : BV:8
75 : 2097480 { 0x200148 +1.25003910e129 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : bvconcat(62, 68, 74, 80) : BV:32
82 : bvadd(48, 50, 81) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : ite(84, 59, 60) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : bvadd(87, 50, 81) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : ite(90, 59, 60) : BV:8
92 : ite(89, 56, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 50, 81) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : bvadd(50, 81) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : ite(101, 59, 60) : BV:8
103 : ite(100, 56, 102) : BV:8
104 : bvconcat(86, 92, 98, 103) : BV:32
105 : ite(6, 3, 104) : BV:32
106 : ite(47, 104, 105) : BV:32
107 : ite(6, 3, 106) : BV:32
108 : lambda(1, 2, 107) : FUNCTION[BV:32,BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda15981 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 576978944 { 0x22640000 +1.78125000e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
10 : eq(8, 9) : BOOL
11 : 100 { 0x64 } : BV:8
12 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
13 : eq(8, 12) : BOOL
14 : 34 { 0x22 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15985 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 576978944 { 0x22640000 +1.78125000e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
10 : eq(8, 9) : BOOL
11 : 100 { 0x64 } : BV:8
12 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
13 : eq(8, 12) : BOOL
14 : 34 { 0x22 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15989 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 576978944 { 0x22640000 +1.78125000e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 35651910 { 0x2200146 +1.25003886e133 } : BV:32
10 : eq(8, 9) : BOOL
11 : 100 { 0x64 } : BV:8
12 : 35651911 { 0x2200147 +1.25003898e133 } : BV:32
13 : eq(8, 12) : BOOL
14 : 34 { 0x22 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
184191557
=counter_example_end
=global nodece 47 num_edges_traversed 0
=global nodece 47 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 48
=global nodece 48 nodece z3v487.ce6339.num_edges_traversed3
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3v487.ce6339 e13465c96ad6e35a79af365f47fcfb
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 48 num_edges_traversed 3
=global nodece 48 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3v487.ce6385.num_edges_traversed4
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3v487.ce6385 b0fa49528fbb6c6c5a32f8a2c0bacc8
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2139062144 { 0x7f7f7f80 +1.99607849e127 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2139062144 { 0x7f7f7f80 +1.99607849e127 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 49 num_edges_traversed 4
=global nodece 49 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3v487.ce6421.num_edges_traversed5
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3v487.ce6421 e01b309a22e734bd61c679cb1bc75c2
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4278124288 { 0xfefeff00 -16843008 -1.99215698e126 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4278124288 { 0xfefeff00 -16843008 -1.99215698e126 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 50 num_edges_traversed 5
=global nodece 50 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3v487.ce6323.num_edges_traversed2
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3v487.ce6323 9e68dbbfacc1758c3b972beb3f875e6
=input.spec-%var-x-1
1 : Lambda2189 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2192 : BV:32
18 : Lambda2190 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2191 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2194 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2197 : BV:32
18 : Lambda2195 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2196 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2338 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2339 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2342 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2343 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2346 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2347 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2149 : BV:32
2 : Lambda2150 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2158 : BV:32
2 : Lambda2159 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2162 : BV:32
2 : Lambda2163 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3619306968
=counter_example_end
=global nodece 51 num_edges_traversed 2
=global nodece 51 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3v487.ce6457.num_edges_traversed3
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3v487.ce6457 cbee801bd2eb235e8edc56e658d931cf
=input.spec-%var-x-1
1 : Lambda2189 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2192 : BV:32
18 : Lambda2190 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2191 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2194 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2197 : BV:32
18 : Lambda2195 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2196 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2338 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2339 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2342 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2343 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2346 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2347 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2149 : BV:32
2 : Lambda2150 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2158 : BV:32
2 : Lambda2159 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2162 : BV:32
2 : Lambda2163 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3619306968
=counter_example_end
=global nodece 52 num_edges_traversed 3
=global nodece 52 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3v487.ce6493.num_edges_traversed4
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce6493 d73ba8b8b8f32eb54947c8abb984173
=input.spec-%var-x-1
1 : Lambda2189 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2192 : BV:32
18 : Lambda2190 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2191 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2194 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2197 : BV:32
18 : Lambda2195 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2196 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2338 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2339 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2342 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2343 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2346 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2347 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2149 : BV:32
2 : Lambda2150 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2158 : BV:32
2 : Lambda2159 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2162 : BV:32
2 : Lambda2163 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3619306968
=counter_example_end
=global nodece 53 num_edges_traversed 4
=global nodece 53 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3.ce6300.num_edges_traversed2
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce6300 126afe54cd80b91d373bf74e1543cdaf
=input.spec-%var-x-1
1 : Lambda7845 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7848 : BV:32
18 : Lambda7846 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda7847 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 140 { 0x8c -116 } : BV:8
81 : eq(78, 74) : BOOL
82 : 225 { 0xe1 -31 } : BV:8
83 : eq(78, 36) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : eq(78, 40) : BOOL
86 : 216 { 0xd8 -40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 140, [ 1; 1 ] -> 223, [ 2; 2 ] -> 216, [ 3; 3 ] -> 225, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059478939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059478940; 1059478943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059478944; 2715420247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2715420248; 2715420251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2715420252; 3966472715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3966472716; 3966472719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3966472720; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7853 : BV:32
18 : Lambda7851 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda7852 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 140 { 0x8c -116 } : BV:8
62 : eq(59, 55) : BOOL
63 : 225 { 0xe1 -31 } : BV:8
64 : eq(59, 36) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : eq(59, 40) : BOOL
67 : 216 { 0xd8 -40 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9012 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9013 : BV:32
26 : eq(25, 5) : BOOL
27 : and(4, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
32 : bvadd(28, 30, 31) : BV:32
33 : eq(32, 5) : BOOL
34 : 140 { 0x8c -116 } : BV:8
35 : eq(32, 28) : BOOL
36 : 225 { 0xe1 -31 } : BV:8
37 : eq(32, 1) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : eq(32, 12) : BOOL
40 : 216 { 0xd8 -40 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(35, 36, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : bvadd(12, 30, 31) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 1) : BOOL
50 : eq(46, 12) : BOOL
51 : ite(50, 40, 41) : BV:8
52 : ite(49, 38, 51) : BV:8
53 : ite(48, 36, 52) : BV:8
54 : ite(47, 34, 53) : BV:8
55 : bvadd(1, 30, 31) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 28) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 12) : BOOL
60 : ite(59, 40, 41) : BV:8
61 : ite(58, 38, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : bvadd(30, 31) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 12) : BOOL
69 : ite(68, 40, 41) : BV:8
70 : ite(67, 38, 69) : BV:8
71 : ite(66, 36, 70) : BV:8
72 : ite(65, 34, 71) : BV:8
73 : bvconcat(45, 54, 63, 72) : BV:32
74 : ite(27, 5, 73) : BV:32
75 : lambda(25, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(24, 75) : MAP[BV:32 -> BV:32]
77 : sum(1, 2, 76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
78 : sym_const(77) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9016 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9017 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9020 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9021 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3966472719 { 0xec6b920f -328494577 -1.84039485e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2715420251 { 0xa1da065b -1579547045 -1.70331895e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059478943 { 0x3f265d9f +1.29973208e255 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda7802 : BV:32
2 : Lambda7803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda7807 : BV:32
2 : Lambda7808 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 524288 { 0x80000 +1.6250000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 524289 { 0x80001 +1.6250011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 140 { 0x8c -116 } : BV:8
54 : eq(51, 47) : BOOL
55 : 225 { 0xe1 -31 } : BV:8
56 : eq(51, 32) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : eq(51, 36) : BOOL
59 : 216 { 0xd8 -40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda7813 : BV:32
2 : Lambda7814 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7809 : BV:32
2 : Lambda7810 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 140 { 0x8c -116 } : BV:8
14 : eq(11, 7) : BOOL
15 : 225 { 0xe1 -31 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 216 { 0xd8 -40 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1639020001
=counter_example_end
=global nodece 54 num_edges_traversed 2
=global nodece 54 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce6230.num_edges_traversed1
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce6230 469494dc9b21863b1b65b8f6f7784ca6
=input.spec-%var-x-1
1 : Lambda16005 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16008 : BV:32
18 : Lambda16006 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16007 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
82 : eq(80, 81) : BOOL
83 : 192 { 0xc0 -64 } : BV:8
84 : eq(80, 78) : BOOL
85 : 175 { 0xaf -81 } : BV:8
86 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
87 : eq(80, 86) : BOOL
88 : 121 { 0x79 } : BV:8
89 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
90 : eq(80, 89) : BOOL
91 : 184 { 0xb8 -72 } : BV:8
92 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
93 : eq(80, 92) : BOOL
94 : 47 { 0x2f } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(82, 83, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 81) : BOOL
103 : eq(101, 78) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 83, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 83, 121) : BV:8
123 : bvadd(86, 79) : BV:32
124 : eq(123, 81) : BOOL
125 : eq(123, 78) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 83, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 78) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 83, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 83, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 78) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 83, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 81) : BOOL
172 : eq(170, 78) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 83, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
=input.dst.llvm-%n
1 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 14679855 ] -> 0, [ 14679856; 14679856 ] -> 121, [ 14679857; 14679857 ] -> 47, [ 14679858; 14679858 ] -> 184, [ 14679859; 14679859 ] -> 175, [ 14679860; 117440510 ] -> 0, [ 117440511; 117440511 ] -> 192, [ 117440512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 334788735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 334788736; 334788739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 334788740; 1274435803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1274435804; 1274435807 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1274435808; 1342058743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1342058744; 1342058747 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1342058748; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1342058744 { 0x4ffe30f8 +1.98586940e32 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1274435804 { 0x4bf658dc +1.92458677e24 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 334788736 { 0x13f47880 +1.90992736e168 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16013 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16016 : BV:32
18 : Lambda16014 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16015 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
63 : eq(61, 62) : BOOL
64 : 192 { 0xc0 -64 } : BV:8
65 : eq(61, 59) : BOOL
66 : 175 { 0xaf -81 } : BV:8
67 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
68 : eq(61, 67) : BOOL
69 : 121 { 0x79 } : BV:8
70 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
71 : eq(61, 70) : BOOL
72 : 184 { 0xb8 -72 } : BV:8
73 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
74 : eq(61, 73) : BOOL
75 : 47 { 0x2f } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 62) : BOOL
84 : eq(82, 59) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 64, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 64, 102) : BV:8
104 : bvadd(67, 60) : BV:32
105 : eq(104, 62) : BOOL
106 : eq(104, 59) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 64, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 59) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 64, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 64, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 59) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 62) : BOOL
153 : eq(151, 59) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 64, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda16010 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16011 : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
27 : eq(25, 26) : BOOL
28 : 192 { 0xc0 -64 } : BV:8
29 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
30 : eq(25, 29) : BOOL
31 : 175 { 0xaf -81 } : BV:8
32 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
33 : eq(25, 32) : BOOL
34 : 121 { 0x79 } : BV:8
35 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
36 : eq(25, 35) : BOOL
37 : 184 { 0xb8 -72 } : BV:8
38 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
39 : eq(25, 38) : BOOL
40 : 47 { 0x2f } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(30, 31, 44) : BV:8
46 : ite(27, 28, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 23, 24) : BV:32
49 : eq(48, 26) : BOOL
50 : eq(48, 29) : BOOL
51 : eq(48, 32) : BOOL
52 : eq(48, 35) : BOOL
53 : eq(48, 38) : BOOL
54 : ite(53, 40, 41) : BV:8
55 : ite(52, 37, 54) : BV:8
56 : ite(51, 34, 55) : BV:8
57 : ite(50, 31, 56) : BV:8
58 : ite(49, 28, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : ite(65, 40, 41) : BV:8
67 : ite(64, 37, 66) : BV:8
68 : ite(63, 34, 67) : BV:8
69 : ite(62, 31, 68) : BV:8
70 : ite(61, 28, 69) : BV:8
71 : bvadd(23, 24) : BV:32
72 : eq(71, 26) : BOOL
73 : eq(71, 29) : BOOL
74 : eq(71, 32) : BOOL
75 : eq(71, 35) : BOOL
76 : eq(71, 38) : BOOL
77 : ite(76, 40, 41) : BV:8
78 : ite(75, 37, 77) : BV:8
79 : ite(74, 34, 78) : BV:8
80 : ite(73, 31, 79) : BV:8
81 : ite(72, 28, 80) : BV:8
82 : bvconcat(46, 58, 70, 81) : BV:32
83 : ite(20, 4, 82) : BV:32
84 : lambda(19, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(18, 84) : MAP[BV:32 -> BV:32]
86 : sum(1, 2, 85) : SUM[UNIT,MAP[BV:32 -> BV:32]]
87 : sym_const(86) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 25690164 { 0x1880034 +1.6250619e132 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1624747729 { 0x60d7aed1 +1.68502247e66 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16018 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16019 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
25 : eq(23, 24) : BOOL
26 : 192 { 0xc0 -64 } : BV:8
27 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
28 : eq(23, 27) : BOOL
29 : 175 { 0xaf -81 } : BV:8
30 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
31 : eq(23, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
34 : eq(23, 33) : BOOL
35 : 184 { 0xb8 -72 } : BV:8
36 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
37 : eq(23, 36) : BOOL
38 : 47 { 0x2f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16021 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16022 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
25 : eq(23, 24) : BOOL
26 : 192 { 0xc0 -64 } : BV:8
27 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
28 : eq(23, 27) : BOOL
29 : 175 { 0xaf -81 } : BV:8
30 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
31 : eq(23, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
34 : eq(23, 33) : BOOL
35 : 184 { 0xb8 -72 } : BV:8
36 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
37 : eq(23, 36) : BOOL
38 : 47 { 0x2f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 638414023 { 0x260d6cc7 +1.10488212e205 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1274435804 { 0x4bf658dc +1.92458677e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1274435807 { 0x4bf658df +1.92458713e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 334788736 { 0x13f47880 +1.90992736e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 334788739 { 0x13f47883 +1.90992772e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1342058744 { 0x4ffe30f8 +1.98586940e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1342058747 { 0x4ffe30fb +1.98586976e32 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2168717331 ] -> true, [ 2168717332; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15932 : BV:32
2 : Lambda15933 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15937 : BV:32
2 : Lambda15938 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
55 : eq(53, 54) : BOOL
56 : 192 { 0xc0 -64 } : BV:8
57 : eq(53, 51) : BOOL
58 : 175 { 0xaf -81 } : BV:8
59 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
60 : eq(53, 59) : BOOL
61 : 121 { 0x79 } : BV:8
62 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
63 : eq(53, 62) : BOOL
64 : 184 { 0xb8 -72 } : BV:8
65 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
66 : eq(53, 65) : BOOL
67 : 47 { 0x2f } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(55, 56, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 54) : BOOL
76 : eq(74, 51) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 56, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 56, 94) : BV:8
96 : bvadd(59, 52) : BV:32
97 : eq(96, 54) : BOOL
98 : eq(96, 51) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 56, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 51) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 56, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 56, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 51) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 56, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 54) : BOOL
145 : eq(143, 51) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 56, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2168717331 ] -> true, [ 2168717332; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15943 : BV:32
2 : Lambda15944 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15939 : BV:32
2 : Lambda15940 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : eq(12, 10) : BOOL
17 : 175 { 0xaf -81 } : BV:8
18 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
19 : eq(12, 18) : BOOL
20 : 121 { 0x79 } : BV:8
21 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
22 : eq(12, 21) : BOOL
23 : 184 { 0xb8 -72 } : BV:8
24 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
25 : eq(12, 24) : BOOL
26 : 47 { 0x2f } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 13) : BOOL
35 : eq(33, 10) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 15, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 15, 53) : BV:8
55 : bvadd(18, 11) : BV:32
56 : eq(55, 13) : BOOL
57 : eq(55, 10) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 15, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 10) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 15, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 15, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 10) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 15, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 13) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 15, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda15950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15954 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15958 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4090493947
=counter_example_end
=global nodece 55 num_edges_traversed 1
=global nodece 55 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 56
=global nodece 56 nodece z3.ce6565.num_edges_traversed2
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce6565 6d14b2d094fab1dd5641c72e19df71cb
=input.spec-%var-x-1
1 : Lambda16005 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16008 : BV:32
18 : Lambda16006 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16007 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
82 : eq(80, 81) : BOOL
83 : 192 { 0xc0 -64 } : BV:8
84 : eq(80, 78) : BOOL
85 : 175 { 0xaf -81 } : BV:8
86 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
87 : eq(80, 86) : BOOL
88 : 121 { 0x79 } : BV:8
89 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
90 : eq(80, 89) : BOOL
91 : 184 { 0xb8 -72 } : BV:8
92 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
93 : eq(80, 92) : BOOL
94 : 47 { 0x2f } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(82, 83, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 81) : BOOL
103 : eq(101, 78) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 83, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 83, 121) : BV:8
123 : bvadd(86, 79) : BV:32
124 : eq(123, 81) : BOOL
125 : eq(123, 78) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 83, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 78) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 83, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 83, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 78) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 83, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 81) : BOOL
172 : eq(170, 78) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 83, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
=input.dst.llvm-%n
1 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 14679855 ] -> 0, [ 14679856; 14679856 ] -> 121, [ 14679857; 14679857 ] -> 47, [ 14679858; 14679858 ] -> 184, [ 14679859; 14679859 ] -> 175, [ 14679860; 117440510 ] -> 0, [ 117440511; 117440511 ] -> 192, [ 117440512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 334788735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 334788736; 334788739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 334788740; 1274435803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1274435804; 1274435807 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1274435808; 1342058743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1342058744; 1342058747 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1342058748; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1342058744 { 0x4ffe30f8 +1.98586940e32 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1274435804 { 0x4bf658dc +1.92458677e24 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 334788736 { 0x13f47880 +1.90992736e168 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16013 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16016 : BV:32
18 : Lambda16014 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16015 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
63 : eq(61, 62) : BOOL
64 : 192 { 0xc0 -64 } : BV:8
65 : eq(61, 59) : BOOL
66 : 175 { 0xaf -81 } : BV:8
67 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
68 : eq(61, 67) : BOOL
69 : 121 { 0x79 } : BV:8
70 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
71 : eq(61, 70) : BOOL
72 : 184 { 0xb8 -72 } : BV:8
73 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
74 : eq(61, 73) : BOOL
75 : 47 { 0x2f } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 62) : BOOL
84 : eq(82, 59) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 64, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 64, 102) : BV:8
104 : bvadd(67, 60) : BV:32
105 : eq(104, 62) : BOOL
106 : eq(104, 59) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 64, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 59) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 64, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 64, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 59) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 62) : BOOL
153 : eq(151, 59) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 64, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda16010 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16011 : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
27 : eq(25, 26) : BOOL
28 : 192 { 0xc0 -64 } : BV:8
29 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
30 : eq(25, 29) : BOOL
31 : 175 { 0xaf -81 } : BV:8
32 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
33 : eq(25, 32) : BOOL
34 : 121 { 0x79 } : BV:8
35 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
36 : eq(25, 35) : BOOL
37 : 184 { 0xb8 -72 } : BV:8
38 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
39 : eq(25, 38) : BOOL
40 : 47 { 0x2f } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(30, 31, 44) : BV:8
46 : ite(27, 28, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 23, 24) : BV:32
49 : eq(48, 26) : BOOL
50 : eq(48, 29) : BOOL
51 : eq(48, 32) : BOOL
52 : eq(48, 35) : BOOL
53 : eq(48, 38) : BOOL
54 : ite(53, 40, 41) : BV:8
55 : ite(52, 37, 54) : BV:8
56 : ite(51, 34, 55) : BV:8
57 : ite(50, 31, 56) : BV:8
58 : ite(49, 28, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : ite(65, 40, 41) : BV:8
67 : ite(64, 37, 66) : BV:8
68 : ite(63, 34, 67) : BV:8
69 : ite(62, 31, 68) : BV:8
70 : ite(61, 28, 69) : BV:8
71 : bvadd(23, 24) : BV:32
72 : eq(71, 26) : BOOL
73 : eq(71, 29) : BOOL
74 : eq(71, 32) : BOOL
75 : eq(71, 35) : BOOL
76 : eq(71, 38) : BOOL
77 : ite(76, 40, 41) : BV:8
78 : ite(75, 37, 77) : BV:8
79 : ite(74, 34, 78) : BV:8
80 : ite(73, 31, 79) : BV:8
81 : ite(72, 28, 80) : BV:8
82 : bvconcat(46, 58, 70, 81) : BV:32
83 : ite(20, 4, 82) : BV:32
84 : lambda(19, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(18, 84) : MAP[BV:32 -> BV:32]
86 : sum(1, 2, 85) : SUM[UNIT,MAP[BV:32 -> BV:32]]
87 : sym_const(86) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 25690164 { 0x1880034 +1.6250619e132 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1624747730 { 0x60d7aed2 +1.68502259e66 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16018 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16019 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
25 : eq(23, 24) : BOOL
26 : 192 { 0xc0 -64 } : BV:8
27 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
28 : eq(23, 27) : BOOL
29 : 175 { 0xaf -81 } : BV:8
30 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
31 : eq(23, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
34 : eq(23, 33) : BOOL
35 : 184 { 0xb8 -72 } : BV:8
36 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
37 : eq(23, 36) : BOOL
38 : 47 { 0x2f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16021 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16022 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
25 : eq(23, 24) : BOOL
26 : 192 { 0xc0 -64 } : BV:8
27 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
28 : eq(23, 27) : BOOL
29 : 175 { 0xaf -81 } : BV:8
30 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
31 : eq(23, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
34 : eq(23, 33) : BOOL
35 : 184 { 0xb8 -72 } : BV:8
36 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
37 : eq(23, 36) : BOOL
38 : 47 { 0x2f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 25690163 { 0x1880033 +1.6250607e132 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 638414024 { 0x260d6cc8 +1.10488224e205 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1274435804 { 0x4bf658dc +1.92458677e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1274435807 { 0x4bf658df +1.92458713e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 334788736 { 0x13f47880 +1.90992736e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 334788739 { 0x13f47883 +1.90992772e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1342058744 { 0x4ffe30f8 +1.98586940e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1342058747 { 0x4ffe30fb +1.98586976e32 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2168717331 ] -> true, [ 2168717332; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15932 : BV:32
2 : Lambda15933 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15937 : BV:32
2 : Lambda15938 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
55 : eq(53, 54) : BOOL
56 : 192 { 0xc0 -64 } : BV:8
57 : eq(53, 51) : BOOL
58 : 175 { 0xaf -81 } : BV:8
59 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
60 : eq(53, 59) : BOOL
61 : 121 { 0x79 } : BV:8
62 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
63 : eq(53, 62) : BOOL
64 : 184 { 0xb8 -72 } : BV:8
65 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
66 : eq(53, 65) : BOOL
67 : 47 { 0x2f } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(55, 56, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 54) : BOOL
76 : eq(74, 51) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 56, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 56, 94) : BV:8
96 : bvadd(59, 52) : BV:32
97 : eq(96, 54) : BOOL
98 : eq(96, 51) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 56, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 51) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 56, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 56, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 51) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 56, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 54) : BOOL
145 : eq(143, 51) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 56, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2168717331 ] -> true, [ 2168717332; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15943 : BV:32
2 : Lambda15944 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2168717331 { 0x81440013 -2126249965 -1.53125226e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2168717333 { 0x81440015 -2126249963 -1.53125250e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2168717332 { 0x81440014 -2126249964 -1.53125238e131 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15939 : BV:32
2 : Lambda15940 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : eq(12, 10) : BOOL
17 : 175 { 0xaf -81 } : BV:8
18 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
19 : eq(12, 18) : BOOL
20 : 121 { 0x79 } : BV:8
21 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
22 : eq(12, 21) : BOOL
23 : 184 { 0xb8 -72 } : BV:8
24 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
25 : eq(12, 24) : BOOL
26 : 47 { 0x2f } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 13) : BOOL
35 : eq(33, 10) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 15, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 15, 53) : BV:8
55 : bvadd(18, 11) : BV:32
56 : eq(55, 13) : BOOL
57 : eq(55, 10) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 15, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 10) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 15, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 15, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 10) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 15, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 13) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 15, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda15950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15954 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15958 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221225472 { 0xc0000000 -1073741824 -1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 117440511 { 0x6ffffff +1.99999988e142 } : BV:32
10 : eq(8, 9) : BOOL
11 : 192 { 0xc0 -64 } : BV:8
12 : 14679859 { 0xdfff33 +1.74997556e130 } : BV:32
13 : eq(8, 12) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 14679856 { 0xdfff30 +1.74997520e130 } : BV:32
16 : eq(8, 15) : BOOL
17 : 121 { 0x79 } : BV:8
18 : 14679858 { 0xdfff32 +1.74997544e130 } : BV:32
19 : eq(8, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 14679857 { 0xdfff31 +1.74997532e130 } : BV:32
22 : eq(8, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4090493947
=counter_example_end
=global nodece 56 num_edges_traversed 2
=global nodece 56 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce6576.num_edges_traversed1
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce6576 b42a234bc7e97dba74b5c2bfe4b5cff
=input.spec-%var-x-1
1 : Lambda16560 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16563 : BV:32
18 : Lambda16561 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 65537 { 0x10001 +1.781261e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777219 { 0x1000003 +1.35e131 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777220 { 0x1000004 +1.47e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777221 { 0x1000005 +1.59e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16562 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
82 : eq(80, 81) : BOOL
83 : 216 { 0xd8 -40 } : BV:8
84 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
85 : eq(80, 84) : BOOL
86 : 45 { 0x2d } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
90 : eq(80, 89) : BOOL
91 : 36 { 0x24 } : BV:8
92 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
93 : eq(80, 92) : BOOL
94 : 162 { 0xa2 -94 } : BV:8
95 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
96 : eq(80, 95) : BOOL
97 : 252 { 0xfc -4 } : BV:8
98 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
99 : eq(80, 98) : BOOL
100 : 64 { 0x40 } : BV:8
101 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
102 : eq(80, 101) : BOOL
103 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
104 : eq(80, 103) : BOOL
105 : 237 { 0xed -19 } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(102, 88, 107) : BV:8
109 : ite(99, 100, 108) : BV:8
110 : ite(96, 97, 109) : BV:8
111 : ite(93, 94, 110) : BV:8
112 : ite(90, 91, 111) : BV:8
113 : ite(87, 88, 112) : BV:8
114 : ite(85, 86, 113) : BV:8
115 : ite(82, 83, 114) : BV:8
116 : bvadd(101, 79) : BV:32
117 : eq(116, 81) : BOOL
118 : eq(116, 84) : BOOL
119 : eq(116, 78) : BOOL
120 : eq(116, 89) : BOOL
121 : eq(116, 92) : BOOL
122 : eq(116, 95) : BOOL
123 : eq(116, 98) : BOOL
124 : eq(116, 101) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 88, 126) : BV:8
128 : ite(123, 100, 127) : BV:8
129 : ite(122, 97, 128) : BV:8
130 : ite(121, 94, 129) : BV:8
131 : ite(120, 91, 130) : BV:8
132 : ite(119, 88, 131) : BV:8
133 : ite(118, 86, 132) : BV:8
134 : ite(117, 83, 133) : BV:8
135 : bvadd(103, 79) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 84) : BOOL
138 : eq(135, 78) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : eq(135, 95) : BOOL
142 : eq(135, 98) : BOOL
143 : eq(135, 101) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 88, 145) : BV:8
147 : ite(142, 100, 146) : BV:8
148 : ite(141, 97, 147) : BV:8
149 : ite(140, 94, 148) : BV:8
150 : ite(139, 91, 149) : BV:8
151 : ite(138, 88, 150) : BV:8
152 : ite(137, 86, 151) : BV:8
153 : ite(136, 83, 152) : BV:8
154 : bvadd(95, 79) : BV:32
155 : eq(154, 81) : BOOL
156 : eq(154, 84) : BOOL
157 : eq(154, 78) : BOOL
158 : eq(154, 89) : BOOL
159 : eq(154, 92) : BOOL
160 : eq(154, 95) : BOOL
161 : eq(154, 98) : BOOL
162 : eq(154, 101) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 88, 164) : BV:8
166 : ite(161, 100, 165) : BV:8
167 : ite(160, 97, 166) : BV:8
168 : ite(159, 94, 167) : BV:8
169 : ite(158, 91, 168) : BV:8
170 : ite(157, 88, 169) : BV:8
171 : ite(156, 86, 170) : BV:8
172 : ite(155, 83, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(75, 77, 173) : BV:32
175 : eq(174, 81) : BOOL
176 : eq(174, 84) : BOOL
177 : eq(174, 78) : BOOL
178 : eq(174, 89) : BOOL
179 : eq(174, 92) : BOOL
180 : eq(174, 95) : BOOL
181 : eq(174, 98) : BOOL
182 : eq(174, 101) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 88, 184) : BV:8
186 : ite(181, 100, 185) : BV:8
187 : ite(180, 97, 186) : BV:8
188 : ite(179, 94, 187) : BV:8
189 : ite(178, 91, 188) : BV:8
190 : ite(177, 88, 189) : BV:8
191 : ite(176, 86, 190) : BV:8
192 : ite(175, 83, 191) : BV:8
193 : 2 { 0x2 +1.23e129 } : BV:32
194 : bvadd(193, 77, 173) : BV:32
195 : eq(194, 81) : BOOL
196 : eq(194, 84) : BOOL
197 : eq(194, 78) : BOOL
198 : eq(194, 89) : BOOL
199 : eq(194, 92) : BOOL
200 : eq(194, 95) : BOOL
201 : eq(194, 98) : BOOL
202 : eq(194, 101) : BOOL
203 : eq(194, 103) : BOOL
204 : ite(203, 105, 106) : BV:8
205 : ite(202, 88, 204) : BV:8
206 : ite(201, 100, 205) : BV:8
207 : ite(200, 97, 206) : BV:8
208 : ite(199, 94, 207) : BV:8
209 : ite(198, 91, 208) : BV:8
210 : ite(197, 88, 209) : BV:8
211 : ite(196, 86, 210) : BV:8
212 : ite(195, 83, 211) : BV:8
213 : 1 { 0x1 +1.11e129 } : BV:32
214 : bvadd(213, 77, 173) : BV:32
215 : eq(214, 81) : BOOL
216 : eq(214, 84) : BOOL
217 : eq(214, 78) : BOOL
218 : eq(214, 89) : BOOL
219 : eq(214, 92) : BOOL
220 : eq(214, 95) : BOOL
221 : eq(214, 98) : BOOL
222 : eq(214, 101) : BOOL
223 : eq(214, 103) : BOOL
224 : ite(223, 105, 106) : BV:8
225 : ite(222, 88, 224) : BV:8
226 : ite(221, 100, 225) : BV:8
227 : ite(220, 97, 226) : BV:8
228 : ite(219, 94, 227) : BV:8
229 : ite(218, 91, 228) : BV:8
230 : ite(217, 88, 229) : BV:8
231 : ite(216, 86, 230) : BV:8
232 : ite(215, 83, 231) : BV:8
233 : bvadd(77, 173) : BV:32
234 : eq(233, 81) : BOOL
235 : eq(233, 84) : BOOL
236 : eq(233, 78) : BOOL
237 : eq(233, 89) : BOOL
238 : eq(233, 92) : BOOL
239 : eq(233, 95) : BOOL
240 : eq(233, 98) : BOOL
241 : eq(233, 101) : BOOL
242 : eq(233, 103) : BOOL
243 : ite(242, 105, 106) : BV:8
244 : ite(241, 88, 243) : BV:8
245 : ite(240, 100, 244) : BV:8
246 : ite(239, 97, 245) : BV:8
247 : ite(238, 94, 246) : BV:8
248 : ite(237, 91, 247) : BV:8
249 : ite(236, 88, 248) : BV:8
250 : ite(235, 86, 249) : BV:8
251 : ite(234, 83, 250) : BV:8
252 : bvconcat(192, 212, 232, 251) : BV:32
253 : ite(55, 2, 252) : BV:32
254 : ite(74, 252, 253) : BV:32
255 : ite(55, 2, 254) : BV:32
256 : lambda(52, 255) : FUNCTION[BV:32 -> BV:32]
257 : map(51, 256) : MAP[BV:32 -> BV:32]
258 : lambda(17, 257) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
259 : map(16, 258) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
260 : sym_const(259) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%x
1 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-%m
1 : 16777220 { 0x1000004 +1.47e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1207975923 ] -> 0, [ 1207975924; 1207975924 ] -> 252, [ 1207975925; 1207975925 ] -> 237, [ 1207975926; 1207975927 ] -> 255, [ 1207975928; 1207975935 ] -> 0, [ 1207975936; 1207975936 ] -> 36, [ 1207975937; 1207975937 ] -> 162, [ 1207975938; 1207975938 ] -> 45, [ 1207975939; 1207975939 ] -> 216, [ 1207975940; 3626869295 ] -> 0, [ 3626869296; 3626869296 ] -> 64, [ 3626869297; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1983905791 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1983905792; 1983905795 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1983905796; 2499813379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2499813380; 2499813383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2499813384; 3550273971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3550273972; 3550273975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3550273976; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3550273972 { 0xd39ce1b4 -744693324 -1.22563791e40 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1983905792 { 0x76400000 +1.50000000e109 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2499813380 { 0x95002004 -1795153916 -1.97703e171 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16568 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16571 : BV:32
18 : Lambda16569 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 65537 { 0x10001 +1.781261e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777219 { 0x1000003 +1.35e131 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777220 { 0x1000004 +1.47e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777221 { 0x1000005 +1.59e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16570 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
63 : eq(61, 62) : BOOL
64 : 216 { 0xd8 -40 } : BV:8
65 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
66 : eq(61, 65) : BOOL
67 : 45 { 0x2d } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
71 : eq(61, 70) : BOOL
72 : 36 { 0x24 } : BV:8
73 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
74 : eq(61, 73) : BOOL
75 : 162 { 0xa2 -94 } : BV:8
76 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
77 : eq(61, 76) : BOOL
78 : 252 { 0xfc -4 } : BV:8
79 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
80 : eq(61, 79) : BOOL
81 : 64 { 0x40 } : BV:8
82 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
83 : eq(61, 82) : BOOL
84 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
85 : eq(61, 84) : BOOL
86 : 237 { 0xed -19 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 69, 88) : BV:8
90 : ite(80, 81, 89) : BV:8
91 : ite(77, 78, 90) : BV:8
92 : ite(74, 75, 91) : BV:8
93 : ite(71, 72, 92) : BV:8
94 : ite(68, 69, 93) : BV:8
95 : ite(66, 67, 94) : BV:8
96 : ite(63, 64, 95) : BV:8
97 : bvadd(82, 60) : BV:32
98 : eq(97, 62) : BOOL
99 : eq(97, 65) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 70) : BOOL
102 : eq(97, 73) : BOOL
103 : eq(97, 76) : BOOL
104 : eq(97, 79) : BOOL
105 : eq(97, 82) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 69, 107) : BV:8
109 : ite(104, 81, 108) : BV:8
110 : ite(103, 78, 109) : BV:8
111 : ite(102, 75, 110) : BV:8
112 : ite(101, 72, 111) : BV:8
113 : ite(100, 69, 112) : BV:8
114 : ite(99, 67, 113) : BV:8
115 : ite(98, 64, 114) : BV:8
116 : bvadd(84, 60) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 65) : BOOL
119 : eq(116, 59) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : eq(116, 76) : BOOL
123 : eq(116, 79) : BOOL
124 : eq(116, 82) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 69, 126) : BV:8
128 : ite(123, 81, 127) : BV:8
129 : ite(122, 78, 128) : BV:8
130 : ite(121, 75, 129) : BV:8
131 : ite(120, 72, 130) : BV:8
132 : ite(119, 69, 131) : BV:8
133 : ite(118, 67, 132) : BV:8
134 : ite(117, 64, 133) : BV:8
135 : bvadd(76, 60) : BV:32
136 : eq(135, 62) : BOOL
137 : eq(135, 65) : BOOL
138 : eq(135, 59) : BOOL
139 : eq(135, 70) : BOOL
140 : eq(135, 73) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : eq(135, 82) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 69, 145) : BV:8
147 : ite(142, 81, 146) : BV:8
148 : ite(141, 78, 147) : BV:8
149 : ite(140, 75, 148) : BV:8
150 : ite(139, 72, 149) : BV:8
151 : ite(138, 69, 150) : BV:8
152 : ite(137, 67, 151) : BV:8
153 : ite(136, 64, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(56, 58, 154) : BV:32
156 : eq(155, 62) : BOOL
157 : eq(155, 65) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 70) : BOOL
160 : eq(155, 73) : BOOL
161 : eq(155, 76) : BOOL
162 : eq(155, 79) : BOOL
163 : eq(155, 82) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 81, 166) : BV:8
168 : ite(161, 78, 167) : BV:8
169 : ite(160, 75, 168) : BV:8
170 : ite(159, 72, 169) : BV:8
171 : ite(158, 69, 170) : BV:8
172 : ite(157, 67, 171) : BV:8
173 : ite(156, 64, 172) : BV:8
174 : 2 { 0x2 +1.23e129 } : BV:32
175 : bvadd(174, 58, 154) : BV:32
176 : eq(175, 62) : BOOL
177 : eq(175, 65) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 70) : BOOL
180 : eq(175, 73) : BOOL
181 : eq(175, 76) : BOOL
182 : eq(175, 79) : BOOL
183 : eq(175, 82) : BOOL
184 : eq(175, 84) : BOOL
185 : ite(184, 86, 87) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 81, 186) : BV:8
188 : ite(181, 78, 187) : BV:8
189 : ite(180, 75, 188) : BV:8
190 : ite(179, 72, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 67, 191) : BV:8
193 : ite(176, 64, 192) : BV:8
194 : 1 { 0x1 +1.11e129 } : BV:32
195 : bvadd(194, 58, 154) : BV:32
196 : eq(195, 62) : BOOL
197 : eq(195, 65) : BOOL
198 : eq(195, 59) : BOOL
199 : eq(195, 70) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 79) : BOOL
203 : eq(195, 82) : BOOL
204 : eq(195, 84) : BOOL
205 : ite(204, 86, 87) : BV:8
206 : ite(203, 69, 205) : BV:8
207 : ite(202, 81, 206) : BV:8
208 : ite(201, 78, 207) : BV:8
209 : ite(200, 75, 208) : BV:8
210 : ite(199, 72, 209) : BV:8
211 : ite(198, 69, 210) : BV:8
212 : ite(197, 67, 211) : BV:8
213 : ite(196, 64, 212) : BV:8
214 : bvadd(58, 154) : BV:32
215 : eq(214, 62) : BOOL
216 : eq(214, 65) : BOOL
217 : eq(214, 59) : BOOL
218 : eq(214, 70) : BOOL
219 : eq(214, 73) : BOOL
220 : eq(214, 76) : BOOL
221 : eq(214, 79) : BOOL
222 : eq(214, 82) : BOOL
223 : eq(214, 84) : BOOL
224 : ite(223, 86, 87) : BV:8
225 : ite(222, 69, 224) : BV:8
226 : ite(221, 81, 225) : BV:8
227 : ite(220, 78, 226) : BV:8
228 : ite(219, 75, 227) : BV:8
229 : ite(218, 72, 228) : BV:8
230 : ite(217, 69, 229) : BV:8
231 : ite(216, 67, 230) : BV:8
232 : ite(215, 64, 231) : BV:8
233 : bvconcat(173, 193, 213, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : lambda(52, 234) : FUNCTION[BV:32 -> BV:32]
236 : map(51, 235) : MAP[BV:32 -> BV:32]
237 : lambda(17, 236) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
238 : map(16, 237) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
239 : sym_const(238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda16565 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 16777219 { 0x1000003 +1.35e131 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16777220 { 0x1000004 +1.47e131 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16566 : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : eq(19, 22) : BOOL
24 : 64 { 0x40 +1.762e129 } : BV:32
25 : eq(19, 4) : BOOL
26 : bvmul(20, 19) : BV:32
27 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
28 : bvadd(22, 26, 27) : BV:32
29 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
30 : eq(28, 29) : BOOL
31 : 216 { 0xd8 -40 } : BV:8
32 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
33 : eq(28, 32) : BOOL
34 : 45 { 0x2d } : BV:8
35 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
36 : eq(28, 35) : BOOL
37 : 255 { 0xff -1 } : BV:8
38 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
39 : eq(28, 38) : BOOL
40 : 36 { 0x24 } : BV:8
41 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
42 : eq(28, 41) : BOOL
43 : 162 { 0xa2 -94 } : BV:8
44 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
45 : eq(28, 44) : BOOL
46 : 252 { 0xfc -4 } : BV:8
47 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
48 : eq(28, 47) : BOOL
49 : 64 { 0x40 } : BV:8
50 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
51 : eq(28, 50) : BOOL
52 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
53 : eq(28, 52) : BOOL
54 : 237 { 0xed -19 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 37, 56) : BV:8
58 : ite(48, 49, 57) : BV:8
59 : ite(45, 46, 58) : BV:8
60 : ite(42, 43, 59) : BV:8
61 : ite(39, 40, 60) : BV:8
62 : ite(36, 37, 61) : BV:8
63 : ite(33, 34, 62) : BV:8
64 : ite(30, 31, 63) : BV:8
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : bvadd(65, 26, 27) : BV:32
67 : eq(66, 29) : BOOL
68 : eq(66, 32) : BOOL
69 : eq(66, 35) : BOOL
70 : eq(66, 38) : BOOL
71 : eq(66, 41) : BOOL
72 : eq(66, 44) : BOOL
73 : eq(66, 47) : BOOL
74 : eq(66, 50) : BOOL
75 : eq(66, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 37, 76) : BV:8
78 : ite(73, 49, 77) : BV:8
79 : ite(72, 46, 78) : BV:8
80 : ite(71, 43, 79) : BV:8
81 : ite(70, 40, 80) : BV:8
82 : ite(69, 37, 81) : BV:8
83 : ite(68, 34, 82) : BV:8
84 : ite(67, 31, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 26, 27) : BV:32
87 : eq(86, 29) : BOOL
88 : eq(86, 32) : BOOL
89 : eq(86, 35) : BOOL
90 : eq(86, 38) : BOOL
91 : eq(86, 41) : BOOL
92 : eq(86, 44) : BOOL
93 : eq(86, 47) : BOOL
94 : eq(86, 50) : BOOL
95 : eq(86, 52) : BOOL
96 : ite(95, 54, 55) : BV:8
97 : ite(94, 37, 96) : BV:8
98 : ite(93, 49, 97) : BV:8
99 : ite(92, 46, 98) : BV:8
100 : ite(91, 43, 99) : BV:8
101 : ite(90, 40, 100) : BV:8
102 : ite(89, 37, 101) : BV:8
103 : ite(88, 34, 102) : BV:8
104 : ite(87, 31, 103) : BV:8
105 : bvadd(26, 27) : BV:32
106 : eq(105, 29) : BOOL
107 : eq(105, 32) : BOOL
108 : eq(105, 35) : BOOL
109 : eq(105, 38) : BOOL
110 : eq(105, 41) : BOOL
111 : eq(105, 44) : BOOL
112 : eq(105, 47) : BOOL
113 : eq(105, 50) : BOOL
114 : eq(105, 52) : BOOL
115 : ite(114, 54, 55) : BV:8
116 : ite(113, 37, 115) : BV:8
117 : ite(112, 49, 116) : BV:8
118 : ite(111, 46, 117) : BV:8
119 : ite(110, 43, 118) : BV:8
120 : ite(109, 40, 119) : BV:8
121 : ite(108, 37, 120) : BV:8
122 : ite(107, 34, 121) : BV:8
123 : ite(106, 31, 122) : BV:8
124 : bvconcat(64, 84, 104, 123) : BV:32
125 : ite(25, 4, 124) : BV:32
126 : ite(23, 24, 125) : BV:32
127 : ite(21, 4, 126) : BV:32
128 : lambda(19, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(18, 128) : MAP[BV:32 -> BV:32]
130 : sum(1, 2, 129) : SUM[UNIT,MAP[BV:32 -> BV:32]]
131 : sym_const(130) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 64 { 0x40 +1.762e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1522623629 { 0x5ac1648d +1.51088106e54 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16573 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777219 { 0x1000003 +1.35e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777220 { 0x1000004 +1.47e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16574 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 64 { 0x40 +1.762e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : eq(17, 21) : BOOL
23 : bvmul(21, 17) : BV:32
24 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
25 : bvadd(18, 23, 24) : BV:32
26 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
27 : eq(25, 26) : BOOL
28 : 216 { 0xd8 -40 } : BV:8
29 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
30 : eq(25, 29) : BOOL
31 : 45 { 0x2d } : BV:8
32 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
33 : eq(25, 32) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
36 : eq(25, 35) : BOOL
37 : 36 { 0x24 } : BV:8
38 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
39 : eq(25, 38) : BOOL
40 : 162 { 0xa2 -94 } : BV:8
41 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
42 : eq(25, 41) : BOOL
43 : 252 { 0xfc -4 } : BV:8
44 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
45 : eq(25, 44) : BOOL
46 : 64 { 0x40 } : BV:8
47 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
48 : eq(25, 47) : BOOL
49 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
50 : eq(25, 49) : BOOL
51 : 237 { 0xed -19 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(48, 34, 53) : BV:8
55 : ite(45, 46, 54) : BV:8
56 : ite(42, 43, 55) : BV:8
57 : ite(39, 40, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(33, 34, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 23, 24) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 32) : BOOL
67 : eq(63, 35) : BOOL
68 : eq(63, 38) : BOOL
69 : eq(63, 41) : BOOL
70 : eq(63, 44) : BOOL
71 : eq(63, 47) : BOOL
72 : eq(63, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 34, 73) : BV:8
75 : ite(70, 46, 74) : BV:8
76 : ite(69, 43, 75) : BV:8
77 : ite(68, 40, 76) : BV:8
78 : ite(67, 37, 77) : BV:8
79 : ite(66, 34, 78) : BV:8
80 : ite(65, 31, 79) : BV:8
81 : ite(64, 28, 80) : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : bvadd(82, 23, 24) : BV:32
84 : eq(83, 26) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 32) : BOOL
87 : eq(83, 35) : BOOL
88 : eq(83, 38) : BOOL
89 : eq(83, 41) : BOOL
90 : eq(83, 44) : BOOL
91 : eq(83, 47) : BOOL
92 : eq(83, 49) : BOOL
93 : ite(92, 51, 52) : BV:8
94 : ite(91, 34, 93) : BV:8
95 : ite(90, 46, 94) : BV:8
96 : ite(89, 43, 95) : BV:8
97 : ite(88, 40, 96) : BV:8
98 : ite(87, 37, 97) : BV:8
99 : ite(86, 34, 98) : BV:8
100 : ite(85, 31, 99) : BV:8
101 : ite(84, 28, 100) : BV:8
102 : bvadd(23, 24) : BV:32
103 : eq(102, 26) : BOOL
104 : eq(102, 29) : BOOL
105 : eq(102, 32) : BOOL
106 : eq(102, 35) : BOOL
107 : eq(102, 38) : BOOL
108 : eq(102, 41) : BOOL
109 : eq(102, 44) : BOOL
110 : eq(102, 47) : BOOL
111 : eq(102, 49) : BOOL
112 : ite(111, 51, 52) : BV:8
113 : ite(110, 34, 112) : BV:8
114 : ite(109, 46, 113) : BV:8
115 : ite(108, 43, 114) : BV:8
116 : ite(107, 40, 115) : BV:8
117 : ite(106, 37, 116) : BV:8
118 : ite(105, 34, 117) : BV:8
119 : ite(104, 31, 118) : BV:8
120 : ite(103, 28, 119) : BV:8
121 : bvconcat(61, 81, 101, 120) : BV:32
122 : ite(22, 2, 121) : BV:32
123 : ite(19, 20, 122) : BV:32
124 : lambda(17, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(16, 124) : MAP[BV:32 -> BV:32]
126 : sym_const(125) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16576 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777219 { 0x1000003 +1.35e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777220 { 0x1000004 +1.47e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16577 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 64 { 0x40 +1.762e129 } : BV:32
23 : eq(17, 2) : BOOL
24 : bvmul(18, 17) : BV:32
25 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
26 : bvadd(20, 24, 25) : BV:32
27 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
28 : eq(26, 27) : BOOL
29 : 216 { 0xd8 -40 } : BV:8
30 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
31 : eq(26, 30) : BOOL
32 : 45 { 0x2d } : BV:8
33 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
37 : eq(26, 36) : BOOL
38 : 36 { 0x24 } : BV:8
39 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
40 : eq(26, 39) : BOOL
41 : 162 { 0xa2 -94 } : BV:8
42 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
43 : eq(26, 42) : BOOL
44 : 252 { 0xfc -4 } : BV:8
45 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
46 : eq(26, 45) : BOOL
47 : 64 { 0x40 } : BV:8
48 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
49 : eq(26, 48) : BOOL
50 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
51 : eq(26, 50) : BOOL
52 : 237 { 0xed -19 } : BV:8
53 : 0 { 0x0 } : BV:8
54 : ite(51, 52, 53) : BV:8
55 : ite(49, 35, 54) : BV:8
56 : ite(46, 47, 55) : BV:8
57 : ite(43, 44, 56) : BV:8
58 : ite(40, 41, 57) : BV:8
59 : ite(37, 38, 58) : BV:8
60 : ite(34, 35, 59) : BV:8
61 : ite(31, 32, 60) : BV:8
62 : ite(28, 29, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 25) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : eq(64, 33) : BOOL
68 : eq(64, 36) : BOOL
69 : eq(64, 39) : BOOL
70 : eq(64, 42) : BOOL
71 : eq(64, 45) : BOOL
72 : eq(64, 48) : BOOL
73 : eq(64, 50) : BOOL
74 : ite(73, 52, 53) : BV:8
75 : ite(72, 35, 74) : BV:8
76 : ite(71, 47, 75) : BV:8
77 : ite(70, 44, 76) : BV:8
78 : ite(69, 41, 77) : BV:8
79 : ite(68, 38, 78) : BV:8
80 : ite(67, 35, 79) : BV:8
81 : ite(66, 32, 80) : BV:8
82 : ite(65, 29, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 24, 25) : BV:32
85 : eq(84, 27) : BOOL
86 : eq(84, 30) : BOOL
87 : eq(84, 33) : BOOL
88 : eq(84, 36) : BOOL
89 : eq(84, 39) : BOOL
90 : eq(84, 42) : BOOL
91 : eq(84, 45) : BOOL
92 : eq(84, 48) : BOOL
93 : eq(84, 50) : BOOL
94 : ite(93, 52, 53) : BV:8
95 : ite(92, 35, 94) : BV:8
96 : ite(91, 47, 95) : BV:8
97 : ite(90, 44, 96) : BV:8
98 : ite(89, 41, 97) : BV:8
99 : ite(88, 38, 98) : BV:8
100 : ite(87, 35, 99) : BV:8
101 : ite(86, 32, 100) : BV:8
102 : ite(85, 29, 101) : BV:8
103 : bvadd(24, 25) : BV:32
104 : eq(103, 27) : BOOL
105 : eq(103, 30) : BOOL
106 : eq(103, 33) : BOOL
107 : eq(103, 36) : BOOL
108 : eq(103, 39) : BOOL
109 : eq(103, 42) : BOOL
110 : eq(103, 45) : BOOL
111 : eq(103, 48) : BOOL
112 : eq(103, 50) : BOOL
113 : ite(112, 52, 53) : BV:8
114 : ite(111, 35, 113) : BV:8
115 : ite(110, 47, 114) : BV:8
116 : ite(109, 44, 115) : BV:8
117 : ite(108, 41, 116) : BV:8
118 : ite(107, 38, 117) : BV:8
119 : ite(106, 35, 118) : BV:8
120 : ite(105, 32, 119) : BV:8
121 : ite(104, 29, 120) : BV:8
122 : bvconcat(62, 82, 102, 121) : BV:32
123 : ite(23, 2, 122) : BV:32
124 : ite(21, 22, 123) : BV:32
125 : ite(19, 2, 124) : BV:32
126 : lambda(17, 125) : FUNCTION[BV:32 -> BV:32]
127 : map(16, 126) : MAP[BV:32 -> BV:32]
128 : sym_const(127) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1349201191 { 0x506b2d27 +1.83731544e33 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1983905792 { 0x76400000 +1.50000000e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1983905795 { 0x76400003 +1.50000035e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2499813380 { 0x95002004 -1795153916 -1.97703e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2499813383 { 0x95002007 -1795153913 -1.97739e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3550273972 { 0xd39ce1b4 -744693324 -1.22563791e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3550273975 { 0xd39ce1b7 -744693321 -1.22563827e40 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16487 : BV:32
2 : Lambda16488 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777219 { 0x1000003 +1.35e131 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777220 { 0x1000004 +1.47e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777221 { 0x1000005 +1.59e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16492 : BV:32
2 : Lambda16493 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 65535 { 0xffff +1.781238e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 65536 { 0x10000 +1.781250e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 65537 { 0x10001 +1.781261e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 16777219 { 0x1000003 +1.35e131 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16777220 { 0x1000004 +1.47e131 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 16777221 { 0x1000005 +1.59e131 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
55 : eq(53, 54) : BOOL
56 : 216 { 0xd8 -40 } : BV:8
57 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
58 : eq(53, 57) : BOOL
59 : 45 { 0x2d } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
63 : eq(53, 62) : BOOL
64 : 36 { 0x24 } : BV:8
65 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
66 : eq(53, 65) : BOOL
67 : 162 { 0xa2 -94 } : BV:8
68 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
69 : eq(53, 68) : BOOL
70 : 252 { 0xfc -4 } : BV:8
71 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
72 : eq(53, 71) : BOOL
73 : 64 { 0x40 } : BV:8
74 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
75 : eq(53, 74) : BOOL
76 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
77 : eq(53, 76) : BOOL
78 : 237 { 0xed -19 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(75, 61, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : ite(60, 61, 85) : BV:8
87 : ite(58, 59, 86) : BV:8
88 : ite(55, 56, 87) : BV:8
89 : bvadd(74, 52) : BV:32
90 : eq(89, 54) : BOOL
91 : eq(89, 57) : BOOL
92 : eq(89, 51) : BOOL
93 : eq(89, 62) : BOOL
94 : eq(89, 65) : BOOL
95 : eq(89, 68) : BOOL
96 : eq(89, 71) : BOOL
97 : eq(89, 74) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 61, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 70, 101) : BV:8
103 : ite(94, 67, 102) : BV:8
104 : ite(93, 64, 103) : BV:8
105 : ite(92, 61, 104) : BV:8
106 : ite(91, 59, 105) : BV:8
107 : ite(90, 56, 106) : BV:8
108 : bvadd(76, 52) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 57) : BOOL
111 : eq(108, 51) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : eq(108, 68) : BOOL
115 : eq(108, 71) : BOOL
116 : eq(108, 74) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 61, 118) : BV:8
120 : ite(115, 73, 119) : BV:8
121 : ite(114, 70, 120) : BV:8
122 : ite(113, 67, 121) : BV:8
123 : ite(112, 64, 122) : BV:8
124 : ite(111, 61, 123) : BV:8
125 : ite(110, 59, 124) : BV:8
126 : ite(109, 56, 125) : BV:8
127 : bvadd(68, 52) : BV:32
128 : eq(127, 54) : BOOL
129 : eq(127, 57) : BOOL
130 : eq(127, 51) : BOOL
131 : eq(127, 62) : BOOL
132 : eq(127, 65) : BOOL
133 : eq(127, 68) : BOOL
134 : eq(127, 71) : BOOL
135 : eq(127, 74) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 61, 137) : BV:8
139 : ite(134, 73, 138) : BV:8
140 : ite(133, 70, 139) : BV:8
141 : ite(132, 67, 140) : BV:8
142 : ite(131, 64, 141) : BV:8
143 : ite(130, 61, 142) : BV:8
144 : ite(129, 59, 143) : BV:8
145 : ite(128, 56, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(48, 50, 146) : BV:32
148 : eq(147, 54) : BOOL
149 : eq(147, 57) : BOOL
150 : eq(147, 51) : BOOL
151 : eq(147, 62) : BOOL
152 : eq(147, 65) : BOOL
153 : eq(147, 68) : BOOL
154 : eq(147, 71) : BOOL
155 : eq(147, 74) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 61, 157) : BV:8
159 : ite(154, 73, 158) : BV:8
160 : ite(153, 70, 159) : BV:8
161 : ite(152, 67, 160) : BV:8
162 : ite(151, 64, 161) : BV:8
163 : ite(150, 61, 162) : BV:8
164 : ite(149, 59, 163) : BV:8
165 : ite(148, 56, 164) : BV:8
166 : 2 { 0x2 +1.23e129 } : BV:32
167 : bvadd(166, 50, 146) : BV:32
168 : eq(167, 54) : BOOL
169 : eq(167, 57) : BOOL
170 : eq(167, 51) : BOOL
171 : eq(167, 62) : BOOL
172 : eq(167, 65) : BOOL
173 : eq(167, 68) : BOOL
174 : eq(167, 71) : BOOL
175 : eq(167, 74) : BOOL
176 : eq(167, 76) : BOOL
177 : ite(176, 78, 79) : BV:8
178 : ite(175, 61, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 67, 180) : BV:8
182 : ite(171, 64, 181) : BV:8
183 : ite(170, 61, 182) : BV:8
184 : ite(169, 59, 183) : BV:8
185 : ite(168, 56, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 50, 146) : BV:32
188 : eq(187, 54) : BOOL
189 : eq(187, 57) : BOOL
190 : eq(187, 51) : BOOL
191 : eq(187, 62) : BOOL
192 : eq(187, 65) : BOOL
193 : eq(187, 68) : BOOL
194 : eq(187, 71) : BOOL
195 : eq(187, 74) : BOOL
196 : eq(187, 76) : BOOL
197 : ite(196, 78, 79) : BV:8
198 : ite(195, 61, 197) : BV:8
199 : ite(194, 73, 198) : BV:8
200 : ite(193, 70, 199) : BV:8
201 : ite(192, 67, 200) : BV:8
202 : ite(191, 64, 201) : BV:8
203 : ite(190, 61, 202) : BV:8
204 : ite(189, 59, 203) : BV:8
205 : ite(188, 56, 204) : BV:8
206 : bvadd(50, 146) : BV:32
207 : eq(206, 54) : BOOL
208 : eq(206, 57) : BOOL
209 : eq(206, 51) : BOOL
210 : eq(206, 62) : BOOL
211 : eq(206, 65) : BOOL
212 : eq(206, 68) : BOOL
213 : eq(206, 71) : BOOL
214 : eq(206, 74) : BOOL
215 : eq(206, 76) : BOOL
216 : ite(215, 78, 79) : BV:8
217 : ite(214, 61, 216) : BV:8
218 : ite(213, 73, 217) : BV:8
219 : ite(212, 70, 218) : BV:8
220 : ite(211, 67, 219) : BV:8
221 : ite(210, 64, 220) : BV:8
222 : ite(209, 61, 221) : BV:8
223 : ite(208, 59, 222) : BV:8
224 : ite(207, 56, 223) : BV:8
225 : bvconcat(165, 185, 205, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(47, 225, 226) : BV:32
228 : ite(6, 3, 227) : BV:32
229 : lambda(1, 2, 228) : FUNCTION[BV:32,BV:32 -> BV:32]
230 : sym_const(229) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16498 : BV:32
2 : Lambda16499 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777219 { 0x1000003 +1.35e131 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777220 { 0x1000004 +1.47e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777221 { 0x1000005 +1.59e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16494 : BV:32
2 : Lambda16495 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
14 : eq(12, 13) : BOOL
15 : 216 { 0xd8 -40 } : BV:8
16 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
17 : eq(12, 16) : BOOL
18 : 45 { 0x2d } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 162 { 0xa2 -94 } : BV:8
27 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
31 : eq(12, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
36 : eq(12, 35) : BOOL
37 : 237 { 0xed -19 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(34, 20, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(25, 26, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : bvadd(33, 11) : BV:32
49 : eq(48, 13) : BOOL
50 : eq(48, 16) : BOOL
51 : eq(48, 10) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 27) : BOOL
55 : eq(48, 30) : BOOL
56 : eq(48, 33) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 20, 58) : BV:8
60 : ite(55, 32, 59) : BV:8
61 : ite(54, 29, 60) : BV:8
62 : ite(53, 26, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 15, 65) : BV:8
67 : bvadd(35, 11) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 16) : BOOL
70 : eq(67, 10) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 27) : BOOL
74 : eq(67, 30) : BOOL
75 : eq(67, 33) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 32, 78) : BV:8
80 : ite(73, 29, 79) : BV:8
81 : ite(72, 26, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 18, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : bvadd(27, 11) : BV:32
87 : eq(86, 13) : BOOL
88 : eq(86, 16) : BOOL
89 : eq(86, 10) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 30) : BOOL
94 : eq(86, 33) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 20, 96) : BV:8
98 : ite(93, 32, 97) : BV:8
99 : ite(92, 29, 98) : BV:8
100 : ite(91, 26, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 18, 102) : BV:8
104 : ite(87, 15, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : bvadd(7, 9, 105) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 10) : BOOL
110 : eq(106, 21) : BOOL
111 : eq(106, 24) : BOOL
112 : eq(106, 27) : BOOL
113 : eq(106, 30) : BOOL
114 : eq(106, 33) : BOOL
115 : eq(106, 35) : BOOL
116 : ite(115, 37, 38) : BV:8
117 : ite(114, 20, 116) : BV:8
118 : ite(113, 32, 117) : BV:8
119 : ite(112, 29, 118) : BV:8
120 : ite(111, 26, 119) : BV:8
121 : ite(110, 23, 120) : BV:8
122 : ite(109, 20, 121) : BV:8
123 : ite(108, 18, 122) : BV:8
124 : ite(107, 15, 123) : BV:8
125 : 2 { 0x2 +1.23e129 } : BV:32
126 : bvadd(125, 9, 105) : BV:32
127 : eq(126, 13) : BOOL
128 : eq(126, 16) : BOOL
129 : eq(126, 10) : BOOL
130 : eq(126, 21) : BOOL
131 : eq(126, 24) : BOOL
132 : eq(126, 27) : BOOL
133 : eq(126, 30) : BOOL
134 : eq(126, 33) : BOOL
135 : eq(126, 35) : BOOL
136 : ite(135, 37, 38) : BV:8
137 : ite(134, 20, 136) : BV:8
138 : ite(133, 32, 137) : BV:8
139 : ite(132, 29, 138) : BV:8
140 : ite(131, 26, 139) : BV:8
141 : ite(130, 23, 140) : BV:8
142 : ite(129, 20, 141) : BV:8
143 : ite(128, 18, 142) : BV:8
144 : ite(127, 15, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 9, 105) : BV:32
147 : eq(146, 13) : BOOL
148 : eq(146, 16) : BOOL
149 : eq(146, 10) : BOOL
150 : eq(146, 21) : BOOL
151 : eq(146, 24) : BOOL
152 : eq(146, 27) : BOOL
153 : eq(146, 30) : BOOL
154 : eq(146, 33) : BOOL
155 : eq(146, 35) : BOOL
156 : ite(155, 37, 38) : BV:8
157 : ite(154, 20, 156) : BV:8
158 : ite(153, 32, 157) : BV:8
159 : ite(152, 29, 158) : BV:8
160 : ite(151, 26, 159) : BV:8
161 : ite(150, 23, 160) : BV:8
162 : ite(149, 20, 161) : BV:8
163 : ite(148, 18, 162) : BV:8
164 : ite(147, 15, 163) : BV:8
165 : bvadd(9, 105) : BV:32
166 : eq(165, 13) : BOOL
167 : eq(165, 16) : BOOL
168 : eq(165, 10) : BOOL
169 : eq(165, 21) : BOOL
170 : eq(165, 24) : BOOL
171 : eq(165, 27) : BOOL
172 : eq(165, 30) : BOOL
173 : eq(165, 33) : BOOL
174 : eq(165, 35) : BOOL
175 : ite(174, 37, 38) : BV:8
176 : ite(173, 20, 175) : BV:8
177 : ite(172, 32, 176) : BV:8
178 : ite(171, 29, 177) : BV:8
179 : ite(170, 26, 178) : BV:8
180 : ite(169, 23, 179) : BV:8
181 : ite(168, 20, 180) : BV:8
182 : ite(167, 18, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : bvconcat(124, 144, 164, 183) : BV:32
185 : ite(6, 3, 184) : BV:32
186 : lambda(1, 2, 185) : FUNCTION[BV:32,BV:32 -> BV:32]
187 : sym_const(186) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 16777219 ] -> true, [ 16777220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16505 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 64 { 0x40 +1.762e129 } : BV:32
8 : eq(1, 4) : BOOL
9 : bvmul(2, 1) : BV:32
10 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
13 : eq(11, 12) : BOOL
14 : 216 { 0xd8 -40 } : BV:8
15 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
16 : eq(11, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
22 : eq(11, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
25 : eq(11, 24) : BOOL
26 : 162 { 0xa2 -94 } : BV:8
27 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
28 : eq(11, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
31 : eq(11, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
34 : eq(11, 33) : BOOL
35 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
36 : eq(11, 35) : BOOL
37 : 237 { 0xed -19 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(34, 20, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(25, 26, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 10) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 35) : BOOL
59 : ite(58, 37, 38) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : bvadd(68, 9, 10) : BV:32
70 : eq(69, 12) : BOOL
71 : eq(69, 15) : BOOL
72 : eq(69, 18) : BOOL
73 : eq(69, 21) : BOOL
74 : eq(69, 24) : BOOL
75 : eq(69, 27) : BOOL
76 : eq(69, 30) : BOOL
77 : eq(69, 33) : BOOL
78 : eq(69, 35) : BOOL
79 : ite(78, 37, 38) : BV:8
80 : ite(77, 20, 79) : BV:8
81 : ite(76, 32, 80) : BV:8
82 : ite(75, 29, 81) : BV:8
83 : ite(74, 26, 82) : BV:8
84 : ite(73, 23, 83) : BV:8
85 : ite(72, 20, 84) : BV:8
86 : ite(71, 17, 85) : BV:8
87 : ite(70, 14, 86) : BV:8
88 : bvadd(9, 10) : BV:32
89 : eq(88, 12) : BOOL
90 : eq(88, 15) : BOOL
91 : eq(88, 18) : BOOL
92 : eq(88, 21) : BOOL
93 : eq(88, 24) : BOOL
94 : eq(88, 27) : BOOL
95 : eq(88, 30) : BOOL
96 : eq(88, 33) : BOOL
97 : eq(88, 35) : BOOL
98 : ite(97, 37, 38) : BV:8
99 : ite(96, 20, 98) : BV:8
100 : ite(95, 32, 99) : BV:8
101 : ite(94, 29, 100) : BV:8
102 : ite(93, 26, 101) : BV:8
103 : ite(92, 23, 102) : BV:8
104 : ite(91, 20, 103) : BV:8
105 : ite(90, 17, 104) : BV:8
106 : ite(89, 14, 105) : BV:8
107 : bvconcat(47, 67, 87, 106) : BV:32
108 : ite(8, 4, 107) : BV:32
109 : ite(6, 7, 108) : BV:32
110 : ite(3, 4, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 16777219 ] -> true, [ 16777220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16509 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvmul(5, 1) : BV:32
9 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
12 : eq(10, 11) : BOOL
13 : 216 { 0xd8 -40 } : BV:8
14 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
15 : eq(10, 14) : BOOL
16 : 45 { 0x2d } : BV:8
17 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
18 : eq(10, 17) : BOOL
19 : 255 { 0xff -1 } : BV:8
20 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
21 : eq(10, 20) : BOOL
22 : 36 { 0x24 } : BV:8
23 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
24 : eq(10, 23) : BOOL
25 : 162 { 0xa2 -94 } : BV:8
26 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
27 : eq(10, 26) : BOOL
28 : 252 { 0xfc -4 } : BV:8
29 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
30 : eq(10, 29) : BOOL
31 : 64 { 0x40 } : BV:8
32 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
33 : eq(10, 32) : BOOL
34 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
35 : eq(10, 34) : BOOL
36 : 237 { 0xed -19 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 19, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 23) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 19, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 22, 62) : BV:8
64 : ite(51, 19, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 20) : BOOL
73 : eq(68, 23) : BOOL
74 : eq(68, 26) : BOOL
75 : eq(68, 29) : BOOL
76 : eq(68, 32) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 19, 78) : BV:8
80 : ite(75, 31, 79) : BV:8
81 : ite(74, 28, 80) : BV:8
82 : ite(73, 25, 81) : BV:8
83 : ite(72, 22, 82) : BV:8
84 : ite(71, 19, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 17) : BOOL
91 : eq(87, 20) : BOOL
92 : eq(87, 23) : BOOL
93 : eq(87, 26) : BOOL
94 : eq(87, 29) : BOOL
95 : eq(87, 32) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 19, 97) : BV:8
99 : ite(94, 31, 98) : BV:8
100 : ite(93, 28, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 22, 101) : BV:8
103 : ite(90, 19, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(6, 7, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 16777219 ] -> true, [ 16777220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16513 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 64 { 0x40 +1.762e129 } : BV:32
8 : eq(1, 4) : BOOL
9 : bvmul(2, 1) : BV:32
10 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
13 : eq(11, 12) : BOOL
14 : 216 { 0xd8 -40 } : BV:8
15 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
16 : eq(11, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
22 : eq(11, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
25 : eq(11, 24) : BOOL
26 : 162 { 0xa2 -94 } : BV:8
27 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
28 : eq(11, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
31 : eq(11, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
34 : eq(11, 33) : BOOL
35 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
36 : eq(11, 35) : BOOL
37 : 237 { 0xed -19 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(34, 20, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(25, 26, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 10) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 35) : BOOL
59 : ite(58, 37, 38) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : bvadd(68, 9, 10) : BV:32
70 : eq(69, 12) : BOOL
71 : eq(69, 15) : BOOL
72 : eq(69, 18) : BOOL
73 : eq(69, 21) : BOOL
74 : eq(69, 24) : BOOL
75 : eq(69, 27) : BOOL
76 : eq(69, 30) : BOOL
77 : eq(69, 33) : BOOL
78 : eq(69, 35) : BOOL
79 : ite(78, 37, 38) : BV:8
80 : ite(77, 20, 79) : BV:8
81 : ite(76, 32, 80) : BV:8
82 : ite(75, 29, 81) : BV:8
83 : ite(74, 26, 82) : BV:8
84 : ite(73, 23, 83) : BV:8
85 : ite(72, 20, 84) : BV:8
86 : ite(71, 17, 85) : BV:8
87 : ite(70, 14, 86) : BV:8
88 : bvadd(9, 10) : BV:32
89 : eq(88, 12) : BOOL
90 : eq(88, 15) : BOOL
91 : eq(88, 18) : BOOL
92 : eq(88, 21) : BOOL
93 : eq(88, 24) : BOOL
94 : eq(88, 27) : BOOL
95 : eq(88, 30) : BOOL
96 : eq(88, 33) : BOOL
97 : eq(88, 35) : BOOL
98 : ite(97, 37, 38) : BV:8
99 : ite(96, 20, 98) : BV:8
100 : ite(95, 32, 99) : BV:8
101 : ite(94, 29, 100) : BV:8
102 : ite(93, 26, 101) : BV:8
103 : ite(92, 23, 102) : BV:8
104 : ite(91, 20, 103) : BV:8
105 : ite(90, 17, 104) : BV:8
106 : ite(89, 14, 105) : BV:8
107 : bvconcat(47, 67, 87, 106) : BV:32
108 : ite(8, 4, 107) : BV:32
109 : ite(6, 7, 108) : BV:32
110 : ite(3, 4, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2314793429
=counter_example_end
=global nodece 57 num_edges_traversed 1
=global nodece 57 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce6628.num_edges_traversed2
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(epsilon)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce6628 b8696bdc3e15692461c569b8e2dd32
=input.spec-%var-x-1
1 : Lambda16560 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16563 : BV:32
18 : Lambda16561 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 65537 { 0x10001 +1.781261e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777219 { 0x1000003 +1.35e131 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777220 { 0x1000004 +1.47e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777221 { 0x1000005 +1.59e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16562 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
82 : eq(80, 81) : BOOL
83 : 216 { 0xd8 -40 } : BV:8
84 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
85 : eq(80, 84) : BOOL
86 : 45 { 0x2d } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
90 : eq(80, 89) : BOOL
91 : 36 { 0x24 } : BV:8
92 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
93 : eq(80, 92) : BOOL
94 : 162 { 0xa2 -94 } : BV:8
95 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
96 : eq(80, 95) : BOOL
97 : 252 { 0xfc -4 } : BV:8
98 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
99 : eq(80, 98) : BOOL
100 : 64 { 0x40 } : BV:8
101 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
102 : eq(80, 101) : BOOL
103 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
104 : eq(80, 103) : BOOL
105 : 237 { 0xed -19 } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(102, 88, 107) : BV:8
109 : ite(99, 100, 108) : BV:8
110 : ite(96, 97, 109) : BV:8
111 : ite(93, 94, 110) : BV:8
112 : ite(90, 91, 111) : BV:8
113 : ite(87, 88, 112) : BV:8
114 : ite(85, 86, 113) : BV:8
115 : ite(82, 83, 114) : BV:8
116 : bvadd(101, 79) : BV:32
117 : eq(116, 81) : BOOL
118 : eq(116, 84) : BOOL
119 : eq(116, 78) : BOOL
120 : eq(116, 89) : BOOL
121 : eq(116, 92) : BOOL
122 : eq(116, 95) : BOOL
123 : eq(116, 98) : BOOL
124 : eq(116, 101) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 88, 126) : BV:8
128 : ite(123, 100, 127) : BV:8
129 : ite(122, 97, 128) : BV:8
130 : ite(121, 94, 129) : BV:8
131 : ite(120, 91, 130) : BV:8
132 : ite(119, 88, 131) : BV:8
133 : ite(118, 86, 132) : BV:8
134 : ite(117, 83, 133) : BV:8
135 : bvadd(103, 79) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 84) : BOOL
138 : eq(135, 78) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : eq(135, 95) : BOOL
142 : eq(135, 98) : BOOL
143 : eq(135, 101) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 88, 145) : BV:8
147 : ite(142, 100, 146) : BV:8
148 : ite(141, 97, 147) : BV:8
149 : ite(140, 94, 148) : BV:8
150 : ite(139, 91, 149) : BV:8
151 : ite(138, 88, 150) : BV:8
152 : ite(137, 86, 151) : BV:8
153 : ite(136, 83, 152) : BV:8
154 : bvadd(95, 79) : BV:32
155 : eq(154, 81) : BOOL
156 : eq(154, 84) : BOOL
157 : eq(154, 78) : BOOL
158 : eq(154, 89) : BOOL
159 : eq(154, 92) : BOOL
160 : eq(154, 95) : BOOL
161 : eq(154, 98) : BOOL
162 : eq(154, 101) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 88, 164) : BV:8
166 : ite(161, 100, 165) : BV:8
167 : ite(160, 97, 166) : BV:8
168 : ite(159, 94, 167) : BV:8
169 : ite(158, 91, 168) : BV:8
170 : ite(157, 88, 169) : BV:8
171 : ite(156, 86, 170) : BV:8
172 : ite(155, 83, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(75, 77, 173) : BV:32
175 : eq(174, 81) : BOOL
176 : eq(174, 84) : BOOL
177 : eq(174, 78) : BOOL
178 : eq(174, 89) : BOOL
179 : eq(174, 92) : BOOL
180 : eq(174, 95) : BOOL
181 : eq(174, 98) : BOOL
182 : eq(174, 101) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 88, 184) : BV:8
186 : ite(181, 100, 185) : BV:8
187 : ite(180, 97, 186) : BV:8
188 : ite(179, 94, 187) : BV:8
189 : ite(178, 91, 188) : BV:8
190 : ite(177, 88, 189) : BV:8
191 : ite(176, 86, 190) : BV:8
192 : ite(175, 83, 191) : BV:8
193 : 2 { 0x2 +1.23e129 } : BV:32
194 : bvadd(193, 77, 173) : BV:32
195 : eq(194, 81) : BOOL
196 : eq(194, 84) : BOOL
197 : eq(194, 78) : BOOL
198 : eq(194, 89) : BOOL
199 : eq(194, 92) : BOOL
200 : eq(194, 95) : BOOL
201 : eq(194, 98) : BOOL
202 : eq(194, 101) : BOOL
203 : eq(194, 103) : BOOL
204 : ite(203, 105, 106) : BV:8
205 : ite(202, 88, 204) : BV:8
206 : ite(201, 100, 205) : BV:8
207 : ite(200, 97, 206) : BV:8
208 : ite(199, 94, 207) : BV:8
209 : ite(198, 91, 208) : BV:8
210 : ite(197, 88, 209) : BV:8
211 : ite(196, 86, 210) : BV:8
212 : ite(195, 83, 211) : BV:8
213 : 1 { 0x1 +1.11e129 } : BV:32
214 : bvadd(213, 77, 173) : BV:32
215 : eq(214, 81) : BOOL
216 : eq(214, 84) : BOOL
217 : eq(214, 78) : BOOL
218 : eq(214, 89) : BOOL
219 : eq(214, 92) : BOOL
220 : eq(214, 95) : BOOL
221 : eq(214, 98) : BOOL
222 : eq(214, 101) : BOOL
223 : eq(214, 103) : BOOL
224 : ite(223, 105, 106) : BV:8
225 : ite(222, 88, 224) : BV:8
226 : ite(221, 100, 225) : BV:8
227 : ite(220, 97, 226) : BV:8
228 : ite(219, 94, 227) : BV:8
229 : ite(218, 91, 228) : BV:8
230 : ite(217, 88, 229) : BV:8
231 : ite(216, 86, 230) : BV:8
232 : ite(215, 83, 231) : BV:8
233 : bvadd(77, 173) : BV:32
234 : eq(233, 81) : BOOL
235 : eq(233, 84) : BOOL
236 : eq(233, 78) : BOOL
237 : eq(233, 89) : BOOL
238 : eq(233, 92) : BOOL
239 : eq(233, 95) : BOOL
240 : eq(233, 98) : BOOL
241 : eq(233, 101) : BOOL
242 : eq(233, 103) : BOOL
243 : ite(242, 105, 106) : BV:8
244 : ite(241, 88, 243) : BV:8
245 : ite(240, 100, 244) : BV:8
246 : ite(239, 97, 245) : BV:8
247 : ite(238, 94, 246) : BV:8
248 : ite(237, 91, 247) : BV:8
249 : ite(236, 88, 248) : BV:8
250 : ite(235, 86, 249) : BV:8
251 : ite(234, 83, 250) : BV:8
252 : bvconcat(192, 212, 232, 251) : BV:32
253 : ite(55, 2, 252) : BV:32
254 : ite(74, 252, 253) : BV:32
255 : ite(55, 2, 254) : BV:32
256 : lambda(52, 255) : FUNCTION[BV:32 -> BV:32]
257 : map(51, 256) : MAP[BV:32 -> BV:32]
258 : lambda(17, 257) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
259 : map(16, 258) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
260 : sym_const(259) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%x
1 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-%m
1 : 16777220 { 0x1000004 +1.47e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1207975923 ] -> 0, [ 1207975924; 1207975924 ] -> 252, [ 1207975925; 1207975925 ] -> 237, [ 1207975926; 1207975927 ] -> 255, [ 1207975928; 1207975935 ] -> 0, [ 1207975936; 1207975936 ] -> 36, [ 1207975937; 1207975937 ] -> 162, [ 1207975938; 1207975938 ] -> 45, [ 1207975939; 1207975939 ] -> 216, [ 1207975940; 3626869295 ] -> 0, [ 3626869296; 3626869296 ] -> 64, [ 3626869297; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1983905791 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1983905792; 1983905795 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1983905796; 2499813379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2499813380; 2499813383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2499813384; 3550273971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3550273972; 3550273975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3550273976; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3550273972 { 0xd39ce1b4 -744693324 -1.22563791e40 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1983905792 { 0x76400000 +1.50000000e109 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2499813380 { 0x95002004 -1795153916 -1.97703e171 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16568 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16571 : BV:32
18 : Lambda16569 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 65537 { 0x10001 +1.781261e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777219 { 0x1000003 +1.35e131 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777220 { 0x1000004 +1.47e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777221 { 0x1000005 +1.59e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16570 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
63 : eq(61, 62) : BOOL
64 : 216 { 0xd8 -40 } : BV:8
65 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
66 : eq(61, 65) : BOOL
67 : 45 { 0x2d } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
71 : eq(61, 70) : BOOL
72 : 36 { 0x24 } : BV:8
73 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
74 : eq(61, 73) : BOOL
75 : 162 { 0xa2 -94 } : BV:8
76 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
77 : eq(61, 76) : BOOL
78 : 252 { 0xfc -4 } : BV:8
79 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
80 : eq(61, 79) : BOOL
81 : 64 { 0x40 } : BV:8
82 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
83 : eq(61, 82) : BOOL
84 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
85 : eq(61, 84) : BOOL
86 : 237 { 0xed -19 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 69, 88) : BV:8
90 : ite(80, 81, 89) : BV:8
91 : ite(77, 78, 90) : BV:8
92 : ite(74, 75, 91) : BV:8
93 : ite(71, 72, 92) : BV:8
94 : ite(68, 69, 93) : BV:8
95 : ite(66, 67, 94) : BV:8
96 : ite(63, 64, 95) : BV:8
97 : bvadd(82, 60) : BV:32
98 : eq(97, 62) : BOOL
99 : eq(97, 65) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 70) : BOOL
102 : eq(97, 73) : BOOL
103 : eq(97, 76) : BOOL
104 : eq(97, 79) : BOOL
105 : eq(97, 82) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 69, 107) : BV:8
109 : ite(104, 81, 108) : BV:8
110 : ite(103, 78, 109) : BV:8
111 : ite(102, 75, 110) : BV:8
112 : ite(101, 72, 111) : BV:8
113 : ite(100, 69, 112) : BV:8
114 : ite(99, 67, 113) : BV:8
115 : ite(98, 64, 114) : BV:8
116 : bvadd(84, 60) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 65) : BOOL
119 : eq(116, 59) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : eq(116, 76) : BOOL
123 : eq(116, 79) : BOOL
124 : eq(116, 82) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 69, 126) : BV:8
128 : ite(123, 81, 127) : BV:8
129 : ite(122, 78, 128) : BV:8
130 : ite(121, 75, 129) : BV:8
131 : ite(120, 72, 130) : BV:8
132 : ite(119, 69, 131) : BV:8
133 : ite(118, 67, 132) : BV:8
134 : ite(117, 64, 133) : BV:8
135 : bvadd(76, 60) : BV:32
136 : eq(135, 62) : BOOL
137 : eq(135, 65) : BOOL
138 : eq(135, 59) : BOOL
139 : eq(135, 70) : BOOL
140 : eq(135, 73) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : eq(135, 82) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 69, 145) : BV:8
147 : ite(142, 81, 146) : BV:8
148 : ite(141, 78, 147) : BV:8
149 : ite(140, 75, 148) : BV:8
150 : ite(139, 72, 149) : BV:8
151 : ite(138, 69, 150) : BV:8
152 : ite(137, 67, 151) : BV:8
153 : ite(136, 64, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(56, 58, 154) : BV:32
156 : eq(155, 62) : BOOL
157 : eq(155, 65) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 70) : BOOL
160 : eq(155, 73) : BOOL
161 : eq(155, 76) : BOOL
162 : eq(155, 79) : BOOL
163 : eq(155, 82) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 81, 166) : BV:8
168 : ite(161, 78, 167) : BV:8
169 : ite(160, 75, 168) : BV:8
170 : ite(159, 72, 169) : BV:8
171 : ite(158, 69, 170) : BV:8
172 : ite(157, 67, 171) : BV:8
173 : ite(156, 64, 172) : BV:8
174 : 2 { 0x2 +1.23e129 } : BV:32
175 : bvadd(174, 58, 154) : BV:32
176 : eq(175, 62) : BOOL
177 : eq(175, 65) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 70) : BOOL
180 : eq(175, 73) : BOOL
181 : eq(175, 76) : BOOL
182 : eq(175, 79) : BOOL
183 : eq(175, 82) : BOOL
184 : eq(175, 84) : BOOL
185 : ite(184, 86, 87) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 81, 186) : BV:8
188 : ite(181, 78, 187) : BV:8
189 : ite(180, 75, 188) : BV:8
190 : ite(179, 72, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 67, 191) : BV:8
193 : ite(176, 64, 192) : BV:8
194 : 1 { 0x1 +1.11e129 } : BV:32
195 : bvadd(194, 58, 154) : BV:32
196 : eq(195, 62) : BOOL
197 : eq(195, 65) : BOOL
198 : eq(195, 59) : BOOL
199 : eq(195, 70) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 79) : BOOL
203 : eq(195, 82) : BOOL
204 : eq(195, 84) : BOOL
205 : ite(204, 86, 87) : BV:8
206 : ite(203, 69, 205) : BV:8
207 : ite(202, 81, 206) : BV:8
208 : ite(201, 78, 207) : BV:8
209 : ite(200, 75, 208) : BV:8
210 : ite(199, 72, 209) : BV:8
211 : ite(198, 69, 210) : BV:8
212 : ite(197, 67, 211) : BV:8
213 : ite(196, 64, 212) : BV:8
214 : bvadd(58, 154) : BV:32
215 : eq(214, 62) : BOOL
216 : eq(214, 65) : BOOL
217 : eq(214, 59) : BOOL
218 : eq(214, 70) : BOOL
219 : eq(214, 73) : BOOL
220 : eq(214, 76) : BOOL
221 : eq(214, 79) : BOOL
222 : eq(214, 82) : BOOL
223 : eq(214, 84) : BOOL
224 : ite(223, 86, 87) : BV:8
225 : ite(222, 69, 224) : BV:8
226 : ite(221, 81, 225) : BV:8
227 : ite(220, 78, 226) : BV:8
228 : ite(219, 75, 227) : BV:8
229 : ite(218, 72, 228) : BV:8
230 : ite(217, 69, 229) : BV:8
231 : ite(216, 67, 230) : BV:8
232 : ite(215, 64, 231) : BV:8
233 : bvconcat(173, 193, 213, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : lambda(52, 234) : FUNCTION[BV:32 -> BV:32]
236 : map(51, 235) : MAP[BV:32 -> BV:32]
237 : lambda(17, 236) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
238 : map(16, 237) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
239 : sym_const(238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda16565 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 16777219 { 0x1000003 +1.35e131 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16777220 { 0x1000004 +1.47e131 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16566 : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : eq(19, 22) : BOOL
24 : 64 { 0x40 +1.762e129 } : BV:32
25 : eq(19, 4) : BOOL
26 : bvmul(20, 19) : BV:32
27 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
28 : bvadd(22, 26, 27) : BV:32
29 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
30 : eq(28, 29) : BOOL
31 : 216 { 0xd8 -40 } : BV:8
32 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
33 : eq(28, 32) : BOOL
34 : 45 { 0x2d } : BV:8
35 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
36 : eq(28, 35) : BOOL
37 : 255 { 0xff -1 } : BV:8
38 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
39 : eq(28, 38) : BOOL
40 : 36 { 0x24 } : BV:8
41 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
42 : eq(28, 41) : BOOL
43 : 162 { 0xa2 -94 } : BV:8
44 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
45 : eq(28, 44) : BOOL
46 : 252 { 0xfc -4 } : BV:8
47 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
48 : eq(28, 47) : BOOL
49 : 64 { 0x40 } : BV:8
50 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
51 : eq(28, 50) : BOOL
52 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
53 : eq(28, 52) : BOOL
54 : 237 { 0xed -19 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 37, 56) : BV:8
58 : ite(48, 49, 57) : BV:8
59 : ite(45, 46, 58) : BV:8
60 : ite(42, 43, 59) : BV:8
61 : ite(39, 40, 60) : BV:8
62 : ite(36, 37, 61) : BV:8
63 : ite(33, 34, 62) : BV:8
64 : ite(30, 31, 63) : BV:8
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : bvadd(65, 26, 27) : BV:32
67 : eq(66, 29) : BOOL
68 : eq(66, 32) : BOOL
69 : eq(66, 35) : BOOL
70 : eq(66, 38) : BOOL
71 : eq(66, 41) : BOOL
72 : eq(66, 44) : BOOL
73 : eq(66, 47) : BOOL
74 : eq(66, 50) : BOOL
75 : eq(66, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 37, 76) : BV:8
78 : ite(73, 49, 77) : BV:8
79 : ite(72, 46, 78) : BV:8
80 : ite(71, 43, 79) : BV:8
81 : ite(70, 40, 80) : BV:8
82 : ite(69, 37, 81) : BV:8
83 : ite(68, 34, 82) : BV:8
84 : ite(67, 31, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 26, 27) : BV:32
87 : eq(86, 29) : BOOL
88 : eq(86, 32) : BOOL
89 : eq(86, 35) : BOOL
90 : eq(86, 38) : BOOL
91 : eq(86, 41) : BOOL
92 : eq(86, 44) : BOOL
93 : eq(86, 47) : BOOL
94 : eq(86, 50) : BOOL
95 : eq(86, 52) : BOOL
96 : ite(95, 54, 55) : BV:8
97 : ite(94, 37, 96) : BV:8
98 : ite(93, 49, 97) : BV:8
99 : ite(92, 46, 98) : BV:8
100 : ite(91, 43, 99) : BV:8
101 : ite(90, 40, 100) : BV:8
102 : ite(89, 37, 101) : BV:8
103 : ite(88, 34, 102) : BV:8
104 : ite(87, 31, 103) : BV:8
105 : bvadd(26, 27) : BV:32
106 : eq(105, 29) : BOOL
107 : eq(105, 32) : BOOL
108 : eq(105, 35) : BOOL
109 : eq(105, 38) : BOOL
110 : eq(105, 41) : BOOL
111 : eq(105, 44) : BOOL
112 : eq(105, 47) : BOOL
113 : eq(105, 50) : BOOL
114 : eq(105, 52) : BOOL
115 : ite(114, 54, 55) : BV:8
116 : ite(113, 37, 115) : BV:8
117 : ite(112, 49, 116) : BV:8
118 : ite(111, 46, 117) : BV:8
119 : ite(110, 43, 118) : BV:8
120 : ite(109, 40, 119) : BV:8
121 : ite(108, 37, 120) : BV:8
122 : ite(107, 34, 121) : BV:8
123 : ite(106, 31, 122) : BV:8
124 : bvconcat(64, 84, 104, 123) : BV:32
125 : ite(25, 4, 124) : BV:32
126 : ite(23, 24, 125) : BV:32
127 : ite(21, 4, 126) : BV:32
128 : lambda(19, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(18, 128) : MAP[BV:32 -> BV:32]
130 : sum(1, 2, 129) : SUM[UNIT,MAP[BV:32 -> BV:32]]
131 : sym_const(130) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1522623630 { 0x5ac1648e +1.51088118e54 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16573 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777219 { 0x1000003 +1.35e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777220 { 0x1000004 +1.47e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16574 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 64 { 0x40 +1.762e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : eq(17, 21) : BOOL
23 : bvmul(21, 17) : BV:32
24 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
25 : bvadd(18, 23, 24) : BV:32
26 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
27 : eq(25, 26) : BOOL
28 : 216 { 0xd8 -40 } : BV:8
29 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
30 : eq(25, 29) : BOOL
31 : 45 { 0x2d } : BV:8
32 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
33 : eq(25, 32) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
36 : eq(25, 35) : BOOL
37 : 36 { 0x24 } : BV:8
38 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
39 : eq(25, 38) : BOOL
40 : 162 { 0xa2 -94 } : BV:8
41 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
42 : eq(25, 41) : BOOL
43 : 252 { 0xfc -4 } : BV:8
44 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
45 : eq(25, 44) : BOOL
46 : 64 { 0x40 } : BV:8
47 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
48 : eq(25, 47) : BOOL
49 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
50 : eq(25, 49) : BOOL
51 : 237 { 0xed -19 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(48, 34, 53) : BV:8
55 : ite(45, 46, 54) : BV:8
56 : ite(42, 43, 55) : BV:8
57 : ite(39, 40, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(33, 34, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 23, 24) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 32) : BOOL
67 : eq(63, 35) : BOOL
68 : eq(63, 38) : BOOL
69 : eq(63, 41) : BOOL
70 : eq(63, 44) : BOOL
71 : eq(63, 47) : BOOL
72 : eq(63, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 34, 73) : BV:8
75 : ite(70, 46, 74) : BV:8
76 : ite(69, 43, 75) : BV:8
77 : ite(68, 40, 76) : BV:8
78 : ite(67, 37, 77) : BV:8
79 : ite(66, 34, 78) : BV:8
80 : ite(65, 31, 79) : BV:8
81 : ite(64, 28, 80) : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : bvadd(82, 23, 24) : BV:32
84 : eq(83, 26) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 32) : BOOL
87 : eq(83, 35) : BOOL
88 : eq(83, 38) : BOOL
89 : eq(83, 41) : BOOL
90 : eq(83, 44) : BOOL
91 : eq(83, 47) : BOOL
92 : eq(83, 49) : BOOL
93 : ite(92, 51, 52) : BV:8
94 : ite(91, 34, 93) : BV:8
95 : ite(90, 46, 94) : BV:8
96 : ite(89, 43, 95) : BV:8
97 : ite(88, 40, 96) : BV:8
98 : ite(87, 37, 97) : BV:8
99 : ite(86, 34, 98) : BV:8
100 : ite(85, 31, 99) : BV:8
101 : ite(84, 28, 100) : BV:8
102 : bvadd(23, 24) : BV:32
103 : eq(102, 26) : BOOL
104 : eq(102, 29) : BOOL
105 : eq(102, 32) : BOOL
106 : eq(102, 35) : BOOL
107 : eq(102, 38) : BOOL
108 : eq(102, 41) : BOOL
109 : eq(102, 44) : BOOL
110 : eq(102, 47) : BOOL
111 : eq(102, 49) : BOOL
112 : ite(111, 51, 52) : BV:8
113 : ite(110, 34, 112) : BV:8
114 : ite(109, 46, 113) : BV:8
115 : ite(108, 43, 114) : BV:8
116 : ite(107, 40, 115) : BV:8
117 : ite(106, 37, 116) : BV:8
118 : ite(105, 34, 117) : BV:8
119 : ite(104, 31, 118) : BV:8
120 : ite(103, 28, 119) : BV:8
121 : bvconcat(61, 81, 101, 120) : BV:32
122 : ite(22, 2, 121) : BV:32
123 : ite(19, 20, 122) : BV:32
124 : lambda(17, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(16, 124) : MAP[BV:32 -> BV:32]
126 : sym_const(125) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16576 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777219 { 0x1000003 +1.35e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777220 { 0x1000004 +1.47e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16577 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 64 { 0x40 +1.762e129 } : BV:32
23 : eq(17, 2) : BOOL
24 : bvmul(18, 17) : BV:32
25 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
26 : bvadd(20, 24, 25) : BV:32
27 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
28 : eq(26, 27) : BOOL
29 : 216 { 0xd8 -40 } : BV:8
30 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
31 : eq(26, 30) : BOOL
32 : 45 { 0x2d } : BV:8
33 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
37 : eq(26, 36) : BOOL
38 : 36 { 0x24 } : BV:8
39 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
40 : eq(26, 39) : BOOL
41 : 162 { 0xa2 -94 } : BV:8
42 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
43 : eq(26, 42) : BOOL
44 : 252 { 0xfc -4 } : BV:8
45 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
46 : eq(26, 45) : BOOL
47 : 64 { 0x40 } : BV:8
48 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
49 : eq(26, 48) : BOOL
50 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
51 : eq(26, 50) : BOOL
52 : 237 { 0xed -19 } : BV:8
53 : 0 { 0x0 } : BV:8
54 : ite(51, 52, 53) : BV:8
55 : ite(49, 35, 54) : BV:8
56 : ite(46, 47, 55) : BV:8
57 : ite(43, 44, 56) : BV:8
58 : ite(40, 41, 57) : BV:8
59 : ite(37, 38, 58) : BV:8
60 : ite(34, 35, 59) : BV:8
61 : ite(31, 32, 60) : BV:8
62 : ite(28, 29, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 25) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : eq(64, 33) : BOOL
68 : eq(64, 36) : BOOL
69 : eq(64, 39) : BOOL
70 : eq(64, 42) : BOOL
71 : eq(64, 45) : BOOL
72 : eq(64, 48) : BOOL
73 : eq(64, 50) : BOOL
74 : ite(73, 52, 53) : BV:8
75 : ite(72, 35, 74) : BV:8
76 : ite(71, 47, 75) : BV:8
77 : ite(70, 44, 76) : BV:8
78 : ite(69, 41, 77) : BV:8
79 : ite(68, 38, 78) : BV:8
80 : ite(67, 35, 79) : BV:8
81 : ite(66, 32, 80) : BV:8
82 : ite(65, 29, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 24, 25) : BV:32
85 : eq(84, 27) : BOOL
86 : eq(84, 30) : BOOL
87 : eq(84, 33) : BOOL
88 : eq(84, 36) : BOOL
89 : eq(84, 39) : BOOL
90 : eq(84, 42) : BOOL
91 : eq(84, 45) : BOOL
92 : eq(84, 48) : BOOL
93 : eq(84, 50) : BOOL
94 : ite(93, 52, 53) : BV:8
95 : ite(92, 35, 94) : BV:8
96 : ite(91, 47, 95) : BV:8
97 : ite(90, 44, 96) : BV:8
98 : ite(89, 41, 97) : BV:8
99 : ite(88, 38, 98) : BV:8
100 : ite(87, 35, 99) : BV:8
101 : ite(86, 32, 100) : BV:8
102 : ite(85, 29, 101) : BV:8
103 : bvadd(24, 25) : BV:32
104 : eq(103, 27) : BOOL
105 : eq(103, 30) : BOOL
106 : eq(103, 33) : BOOL
107 : eq(103, 36) : BOOL
108 : eq(103, 39) : BOOL
109 : eq(103, 42) : BOOL
110 : eq(103, 45) : BOOL
111 : eq(103, 48) : BOOL
112 : eq(103, 50) : BOOL
113 : ite(112, 52, 53) : BV:8
114 : ite(111, 35, 113) : BV:8
115 : ite(110, 47, 114) : BV:8
116 : ite(109, 44, 115) : BV:8
117 : ite(108, 41, 116) : BV:8
118 : ite(107, 38, 117) : BV:8
119 : ite(106, 35, 118) : BV:8
120 : ite(105, 32, 119) : BV:8
121 : ite(104, 29, 120) : BV:8
122 : bvconcat(62, 82, 102, 121) : BV:32
123 : ite(23, 2, 122) : BV:32
124 : ite(21, 22, 123) : BV:32
125 : ite(19, 2, 124) : BV:32
126 : lambda(17, 125) : FUNCTION[BV:32 -> BV:32]
127 : map(16, 126) : MAP[BV:32 -> BV:32]
128 : sym_const(127) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967232 { 0xffffffc0 -64 -1.99999237e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1349201192 { 0x506b2d28 +1.83731555e33 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1983905792 { 0x76400000 +1.50000000e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1983905795 { 0x76400003 +1.50000035e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2499813380 { 0x95002004 -1795153916 -1.97703e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2499813383 { 0x95002007 -1795153913 -1.97739e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3550273972 { 0xd39ce1b4 -744693324 -1.22563791e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3550273975 { 0xd39ce1b7 -744693321 -1.22563827e40 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16487 : BV:32
2 : Lambda16488 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777219 { 0x1000003 +1.35e131 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777220 { 0x1000004 +1.47e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777221 { 0x1000005 +1.59e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16492 : BV:32
2 : Lambda16493 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 65535 { 0xffff +1.781238e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 65536 { 0x10000 +1.781250e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 65537 { 0x10001 +1.781261e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 16777219 { 0x1000003 +1.35e131 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16777220 { 0x1000004 +1.47e131 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 16777221 { 0x1000005 +1.59e131 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
55 : eq(53, 54) : BOOL
56 : 216 { 0xd8 -40 } : BV:8
57 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
58 : eq(53, 57) : BOOL
59 : 45 { 0x2d } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
63 : eq(53, 62) : BOOL
64 : 36 { 0x24 } : BV:8
65 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
66 : eq(53, 65) : BOOL
67 : 162 { 0xa2 -94 } : BV:8
68 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
69 : eq(53, 68) : BOOL
70 : 252 { 0xfc -4 } : BV:8
71 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
72 : eq(53, 71) : BOOL
73 : 64 { 0x40 } : BV:8
74 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
75 : eq(53, 74) : BOOL
76 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
77 : eq(53, 76) : BOOL
78 : 237 { 0xed -19 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(75, 61, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : ite(60, 61, 85) : BV:8
87 : ite(58, 59, 86) : BV:8
88 : ite(55, 56, 87) : BV:8
89 : bvadd(74, 52) : BV:32
90 : eq(89, 54) : BOOL
91 : eq(89, 57) : BOOL
92 : eq(89, 51) : BOOL
93 : eq(89, 62) : BOOL
94 : eq(89, 65) : BOOL
95 : eq(89, 68) : BOOL
96 : eq(89, 71) : BOOL
97 : eq(89, 74) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 61, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 70, 101) : BV:8
103 : ite(94, 67, 102) : BV:8
104 : ite(93, 64, 103) : BV:8
105 : ite(92, 61, 104) : BV:8
106 : ite(91, 59, 105) : BV:8
107 : ite(90, 56, 106) : BV:8
108 : bvadd(76, 52) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 57) : BOOL
111 : eq(108, 51) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : eq(108, 68) : BOOL
115 : eq(108, 71) : BOOL
116 : eq(108, 74) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 61, 118) : BV:8
120 : ite(115, 73, 119) : BV:8
121 : ite(114, 70, 120) : BV:8
122 : ite(113, 67, 121) : BV:8
123 : ite(112, 64, 122) : BV:8
124 : ite(111, 61, 123) : BV:8
125 : ite(110, 59, 124) : BV:8
126 : ite(109, 56, 125) : BV:8
127 : bvadd(68, 52) : BV:32
128 : eq(127, 54) : BOOL
129 : eq(127, 57) : BOOL
130 : eq(127, 51) : BOOL
131 : eq(127, 62) : BOOL
132 : eq(127, 65) : BOOL
133 : eq(127, 68) : BOOL
134 : eq(127, 71) : BOOL
135 : eq(127, 74) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 61, 137) : BV:8
139 : ite(134, 73, 138) : BV:8
140 : ite(133, 70, 139) : BV:8
141 : ite(132, 67, 140) : BV:8
142 : ite(131, 64, 141) : BV:8
143 : ite(130, 61, 142) : BV:8
144 : ite(129, 59, 143) : BV:8
145 : ite(128, 56, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(48, 50, 146) : BV:32
148 : eq(147, 54) : BOOL
149 : eq(147, 57) : BOOL
150 : eq(147, 51) : BOOL
151 : eq(147, 62) : BOOL
152 : eq(147, 65) : BOOL
153 : eq(147, 68) : BOOL
154 : eq(147, 71) : BOOL
155 : eq(147, 74) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 61, 157) : BV:8
159 : ite(154, 73, 158) : BV:8
160 : ite(153, 70, 159) : BV:8
161 : ite(152, 67, 160) : BV:8
162 : ite(151, 64, 161) : BV:8
163 : ite(150, 61, 162) : BV:8
164 : ite(149, 59, 163) : BV:8
165 : ite(148, 56, 164) : BV:8
166 : 2 { 0x2 +1.23e129 } : BV:32
167 : bvadd(166, 50, 146) : BV:32
168 : eq(167, 54) : BOOL
169 : eq(167, 57) : BOOL
170 : eq(167, 51) : BOOL
171 : eq(167, 62) : BOOL
172 : eq(167, 65) : BOOL
173 : eq(167, 68) : BOOL
174 : eq(167, 71) : BOOL
175 : eq(167, 74) : BOOL
176 : eq(167, 76) : BOOL
177 : ite(176, 78, 79) : BV:8
178 : ite(175, 61, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 67, 180) : BV:8
182 : ite(171, 64, 181) : BV:8
183 : ite(170, 61, 182) : BV:8
184 : ite(169, 59, 183) : BV:8
185 : ite(168, 56, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 50, 146) : BV:32
188 : eq(187, 54) : BOOL
189 : eq(187, 57) : BOOL
190 : eq(187, 51) : BOOL
191 : eq(187, 62) : BOOL
192 : eq(187, 65) : BOOL
193 : eq(187, 68) : BOOL
194 : eq(187, 71) : BOOL
195 : eq(187, 74) : BOOL
196 : eq(187, 76) : BOOL
197 : ite(196, 78, 79) : BV:8
198 : ite(195, 61, 197) : BV:8
199 : ite(194, 73, 198) : BV:8
200 : ite(193, 70, 199) : BV:8
201 : ite(192, 67, 200) : BV:8
202 : ite(191, 64, 201) : BV:8
203 : ite(190, 61, 202) : BV:8
204 : ite(189, 59, 203) : BV:8
205 : ite(188, 56, 204) : BV:8
206 : bvadd(50, 146) : BV:32
207 : eq(206, 54) : BOOL
208 : eq(206, 57) : BOOL
209 : eq(206, 51) : BOOL
210 : eq(206, 62) : BOOL
211 : eq(206, 65) : BOOL
212 : eq(206, 68) : BOOL
213 : eq(206, 71) : BOOL
214 : eq(206, 74) : BOOL
215 : eq(206, 76) : BOOL
216 : ite(215, 78, 79) : BV:8
217 : ite(214, 61, 216) : BV:8
218 : ite(213, 73, 217) : BV:8
219 : ite(212, 70, 218) : BV:8
220 : ite(211, 67, 219) : BV:8
221 : ite(210, 64, 220) : BV:8
222 : ite(209, 61, 221) : BV:8
223 : ite(208, 59, 222) : BV:8
224 : ite(207, 56, 223) : BV:8
225 : bvconcat(165, 185, 205, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(47, 225, 226) : BV:32
228 : ite(6, 3, 227) : BV:32
229 : lambda(1, 2, 228) : FUNCTION[BV:32,BV:32 -> BV:32]
230 : sym_const(229) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16498 : BV:32
2 : Lambda16499 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777219 { 0x1000003 +1.35e131 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777220 { 0x1000004 +1.47e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777221 { 0x1000005 +1.59e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16494 : BV:32
2 : Lambda16495 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
14 : eq(12, 13) : BOOL
15 : 216 { 0xd8 -40 } : BV:8
16 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
17 : eq(12, 16) : BOOL
18 : 45 { 0x2d } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 162 { 0xa2 -94 } : BV:8
27 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
31 : eq(12, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
36 : eq(12, 35) : BOOL
37 : 237 { 0xed -19 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(34, 20, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(25, 26, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : bvadd(33, 11) : BV:32
49 : eq(48, 13) : BOOL
50 : eq(48, 16) : BOOL
51 : eq(48, 10) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 27) : BOOL
55 : eq(48, 30) : BOOL
56 : eq(48, 33) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 20, 58) : BV:8
60 : ite(55, 32, 59) : BV:8
61 : ite(54, 29, 60) : BV:8
62 : ite(53, 26, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 15, 65) : BV:8
67 : bvadd(35, 11) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 16) : BOOL
70 : eq(67, 10) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 27) : BOOL
74 : eq(67, 30) : BOOL
75 : eq(67, 33) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 32, 78) : BV:8
80 : ite(73, 29, 79) : BV:8
81 : ite(72, 26, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 18, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : bvadd(27, 11) : BV:32
87 : eq(86, 13) : BOOL
88 : eq(86, 16) : BOOL
89 : eq(86, 10) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 30) : BOOL
94 : eq(86, 33) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 20, 96) : BV:8
98 : ite(93, 32, 97) : BV:8
99 : ite(92, 29, 98) : BV:8
100 : ite(91, 26, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 18, 102) : BV:8
104 : ite(87, 15, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : bvadd(7, 9, 105) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 10) : BOOL
110 : eq(106, 21) : BOOL
111 : eq(106, 24) : BOOL
112 : eq(106, 27) : BOOL
113 : eq(106, 30) : BOOL
114 : eq(106, 33) : BOOL
115 : eq(106, 35) : BOOL
116 : ite(115, 37, 38) : BV:8
117 : ite(114, 20, 116) : BV:8
118 : ite(113, 32, 117) : BV:8
119 : ite(112, 29, 118) : BV:8
120 : ite(111, 26, 119) : BV:8
121 : ite(110, 23, 120) : BV:8
122 : ite(109, 20, 121) : BV:8
123 : ite(108, 18, 122) : BV:8
124 : ite(107, 15, 123) : BV:8
125 : 2 { 0x2 +1.23e129 } : BV:32
126 : bvadd(125, 9, 105) : BV:32
127 : eq(126, 13) : BOOL
128 : eq(126, 16) : BOOL
129 : eq(126, 10) : BOOL
130 : eq(126, 21) : BOOL
131 : eq(126, 24) : BOOL
132 : eq(126, 27) : BOOL
133 : eq(126, 30) : BOOL
134 : eq(126, 33) : BOOL
135 : eq(126, 35) : BOOL
136 : ite(135, 37, 38) : BV:8
137 : ite(134, 20, 136) : BV:8
138 : ite(133, 32, 137) : BV:8
139 : ite(132, 29, 138) : BV:8
140 : ite(131, 26, 139) : BV:8
141 : ite(130, 23, 140) : BV:8
142 : ite(129, 20, 141) : BV:8
143 : ite(128, 18, 142) : BV:8
144 : ite(127, 15, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 9, 105) : BV:32
147 : eq(146, 13) : BOOL
148 : eq(146, 16) : BOOL
149 : eq(146, 10) : BOOL
150 : eq(146, 21) : BOOL
151 : eq(146, 24) : BOOL
152 : eq(146, 27) : BOOL
153 : eq(146, 30) : BOOL
154 : eq(146, 33) : BOOL
155 : eq(146, 35) : BOOL
156 : ite(155, 37, 38) : BV:8
157 : ite(154, 20, 156) : BV:8
158 : ite(153, 32, 157) : BV:8
159 : ite(152, 29, 158) : BV:8
160 : ite(151, 26, 159) : BV:8
161 : ite(150, 23, 160) : BV:8
162 : ite(149, 20, 161) : BV:8
163 : ite(148, 18, 162) : BV:8
164 : ite(147, 15, 163) : BV:8
165 : bvadd(9, 105) : BV:32
166 : eq(165, 13) : BOOL
167 : eq(165, 16) : BOOL
168 : eq(165, 10) : BOOL
169 : eq(165, 21) : BOOL
170 : eq(165, 24) : BOOL
171 : eq(165, 27) : BOOL
172 : eq(165, 30) : BOOL
173 : eq(165, 33) : BOOL
174 : eq(165, 35) : BOOL
175 : ite(174, 37, 38) : BV:8
176 : ite(173, 20, 175) : BV:8
177 : ite(172, 32, 176) : BV:8
178 : ite(171, 29, 177) : BV:8
179 : ite(170, 26, 178) : BV:8
180 : ite(169, 23, 179) : BV:8
181 : ite(168, 20, 180) : BV:8
182 : ite(167, 18, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : bvconcat(124, 144, 164, 183) : BV:32
185 : ite(6, 3, 184) : BV:32
186 : lambda(1, 2, 185) : FUNCTION[BV:32,BV:32 -> BV:32]
187 : sym_const(186) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 16777219 ] -> true, [ 16777220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16505 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 64 { 0x40 +1.762e129 } : BV:32
8 : eq(1, 4) : BOOL
9 : bvmul(2, 1) : BV:32
10 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
13 : eq(11, 12) : BOOL
14 : 216 { 0xd8 -40 } : BV:8
15 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
16 : eq(11, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
22 : eq(11, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
25 : eq(11, 24) : BOOL
26 : 162 { 0xa2 -94 } : BV:8
27 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
28 : eq(11, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
31 : eq(11, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
34 : eq(11, 33) : BOOL
35 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
36 : eq(11, 35) : BOOL
37 : 237 { 0xed -19 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(34, 20, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(25, 26, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 10) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 35) : BOOL
59 : ite(58, 37, 38) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : bvadd(68, 9, 10) : BV:32
70 : eq(69, 12) : BOOL
71 : eq(69, 15) : BOOL
72 : eq(69, 18) : BOOL
73 : eq(69, 21) : BOOL
74 : eq(69, 24) : BOOL
75 : eq(69, 27) : BOOL
76 : eq(69, 30) : BOOL
77 : eq(69, 33) : BOOL
78 : eq(69, 35) : BOOL
79 : ite(78, 37, 38) : BV:8
80 : ite(77, 20, 79) : BV:8
81 : ite(76, 32, 80) : BV:8
82 : ite(75, 29, 81) : BV:8
83 : ite(74, 26, 82) : BV:8
84 : ite(73, 23, 83) : BV:8
85 : ite(72, 20, 84) : BV:8
86 : ite(71, 17, 85) : BV:8
87 : ite(70, 14, 86) : BV:8
88 : bvadd(9, 10) : BV:32
89 : eq(88, 12) : BOOL
90 : eq(88, 15) : BOOL
91 : eq(88, 18) : BOOL
92 : eq(88, 21) : BOOL
93 : eq(88, 24) : BOOL
94 : eq(88, 27) : BOOL
95 : eq(88, 30) : BOOL
96 : eq(88, 33) : BOOL
97 : eq(88, 35) : BOOL
98 : ite(97, 37, 38) : BV:8
99 : ite(96, 20, 98) : BV:8
100 : ite(95, 32, 99) : BV:8
101 : ite(94, 29, 100) : BV:8
102 : ite(93, 26, 101) : BV:8
103 : ite(92, 23, 102) : BV:8
104 : ite(91, 20, 103) : BV:8
105 : ite(90, 17, 104) : BV:8
106 : ite(89, 14, 105) : BV:8
107 : bvconcat(47, 67, 87, 106) : BV:32
108 : ite(8, 4, 107) : BV:32
109 : ite(6, 7, 108) : BV:32
110 : ite(3, 4, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 16777219 ] -> true, [ 16777220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16509 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvmul(5, 1) : BV:32
9 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
12 : eq(10, 11) : BOOL
13 : 216 { 0xd8 -40 } : BV:8
14 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
15 : eq(10, 14) : BOOL
16 : 45 { 0x2d } : BV:8
17 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
18 : eq(10, 17) : BOOL
19 : 255 { 0xff -1 } : BV:8
20 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
21 : eq(10, 20) : BOOL
22 : 36 { 0x24 } : BV:8
23 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
24 : eq(10, 23) : BOOL
25 : 162 { 0xa2 -94 } : BV:8
26 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
27 : eq(10, 26) : BOOL
28 : 252 { 0xfc -4 } : BV:8
29 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
30 : eq(10, 29) : BOOL
31 : 64 { 0x40 } : BV:8
32 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
33 : eq(10, 32) : BOOL
34 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
35 : eq(10, 34) : BOOL
36 : 237 { 0xed -19 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 19, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 23) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 19, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 22, 62) : BV:8
64 : ite(51, 19, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 20) : BOOL
73 : eq(68, 23) : BOOL
74 : eq(68, 26) : BOOL
75 : eq(68, 29) : BOOL
76 : eq(68, 32) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 19, 78) : BV:8
80 : ite(75, 31, 79) : BV:8
81 : ite(74, 28, 80) : BV:8
82 : ite(73, 25, 81) : BV:8
83 : ite(72, 22, 82) : BV:8
84 : ite(71, 19, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 17) : BOOL
91 : eq(87, 20) : BOOL
92 : eq(87, 23) : BOOL
93 : eq(87, 26) : BOOL
94 : eq(87, 29) : BOOL
95 : eq(87, 32) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 19, 97) : BV:8
99 : ite(94, 31, 98) : BV:8
100 : ite(93, 28, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 22, 101) : BV:8
103 : ite(90, 19, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(6, 7, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 16777219 ] -> true, [ 16777220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16513 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 64 { 0x40 +1.762e129 } : BV:32
8 : eq(1, 4) : BOOL
9 : bvmul(2, 1) : BV:32
10 : 3626869284 { 0xd82da224 -668098012 -1.35651063e49 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 1207975939 { 0x48004003 +1.195348e17 } : BV:32
13 : eq(11, 12) : BOOL
14 : 216 { 0xd8 -40 } : BV:8
15 : 1207975938 { 0x48004002 +1.195336e17 } : BV:32
16 : eq(11, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1207975927 { 0x48003ff7 +1.195205e17 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1207975936 { 0x48004000 +1.195312e17 } : BV:32
22 : eq(11, 21) : BOOL
23 : 36 { 0x24 } : BV:8
24 : 1207975937 { 0x48004001 +1.195324e17 } : BV:32
25 : eq(11, 24) : BOOL
26 : 162 { 0xa2 -94 } : BV:8
27 : 1207975924 { 0x48003ff4 +1.195169e17 } : BV:32
28 : eq(11, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 3626869296 { 0xd82da230 -668098000 -1.35651206e49 } : BV:32
31 : eq(11, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 1207975926 { 0x48003ff6 +1.195193e17 } : BV:32
34 : eq(11, 33) : BOOL
35 : 1207975925 { 0x48003ff5 +1.195181e17 } : BV:32
36 : eq(11, 35) : BOOL
37 : 237 { 0xed -19 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(34, 20, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(25, 26, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 10) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 35) : BOOL
59 : ite(58, 37, 38) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : bvadd(68, 9, 10) : BV:32
70 : eq(69, 12) : BOOL
71 : eq(69, 15) : BOOL
72 : eq(69, 18) : BOOL
73 : eq(69, 21) : BOOL
74 : eq(69, 24) : BOOL
75 : eq(69, 27) : BOOL
76 : eq(69, 30) : BOOL
77 : eq(69, 33) : BOOL
78 : eq(69, 35) : BOOL
79 : ite(78, 37, 38) : BV:8
80 : ite(77, 20, 79) : BV:8
81 : ite(76, 32, 80) : BV:8
82 : ite(75, 29, 81) : BV:8
83 : ite(74, 26, 82) : BV:8
84 : ite(73, 23, 83) : BV:8
85 : ite(72, 20, 84) : BV:8
86 : ite(71, 17, 85) : BV:8
87 : ite(70, 14, 86) : BV:8
88 : bvadd(9, 10) : BV:32
89 : eq(88, 12) : BOOL
90 : eq(88, 15) : BOOL
91 : eq(88, 18) : BOOL
92 : eq(88, 21) : BOOL
93 : eq(88, 24) : BOOL
94 : eq(88, 27) : BOOL
95 : eq(88, 30) : BOOL
96 : eq(88, 33) : BOOL
97 : eq(88, 35) : BOOL
98 : ite(97, 37, 38) : BV:8
99 : ite(96, 20, 98) : BV:8
100 : ite(95, 32, 99) : BV:8
101 : ite(94, 29, 100) : BV:8
102 : ite(93, 26, 101) : BV:8
103 : ite(92, 23, 102) : BV:8
104 : ite(91, 20, 103) : BV:8
105 : ite(90, 17, 104) : BV:8
106 : ite(89, 14, 105) : BV:8
107 : bvconcat(47, 67, 87, 106) : BV:32
108 : ite(8, 4, 107) : BV:32
109 : ite(6, 7, 108) : BV:32
110 : ite(3, 4, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2314793429
=counter_example_end
=global nodece 58 num_edges_traversed 2
=global nodece 58 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3v487.ce6577.num_edges_traversed1
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3v487.ce6577 38bc68bc38a49d090c7332dd1a8b842
=input.spec-%var-x-1
1 : Lambda16593 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16596 : BV:32
18 : Lambda16594 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 33554433 { 0x2000001 +1.11e133 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 10 { 0xa +1.119e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 11 { 0xb +1.131e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 12 { 0xc +1.143e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16595 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
63 : eq(61, 62) : BOOL
64 : 255 { 0xff -1 } : BV:8
65 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
66 : eq(61, 65) : BOOL
67 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
68 : eq(61, 67) : BOOL
69 : 252 { 0xfc -4 } : BV:8
70 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
71 : eq(61, 70) : BOOL
72 : 127 { 0x7f } : BV:8
73 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 8 { 0x8 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(66, 64, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
83 : bvadd(82, 60) : BV:32
84 : eq(83, 62) : BOOL
85 : eq(83, 65) : BOOL
86 : eq(83, 67) : BOOL
87 : eq(83, 70) : BOOL
88 : eq(83, 73) : BOOL
89 : ite(88, 75, 76) : BV:8
90 : ite(87, 72, 89) : BV:8
91 : ite(86, 69, 90) : BV:8
92 : ite(85, 64, 91) : BV:8
93 : ite(84, 64, 92) : BV:8
94 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
95 : bvadd(94, 60) : BV:32
96 : eq(95, 62) : BOOL
97 : eq(95, 65) : BOOL
98 : eq(95, 67) : BOOL
99 : eq(95, 70) : BOOL
100 : eq(95, 73) : BOOL
101 : ite(100, 75, 76) : BV:8
102 : ite(99, 72, 101) : BV:8
103 : ite(98, 69, 102) : BV:8
104 : ite(97, 64, 103) : BV:8
105 : ite(96, 64, 104) : BV:8
106 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
107 : bvadd(106, 60) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : eq(107, 67) : BOOL
111 : eq(107, 70) : BOOL
112 : eq(107, 73) : BOOL
113 : ite(112, 75, 76) : BV:8
114 : ite(111, 72, 113) : BV:8
115 : ite(110, 69, 114) : BV:8
116 : ite(109, 64, 115) : BV:8
117 : ite(108, 64, 116) : BV:8
118 : bvconcat(81, 93, 105, 117) : BV:32
119 : bvadd(56, 58, 118) : BV:32
120 : eq(119, 62) : BOOL
121 : eq(119, 65) : BOOL
122 : eq(119, 67) : BOOL
123 : eq(119, 70) : BOOL
124 : eq(119, 73) : BOOL
125 : ite(124, 75, 76) : BV:8
126 : ite(123, 72, 125) : BV:8
127 : ite(122, 69, 126) : BV:8
128 : ite(121, 64, 127) : BV:8
129 : ite(120, 64, 128) : BV:8
130 : 2 { 0x2 +1.23e129 } : BV:32
131 : bvadd(130, 58, 118) : BV:32
132 : eq(131, 62) : BOOL
133 : eq(131, 65) : BOOL
134 : eq(131, 67) : BOOL
135 : eq(131, 70) : BOOL
136 : eq(131, 73) : BOOL
137 : ite(136, 75, 76) : BV:8
138 : ite(135, 72, 137) : BV:8
139 : ite(134, 69, 138) : BV:8
140 : ite(133, 64, 139) : BV:8
141 : ite(132, 64, 140) : BV:8
142 : 1 { 0x1 +1.11e129 } : BV:32
143 : bvadd(142, 58, 118) : BV:32
144 : eq(143, 62) : BOOL
145 : eq(143, 65) : BOOL
146 : eq(143, 67) : BOOL
147 : eq(143, 70) : BOOL
148 : eq(143, 73) : BOOL
149 : ite(148, 75, 76) : BV:8
150 : ite(147, 72, 149) : BV:8
151 : ite(146, 69, 150) : BV:8
152 : ite(145, 64, 151) : BV:8
153 : ite(144, 64, 152) : BV:8
154 : bvadd(58, 118) : BV:32
155 : eq(154, 62) : BOOL
156 : eq(154, 65) : BOOL
157 : eq(154, 67) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : ite(159, 75, 76) : BV:8
161 : ite(158, 72, 160) : BV:8
162 : ite(157, 69, 161) : BV:8
163 : ite(156, 64, 162) : BV:8
164 : ite(155, 64, 163) : BV:8
165 : bvconcat(129, 141, 153, 164) : BV:32
166 : ite(55, 2, 165) : BV:32
167 : lambda(52, 166) : FUNCTION[BV:32 -> BV:32]
168 : map(51, 167) : MAP[BV:32 -> BV:32]
169 : lambda(17, 168) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
170 : map(16, 169) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
171 : sym_const(170) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%x
1 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-%m
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 335544315 ] -> 0, [ 335544316; 335544316 ] -> 252, [ 335544317; 335544318 ] -> 255, [ 335544319; 335544319 ] -> 127, [ 335544320; 2147483651 ] -> 0, [ 2147483652; 2147483652 ] -> 8, [ 2147483653; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 12; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 264; 2684354559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2684354560; 2684354563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2684354564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2684354560 { 0xa0000000 -1610612736 -1.0e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16601 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16604 : BV:32
18 : Lambda16602 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 33554433 { 0x2000001 +1.11e133 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 10 { 0xa +1.119e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 11 { 0xb +1.131e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 12 { 0xc +1.143e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16603 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(2, 52) : BOOL
57 : bvule(52, 34) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(37, 52) : BOOL
60 : bvule(52, 37) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(41, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 41, 41) : BV:32
66 : ite(61, 37, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(22, 27) : BOOL
72 : ite(71, 13, 13) : BOOL
73 : ite(21, 7, 72) : BOOL
74 : and(70, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
85 : eq(80, 84) : BOOL
86 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
87 : eq(80, 86) : BOOL
88 : 252 { 0xfc -4 } : BV:8
89 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
90 : eq(80, 89) : BOOL
91 : 127 { 0x7f } : BV:8
92 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 8 { 0x8 } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(85, 83, 98) : BV:8
100 : ite(82, 83, 99) : BV:8
101 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
102 : bvadd(101, 79) : BV:32
103 : eq(102, 81) : BOOL
104 : eq(102, 84) : BOOL
105 : eq(102, 86) : BOOL
106 : eq(102, 89) : BOOL
107 : eq(102, 92) : BOOL
108 : ite(107, 94, 95) : BV:8
109 : ite(106, 91, 108) : BV:8
110 : ite(105, 88, 109) : BV:8
111 : ite(104, 83, 110) : BV:8
112 : ite(103, 83, 111) : BV:8
113 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
114 : bvadd(113, 79) : BV:32
115 : eq(114, 81) : BOOL
116 : eq(114, 84) : BOOL
117 : eq(114, 86) : BOOL
118 : eq(114, 89) : BOOL
119 : eq(114, 92) : BOOL
120 : ite(119, 94, 95) : BV:8
121 : ite(118, 91, 120) : BV:8
122 : ite(117, 88, 121) : BV:8
123 : ite(116, 83, 122) : BV:8
124 : ite(115, 83, 123) : BV:8
125 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
126 : bvadd(125, 79) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : eq(126, 86) : BOOL
130 : eq(126, 89) : BOOL
131 : eq(126, 92) : BOOL
132 : ite(131, 94, 95) : BV:8
133 : ite(130, 91, 132) : BV:8
134 : ite(129, 88, 133) : BV:8
135 : ite(128, 83, 134) : BV:8
136 : ite(127, 83, 135) : BV:8
137 : bvconcat(100, 112, 124, 136) : BV:32
138 : bvadd(75, 77, 137) : BV:32
139 : eq(138, 81) : BOOL
140 : eq(138, 84) : BOOL
141 : eq(138, 86) : BOOL
142 : eq(138, 89) : BOOL
143 : eq(138, 92) : BOOL
144 : ite(143, 94, 95) : BV:8
145 : ite(142, 91, 144) : BV:8
146 : ite(141, 88, 145) : BV:8
147 : ite(140, 83, 146) : BV:8
148 : ite(139, 83, 147) : BV:8
149 : 2 { 0x2 +1.23e129 } : BV:32
150 : bvadd(149, 77, 137) : BV:32
151 : eq(150, 81) : BOOL
152 : eq(150, 84) : BOOL
153 : eq(150, 86) : BOOL
154 : eq(150, 89) : BOOL
155 : eq(150, 92) : BOOL
156 : ite(155, 94, 95) : BV:8
157 : ite(154, 91, 156) : BV:8
158 : ite(153, 88, 157) : BV:8
159 : ite(152, 83, 158) : BV:8
160 : ite(151, 83, 159) : BV:8
161 : 1 { 0x1 +1.11e129 } : BV:32
162 : bvadd(161, 77, 137) : BV:32
163 : eq(162, 81) : BOOL
164 : eq(162, 84) : BOOL
165 : eq(162, 86) : BOOL
166 : eq(162, 89) : BOOL
167 : eq(162, 92) : BOOL
168 : ite(167, 94, 95) : BV:8
169 : ite(166, 91, 168) : BV:8
170 : ite(165, 88, 169) : BV:8
171 : ite(164, 83, 170) : BV:8
172 : ite(163, 83, 171) : BV:8
173 : bvadd(77, 137) : BV:32
174 : eq(173, 81) : BOOL
175 : eq(173, 84) : BOOL
176 : eq(173, 86) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : ite(178, 94, 95) : BV:8
180 : ite(177, 91, 179) : BV:8
181 : ite(176, 88, 180) : BV:8
182 : ite(175, 83, 181) : BV:8
183 : ite(174, 83, 182) : BV:8
184 : bvconcat(148, 160, 172, 183) : BV:32
185 : ite(55, 2, 184) : BV:32
186 : ite(74, 184, 185) : BV:32
187 : ite(55, 2, 186) : BV:32
188 : lambda(52, 187) : FUNCTION[BV:32 -> BV:32]
189 : map(51, 188) : MAP[BV:32 -> BV:32]
190 : lambda(17, 189) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
191 : map(16, 190) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
192 : sym_const(191) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda16598 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 10 { 0xa +1.119e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 11 { 0xb +1.131e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16599 : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : eq(19, 4) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 19) : BV:32
27 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
28 : bvadd(24, 26, 27) : BV:32
29 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
30 : eq(28, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
33 : eq(28, 32) : BOOL
34 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
35 : eq(28, 34) : BOOL
36 : 252 { 0xfc -4 } : BV:8
37 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
38 : eq(28, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
41 : eq(28, 40) : BOOL
42 : 8 { 0x8 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(33, 31, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : bvadd(20, 26, 27) : BV:32
50 : eq(49, 29) : BOOL
51 : eq(49, 32) : BOOL
52 : eq(49, 34) : BOOL
53 : eq(49, 37) : BOOL
54 : eq(49, 40) : BOOL
55 : ite(54, 42, 43) : BV:8
56 : ite(53, 39, 55) : BV:8
57 : ite(52, 36, 56) : BV:8
58 : ite(51, 31, 57) : BV:8
59 : ite(50, 31, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 26, 27) : BV:32
62 : eq(61, 29) : BOOL
63 : eq(61, 32) : BOOL
64 : eq(61, 34) : BOOL
65 : eq(61, 37) : BOOL
66 : eq(61, 40) : BOOL
67 : ite(66, 42, 43) : BV:8
68 : ite(65, 39, 67) : BV:8
69 : ite(64, 36, 68) : BV:8
70 : ite(63, 31, 69) : BV:8
71 : ite(62, 31, 70) : BV:8
72 : bvadd(26, 27) : BV:32
73 : eq(72, 29) : BOOL
74 : eq(72, 32) : BOOL
75 : eq(72, 34) : BOOL
76 : eq(72, 37) : BOOL
77 : eq(72, 40) : BOOL
78 : ite(77, 42, 43) : BV:8
79 : ite(76, 39, 78) : BV:8
80 : ite(75, 36, 79) : BV:8
81 : ite(74, 31, 80) : BV:8
82 : ite(73, 31, 81) : BV:8
83 : bvconcat(48, 59, 71, 82) : BV:32
84 : ite(23, 4, 83) : BV:32
85 : ite(21, 22, 84) : BV:32
86 : lambda(19, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(18, 86) : MAP[BV:32 -> BV:32]
88 : sum(1, 2, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2010655264 { 0x77d82a20 +1.68878555e112 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16606 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 11 { 0xb +1.131e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16607 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 8 { 0x8 +1.95e129 } : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
27 : eq(25, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
30 : eq(25, 29) : BOOL
31 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
32 : eq(25, 31) : BOOL
33 : 252 { 0xfc -4 } : BV:8
34 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
35 : eq(25, 34) : BOOL
36 : 127 { 0x7f } : BV:8
37 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 8 { 0x8 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : ite(30, 28, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : bvadd(18, 23, 24) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 37) : BOOL
52 : ite(51, 39, 40) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 28, 54) : BV:8
56 : ite(47, 28, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 23, 24) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : ite(63, 39, 40) : BV:8
65 : ite(62, 36, 64) : BV:8
66 : ite(61, 33, 65) : BV:8
67 : ite(60, 28, 66) : BV:8
68 : ite(59, 28, 67) : BV:8
69 : bvadd(23, 24) : BV:32
70 : eq(69, 26) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 31) : BOOL
73 : eq(69, 34) : BOOL
74 : eq(69, 37) : BOOL
75 : ite(74, 39, 40) : BV:8
76 : ite(73, 36, 75) : BV:8
77 : ite(72, 33, 76) : BV:8
78 : ite(71, 28, 77) : BV:8
79 : ite(70, 28, 78) : BV:8
80 : bvconcat(45, 56, 68, 79) : BV:32
81 : ite(19, 20, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16609 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 11 { 0xb +1.131e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16610 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 8 { 0x8 +1.95e129 } : BV:32
21 : eq(17, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
28 : eq(26, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
31 : eq(26, 30) : BOOL
32 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
33 : eq(26, 32) : BOOL
34 : 252 { 0xfc -4 } : BV:8
35 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
36 : eq(26, 35) : BOOL
37 : 127 { 0x7f } : BV:8
38 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
39 : eq(26, 38) : BOOL
40 : 8 { 0x8 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(31, 29, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : bvadd(18, 24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : eq(47, 32) : BOOL
51 : eq(47, 35) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 34, 54) : BV:8
56 : ite(49, 29, 55) : BV:8
57 : ite(48, 29, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 24, 25) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 32) : BOOL
63 : eq(59, 35) : BOOL
64 : eq(59, 38) : BOOL
65 : ite(64, 40, 41) : BV:8
66 : ite(63, 37, 65) : BV:8
67 : ite(62, 34, 66) : BV:8
68 : ite(61, 29, 67) : BV:8
69 : ite(60, 29, 68) : BV:8
70 : bvadd(24, 25) : BV:32
71 : eq(70, 27) : BOOL
72 : eq(70, 30) : BOOL
73 : eq(70, 32) : BOOL
74 : eq(70, 35) : BOOL
75 : eq(70, 38) : BOOL
76 : ite(75, 40, 41) : BV:8
77 : ite(74, 37, 76) : BV:8
78 : ite(73, 34, 77) : BV:8
79 : ite(72, 29, 78) : BV:8
80 : ite(71, 29, 79) : BV:8
81 : bvconcat(46, 57, 69, 80) : BV:32
82 : ite(21, 2, 81) : BV:32
83 : ite(19, 20, 82) : BV:32
84 : lambda(17, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(16, 84) : MAP[BV:32 -> BV:32]
86 : sym_const(85) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1172349280 { 0x45e0a160 +1.75492477e12 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2684354560 { 0xa0000000 -1610612736 -1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2684354563 { 0xa0000003 -1610612733 -1.35e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16518 : BV:32
2 : Lambda16519 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 33554433 { 0x2000001 +1.11e133 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 10 { 0xa +1.119e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 11 { 0xb +1.131e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 12 { 0xc +1.143e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16523 : BV:32
2 : Lambda16524 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
17 : eq(12, 16) : BOOL
18 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
19 : eq(12, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
22 : eq(12, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 8 { 0x8 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(17, 15, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
34 : bvadd(33, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 18) : BOOL
38 : eq(34, 21) : BOOL
39 : eq(34, 24) : BOOL
40 : ite(39, 26, 27) : BV:8
41 : ite(38, 23, 40) : BV:8
42 : ite(37, 20, 41) : BV:8
43 : ite(36, 15, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : ite(51, 26, 27) : BV:8
53 : ite(50, 23, 52) : BV:8
54 : ite(49, 20, 53) : BV:8
55 : ite(48, 15, 54) : BV:8
56 : ite(47, 15, 55) : BV:8
57 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
58 : bvadd(57, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : ite(63, 26, 27) : BV:8
65 : ite(62, 23, 64) : BV:8
66 : ite(61, 20, 65) : BV:8
67 : ite(60, 15, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(32, 44, 56, 68) : BV:32
70 : bvadd(7, 9, 69) : BV:32
71 : eq(70, 13) : BOOL
72 : eq(70, 16) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : eq(70, 24) : BOOL
76 : ite(75, 26, 27) : BV:8
77 : ite(74, 23, 76) : BV:8
78 : ite(73, 20, 77) : BV:8
79 : ite(72, 15, 78) : BV:8
80 : ite(71, 15, 79) : BV:8
81 : 2 { 0x2 +1.23e129 } : BV:32
82 : bvadd(81, 9, 69) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 18) : BOOL
86 : eq(82, 21) : BOOL
87 : eq(82, 24) : BOOL
88 : ite(87, 26, 27) : BV:8
89 : ite(86, 23, 88) : BV:8
90 : ite(85, 20, 89) : BV:8
91 : ite(84, 15, 90) : BV:8
92 : ite(83, 15, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 9, 69) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 18) : BOOL
98 : eq(94, 21) : BOOL
99 : eq(94, 24) : BOOL
100 : ite(99, 26, 27) : BV:8
101 : ite(98, 23, 100) : BV:8
102 : ite(97, 20, 101) : BV:8
103 : ite(96, 15, 102) : BV:8
104 : ite(95, 15, 103) : BV:8
105 : bvadd(9, 69) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 18) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : ite(110, 26, 27) : BV:8
112 : ite(109, 23, 111) : BV:8
113 : ite(108, 20, 112) : BV:8
114 : ite(107, 15, 113) : BV:8
115 : ite(106, 15, 114) : BV:8
116 : bvconcat(80, 92, 104, 115) : BV:32
117 : ite(6, 3, 116) : BV:32
118 : lambda(1, 2, 117) : FUNCTION[BV:32,BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16527 : BV:32
2 : Lambda16528 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 33554433 { 0x2000001 +1.11e133 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 10 { 0xa +1.119e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 11 { 0xb +1.131e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 12 { 0xc +1.143e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16531 : BV:32
2 : Lambda16532 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 33554432 { 0x2000000 +1.0e133 } : BV:32
12 : bvule(11, 1) : BOOL
13 : bvule(1, 11) : BOOL
14 : and(12, 13) : BOOL
15 : 33554433 { 0x2000001 +1.11e133 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 15, 15) : BV:32
21 : ite(14, 11, 20) : BV:32
22 : ite(10, 3, 21) : BV:32
23 : eq(22, 3) : BOOL
24 : bvule(3, 2) : BOOL
25 : 10 { 0xa +1.119e129 } : BV:32
26 : bvule(2, 25) : BOOL
27 : and(24, 26) : BOOL
28 : 11 { 0xb +1.131e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : 12 { 0xc +1.143e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 28, 36) : BV:32
38 : ite(27, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(23, 39) : BOOL
41 : 1 { 0x1 } : BOOL
42 : 0 { 0x0 } : BOOL
43 : ite(40, 41, 42) : BOOL
44 : and(12, 18) : BOOL
45 : ite(44, 42, 42) : BOOL
46 : ite(10, 41, 45) : BOOL
47 : and(43, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
58 : eq(53, 57) : BOOL
59 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
60 : eq(53, 59) : BOOL
61 : 252 { 0xfc -4 } : BV:8
62 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
63 : eq(53, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 8 { 0x8 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(58, 56, 71) : BV:8
73 : ite(55, 56, 72) : BV:8
74 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
75 : bvadd(74, 52) : BV:32
76 : eq(75, 54) : BOOL
77 : eq(75, 57) : BOOL
78 : eq(75, 59) : BOOL
79 : eq(75, 62) : BOOL
80 : eq(75, 65) : BOOL
81 : ite(80, 67, 68) : BV:8
82 : ite(79, 64, 81) : BV:8
83 : ite(78, 61, 82) : BV:8
84 : ite(77, 56, 83) : BV:8
85 : ite(76, 56, 84) : BV:8
86 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
87 : bvadd(86, 52) : BV:32
88 : eq(87, 54) : BOOL
89 : eq(87, 57) : BOOL
90 : eq(87, 59) : BOOL
91 : eq(87, 62) : BOOL
92 : eq(87, 65) : BOOL
93 : ite(92, 67, 68) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : ite(90, 61, 94) : BV:8
96 : ite(89, 56, 95) : BV:8
97 : ite(88, 56, 96) : BV:8
98 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
99 : bvadd(98, 52) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : eq(99, 59) : BOOL
103 : eq(99, 62) : BOOL
104 : eq(99, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 64, 105) : BV:8
107 : ite(102, 61, 106) : BV:8
108 : ite(101, 56, 107) : BV:8
109 : ite(100, 56, 108) : BV:8
110 : bvconcat(73, 85, 97, 109) : BV:32
111 : bvadd(48, 50, 110) : BV:32
112 : eq(111, 54) : BOOL
113 : eq(111, 57) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 62) : BOOL
116 : eq(111, 65) : BOOL
117 : ite(116, 67, 68) : BV:8
118 : ite(115, 64, 117) : BV:8
119 : ite(114, 61, 118) : BV:8
120 : ite(113, 56, 119) : BV:8
121 : ite(112, 56, 120) : BV:8
122 : 2 { 0x2 +1.23e129 } : BV:32
123 : bvadd(122, 50, 110) : BV:32
124 : eq(123, 54) : BOOL
125 : eq(123, 57) : BOOL
126 : eq(123, 59) : BOOL
127 : eq(123, 62) : BOOL
128 : eq(123, 65) : BOOL
129 : ite(128, 67, 68) : BV:8
130 : ite(127, 64, 129) : BV:8
131 : ite(126, 61, 130) : BV:8
132 : ite(125, 56, 131) : BV:8
133 : ite(124, 56, 132) : BV:8
134 : 1 { 0x1 +1.11e129 } : BV:32
135 : bvadd(134, 50, 110) : BV:32
136 : eq(135, 54) : BOOL
137 : eq(135, 57) : BOOL
138 : eq(135, 59) : BOOL
139 : eq(135, 62) : BOOL
140 : eq(135, 65) : BOOL
141 : ite(140, 67, 68) : BV:8
142 : ite(139, 64, 141) : BV:8
143 : ite(138, 61, 142) : BV:8
144 : ite(137, 56, 143) : BV:8
145 : ite(136, 56, 144) : BV:8
146 : bvadd(50, 110) : BV:32
147 : eq(146, 54) : BOOL
148 : eq(146, 57) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : ite(151, 67, 68) : BV:8
153 : ite(150, 64, 152) : BV:8
154 : ite(149, 61, 153) : BV:8
155 : ite(148, 56, 154) : BV:8
156 : ite(147, 56, 155) : BV:8
157 : bvconcat(121, 133, 145, 156) : BV:32
158 : ite(6, 3, 157) : BV:32
159 : ite(47, 157, 158) : BV:32
160 : ite(6, 3, 159) : BV:32
161 : lambda(1, 2, 160) : FUNCTION[BV:32,BV:32 -> BV:32]
162 : sym_const(161) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 10 ] -> true, [ 11; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16536 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
16 : eq(11, 15) : BOOL
17 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
18 : eq(11, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
21 : eq(11, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8 { 0x8 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(18, 19, 28) : BV:8
30 : ite(16, 14, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(2, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 17) : BOOL
36 : eq(32, 20) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 19, 39) : BV:8
41 : ite(34, 14, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 9, 10) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 17) : BOOL
48 : eq(44, 20) : BOOL
49 : eq(44, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 19, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(9, 10) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 23) : BOOL
61 : ite(60, 25, 26) : BV:8
62 : ite(59, 22, 61) : BV:8
63 : ite(58, 19, 62) : BV:8
64 : ite(57, 14, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(31, 42, 54, 65) : BV:32
67 : ite(6, 5, 66) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 10 ] -> true, [ 11; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16540 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
14 : eq(9, 13) : BOOL
15 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
16 : eq(9, 15) : BOOL
17 : 252 { 0xfc -4 } : BV:8
18 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
19 : eq(9, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 8 { 0x8 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(14, 12, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : bvadd(2, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 13) : BOOL
33 : eq(30, 15) : BOOL
34 : eq(30, 18) : BOOL
35 : eq(30, 21) : BOOL
36 : ite(35, 23, 24) : BV:8
37 : ite(34, 20, 36) : BV:8
38 : ite(33, 17, 37) : BV:8
39 : ite(32, 12, 38) : BV:8
40 : ite(31, 12, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 17, 49) : BV:8
51 : ite(44, 12, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 15) : BOOL
57 : eq(53, 18) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 17, 60) : BV:8
62 : ite(55, 12, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 40, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 10 ] -> true, [ 11; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16544 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
16 : eq(11, 15) : BOOL
17 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
18 : eq(11, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
21 : eq(11, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8 { 0x8 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(18, 19, 28) : BV:8
30 : ite(16, 14, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(2, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 17) : BOOL
36 : eq(32, 20) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 19, 39) : BV:8
41 : ite(34, 14, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 9, 10) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 17) : BOOL
48 : eq(44, 20) : BOOL
49 : eq(44, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 19, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(9, 10) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 23) : BOOL
61 : ite(60, 25, 26) : BV:8
62 : ite(59, 22, 61) : BV:8
63 : ite(58, 19, 62) : BV:8
64 : ite(57, 14, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(31, 42, 54, 65) : BV:32
67 : ite(6, 5, 66) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
20937778
=counter_example_end
=global nodece 59 num_edges_traversed 1
=global nodece 59 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3v487.ce6689.num_edges_traversed2
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(epsilon)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3v487.ce6689 cc50875c3d9b6b478fbe7d27d5b8956
=input.spec-%var-x-1
1 : Lambda16593 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16596 : BV:32
18 : Lambda16594 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 33554433 { 0x2000001 +1.11e133 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 10 { 0xa +1.119e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 11 { 0xb +1.131e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 12 { 0xc +1.143e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16595 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
63 : eq(61, 62) : BOOL
64 : 255 { 0xff -1 } : BV:8
65 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
66 : eq(61, 65) : BOOL
67 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
68 : eq(61, 67) : BOOL
69 : 252 { 0xfc -4 } : BV:8
70 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
71 : eq(61, 70) : BOOL
72 : 127 { 0x7f } : BV:8
73 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 8 { 0x8 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(66, 64, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
83 : bvadd(82, 60) : BV:32
84 : eq(83, 62) : BOOL
85 : eq(83, 65) : BOOL
86 : eq(83, 67) : BOOL
87 : eq(83, 70) : BOOL
88 : eq(83, 73) : BOOL
89 : ite(88, 75, 76) : BV:8
90 : ite(87, 72, 89) : BV:8
91 : ite(86, 69, 90) : BV:8
92 : ite(85, 64, 91) : BV:8
93 : ite(84, 64, 92) : BV:8
94 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
95 : bvadd(94, 60) : BV:32
96 : eq(95, 62) : BOOL
97 : eq(95, 65) : BOOL
98 : eq(95, 67) : BOOL
99 : eq(95, 70) : BOOL
100 : eq(95, 73) : BOOL
101 : ite(100, 75, 76) : BV:8
102 : ite(99, 72, 101) : BV:8
103 : ite(98, 69, 102) : BV:8
104 : ite(97, 64, 103) : BV:8
105 : ite(96, 64, 104) : BV:8
106 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
107 : bvadd(106, 60) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : eq(107, 67) : BOOL
111 : eq(107, 70) : BOOL
112 : eq(107, 73) : BOOL
113 : ite(112, 75, 76) : BV:8
114 : ite(111, 72, 113) : BV:8
115 : ite(110, 69, 114) : BV:8
116 : ite(109, 64, 115) : BV:8
117 : ite(108, 64, 116) : BV:8
118 : bvconcat(81, 93, 105, 117) : BV:32
119 : bvadd(56, 58, 118) : BV:32
120 : eq(119, 62) : BOOL
121 : eq(119, 65) : BOOL
122 : eq(119, 67) : BOOL
123 : eq(119, 70) : BOOL
124 : eq(119, 73) : BOOL
125 : ite(124, 75, 76) : BV:8
126 : ite(123, 72, 125) : BV:8
127 : ite(122, 69, 126) : BV:8
128 : ite(121, 64, 127) : BV:8
129 : ite(120, 64, 128) : BV:8
130 : 2 { 0x2 +1.23e129 } : BV:32
131 : bvadd(130, 58, 118) : BV:32
132 : eq(131, 62) : BOOL
133 : eq(131, 65) : BOOL
134 : eq(131, 67) : BOOL
135 : eq(131, 70) : BOOL
136 : eq(131, 73) : BOOL
137 : ite(136, 75, 76) : BV:8
138 : ite(135, 72, 137) : BV:8
139 : ite(134, 69, 138) : BV:8
140 : ite(133, 64, 139) : BV:8
141 : ite(132, 64, 140) : BV:8
142 : 1 { 0x1 +1.11e129 } : BV:32
143 : bvadd(142, 58, 118) : BV:32
144 : eq(143, 62) : BOOL
145 : eq(143, 65) : BOOL
146 : eq(143, 67) : BOOL
147 : eq(143, 70) : BOOL
148 : eq(143, 73) : BOOL
149 : ite(148, 75, 76) : BV:8
150 : ite(147, 72, 149) : BV:8
151 : ite(146, 69, 150) : BV:8
152 : ite(145, 64, 151) : BV:8
153 : ite(144, 64, 152) : BV:8
154 : bvadd(58, 118) : BV:32
155 : eq(154, 62) : BOOL
156 : eq(154, 65) : BOOL
157 : eq(154, 67) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : ite(159, 75, 76) : BV:8
161 : ite(158, 72, 160) : BV:8
162 : ite(157, 69, 161) : BV:8
163 : ite(156, 64, 162) : BV:8
164 : ite(155, 64, 163) : BV:8
165 : bvconcat(129, 141, 153, 164) : BV:32
166 : ite(55, 2, 165) : BV:32
167 : lambda(52, 166) : FUNCTION[BV:32 -> BV:32]
168 : map(51, 167) : MAP[BV:32 -> BV:32]
169 : lambda(17, 168) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
170 : map(16, 169) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
171 : sym_const(170) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%x
1 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-%m
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 335544315 ] -> 0, [ 335544316; 335544316 ] -> 252, [ 335544317; 335544318 ] -> 255, [ 335544319; 335544319 ] -> 127, [ 335544320; 2147483651 ] -> 0, [ 2147483652; 2147483652 ] -> 8, [ 2147483653; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 12; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 264; 2684354559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2684354560; 2684354563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2684354564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2684354560 { 0xa0000000 -1610612736 -1.0e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16601 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16604 : BV:32
18 : Lambda16602 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 33554433 { 0x2000001 +1.11e133 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 10 { 0xa +1.119e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 11 { 0xb +1.131e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 12 { 0xc +1.143e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16603 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(2, 52) : BOOL
57 : bvule(52, 34) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(37, 52) : BOOL
60 : bvule(52, 37) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(41, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 41, 41) : BV:32
66 : ite(61, 37, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(22, 27) : BOOL
72 : ite(71, 13, 13) : BOOL
73 : ite(21, 7, 72) : BOOL
74 : and(70, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
85 : eq(80, 84) : BOOL
86 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
87 : eq(80, 86) : BOOL
88 : 252 { 0xfc -4 } : BV:8
89 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
90 : eq(80, 89) : BOOL
91 : 127 { 0x7f } : BV:8
92 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 8 { 0x8 } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(85, 83, 98) : BV:8
100 : ite(82, 83, 99) : BV:8
101 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
102 : bvadd(101, 79) : BV:32
103 : eq(102, 81) : BOOL
104 : eq(102, 84) : BOOL
105 : eq(102, 86) : BOOL
106 : eq(102, 89) : BOOL
107 : eq(102, 92) : BOOL
108 : ite(107, 94, 95) : BV:8
109 : ite(106, 91, 108) : BV:8
110 : ite(105, 88, 109) : BV:8
111 : ite(104, 83, 110) : BV:8
112 : ite(103, 83, 111) : BV:8
113 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
114 : bvadd(113, 79) : BV:32
115 : eq(114, 81) : BOOL
116 : eq(114, 84) : BOOL
117 : eq(114, 86) : BOOL
118 : eq(114, 89) : BOOL
119 : eq(114, 92) : BOOL
120 : ite(119, 94, 95) : BV:8
121 : ite(118, 91, 120) : BV:8
122 : ite(117, 88, 121) : BV:8
123 : ite(116, 83, 122) : BV:8
124 : ite(115, 83, 123) : BV:8
125 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
126 : bvadd(125, 79) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : eq(126, 86) : BOOL
130 : eq(126, 89) : BOOL
131 : eq(126, 92) : BOOL
132 : ite(131, 94, 95) : BV:8
133 : ite(130, 91, 132) : BV:8
134 : ite(129, 88, 133) : BV:8
135 : ite(128, 83, 134) : BV:8
136 : ite(127, 83, 135) : BV:8
137 : bvconcat(100, 112, 124, 136) : BV:32
138 : bvadd(75, 77, 137) : BV:32
139 : eq(138, 81) : BOOL
140 : eq(138, 84) : BOOL
141 : eq(138, 86) : BOOL
142 : eq(138, 89) : BOOL
143 : eq(138, 92) : BOOL
144 : ite(143, 94, 95) : BV:8
145 : ite(142, 91, 144) : BV:8
146 : ite(141, 88, 145) : BV:8
147 : ite(140, 83, 146) : BV:8
148 : ite(139, 83, 147) : BV:8
149 : 2 { 0x2 +1.23e129 } : BV:32
150 : bvadd(149, 77, 137) : BV:32
151 : eq(150, 81) : BOOL
152 : eq(150, 84) : BOOL
153 : eq(150, 86) : BOOL
154 : eq(150, 89) : BOOL
155 : eq(150, 92) : BOOL
156 : ite(155, 94, 95) : BV:8
157 : ite(154, 91, 156) : BV:8
158 : ite(153, 88, 157) : BV:8
159 : ite(152, 83, 158) : BV:8
160 : ite(151, 83, 159) : BV:8
161 : 1 { 0x1 +1.11e129 } : BV:32
162 : bvadd(161, 77, 137) : BV:32
163 : eq(162, 81) : BOOL
164 : eq(162, 84) : BOOL
165 : eq(162, 86) : BOOL
166 : eq(162, 89) : BOOL
167 : eq(162, 92) : BOOL
168 : ite(167, 94, 95) : BV:8
169 : ite(166, 91, 168) : BV:8
170 : ite(165, 88, 169) : BV:8
171 : ite(164, 83, 170) : BV:8
172 : ite(163, 83, 171) : BV:8
173 : bvadd(77, 137) : BV:32
174 : eq(173, 81) : BOOL
175 : eq(173, 84) : BOOL
176 : eq(173, 86) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : ite(178, 94, 95) : BV:8
180 : ite(177, 91, 179) : BV:8
181 : ite(176, 88, 180) : BV:8
182 : ite(175, 83, 181) : BV:8
183 : ite(174, 83, 182) : BV:8
184 : bvconcat(148, 160, 172, 183) : BV:32
185 : ite(55, 2, 184) : BV:32
186 : ite(74, 184, 185) : BV:32
187 : ite(55, 2, 186) : BV:32
188 : lambda(52, 187) : FUNCTION[BV:32 -> BV:32]
189 : map(51, 188) : MAP[BV:32 -> BV:32]
190 : lambda(17, 189) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
191 : map(16, 190) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
192 : sym_const(191) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda16598 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 10 { 0xa +1.119e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 11 { 0xb +1.131e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16599 : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : eq(19, 4) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 19) : BV:32
27 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
28 : bvadd(24, 26, 27) : BV:32
29 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
30 : eq(28, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
33 : eq(28, 32) : BOOL
34 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
35 : eq(28, 34) : BOOL
36 : 252 { 0xfc -4 } : BV:8
37 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
38 : eq(28, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
41 : eq(28, 40) : BOOL
42 : 8 { 0x8 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(33, 31, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : bvadd(20, 26, 27) : BV:32
50 : eq(49, 29) : BOOL
51 : eq(49, 32) : BOOL
52 : eq(49, 34) : BOOL
53 : eq(49, 37) : BOOL
54 : eq(49, 40) : BOOL
55 : ite(54, 42, 43) : BV:8
56 : ite(53, 39, 55) : BV:8
57 : ite(52, 36, 56) : BV:8
58 : ite(51, 31, 57) : BV:8
59 : ite(50, 31, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 26, 27) : BV:32
62 : eq(61, 29) : BOOL
63 : eq(61, 32) : BOOL
64 : eq(61, 34) : BOOL
65 : eq(61, 37) : BOOL
66 : eq(61, 40) : BOOL
67 : ite(66, 42, 43) : BV:8
68 : ite(65, 39, 67) : BV:8
69 : ite(64, 36, 68) : BV:8
70 : ite(63, 31, 69) : BV:8
71 : ite(62, 31, 70) : BV:8
72 : bvadd(26, 27) : BV:32
73 : eq(72, 29) : BOOL
74 : eq(72, 32) : BOOL
75 : eq(72, 34) : BOOL
76 : eq(72, 37) : BOOL
77 : eq(72, 40) : BOOL
78 : ite(77, 42, 43) : BV:8
79 : ite(76, 39, 78) : BV:8
80 : ite(75, 36, 79) : BV:8
81 : ite(74, 31, 80) : BV:8
82 : ite(73, 31, 81) : BV:8
83 : bvconcat(48, 59, 71, 82) : BV:32
84 : ite(23, 4, 83) : BV:32
85 : ite(21, 22, 84) : BV:32
86 : lambda(19, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(18, 86) : MAP[BV:32 -> BV:32]
88 : sum(1, 2, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2010655265 { 0x77d82a21 +1.68878567e112 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16606 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 11 { 0xb +1.131e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16607 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 8 { 0x8 +1.95e129 } : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
27 : eq(25, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
30 : eq(25, 29) : BOOL
31 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
32 : eq(25, 31) : BOOL
33 : 252 { 0xfc -4 } : BV:8
34 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
35 : eq(25, 34) : BOOL
36 : 127 { 0x7f } : BV:8
37 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 8 { 0x8 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : ite(30, 28, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : bvadd(18, 23, 24) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 37) : BOOL
52 : ite(51, 39, 40) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 28, 54) : BV:8
56 : ite(47, 28, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 23, 24) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : ite(63, 39, 40) : BV:8
65 : ite(62, 36, 64) : BV:8
66 : ite(61, 33, 65) : BV:8
67 : ite(60, 28, 66) : BV:8
68 : ite(59, 28, 67) : BV:8
69 : bvadd(23, 24) : BV:32
70 : eq(69, 26) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 31) : BOOL
73 : eq(69, 34) : BOOL
74 : eq(69, 37) : BOOL
75 : ite(74, 39, 40) : BV:8
76 : ite(73, 36, 75) : BV:8
77 : ite(72, 33, 76) : BV:8
78 : ite(71, 28, 77) : BV:8
79 : ite(70, 28, 78) : BV:8
80 : bvconcat(45, 56, 68, 79) : BV:32
81 : ite(19, 20, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16609 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 11 { 0xb +1.131e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16610 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 8 { 0x8 +1.95e129 } : BV:32
21 : eq(17, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
28 : eq(26, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
31 : eq(26, 30) : BOOL
32 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
33 : eq(26, 32) : BOOL
34 : 252 { 0xfc -4 } : BV:8
35 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
36 : eq(26, 35) : BOOL
37 : 127 { 0x7f } : BV:8
38 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
39 : eq(26, 38) : BOOL
40 : 8 { 0x8 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(31, 29, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : bvadd(18, 24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : eq(47, 32) : BOOL
51 : eq(47, 35) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 34, 54) : BV:8
56 : ite(49, 29, 55) : BV:8
57 : ite(48, 29, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 24, 25) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 32) : BOOL
63 : eq(59, 35) : BOOL
64 : eq(59, 38) : BOOL
65 : ite(64, 40, 41) : BV:8
66 : ite(63, 37, 65) : BV:8
67 : ite(62, 34, 66) : BV:8
68 : ite(61, 29, 67) : BV:8
69 : ite(60, 29, 68) : BV:8
70 : bvadd(24, 25) : BV:32
71 : eq(70, 27) : BOOL
72 : eq(70, 30) : BOOL
73 : eq(70, 32) : BOOL
74 : eq(70, 35) : BOOL
75 : eq(70, 38) : BOOL
76 : ite(75, 40, 41) : BV:8
77 : ite(74, 37, 76) : BV:8
78 : ite(73, 34, 77) : BV:8
79 : ite(72, 29, 78) : BV:8
80 : ite(71, 29, 79) : BV:8
81 : bvconcat(46, 57, 69, 80) : BV:32
82 : ite(21, 2, 81) : BV:32
83 : ite(19, 20, 82) : BV:32
84 : lambda(17, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(16, 84) : MAP[BV:32 -> BV:32]
86 : sym_const(85) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1172349281 { 0x45e0a161 +1.75492489e12 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2684354560 { 0xa0000000 -1610612736 -1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2684354563 { 0xa0000003 -1610612733 -1.35e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16518 : BV:32
2 : Lambda16519 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 33554433 { 0x2000001 +1.11e133 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 10 { 0xa +1.119e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 11 { 0xb +1.131e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 12 { 0xc +1.143e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16523 : BV:32
2 : Lambda16524 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
17 : eq(12, 16) : BOOL
18 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
19 : eq(12, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
22 : eq(12, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 8 { 0x8 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(17, 15, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
34 : bvadd(33, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 18) : BOOL
38 : eq(34, 21) : BOOL
39 : eq(34, 24) : BOOL
40 : ite(39, 26, 27) : BV:8
41 : ite(38, 23, 40) : BV:8
42 : ite(37, 20, 41) : BV:8
43 : ite(36, 15, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : ite(51, 26, 27) : BV:8
53 : ite(50, 23, 52) : BV:8
54 : ite(49, 20, 53) : BV:8
55 : ite(48, 15, 54) : BV:8
56 : ite(47, 15, 55) : BV:8
57 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
58 : bvadd(57, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : ite(63, 26, 27) : BV:8
65 : ite(62, 23, 64) : BV:8
66 : ite(61, 20, 65) : BV:8
67 : ite(60, 15, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(32, 44, 56, 68) : BV:32
70 : bvadd(7, 9, 69) : BV:32
71 : eq(70, 13) : BOOL
72 : eq(70, 16) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : eq(70, 24) : BOOL
76 : ite(75, 26, 27) : BV:8
77 : ite(74, 23, 76) : BV:8
78 : ite(73, 20, 77) : BV:8
79 : ite(72, 15, 78) : BV:8
80 : ite(71, 15, 79) : BV:8
81 : 2 { 0x2 +1.23e129 } : BV:32
82 : bvadd(81, 9, 69) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 18) : BOOL
86 : eq(82, 21) : BOOL
87 : eq(82, 24) : BOOL
88 : ite(87, 26, 27) : BV:8
89 : ite(86, 23, 88) : BV:8
90 : ite(85, 20, 89) : BV:8
91 : ite(84, 15, 90) : BV:8
92 : ite(83, 15, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 9, 69) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 18) : BOOL
98 : eq(94, 21) : BOOL
99 : eq(94, 24) : BOOL
100 : ite(99, 26, 27) : BV:8
101 : ite(98, 23, 100) : BV:8
102 : ite(97, 20, 101) : BV:8
103 : ite(96, 15, 102) : BV:8
104 : ite(95, 15, 103) : BV:8
105 : bvadd(9, 69) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 18) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : ite(110, 26, 27) : BV:8
112 : ite(109, 23, 111) : BV:8
113 : ite(108, 20, 112) : BV:8
114 : ite(107, 15, 113) : BV:8
115 : ite(106, 15, 114) : BV:8
116 : bvconcat(80, 92, 104, 115) : BV:32
117 : ite(6, 3, 116) : BV:32
118 : lambda(1, 2, 117) : FUNCTION[BV:32,BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16527 : BV:32
2 : Lambda16528 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 33554433 { 0x2000001 +1.11e133 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 10 { 0xa +1.119e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 11 { 0xb +1.131e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 12 { 0xc +1.143e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16531 : BV:32
2 : Lambda16532 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 33554432 { 0x2000000 +1.0e133 } : BV:32
12 : bvule(11, 1) : BOOL
13 : bvule(1, 11) : BOOL
14 : and(12, 13) : BOOL
15 : 33554433 { 0x2000001 +1.11e133 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 15, 15) : BV:32
21 : ite(14, 11, 20) : BV:32
22 : ite(10, 3, 21) : BV:32
23 : eq(22, 3) : BOOL
24 : bvule(3, 2) : BOOL
25 : 10 { 0xa +1.119e129 } : BV:32
26 : bvule(2, 25) : BOOL
27 : and(24, 26) : BOOL
28 : 11 { 0xb +1.131e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : 12 { 0xc +1.143e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 28, 36) : BV:32
38 : ite(27, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(23, 39) : BOOL
41 : 1 { 0x1 } : BOOL
42 : 0 { 0x0 } : BOOL
43 : ite(40, 41, 42) : BOOL
44 : and(12, 18) : BOOL
45 : ite(44, 42, 42) : BOOL
46 : ite(10, 41, 45) : BOOL
47 : and(43, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 335544315 { 0x13fffffb +1.99999940e168 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
58 : eq(53, 57) : BOOL
59 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
60 : eq(53, 59) : BOOL
61 : 252 { 0xfc -4 } : BV:8
62 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
63 : eq(53, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 8 { 0x8 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(58, 56, 71) : BV:8
73 : ite(55, 56, 72) : BV:8
74 : 335544314 { 0x13fffffa +1.99999928e168 } : BV:32
75 : bvadd(74, 52) : BV:32
76 : eq(75, 54) : BOOL
77 : eq(75, 57) : BOOL
78 : eq(75, 59) : BOOL
79 : eq(75, 62) : BOOL
80 : eq(75, 65) : BOOL
81 : ite(80, 67, 68) : BV:8
82 : ite(79, 64, 81) : BV:8
83 : ite(78, 61, 82) : BV:8
84 : ite(77, 56, 83) : BV:8
85 : ite(76, 56, 84) : BV:8
86 : 335544313 { 0x13fffff9 +1.99999916e168 } : BV:32
87 : bvadd(86, 52) : BV:32
88 : eq(87, 54) : BOOL
89 : eq(87, 57) : BOOL
90 : eq(87, 59) : BOOL
91 : eq(87, 62) : BOOL
92 : eq(87, 65) : BOOL
93 : ite(92, 67, 68) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : ite(90, 61, 94) : BV:8
96 : ite(89, 56, 95) : BV:8
97 : ite(88, 56, 96) : BV:8
98 : 335544312 { 0x13fffff8 +1.99999904e168 } : BV:32
99 : bvadd(98, 52) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : eq(99, 59) : BOOL
103 : eq(99, 62) : BOOL
104 : eq(99, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 64, 105) : BV:8
107 : ite(102, 61, 106) : BV:8
108 : ite(101, 56, 107) : BV:8
109 : ite(100, 56, 108) : BV:8
110 : bvconcat(73, 85, 97, 109) : BV:32
111 : bvadd(48, 50, 110) : BV:32
112 : eq(111, 54) : BOOL
113 : eq(111, 57) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 62) : BOOL
116 : eq(111, 65) : BOOL
117 : ite(116, 67, 68) : BV:8
118 : ite(115, 64, 117) : BV:8
119 : ite(114, 61, 118) : BV:8
120 : ite(113, 56, 119) : BV:8
121 : ite(112, 56, 120) : BV:8
122 : 2 { 0x2 +1.23e129 } : BV:32
123 : bvadd(122, 50, 110) : BV:32
124 : eq(123, 54) : BOOL
125 : eq(123, 57) : BOOL
126 : eq(123, 59) : BOOL
127 : eq(123, 62) : BOOL
128 : eq(123, 65) : BOOL
129 : ite(128, 67, 68) : BV:8
130 : ite(127, 64, 129) : BV:8
131 : ite(126, 61, 130) : BV:8
132 : ite(125, 56, 131) : BV:8
133 : ite(124, 56, 132) : BV:8
134 : 1 { 0x1 +1.11e129 } : BV:32
135 : bvadd(134, 50, 110) : BV:32
136 : eq(135, 54) : BOOL
137 : eq(135, 57) : BOOL
138 : eq(135, 59) : BOOL
139 : eq(135, 62) : BOOL
140 : eq(135, 65) : BOOL
141 : ite(140, 67, 68) : BV:8
142 : ite(139, 64, 141) : BV:8
143 : ite(138, 61, 142) : BV:8
144 : ite(137, 56, 143) : BV:8
145 : ite(136, 56, 144) : BV:8
146 : bvadd(50, 110) : BV:32
147 : eq(146, 54) : BOOL
148 : eq(146, 57) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : ite(151, 67, 68) : BV:8
153 : ite(150, 64, 152) : BV:8
154 : ite(149, 61, 153) : BV:8
155 : ite(148, 56, 154) : BV:8
156 : ite(147, 56, 155) : BV:8
157 : bvconcat(121, 133, 145, 156) : BV:32
158 : ite(6, 3, 157) : BV:32
159 : ite(47, 157, 158) : BV:32
160 : ite(6, 3, 159) : BV:32
161 : lambda(1, 2, 160) : FUNCTION[BV:32,BV:32 -> BV:32]
162 : sym_const(161) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 10 ] -> true, [ 11; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16536 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
16 : eq(11, 15) : BOOL
17 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
18 : eq(11, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
21 : eq(11, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8 { 0x8 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(18, 19, 28) : BV:8
30 : ite(16, 14, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(2, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 17) : BOOL
36 : eq(32, 20) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 19, 39) : BV:8
41 : ite(34, 14, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 9, 10) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 17) : BOOL
48 : eq(44, 20) : BOOL
49 : eq(44, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 19, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(9, 10) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 23) : BOOL
61 : ite(60, 25, 26) : BV:8
62 : ite(59, 22, 61) : BV:8
63 : ite(58, 19, 62) : BV:8
64 : ite(57, 14, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(31, 42, 54, 65) : BV:32
67 : ite(6, 5, 66) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 10 ] -> true, [ 11; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16540 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
14 : eq(9, 13) : BOOL
15 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
16 : eq(9, 15) : BOOL
17 : 252 { 0xfc -4 } : BV:8
18 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
19 : eq(9, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 8 { 0x8 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(14, 12, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : bvadd(2, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 13) : BOOL
33 : eq(30, 15) : BOOL
34 : eq(30, 18) : BOOL
35 : eq(30, 21) : BOOL
36 : ite(35, 23, 24) : BV:8
37 : ite(34, 20, 36) : BV:8
38 : ite(33, 17, 37) : BV:8
39 : ite(32, 12, 38) : BV:8
40 : ite(31, 12, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 17, 49) : BV:8
51 : ite(44, 12, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 15) : BOOL
57 : eq(53, 18) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 17, 60) : BV:8
62 : ite(55, 12, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 40, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 10 ] -> true, [ 11; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16544 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
16 : eq(11, 15) : BOOL
17 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
18 : eq(11, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
21 : eq(11, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8 { 0x8 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : ite(18, 19, 28) : BV:8
30 : ite(16, 14, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : bvadd(2, 9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : eq(32, 17) : BOOL
36 : eq(32, 20) : BOOL
37 : eq(32, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : ite(35, 19, 39) : BV:8
41 : ite(34, 14, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 9, 10) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 17) : BOOL
48 : eq(44, 20) : BOOL
49 : eq(44, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 19, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(9, 10) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 23) : BOOL
61 : ite(60, 25, 26) : BV:8
62 : ite(59, 22, 61) : BV:8
63 : ite(58, 19, 62) : BV:8
64 : ite(57, 14, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(31, 42, 54, 65) : BV:32
67 : ite(6, 5, 66) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
20937778
=counter_example_end
=global nodece 60 num_edges_traversed 2
=global nodece 60 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce6700.num_edges_traversed1
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce6700 9abe22f1adb29bb293e8ddbd30d57778
=input.spec-%var-x-1
1 : Lambda16745 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16748 : BV:32
18 : Lambda16746 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16747 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 188 { 0xbc -68 } : BV:8
84 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
85 : eq(80, 84) : BOOL
86 : 192 { 0xc0 -64 } : BV:8
87 : eq(80, 78) : BOOL
88 : 157 { 0x9d -99 } : BV:8
89 : eq(80, 10) : BOOL
90 : 34 { 0x22 } : BV:8
91 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
92 : eq(80, 91) : BOOL
93 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
94 : eq(80, 93) : BOOL
95 : 21 { 0x15 } : BV:8
96 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
97 : eq(80, 96) : BOOL
98 : 4 { 0x4 } : BV:8
99 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
100 : eq(80, 99) : BOOL
101 : 175 { 0xaf -81 } : BV:8
102 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
103 : eq(80, 102) : BOOL
104 : 95 { 0x5f } : BV:8
105 : 0 { 0x0 } : BV:8
106 : ite(103, 104, 105) : BV:8
107 : ite(100, 101, 106) : BV:8
108 : ite(97, 98, 107) : BV:8
109 : ite(94, 95, 108) : BV:8
110 : ite(92, 83, 109) : BV:8
111 : ite(89, 90, 110) : BV:8
112 : ite(87, 88, 111) : BV:8
113 : ite(85, 86, 112) : BV:8
114 : ite(82, 83, 113) : BV:8
115 : bvadd(99, 79) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : eq(115, 78) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 91) : BOOL
121 : eq(115, 93) : BOOL
122 : eq(115, 96) : BOOL
123 : eq(115, 99) : BOOL
124 : eq(115, 102) : BOOL
125 : ite(124, 104, 105) : BV:8
126 : ite(123, 101, 125) : BV:8
127 : ite(122, 98, 126) : BV:8
128 : ite(121, 95, 127) : BV:8
129 : ite(120, 83, 128) : BV:8
130 : ite(119, 90, 129) : BV:8
131 : ite(118, 88, 130) : BV:8
132 : ite(117, 86, 131) : BV:8
133 : ite(116, 83, 132) : BV:8
134 : bvadd(102, 79) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 78) : BOOL
138 : eq(134, 10) : BOOL
139 : eq(134, 91) : BOOL
140 : eq(134, 93) : BOOL
141 : eq(134, 96) : BOOL
142 : eq(134, 99) : BOOL
143 : eq(134, 102) : BOOL
144 : ite(143, 104, 105) : BV:8
145 : ite(142, 101, 144) : BV:8
146 : ite(141, 98, 145) : BV:8
147 : ite(140, 95, 146) : BV:8
148 : ite(139, 83, 147) : BV:8
149 : ite(138, 90, 148) : BV:8
150 : ite(137, 88, 149) : BV:8
151 : ite(136, 86, 150) : BV:8
152 : ite(135, 83, 151) : BV:8
153 : bvadd(91, 79) : BV:32
154 : eq(153, 81) : BOOL
155 : eq(153, 84) : BOOL
156 : eq(153, 78) : BOOL
157 : eq(153, 10) : BOOL
158 : eq(153, 91) : BOOL
159 : eq(153, 93) : BOOL
160 : eq(153, 96) : BOOL
161 : eq(153, 99) : BOOL
162 : eq(153, 102) : BOOL
163 : ite(162, 104, 105) : BV:8
164 : ite(161, 101, 163) : BV:8
165 : ite(160, 98, 164) : BV:8
166 : ite(159, 95, 165) : BV:8
167 : ite(158, 83, 166) : BV:8
168 : ite(157, 90, 167) : BV:8
169 : ite(156, 88, 168) : BV:8
170 : ite(155, 86, 169) : BV:8
171 : ite(154, 83, 170) : BV:8
172 : bvconcat(114, 133, 152, 171) : BV:32
173 : bvadd(75, 77, 172) : BV:32
174 : eq(173, 81) : BOOL
175 : eq(173, 84) : BOOL
176 : eq(173, 78) : BOOL
177 : eq(173, 10) : BOOL
178 : eq(173, 91) : BOOL
179 : eq(173, 93) : BOOL
180 : eq(173, 96) : BOOL
181 : eq(173, 99) : BOOL
182 : eq(173, 102) : BOOL
183 : ite(182, 104, 105) : BV:8
184 : ite(181, 101, 183) : BV:8
185 : ite(180, 98, 184) : BV:8
186 : ite(179, 95, 185) : BV:8
187 : ite(178, 83, 186) : BV:8
188 : ite(177, 90, 187) : BV:8
189 : ite(176, 88, 188) : BV:8
190 : ite(175, 86, 189) : BV:8
191 : ite(174, 83, 190) : BV:8
192 : 2 { 0x2 +1.23e129 } : BV:32
193 : bvadd(192, 77, 172) : BV:32
194 : eq(193, 81) : BOOL
195 : eq(193, 84) : BOOL
196 : eq(193, 78) : BOOL
197 : eq(193, 10) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 93) : BOOL
200 : eq(193, 96) : BOOL
201 : eq(193, 99) : BOOL
202 : eq(193, 102) : BOOL
203 : ite(202, 104, 105) : BV:8
204 : ite(201, 101, 203) : BV:8
205 : ite(200, 98, 204) : BV:8
206 : ite(199, 95, 205) : BV:8
207 : ite(198, 83, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 88, 208) : BV:8
210 : ite(195, 86, 209) : BV:8
211 : ite(194, 83, 210) : BV:8
212 : 1 { 0x1 +1.11e129 } : BV:32
213 : bvadd(212, 77, 172) : BV:32
214 : eq(213, 81) : BOOL
215 : eq(213, 84) : BOOL
216 : eq(213, 78) : BOOL
217 : eq(213, 10) : BOOL
218 : eq(213, 91) : BOOL
219 : eq(213, 93) : BOOL
220 : eq(213, 96) : BOOL
221 : eq(213, 99) : BOOL
222 : eq(213, 102) : BOOL
223 : ite(222, 104, 105) : BV:8
224 : ite(221, 101, 223) : BV:8
225 : ite(220, 98, 224) : BV:8
226 : ite(219, 95, 225) : BV:8
227 : ite(218, 83, 226) : BV:8
228 : ite(217, 90, 227) : BV:8
229 : ite(216, 88, 228) : BV:8
230 : ite(215, 86, 229) : BV:8
231 : ite(214, 83, 230) : BV:8
232 : bvadd(77, 172) : BV:32
233 : eq(232, 81) : BOOL
234 : eq(232, 84) : BOOL
235 : eq(232, 78) : BOOL
236 : eq(232, 10) : BOOL
237 : eq(232, 91) : BOOL
238 : eq(232, 93) : BOOL
239 : eq(232, 96) : BOOL
240 : eq(232, 99) : BOOL
241 : eq(232, 102) : BOOL
242 : ite(241, 104, 105) : BV:8
243 : ite(240, 101, 242) : BV:8
244 : ite(239, 98, 243) : BV:8
245 : ite(238, 95, 244) : BV:8
246 : ite(237, 83, 245) : BV:8
247 : ite(236, 90, 246) : BV:8
248 : ite(235, 88, 247) : BV:8
249 : ite(234, 86, 248) : BV:8
250 : ite(233, 83, 249) : BV:8
251 : bvconcat(191, 211, 231, 250) : BV:32
252 : ite(55, 2, 251) : BV:32
253 : ite(74, 251, 252) : BV:32
254 : ite(55, 2, 253) : BV:32
255 : lambda(52, 254) : FUNCTION[BV:32 -> BV:32]
256 : map(51, 255) : MAP[BV:32 -> BV:32]
257 : lambda(17, 256) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
258 : map(16, 257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
259 : sym_const(258) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%x
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 571850943 ] -> 0, [ 571850944; 571850944 ] -> 4, [ 571850945; 4294967287 ] -> 0, [ 4294967288; 4294967288 ] -> 188, [ 4294967289; 4294967289 ] -> 95, [ 4294967290; 4294967290 ] -> 175, [ 4294967291; 4294967291 ] -> 157, [ 4294967292; 4294967292 ] -> 188, [ 4294967293; 4294967293 ] -> 192, [ 4294967294; 4294967294 ] -> 21, [ 4294967295; 4294967295 ] -> 34, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 84772251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 84772252; 84772255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 84772256; 1782158495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1782158496; 1782158499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1782158500; 4288815235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4288815236; 4288815239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4288815240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1782158496 { 0x6a3994a0 +1.44984817e85 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4288815236 { 0xffa22084 -6152060 -1.26661729e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 84772252 { 0x50d859c +1.10563993e139 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16753 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16756 : BV:32
18 : Lambda16754 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16755 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
66 : eq(61, 65) : BOOL
67 : 192 { 0xc0 -64 } : BV:8
68 : eq(61, 59) : BOOL
69 : 157 { 0x9d -99 } : BV:8
70 : eq(61, 10) : BOOL
71 : 34 { 0x22 } : BV:8
72 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
73 : eq(61, 72) : BOOL
74 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
75 : eq(61, 74) : BOOL
76 : 21 { 0x15 } : BV:8
77 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
78 : eq(61, 77) : BOOL
79 : 4 { 0x4 } : BV:8
80 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
81 : eq(61, 80) : BOOL
82 : 175 { 0xaf -81 } : BV:8
83 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
84 : eq(61, 83) : BOOL
85 : 95 { 0x5f } : BV:8
86 : 0 { 0x0 } : BV:8
87 : ite(84, 85, 86) : BV:8
88 : ite(81, 82, 87) : BV:8
89 : ite(78, 79, 88) : BV:8
90 : ite(75, 76, 89) : BV:8
91 : ite(73, 64, 90) : BV:8
92 : ite(70, 71, 91) : BV:8
93 : ite(68, 69, 92) : BV:8
94 : ite(66, 67, 93) : BV:8
95 : ite(63, 64, 94) : BV:8
96 : bvadd(80, 60) : BV:32
97 : eq(96, 62) : BOOL
98 : eq(96, 65) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 10) : BOOL
101 : eq(96, 72) : BOOL
102 : eq(96, 74) : BOOL
103 : eq(96, 77) : BOOL
104 : eq(96, 80) : BOOL
105 : eq(96, 83) : BOOL
106 : ite(105, 85, 86) : BV:8
107 : ite(104, 82, 106) : BV:8
108 : ite(103, 79, 107) : BV:8
109 : ite(102, 76, 108) : BV:8
110 : ite(101, 64, 109) : BV:8
111 : ite(100, 71, 110) : BV:8
112 : ite(99, 69, 111) : BV:8
113 : ite(98, 67, 112) : BV:8
114 : ite(97, 64, 113) : BV:8
115 : bvadd(83, 60) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 59) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 72) : BOOL
121 : eq(115, 74) : BOOL
122 : eq(115, 77) : BOOL
123 : eq(115, 80) : BOOL
124 : eq(115, 83) : BOOL
125 : ite(124, 85, 86) : BV:8
126 : ite(123, 82, 125) : BV:8
127 : ite(122, 79, 126) : BV:8
128 : ite(121, 76, 127) : BV:8
129 : ite(120, 64, 128) : BV:8
130 : ite(119, 71, 129) : BV:8
131 : ite(118, 69, 130) : BV:8
132 : ite(117, 67, 131) : BV:8
133 : ite(116, 64, 132) : BV:8
134 : bvadd(72, 60) : BV:32
135 : eq(134, 62) : BOOL
136 : eq(134, 65) : BOOL
137 : eq(134, 59) : BOOL
138 : eq(134, 10) : BOOL
139 : eq(134, 72) : BOOL
140 : eq(134, 74) : BOOL
141 : eq(134, 77) : BOOL
142 : eq(134, 80) : BOOL
143 : eq(134, 83) : BOOL
144 : ite(143, 85, 86) : BV:8
145 : ite(142, 82, 144) : BV:8
146 : ite(141, 79, 145) : BV:8
147 : ite(140, 76, 146) : BV:8
148 : ite(139, 64, 147) : BV:8
149 : ite(138, 71, 148) : BV:8
150 : ite(137, 69, 149) : BV:8
151 : ite(136, 67, 150) : BV:8
152 : ite(135, 64, 151) : BV:8
153 : bvconcat(95, 114, 133, 152) : BV:32
154 : bvadd(56, 58, 153) : BV:32
155 : eq(154, 62) : BOOL
156 : eq(154, 65) : BOOL
157 : eq(154, 59) : BOOL
158 : eq(154, 10) : BOOL
159 : eq(154, 72) : BOOL
160 : eq(154, 74) : BOOL
161 : eq(154, 77) : BOOL
162 : eq(154, 80) : BOOL
163 : eq(154, 83) : BOOL
164 : ite(163, 85, 86) : BV:8
165 : ite(162, 82, 164) : BV:8
166 : ite(161, 79, 165) : BV:8
167 : ite(160, 76, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 71, 168) : BV:8
170 : ite(157, 69, 169) : BV:8
171 : ite(156, 67, 170) : BV:8
172 : ite(155, 64, 171) : BV:8
173 : 2 { 0x2 +1.23e129 } : BV:32
174 : bvadd(173, 58, 153) : BV:32
175 : eq(174, 62) : BOOL
176 : eq(174, 65) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 10) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 74) : BOOL
181 : eq(174, 77) : BOOL
182 : eq(174, 80) : BOOL
183 : eq(174, 83) : BOOL
184 : ite(183, 85, 86) : BV:8
185 : ite(182, 82, 184) : BV:8
186 : ite(181, 79, 185) : BV:8
187 : ite(180, 76, 186) : BV:8
188 : ite(179, 64, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 69, 189) : BV:8
191 : ite(176, 67, 190) : BV:8
192 : ite(175, 64, 191) : BV:8
193 : 1 { 0x1 +1.11e129 } : BV:32
194 : bvadd(193, 58, 153) : BV:32
195 : eq(194, 62) : BOOL
196 : eq(194, 65) : BOOL
197 : eq(194, 59) : BOOL
198 : eq(194, 10) : BOOL
199 : eq(194, 72) : BOOL
200 : eq(194, 74) : BOOL
201 : eq(194, 77) : BOOL
202 : eq(194, 80) : BOOL
203 : eq(194, 83) : BOOL
204 : ite(203, 85, 86) : BV:8
205 : ite(202, 82, 204) : BV:8
206 : ite(201, 79, 205) : BV:8
207 : ite(200, 76, 206) : BV:8
208 : ite(199, 64, 207) : BV:8
209 : ite(198, 71, 208) : BV:8
210 : ite(197, 69, 209) : BV:8
211 : ite(196, 67, 210) : BV:8
212 : ite(195, 64, 211) : BV:8
213 : bvadd(58, 153) : BV:32
214 : eq(213, 62) : BOOL
215 : eq(213, 65) : BOOL
216 : eq(213, 59) : BOOL
217 : eq(213, 10) : BOOL
218 : eq(213, 72) : BOOL
219 : eq(213, 74) : BOOL
220 : eq(213, 77) : BOOL
221 : eq(213, 80) : BOOL
222 : eq(213, 83) : BOOL
223 : ite(222, 85, 86) : BV:8
224 : ite(221, 82, 223) : BV:8
225 : ite(220, 79, 224) : BV:8
226 : ite(219, 76, 225) : BV:8
227 : ite(218, 64, 226) : BV:8
228 : ite(217, 71, 227) : BV:8
229 : ite(216, 69, 228) : BV:8
230 : ite(215, 67, 229) : BV:8
231 : ite(214, 64, 230) : BV:8
232 : bvconcat(172, 192, 212, 231) : BV:32
233 : ite(55, 2, 232) : BV:32
234 : lambda(52, 233) : FUNCTION[BV:32 -> BV:32]
235 : map(51, 234) : MAP[BV:32 -> BV:32]
236 : lambda(17, 235) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
237 : map(16, 236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
238 : sym_const(237) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : Lambda16750 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 511 { 0x1ff +1.6091e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 512 { 0x200 +1.6103e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16751 : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(19, 22) : BOOL
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvmul(24, 19) : BV:32
27 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
28 : bvadd(25, 26, 27) : BV:32
29 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
30 : eq(28, 29) : BOOL
31 : 188 { 0xbc -68 } : BV:8
32 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
33 : eq(28, 32) : BOOL
34 : 192 { 0xc0 -64 } : BV:8
35 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
36 : eq(28, 35) : BOOL
37 : 157 { 0x9d -99 } : BV:8
38 : eq(28, 12) : BOOL
39 : 34 { 0x22 } : BV:8
40 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
41 : eq(28, 40) : BOOL
42 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
43 : eq(28, 42) : BOOL
44 : 21 { 0x15 } : BV:8
45 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
46 : eq(28, 45) : BOOL
47 : 4 { 0x4 } : BV:8
48 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
49 : eq(28, 48) : BOOL
50 : 175 { 0xaf -81 } : BV:8
51 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
52 : eq(28, 51) : BOOL
53 : 95 { 0x5f } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(41, 31, 58) : BV:8
60 : ite(38, 39, 59) : BV:8
61 : ite(36, 37, 60) : BV:8
62 : ite(33, 34, 61) : BV:8
63 : ite(30, 31, 62) : BV:8
64 : bvadd(20, 26, 27) : BV:32
65 : eq(64, 29) : BOOL
66 : eq(64, 32) : BOOL
67 : eq(64, 35) : BOOL
68 : eq(64, 12) : BOOL
69 : eq(64, 40) : BOOL
70 : eq(64, 42) : BOOL
71 : eq(64, 45) : BOOL
72 : eq(64, 48) : BOOL
73 : eq(64, 51) : BOOL
74 : ite(73, 53, 54) : BV:8
75 : ite(72, 50, 74) : BV:8
76 : ite(71, 47, 75) : BV:8
77 : ite(70, 44, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 39, 78) : BV:8
80 : ite(67, 37, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : bvadd(22, 26, 27) : BV:32
84 : eq(83, 29) : BOOL
85 : eq(83, 32) : BOOL
86 : eq(83, 35) : BOOL
87 : eq(83, 12) : BOOL
88 : eq(83, 40) : BOOL
89 : eq(83, 42) : BOOL
90 : eq(83, 45) : BOOL
91 : eq(83, 48) : BOOL
92 : eq(83, 51) : BOOL
93 : ite(92, 53, 54) : BV:8
94 : ite(91, 50, 93) : BV:8
95 : ite(90, 47, 94) : BV:8
96 : ite(89, 44, 95) : BV:8
97 : ite(88, 31, 96) : BV:8
98 : ite(87, 39, 97) : BV:8
99 : ite(86, 37, 98) : BV:8
100 : ite(85, 34, 99) : BV:8
101 : ite(84, 31, 100) : BV:8
102 : bvadd(26, 27) : BV:32
103 : eq(102, 29) : BOOL
104 : eq(102, 32) : BOOL
105 : eq(102, 35) : BOOL
106 : eq(102, 12) : BOOL
107 : eq(102, 40) : BOOL
108 : eq(102, 42) : BOOL
109 : eq(102, 45) : BOOL
110 : eq(102, 48) : BOOL
111 : eq(102, 51) : BOOL
112 : ite(111, 53, 54) : BV:8
113 : ite(110, 50, 112) : BV:8
114 : ite(109, 47, 113) : BV:8
115 : ite(108, 44, 114) : BV:8
116 : ite(107, 31, 115) : BV:8
117 : ite(106, 39, 116) : BV:8
118 : ite(105, 37, 117) : BV:8
119 : ite(104, 34, 118) : BV:8
120 : ite(103, 31, 119) : BV:8
121 : bvconcat(63, 82, 101, 120) : BV:32
122 : ite(23, 24, 121) : BV:32
123 : ite(21, 4, 122) : BV:32
124 : lambda(19, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(18, 124) : MAP[BV:32 -> BV:32]
126 : sum(1, 2, 125) : SUM[UNIT,MAP[BV:32 -> BV:32]]
127 : sym_const(126) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 590647697 { 0x23349191 +1.41069233e199 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16758 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16759 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(17, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 17) : BV:32
25 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 188 { 0xbc -68 } : BV:8
30 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 192 { 0xc0 -64 } : BV:8
33 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 157 { 0x9d -99 } : BV:8
36 : eq(26, 10) : BOOL
37 : 34 { 0x22 } : BV:8
38 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
41 : eq(26, 40) : BOOL
42 : 21 { 0x15 } : BV:8
43 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
44 : eq(26, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
47 : eq(26, 46) : BOOL
48 : 175 { 0xaf -81 } : BV:8
49 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
50 : eq(26, 49) : BOOL
51 : 95 { 0x5f } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(39, 29, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(34, 35, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(28, 29, 60) : BV:8
62 : bvadd(21, 24, 25) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : eq(62, 33) : BOOL
66 : eq(62, 10) : BOOL
67 : eq(62, 38) : BOOL
68 : eq(62, 40) : BOOL
69 : eq(62, 43) : BOOL
70 : eq(62, 46) : BOOL
71 : eq(62, 49) : BOOL
72 : ite(71, 51, 52) : BV:8
73 : ite(70, 48, 72) : BV:8
74 : ite(69, 45, 73) : BV:8
75 : ite(68, 42, 74) : BV:8
76 : ite(67, 29, 75) : BV:8
77 : ite(66, 37, 76) : BV:8
78 : ite(65, 35, 77) : BV:8
79 : ite(64, 32, 78) : BV:8
80 : ite(63, 29, 79) : BV:8
81 : bvadd(18, 24, 25) : BV:32
82 : eq(81, 27) : BOOL
83 : eq(81, 30) : BOOL
84 : eq(81, 33) : BOOL
85 : eq(81, 10) : BOOL
86 : eq(81, 38) : BOOL
87 : eq(81, 40) : BOOL
88 : eq(81, 43) : BOOL
89 : eq(81, 46) : BOOL
90 : eq(81, 49) : BOOL
91 : ite(90, 51, 52) : BV:8
92 : ite(89, 48, 91) : BV:8
93 : ite(88, 45, 92) : BV:8
94 : ite(87, 42, 93) : BV:8
95 : ite(86, 29, 94) : BV:8
96 : ite(85, 37, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : ite(82, 29, 98) : BV:8
100 : bvadd(24, 25) : BV:32
101 : eq(100, 27) : BOOL
102 : eq(100, 30) : BOOL
103 : eq(100, 33) : BOOL
104 : eq(100, 10) : BOOL
105 : eq(100, 38) : BOOL
106 : eq(100, 40) : BOOL
107 : eq(100, 43) : BOOL
108 : eq(100, 46) : BOOL
109 : eq(100, 49) : BOOL
110 : ite(109, 51, 52) : BV:8
111 : ite(108, 48, 110) : BV:8
112 : ite(107, 45, 111) : BV:8
113 : ite(106, 42, 112) : BV:8
114 : ite(105, 29, 113) : BV:8
115 : ite(104, 37, 114) : BV:8
116 : ite(103, 35, 115) : BV:8
117 : ite(102, 32, 116) : BV:8
118 : ite(101, 29, 117) : BV:8
119 : bvconcat(61, 80, 99, 118) : BV:32
120 : ite(22, 2, 119) : BV:32
121 : ite(19, 20, 120) : BV:32
122 : lambda(17, 121) : FUNCTION[BV:32 -> BV:32]
123 : map(16, 122) : MAP[BV:32 -> BV:32]
124 : sym_const(123) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16761 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16762 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(22, 17) : BV:32
25 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 188 { 0xbc -68 } : BV:8
30 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 192 { 0xc0 -64 } : BV:8
33 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 157 { 0x9d -99 } : BV:8
36 : eq(26, 10) : BOOL
37 : 34 { 0x22 } : BV:8
38 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
41 : eq(26, 40) : BOOL
42 : 21 { 0x15 } : BV:8
43 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
44 : eq(26, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
47 : eq(26, 46) : BOOL
48 : 175 { 0xaf -81 } : BV:8
49 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
50 : eq(26, 49) : BOOL
51 : 95 { 0x5f } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(39, 29, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(34, 35, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(28, 29, 60) : BV:8
62 : bvadd(18, 24, 25) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : eq(62, 33) : BOOL
66 : eq(62, 10) : BOOL
67 : eq(62, 38) : BOOL
68 : eq(62, 40) : BOOL
69 : eq(62, 43) : BOOL
70 : eq(62, 46) : BOOL
71 : eq(62, 49) : BOOL
72 : ite(71, 51, 52) : BV:8
73 : ite(70, 48, 72) : BV:8
74 : ite(69, 45, 73) : BV:8
75 : ite(68, 42, 74) : BV:8
76 : ite(67, 29, 75) : BV:8
77 : ite(66, 37, 76) : BV:8
78 : ite(65, 35, 77) : BV:8
79 : ite(64, 32, 78) : BV:8
80 : ite(63, 29, 79) : BV:8
81 : bvadd(20, 24, 25) : BV:32
82 : eq(81, 27) : BOOL
83 : eq(81, 30) : BOOL
84 : eq(81, 33) : BOOL
85 : eq(81, 10) : BOOL
86 : eq(81, 38) : BOOL
87 : eq(81, 40) : BOOL
88 : eq(81, 43) : BOOL
89 : eq(81, 46) : BOOL
90 : eq(81, 49) : BOOL
91 : ite(90, 51, 52) : BV:8
92 : ite(89, 48, 91) : BV:8
93 : ite(88, 45, 92) : BV:8
94 : ite(87, 42, 93) : BV:8
95 : ite(86, 29, 94) : BV:8
96 : ite(85, 37, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : ite(82, 29, 98) : BV:8
100 : bvadd(24, 25) : BV:32
101 : eq(100, 27) : BOOL
102 : eq(100, 30) : BOOL
103 : eq(100, 33) : BOOL
104 : eq(100, 10) : BOOL
105 : eq(100, 38) : BOOL
106 : eq(100, 40) : BOOL
107 : eq(100, 43) : BOOL
108 : eq(100, 46) : BOOL
109 : eq(100, 49) : BOOL
110 : ite(109, 51, 52) : BV:8
111 : ite(108, 48, 110) : BV:8
112 : ite(107, 45, 111) : BV:8
113 : ite(106, 42, 112) : BV:8
114 : ite(105, 29, 113) : BV:8
115 : ite(104, 37, 114) : BV:8
116 : ite(103, 35, 115) : BV:8
117 : ite(102, 32, 116) : BV:8
118 : ite(101, 29, 117) : BV:8
119 : bvconcat(61, 80, 99, 118) : BV:32
120 : ite(21, 22, 119) : BV:32
121 : ite(19, 2, 120) : BV:32
122 : lambda(17, 121) : FUNCTION[BV:32 -> BV:32]
123 : map(16, 122) : MAP[BV:32 -> BV:32]
124 : sym_const(123) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2129437898 { 0x7eeca4ca +1.84877896e126 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4288815236 { 0xffa22084 -6152060 -1.26661729e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4288815239 { 0xffa22087 -6152057 -1.26661765e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 84772252 { 0x50d859c +1.10563993e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 84772255 { 0x50d859f +1.10564029e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1782158496 { 0x6a3994a0 +1.44984817e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1782158499 { 0x6a3994a3 +1.44984853e85 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16672 : BV:32
2 : Lambda16673 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16677 : BV:32
2 : Lambda16678 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 511 { 0x1ff +1.6091e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 512 { 0x200 +1.6103e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 513 { 0x201 +1.6115e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 188 { 0xbc -68 } : BV:8
57 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
58 : eq(53, 57) : BOOL
59 : 192 { 0xc0 -64 } : BV:8
60 : eq(53, 51) : BOOL
61 : 157 { 0x9d -99 } : BV:8
62 : eq(53, 14) : BOOL
63 : 34 { 0x22 } : BV:8
64 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
65 : eq(53, 64) : BOOL
66 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
67 : eq(53, 66) : BOOL
68 : 21 { 0x15 } : BV:8
69 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
70 : eq(53, 69) : BOOL
71 : 4 { 0x4 } : BV:8
72 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
73 : eq(53, 72) : BOOL
74 : 175 { 0xaf -81 } : BV:8
75 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
76 : eq(53, 75) : BOOL
77 : 95 { 0x5f } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(67, 68, 81) : BV:8
83 : ite(65, 56, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : ite(60, 61, 84) : BV:8
86 : ite(58, 59, 85) : BV:8
87 : ite(55, 56, 86) : BV:8
88 : bvadd(72, 52) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 51) : BOOL
92 : eq(88, 14) : BOOL
93 : eq(88, 64) : BOOL
94 : eq(88, 66) : BOOL
95 : eq(88, 69) : BOOL
96 : eq(88, 72) : BOOL
97 : eq(88, 75) : BOOL
98 : ite(97, 77, 78) : BV:8
99 : ite(96, 74, 98) : BV:8
100 : ite(95, 71, 99) : BV:8
101 : ite(94, 68, 100) : BV:8
102 : ite(93, 56, 101) : BV:8
103 : ite(92, 63, 102) : BV:8
104 : ite(91, 61, 103) : BV:8
105 : ite(90, 59, 104) : BV:8
106 : ite(89, 56, 105) : BV:8
107 : bvadd(75, 52) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 51) : BOOL
111 : eq(107, 14) : BOOL
112 : eq(107, 64) : BOOL
113 : eq(107, 66) : BOOL
114 : eq(107, 69) : BOOL
115 : eq(107, 72) : BOOL
116 : eq(107, 75) : BOOL
117 : ite(116, 77, 78) : BV:8
118 : ite(115, 74, 117) : BV:8
119 : ite(114, 71, 118) : BV:8
120 : ite(113, 68, 119) : BV:8
121 : ite(112, 56, 120) : BV:8
122 : ite(111, 63, 121) : BV:8
123 : ite(110, 61, 122) : BV:8
124 : ite(109, 59, 123) : BV:8
125 : ite(108, 56, 124) : BV:8
126 : bvadd(64, 52) : BV:32
127 : eq(126, 54) : BOOL
128 : eq(126, 57) : BOOL
129 : eq(126, 51) : BOOL
130 : eq(126, 14) : BOOL
131 : eq(126, 64) : BOOL
132 : eq(126, 66) : BOOL
133 : eq(126, 69) : BOOL
134 : eq(126, 72) : BOOL
135 : eq(126, 75) : BOOL
136 : ite(135, 77, 78) : BV:8
137 : ite(134, 74, 136) : BV:8
138 : ite(133, 71, 137) : BV:8
139 : ite(132, 68, 138) : BV:8
140 : ite(131, 56, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 61, 141) : BV:8
143 : ite(128, 59, 142) : BV:8
144 : ite(127, 56, 143) : BV:8
145 : bvconcat(87, 106, 125, 144) : BV:32
146 : bvadd(48, 50, 145) : BV:32
147 : eq(146, 54) : BOOL
148 : eq(146, 57) : BOOL
149 : eq(146, 51) : BOOL
150 : eq(146, 14) : BOOL
151 : eq(146, 64) : BOOL
152 : eq(146, 66) : BOOL
153 : eq(146, 69) : BOOL
154 : eq(146, 72) : BOOL
155 : eq(146, 75) : BOOL
156 : ite(155, 77, 78) : BV:8
157 : ite(154, 74, 156) : BV:8
158 : ite(153, 71, 157) : BV:8
159 : ite(152, 68, 158) : BV:8
160 : ite(151, 56, 159) : BV:8
161 : ite(150, 63, 160) : BV:8
162 : ite(149, 61, 161) : BV:8
163 : ite(148, 59, 162) : BV:8
164 : ite(147, 56, 163) : BV:8
165 : 2 { 0x2 +1.23e129 } : BV:32
166 : bvadd(165, 50, 145) : BV:32
167 : eq(166, 54) : BOOL
168 : eq(166, 57) : BOOL
169 : eq(166, 51) : BOOL
170 : eq(166, 14) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 66) : BOOL
173 : eq(166, 69) : BOOL
174 : eq(166, 72) : BOOL
175 : eq(166, 75) : BOOL
176 : ite(175, 77, 78) : BV:8
177 : ite(174, 74, 176) : BV:8
178 : ite(173, 71, 177) : BV:8
179 : ite(172, 68, 178) : BV:8
180 : ite(171, 56, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 61, 181) : BV:8
183 : ite(168, 59, 182) : BV:8
184 : ite(167, 56, 183) : BV:8
185 : 1 { 0x1 +1.11e129 } : BV:32
186 : bvadd(185, 50, 145) : BV:32
187 : eq(186, 54) : BOOL
188 : eq(186, 57) : BOOL
189 : eq(186, 51) : BOOL
190 : eq(186, 14) : BOOL
191 : eq(186, 64) : BOOL
192 : eq(186, 66) : BOOL
193 : eq(186, 69) : BOOL
194 : eq(186, 72) : BOOL
195 : eq(186, 75) : BOOL
196 : ite(195, 77, 78) : BV:8
197 : ite(194, 74, 196) : BV:8
198 : ite(193, 71, 197) : BV:8
199 : ite(192, 68, 198) : BV:8
200 : ite(191, 56, 199) : BV:8
201 : ite(190, 63, 200) : BV:8
202 : ite(189, 61, 201) : BV:8
203 : ite(188, 59, 202) : BV:8
204 : ite(187, 56, 203) : BV:8
205 : bvadd(50, 145) : BV:32
206 : eq(205, 54) : BOOL
207 : eq(205, 57) : BOOL
208 : eq(205, 51) : BOOL
209 : eq(205, 14) : BOOL
210 : eq(205, 64) : BOOL
211 : eq(205, 66) : BOOL
212 : eq(205, 69) : BOOL
213 : eq(205, 72) : BOOL
214 : eq(205, 75) : BOOL
215 : ite(214, 77, 78) : BV:8
216 : ite(213, 74, 215) : BV:8
217 : ite(212, 71, 216) : BV:8
218 : ite(211, 68, 217) : BV:8
219 : ite(210, 56, 218) : BV:8
220 : ite(209, 63, 219) : BV:8
221 : ite(208, 61, 220) : BV:8
222 : ite(207, 59, 221) : BV:8
223 : ite(206, 56, 222) : BV:8
224 : bvconcat(164, 184, 204, 223) : BV:32
225 : ite(6, 3, 224) : BV:32
226 : ite(47, 224, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16683 : BV:32
2 : Lambda16684 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16679 : BV:32
2 : Lambda16680 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 188 { 0xbc -68 } : BV:8
16 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
17 : eq(12, 16) : BOOL
18 : 192 { 0xc0 -64 } : BV:8
19 : eq(12, 10) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(12, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(12, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(12, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(12, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 15, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : bvadd(32, 11) : BV:32
49 : eq(48, 13) : BOOL
50 : eq(48, 16) : BOOL
51 : eq(48, 10) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 15, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 15, 65) : BV:8
67 : bvadd(35, 11) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 16) : BOOL
70 : eq(67, 10) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 15, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 18, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : bvadd(24, 11) : BV:32
87 : eq(86, 13) : BOOL
88 : eq(86, 16) : BOOL
89 : eq(86, 10) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 15, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 18, 102) : BV:8
104 : ite(87, 15, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : bvadd(7, 9, 105) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 10) : BOOL
110 : eq(106, 21) : BOOL
111 : eq(106, 24) : BOOL
112 : eq(106, 26) : BOOL
113 : eq(106, 29) : BOOL
114 : eq(106, 32) : BOOL
115 : eq(106, 35) : BOOL
116 : ite(115, 37, 38) : BV:8
117 : ite(114, 34, 116) : BV:8
118 : ite(113, 31, 117) : BV:8
119 : ite(112, 28, 118) : BV:8
120 : ite(111, 15, 119) : BV:8
121 : ite(110, 23, 120) : BV:8
122 : ite(109, 20, 121) : BV:8
123 : ite(108, 18, 122) : BV:8
124 : ite(107, 15, 123) : BV:8
125 : 2 { 0x2 +1.23e129 } : BV:32
126 : bvadd(125, 9, 105) : BV:32
127 : eq(126, 13) : BOOL
128 : eq(126, 16) : BOOL
129 : eq(126, 10) : BOOL
130 : eq(126, 21) : BOOL
131 : eq(126, 24) : BOOL
132 : eq(126, 26) : BOOL
133 : eq(126, 29) : BOOL
134 : eq(126, 32) : BOOL
135 : eq(126, 35) : BOOL
136 : ite(135, 37, 38) : BV:8
137 : ite(134, 34, 136) : BV:8
138 : ite(133, 31, 137) : BV:8
139 : ite(132, 28, 138) : BV:8
140 : ite(131, 15, 139) : BV:8
141 : ite(130, 23, 140) : BV:8
142 : ite(129, 20, 141) : BV:8
143 : ite(128, 18, 142) : BV:8
144 : ite(127, 15, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 9, 105) : BV:32
147 : eq(146, 13) : BOOL
148 : eq(146, 16) : BOOL
149 : eq(146, 10) : BOOL
150 : eq(146, 21) : BOOL
151 : eq(146, 24) : BOOL
152 : eq(146, 26) : BOOL
153 : eq(146, 29) : BOOL
154 : eq(146, 32) : BOOL
155 : eq(146, 35) : BOOL
156 : ite(155, 37, 38) : BV:8
157 : ite(154, 34, 156) : BV:8
158 : ite(153, 31, 157) : BV:8
159 : ite(152, 28, 158) : BV:8
160 : ite(151, 15, 159) : BV:8
161 : ite(150, 23, 160) : BV:8
162 : ite(149, 20, 161) : BV:8
163 : ite(148, 18, 162) : BV:8
164 : ite(147, 15, 163) : BV:8
165 : bvadd(9, 105) : BV:32
166 : eq(165, 13) : BOOL
167 : eq(165, 16) : BOOL
168 : eq(165, 10) : BOOL
169 : eq(165, 21) : BOOL
170 : eq(165, 24) : BOOL
171 : eq(165, 26) : BOOL
172 : eq(165, 29) : BOOL
173 : eq(165, 32) : BOOL
174 : eq(165, 35) : BOOL
175 : ite(174, 37, 38) : BV:8
176 : ite(173, 34, 175) : BV:8
177 : ite(172, 31, 176) : BV:8
178 : ite(171, 28, 177) : BV:8
179 : ite(170, 15, 178) : BV:8
180 : ite(169, 23, 179) : BV:8
181 : ite(168, 20, 180) : BV:8
182 : ite(167, 18, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : bvconcat(124, 144, 164, 183) : BV:32
185 : ite(6, 3, 184) : BV:32
186 : lambda(1, 2, 185) : FUNCTION[BV:32,BV:32 -> BV:32]
187 : sym_const(186) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16690 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvmul(7, 1) : BV:32
10 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
11 : bvadd(8, 9, 10) : BV:32
12 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 188 { 0xbc -68 } : BV:8
15 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(11, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(11, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(11, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 14, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(2, 9, 10) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 18) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 17, 64) : BV:8
66 : ite(49, 14, 65) : BV:8
67 : bvadd(5, 9, 10) : BV:32
68 : eq(67, 12) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 14, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 17, 83) : BV:8
85 : ite(68, 14, 84) : BV:8
86 : bvadd(9, 10) : BV:32
87 : eq(86, 12) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 14, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 17, 102) : BV:8
104 : ite(87, 14, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : ite(6, 7, 105) : BV:32
107 : ite(3, 4, 106) : BV:32
108 : lambda(1, 107) : FUNCTION[BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16694 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvmul(4, 1) : BV:32
10 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
11 : bvadd(8, 9, 10) : BV:32
12 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 188 { 0xbc -68 } : BV:8
15 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(11, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(11, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(11, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 14, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(5, 9, 10) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 18) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 17, 64) : BV:8
66 : ite(49, 14, 65) : BV:8
67 : bvadd(2, 9, 10) : BV:32
68 : eq(67, 12) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 14, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 17, 83) : BV:8
85 : ite(68, 14, 84) : BV:8
86 : bvadd(9, 10) : BV:32
87 : eq(86, 12) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 14, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 17, 102) : BV:8
104 : ite(87, 14, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : ite(6, 7, 105) : BV:32
107 : ite(3, 4, 106) : BV:32
108 : lambda(1, 107) : FUNCTION[BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16698 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvmul(7, 1) : BV:32
10 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
11 : bvadd(8, 9, 10) : BV:32
12 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 188 { 0xbc -68 } : BV:8
15 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(11, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(11, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(11, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 14, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(2, 9, 10) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 18) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 17, 64) : BV:8
66 : ite(49, 14, 65) : BV:8
67 : bvadd(5, 9, 10) : BV:32
68 : eq(67, 12) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 14, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 17, 83) : BV:8
85 : ite(68, 14, 84) : BV:8
86 : bvadd(9, 10) : BV:32
87 : eq(86, 12) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 14, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 17, 102) : BV:8
104 : ite(87, 14, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : ite(6, 7, 105) : BV:32
107 : ite(3, 4, 106) : BV:32
108 : lambda(1, 107) : FUNCTION[BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2793932166
=counter_example_end
=global nodece 61 num_edges_traversed 1
=global nodece 61 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3.ce6752.num_edges_traversed2
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(epsilon)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce6752 b1ac881d72b39754786efabe53c66d
=input.spec-%var-x-1
1 : Lambda16745 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16748 : BV:32
18 : Lambda16746 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16747 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 188 { 0xbc -68 } : BV:8
84 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
85 : eq(80, 84) : BOOL
86 : 192 { 0xc0 -64 } : BV:8
87 : eq(80, 78) : BOOL
88 : 157 { 0x9d -99 } : BV:8
89 : eq(80, 10) : BOOL
90 : 34 { 0x22 } : BV:8
91 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
92 : eq(80, 91) : BOOL
93 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
94 : eq(80, 93) : BOOL
95 : 21 { 0x15 } : BV:8
96 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
97 : eq(80, 96) : BOOL
98 : 4 { 0x4 } : BV:8
99 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
100 : eq(80, 99) : BOOL
101 : 175 { 0xaf -81 } : BV:8
102 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
103 : eq(80, 102) : BOOL
104 : 95 { 0x5f } : BV:8
105 : 0 { 0x0 } : BV:8
106 : ite(103, 104, 105) : BV:8
107 : ite(100, 101, 106) : BV:8
108 : ite(97, 98, 107) : BV:8
109 : ite(94, 95, 108) : BV:8
110 : ite(92, 83, 109) : BV:8
111 : ite(89, 90, 110) : BV:8
112 : ite(87, 88, 111) : BV:8
113 : ite(85, 86, 112) : BV:8
114 : ite(82, 83, 113) : BV:8
115 : bvadd(99, 79) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : eq(115, 78) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 91) : BOOL
121 : eq(115, 93) : BOOL
122 : eq(115, 96) : BOOL
123 : eq(115, 99) : BOOL
124 : eq(115, 102) : BOOL
125 : ite(124, 104, 105) : BV:8
126 : ite(123, 101, 125) : BV:8
127 : ite(122, 98, 126) : BV:8
128 : ite(121, 95, 127) : BV:8
129 : ite(120, 83, 128) : BV:8
130 : ite(119, 90, 129) : BV:8
131 : ite(118, 88, 130) : BV:8
132 : ite(117, 86, 131) : BV:8
133 : ite(116, 83, 132) : BV:8
134 : bvadd(102, 79) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 78) : BOOL
138 : eq(134, 10) : BOOL
139 : eq(134, 91) : BOOL
140 : eq(134, 93) : BOOL
141 : eq(134, 96) : BOOL
142 : eq(134, 99) : BOOL
143 : eq(134, 102) : BOOL
144 : ite(143, 104, 105) : BV:8
145 : ite(142, 101, 144) : BV:8
146 : ite(141, 98, 145) : BV:8
147 : ite(140, 95, 146) : BV:8
148 : ite(139, 83, 147) : BV:8
149 : ite(138, 90, 148) : BV:8
150 : ite(137, 88, 149) : BV:8
151 : ite(136, 86, 150) : BV:8
152 : ite(135, 83, 151) : BV:8
153 : bvadd(91, 79) : BV:32
154 : eq(153, 81) : BOOL
155 : eq(153, 84) : BOOL
156 : eq(153, 78) : BOOL
157 : eq(153, 10) : BOOL
158 : eq(153, 91) : BOOL
159 : eq(153, 93) : BOOL
160 : eq(153, 96) : BOOL
161 : eq(153, 99) : BOOL
162 : eq(153, 102) : BOOL
163 : ite(162, 104, 105) : BV:8
164 : ite(161, 101, 163) : BV:8
165 : ite(160, 98, 164) : BV:8
166 : ite(159, 95, 165) : BV:8
167 : ite(158, 83, 166) : BV:8
168 : ite(157, 90, 167) : BV:8
169 : ite(156, 88, 168) : BV:8
170 : ite(155, 86, 169) : BV:8
171 : ite(154, 83, 170) : BV:8
172 : bvconcat(114, 133, 152, 171) : BV:32
173 : bvadd(75, 77, 172) : BV:32
174 : eq(173, 81) : BOOL
175 : eq(173, 84) : BOOL
176 : eq(173, 78) : BOOL
177 : eq(173, 10) : BOOL
178 : eq(173, 91) : BOOL
179 : eq(173, 93) : BOOL
180 : eq(173, 96) : BOOL
181 : eq(173, 99) : BOOL
182 : eq(173, 102) : BOOL
183 : ite(182, 104, 105) : BV:8
184 : ite(181, 101, 183) : BV:8
185 : ite(180, 98, 184) : BV:8
186 : ite(179, 95, 185) : BV:8
187 : ite(178, 83, 186) : BV:8
188 : ite(177, 90, 187) : BV:8
189 : ite(176, 88, 188) : BV:8
190 : ite(175, 86, 189) : BV:8
191 : ite(174, 83, 190) : BV:8
192 : 2 { 0x2 +1.23e129 } : BV:32
193 : bvadd(192, 77, 172) : BV:32
194 : eq(193, 81) : BOOL
195 : eq(193, 84) : BOOL
196 : eq(193, 78) : BOOL
197 : eq(193, 10) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 93) : BOOL
200 : eq(193, 96) : BOOL
201 : eq(193, 99) : BOOL
202 : eq(193, 102) : BOOL
203 : ite(202, 104, 105) : BV:8
204 : ite(201, 101, 203) : BV:8
205 : ite(200, 98, 204) : BV:8
206 : ite(199, 95, 205) : BV:8
207 : ite(198, 83, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 88, 208) : BV:8
210 : ite(195, 86, 209) : BV:8
211 : ite(194, 83, 210) : BV:8
212 : 1 { 0x1 +1.11e129 } : BV:32
213 : bvadd(212, 77, 172) : BV:32
214 : eq(213, 81) : BOOL
215 : eq(213, 84) : BOOL
216 : eq(213, 78) : BOOL
217 : eq(213, 10) : BOOL
218 : eq(213, 91) : BOOL
219 : eq(213, 93) : BOOL
220 : eq(213, 96) : BOOL
221 : eq(213, 99) : BOOL
222 : eq(213, 102) : BOOL
223 : ite(222, 104, 105) : BV:8
224 : ite(221, 101, 223) : BV:8
225 : ite(220, 98, 224) : BV:8
226 : ite(219, 95, 225) : BV:8
227 : ite(218, 83, 226) : BV:8
228 : ite(217, 90, 227) : BV:8
229 : ite(216, 88, 228) : BV:8
230 : ite(215, 86, 229) : BV:8
231 : ite(214, 83, 230) : BV:8
232 : bvadd(77, 172) : BV:32
233 : eq(232, 81) : BOOL
234 : eq(232, 84) : BOOL
235 : eq(232, 78) : BOOL
236 : eq(232, 10) : BOOL
237 : eq(232, 91) : BOOL
238 : eq(232, 93) : BOOL
239 : eq(232, 96) : BOOL
240 : eq(232, 99) : BOOL
241 : eq(232, 102) : BOOL
242 : ite(241, 104, 105) : BV:8
243 : ite(240, 101, 242) : BV:8
244 : ite(239, 98, 243) : BV:8
245 : ite(238, 95, 244) : BV:8
246 : ite(237, 83, 245) : BV:8
247 : ite(236, 90, 246) : BV:8
248 : ite(235, 88, 247) : BV:8
249 : ite(234, 86, 248) : BV:8
250 : ite(233, 83, 249) : BV:8
251 : bvconcat(191, 211, 231, 250) : BV:32
252 : ite(55, 2, 251) : BV:32
253 : ite(74, 251, 252) : BV:32
254 : ite(55, 2, 253) : BV:32
255 : lambda(52, 254) : FUNCTION[BV:32 -> BV:32]
256 : map(51, 255) : MAP[BV:32 -> BV:32]
257 : lambda(17, 256) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
258 : map(16, 257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
259 : sym_const(258) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%x
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 571850943 ] -> 0, [ 571850944; 571850944 ] -> 4, [ 571850945; 4294967287 ] -> 0, [ 4294967288; 4294967288 ] -> 188, [ 4294967289; 4294967289 ] -> 95, [ 4294967290; 4294967290 ] -> 175, [ 4294967291; 4294967291 ] -> 157, [ 4294967292; 4294967292 ] -> 188, [ 4294967293; 4294967293 ] -> 192, [ 4294967294; 4294967294 ] -> 21, [ 4294967295; 4294967295 ] -> 34, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 84772251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 84772252; 84772255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 84772256; 1782158495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1782158496; 1782158499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1782158500; 4288815235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4288815236; 4288815239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4288815240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1782158496 { 0x6a3994a0 +1.44984817e85 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4288815236 { 0xffa22084 -6152060 -1.26661729e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 84772252 { 0x50d859c +1.10563993e139 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16753 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16756 : BV:32
18 : Lambda16754 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16755 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
66 : eq(61, 65) : BOOL
67 : 192 { 0xc0 -64 } : BV:8
68 : eq(61, 59) : BOOL
69 : 157 { 0x9d -99 } : BV:8
70 : eq(61, 10) : BOOL
71 : 34 { 0x22 } : BV:8
72 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
73 : eq(61, 72) : BOOL
74 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
75 : eq(61, 74) : BOOL
76 : 21 { 0x15 } : BV:8
77 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
78 : eq(61, 77) : BOOL
79 : 4 { 0x4 } : BV:8
80 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
81 : eq(61, 80) : BOOL
82 : 175 { 0xaf -81 } : BV:8
83 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
84 : eq(61, 83) : BOOL
85 : 95 { 0x5f } : BV:8
86 : 0 { 0x0 } : BV:8
87 : ite(84, 85, 86) : BV:8
88 : ite(81, 82, 87) : BV:8
89 : ite(78, 79, 88) : BV:8
90 : ite(75, 76, 89) : BV:8
91 : ite(73, 64, 90) : BV:8
92 : ite(70, 71, 91) : BV:8
93 : ite(68, 69, 92) : BV:8
94 : ite(66, 67, 93) : BV:8
95 : ite(63, 64, 94) : BV:8
96 : bvadd(80, 60) : BV:32
97 : eq(96, 62) : BOOL
98 : eq(96, 65) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 10) : BOOL
101 : eq(96, 72) : BOOL
102 : eq(96, 74) : BOOL
103 : eq(96, 77) : BOOL
104 : eq(96, 80) : BOOL
105 : eq(96, 83) : BOOL
106 : ite(105, 85, 86) : BV:8
107 : ite(104, 82, 106) : BV:8
108 : ite(103, 79, 107) : BV:8
109 : ite(102, 76, 108) : BV:8
110 : ite(101, 64, 109) : BV:8
111 : ite(100, 71, 110) : BV:8
112 : ite(99, 69, 111) : BV:8
113 : ite(98, 67, 112) : BV:8
114 : ite(97, 64, 113) : BV:8
115 : bvadd(83, 60) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 59) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 72) : BOOL
121 : eq(115, 74) : BOOL
122 : eq(115, 77) : BOOL
123 : eq(115, 80) : BOOL
124 : eq(115, 83) : BOOL
125 : ite(124, 85, 86) : BV:8
126 : ite(123, 82, 125) : BV:8
127 : ite(122, 79, 126) : BV:8
128 : ite(121, 76, 127) : BV:8
129 : ite(120, 64, 128) : BV:8
130 : ite(119, 71, 129) : BV:8
131 : ite(118, 69, 130) : BV:8
132 : ite(117, 67, 131) : BV:8
133 : ite(116, 64, 132) : BV:8
134 : bvadd(72, 60) : BV:32
135 : eq(134, 62) : BOOL
136 : eq(134, 65) : BOOL
137 : eq(134, 59) : BOOL
138 : eq(134, 10) : BOOL
139 : eq(134, 72) : BOOL
140 : eq(134, 74) : BOOL
141 : eq(134, 77) : BOOL
142 : eq(134, 80) : BOOL
143 : eq(134, 83) : BOOL
144 : ite(143, 85, 86) : BV:8
145 : ite(142, 82, 144) : BV:8
146 : ite(141, 79, 145) : BV:8
147 : ite(140, 76, 146) : BV:8
148 : ite(139, 64, 147) : BV:8
149 : ite(138, 71, 148) : BV:8
150 : ite(137, 69, 149) : BV:8
151 : ite(136, 67, 150) : BV:8
152 : ite(135, 64, 151) : BV:8
153 : bvconcat(95, 114, 133, 152) : BV:32
154 : bvadd(56, 58, 153) : BV:32
155 : eq(154, 62) : BOOL
156 : eq(154, 65) : BOOL
157 : eq(154, 59) : BOOL
158 : eq(154, 10) : BOOL
159 : eq(154, 72) : BOOL
160 : eq(154, 74) : BOOL
161 : eq(154, 77) : BOOL
162 : eq(154, 80) : BOOL
163 : eq(154, 83) : BOOL
164 : ite(163, 85, 86) : BV:8
165 : ite(162, 82, 164) : BV:8
166 : ite(161, 79, 165) : BV:8
167 : ite(160, 76, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 71, 168) : BV:8
170 : ite(157, 69, 169) : BV:8
171 : ite(156, 67, 170) : BV:8
172 : ite(155, 64, 171) : BV:8
173 : 2 { 0x2 +1.23e129 } : BV:32
174 : bvadd(173, 58, 153) : BV:32
175 : eq(174, 62) : BOOL
176 : eq(174, 65) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 10) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 74) : BOOL
181 : eq(174, 77) : BOOL
182 : eq(174, 80) : BOOL
183 : eq(174, 83) : BOOL
184 : ite(183, 85, 86) : BV:8
185 : ite(182, 82, 184) : BV:8
186 : ite(181, 79, 185) : BV:8
187 : ite(180, 76, 186) : BV:8
188 : ite(179, 64, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 69, 189) : BV:8
191 : ite(176, 67, 190) : BV:8
192 : ite(175, 64, 191) : BV:8
193 : 1 { 0x1 +1.11e129 } : BV:32
194 : bvadd(193, 58, 153) : BV:32
195 : eq(194, 62) : BOOL
196 : eq(194, 65) : BOOL
197 : eq(194, 59) : BOOL
198 : eq(194, 10) : BOOL
199 : eq(194, 72) : BOOL
200 : eq(194, 74) : BOOL
201 : eq(194, 77) : BOOL
202 : eq(194, 80) : BOOL
203 : eq(194, 83) : BOOL
204 : ite(203, 85, 86) : BV:8
205 : ite(202, 82, 204) : BV:8
206 : ite(201, 79, 205) : BV:8
207 : ite(200, 76, 206) : BV:8
208 : ite(199, 64, 207) : BV:8
209 : ite(198, 71, 208) : BV:8
210 : ite(197, 69, 209) : BV:8
211 : ite(196, 67, 210) : BV:8
212 : ite(195, 64, 211) : BV:8
213 : bvadd(58, 153) : BV:32
214 : eq(213, 62) : BOOL
215 : eq(213, 65) : BOOL
216 : eq(213, 59) : BOOL
217 : eq(213, 10) : BOOL
218 : eq(213, 72) : BOOL
219 : eq(213, 74) : BOOL
220 : eq(213, 77) : BOOL
221 : eq(213, 80) : BOOL
222 : eq(213, 83) : BOOL
223 : ite(222, 85, 86) : BV:8
224 : ite(221, 82, 223) : BV:8
225 : ite(220, 79, 224) : BV:8
226 : ite(219, 76, 225) : BV:8
227 : ite(218, 64, 226) : BV:8
228 : ite(217, 71, 227) : BV:8
229 : ite(216, 69, 228) : BV:8
230 : ite(215, 67, 229) : BV:8
231 : ite(214, 64, 230) : BV:8
232 : bvconcat(172, 192, 212, 231) : BV:32
233 : ite(55, 2, 232) : BV:32
234 : lambda(52, 233) : FUNCTION[BV:32 -> BV:32]
235 : map(51, 234) : MAP[BV:32 -> BV:32]
236 : lambda(17, 235) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
237 : map(16, 236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
238 : sym_const(237) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : Lambda16750 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 511 { 0x1ff +1.6091e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 512 { 0x200 +1.6103e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16751 : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(19, 22) : BOOL
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvmul(24, 19) : BV:32
27 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
28 : bvadd(25, 26, 27) : BV:32
29 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
30 : eq(28, 29) : BOOL
31 : 188 { 0xbc -68 } : BV:8
32 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
33 : eq(28, 32) : BOOL
34 : 192 { 0xc0 -64 } : BV:8
35 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
36 : eq(28, 35) : BOOL
37 : 157 { 0x9d -99 } : BV:8
38 : eq(28, 12) : BOOL
39 : 34 { 0x22 } : BV:8
40 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
41 : eq(28, 40) : BOOL
42 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
43 : eq(28, 42) : BOOL
44 : 21 { 0x15 } : BV:8
45 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
46 : eq(28, 45) : BOOL
47 : 4 { 0x4 } : BV:8
48 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
49 : eq(28, 48) : BOOL
50 : 175 { 0xaf -81 } : BV:8
51 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
52 : eq(28, 51) : BOOL
53 : 95 { 0x5f } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(41, 31, 58) : BV:8
60 : ite(38, 39, 59) : BV:8
61 : ite(36, 37, 60) : BV:8
62 : ite(33, 34, 61) : BV:8
63 : ite(30, 31, 62) : BV:8
64 : bvadd(20, 26, 27) : BV:32
65 : eq(64, 29) : BOOL
66 : eq(64, 32) : BOOL
67 : eq(64, 35) : BOOL
68 : eq(64, 12) : BOOL
69 : eq(64, 40) : BOOL
70 : eq(64, 42) : BOOL
71 : eq(64, 45) : BOOL
72 : eq(64, 48) : BOOL
73 : eq(64, 51) : BOOL
74 : ite(73, 53, 54) : BV:8
75 : ite(72, 50, 74) : BV:8
76 : ite(71, 47, 75) : BV:8
77 : ite(70, 44, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 39, 78) : BV:8
80 : ite(67, 37, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : bvadd(22, 26, 27) : BV:32
84 : eq(83, 29) : BOOL
85 : eq(83, 32) : BOOL
86 : eq(83, 35) : BOOL
87 : eq(83, 12) : BOOL
88 : eq(83, 40) : BOOL
89 : eq(83, 42) : BOOL
90 : eq(83, 45) : BOOL
91 : eq(83, 48) : BOOL
92 : eq(83, 51) : BOOL
93 : ite(92, 53, 54) : BV:8
94 : ite(91, 50, 93) : BV:8
95 : ite(90, 47, 94) : BV:8
96 : ite(89, 44, 95) : BV:8
97 : ite(88, 31, 96) : BV:8
98 : ite(87, 39, 97) : BV:8
99 : ite(86, 37, 98) : BV:8
100 : ite(85, 34, 99) : BV:8
101 : ite(84, 31, 100) : BV:8
102 : bvadd(26, 27) : BV:32
103 : eq(102, 29) : BOOL
104 : eq(102, 32) : BOOL
105 : eq(102, 35) : BOOL
106 : eq(102, 12) : BOOL
107 : eq(102, 40) : BOOL
108 : eq(102, 42) : BOOL
109 : eq(102, 45) : BOOL
110 : eq(102, 48) : BOOL
111 : eq(102, 51) : BOOL
112 : ite(111, 53, 54) : BV:8
113 : ite(110, 50, 112) : BV:8
114 : ite(109, 47, 113) : BV:8
115 : ite(108, 44, 114) : BV:8
116 : ite(107, 31, 115) : BV:8
117 : ite(106, 39, 116) : BV:8
118 : ite(105, 37, 117) : BV:8
119 : ite(104, 34, 118) : BV:8
120 : ite(103, 31, 119) : BV:8
121 : bvconcat(63, 82, 101, 120) : BV:32
122 : ite(23, 24, 121) : BV:32
123 : ite(21, 4, 122) : BV:32
124 : lambda(19, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(18, 124) : MAP[BV:32 -> BV:32]
126 : sum(1, 2, 125) : SUM[UNIT,MAP[BV:32 -> BV:32]]
127 : sym_const(126) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 590647698 { 0x23349192 +1.41069245e199 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16758 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16759 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(17, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 17) : BV:32
25 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 188 { 0xbc -68 } : BV:8
30 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 192 { 0xc0 -64 } : BV:8
33 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 157 { 0x9d -99 } : BV:8
36 : eq(26, 10) : BOOL
37 : 34 { 0x22 } : BV:8
38 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
41 : eq(26, 40) : BOOL
42 : 21 { 0x15 } : BV:8
43 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
44 : eq(26, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
47 : eq(26, 46) : BOOL
48 : 175 { 0xaf -81 } : BV:8
49 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
50 : eq(26, 49) : BOOL
51 : 95 { 0x5f } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(39, 29, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(34, 35, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(28, 29, 60) : BV:8
62 : bvadd(21, 24, 25) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : eq(62, 33) : BOOL
66 : eq(62, 10) : BOOL
67 : eq(62, 38) : BOOL
68 : eq(62, 40) : BOOL
69 : eq(62, 43) : BOOL
70 : eq(62, 46) : BOOL
71 : eq(62, 49) : BOOL
72 : ite(71, 51, 52) : BV:8
73 : ite(70, 48, 72) : BV:8
74 : ite(69, 45, 73) : BV:8
75 : ite(68, 42, 74) : BV:8
76 : ite(67, 29, 75) : BV:8
77 : ite(66, 37, 76) : BV:8
78 : ite(65, 35, 77) : BV:8
79 : ite(64, 32, 78) : BV:8
80 : ite(63, 29, 79) : BV:8
81 : bvadd(18, 24, 25) : BV:32
82 : eq(81, 27) : BOOL
83 : eq(81, 30) : BOOL
84 : eq(81, 33) : BOOL
85 : eq(81, 10) : BOOL
86 : eq(81, 38) : BOOL
87 : eq(81, 40) : BOOL
88 : eq(81, 43) : BOOL
89 : eq(81, 46) : BOOL
90 : eq(81, 49) : BOOL
91 : ite(90, 51, 52) : BV:8
92 : ite(89, 48, 91) : BV:8
93 : ite(88, 45, 92) : BV:8
94 : ite(87, 42, 93) : BV:8
95 : ite(86, 29, 94) : BV:8
96 : ite(85, 37, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : ite(82, 29, 98) : BV:8
100 : bvadd(24, 25) : BV:32
101 : eq(100, 27) : BOOL
102 : eq(100, 30) : BOOL
103 : eq(100, 33) : BOOL
104 : eq(100, 10) : BOOL
105 : eq(100, 38) : BOOL
106 : eq(100, 40) : BOOL
107 : eq(100, 43) : BOOL
108 : eq(100, 46) : BOOL
109 : eq(100, 49) : BOOL
110 : ite(109, 51, 52) : BV:8
111 : ite(108, 48, 110) : BV:8
112 : ite(107, 45, 111) : BV:8
113 : ite(106, 42, 112) : BV:8
114 : ite(105, 29, 113) : BV:8
115 : ite(104, 37, 114) : BV:8
116 : ite(103, 35, 115) : BV:8
117 : ite(102, 32, 116) : BV:8
118 : ite(101, 29, 117) : BV:8
119 : bvconcat(61, 80, 99, 118) : BV:32
120 : ite(22, 2, 119) : BV:32
121 : ite(19, 20, 120) : BV:32
122 : lambda(17, 121) : FUNCTION[BV:32 -> BV:32]
123 : map(16, 122) : MAP[BV:32 -> BV:32]
124 : sym_const(123) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16761 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16762 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(22, 17) : BV:32
25 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 188 { 0xbc -68 } : BV:8
30 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 192 { 0xc0 -64 } : BV:8
33 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
34 : eq(26, 33) : BOOL
35 : 157 { 0x9d -99 } : BV:8
36 : eq(26, 10) : BOOL
37 : 34 { 0x22 } : BV:8
38 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
39 : eq(26, 38) : BOOL
40 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
41 : eq(26, 40) : BOOL
42 : 21 { 0x15 } : BV:8
43 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
44 : eq(26, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
47 : eq(26, 46) : BOOL
48 : 175 { 0xaf -81 } : BV:8
49 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
50 : eq(26, 49) : BOOL
51 : 95 { 0x5f } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(39, 29, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(34, 35, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(28, 29, 60) : BV:8
62 : bvadd(18, 24, 25) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : eq(62, 33) : BOOL
66 : eq(62, 10) : BOOL
67 : eq(62, 38) : BOOL
68 : eq(62, 40) : BOOL
69 : eq(62, 43) : BOOL
70 : eq(62, 46) : BOOL
71 : eq(62, 49) : BOOL
72 : ite(71, 51, 52) : BV:8
73 : ite(70, 48, 72) : BV:8
74 : ite(69, 45, 73) : BV:8
75 : ite(68, 42, 74) : BV:8
76 : ite(67, 29, 75) : BV:8
77 : ite(66, 37, 76) : BV:8
78 : ite(65, 35, 77) : BV:8
79 : ite(64, 32, 78) : BV:8
80 : ite(63, 29, 79) : BV:8
81 : bvadd(20, 24, 25) : BV:32
82 : eq(81, 27) : BOOL
83 : eq(81, 30) : BOOL
84 : eq(81, 33) : BOOL
85 : eq(81, 10) : BOOL
86 : eq(81, 38) : BOOL
87 : eq(81, 40) : BOOL
88 : eq(81, 43) : BOOL
89 : eq(81, 46) : BOOL
90 : eq(81, 49) : BOOL
91 : ite(90, 51, 52) : BV:8
92 : ite(89, 48, 91) : BV:8
93 : ite(88, 45, 92) : BV:8
94 : ite(87, 42, 93) : BV:8
95 : ite(86, 29, 94) : BV:8
96 : ite(85, 37, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : ite(82, 29, 98) : BV:8
100 : bvadd(24, 25) : BV:32
101 : eq(100, 27) : BOOL
102 : eq(100, 30) : BOOL
103 : eq(100, 33) : BOOL
104 : eq(100, 10) : BOOL
105 : eq(100, 38) : BOOL
106 : eq(100, 40) : BOOL
107 : eq(100, 43) : BOOL
108 : eq(100, 46) : BOOL
109 : eq(100, 49) : BOOL
110 : ite(109, 51, 52) : BV:8
111 : ite(108, 48, 110) : BV:8
112 : ite(107, 45, 111) : BV:8
113 : ite(106, 42, 112) : BV:8
114 : ite(105, 29, 113) : BV:8
115 : ite(104, 37, 114) : BV:8
116 : ite(103, 35, 115) : BV:8
117 : ite(102, 32, 116) : BV:8
118 : ite(101, 29, 117) : BV:8
119 : bvconcat(61, 80, 99, 118) : BV:32
120 : ite(21, 22, 119) : BV:32
121 : ite(19, 2, 120) : BV:32
122 : lambda(17, 121) : FUNCTION[BV:32 -> BV:32]
123 : map(16, 122) : MAP[BV:32 -> BV:32]
124 : sym_const(123) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2129437899 { 0x7eeca4cb +1.84877908e126 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4288815236 { 0xffa22084 -6152060 -1.26661729e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4288815239 { 0xffa22087 -6152057 -1.26661765e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 84772252 { 0x50d859c +1.10563993e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 84772255 { 0x50d859f +1.10564029e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1782158496 { 0x6a3994a0 +1.44984817e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1782158499 { 0x6a3994a3 +1.44984853e85 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16672 : BV:32
2 : Lambda16673 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16677 : BV:32
2 : Lambda16678 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 511 { 0x1ff +1.6091e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 512 { 0x200 +1.6103e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 513 { 0x201 +1.6115e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 188 { 0xbc -68 } : BV:8
57 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
58 : eq(53, 57) : BOOL
59 : 192 { 0xc0 -64 } : BV:8
60 : eq(53, 51) : BOOL
61 : 157 { 0x9d -99 } : BV:8
62 : eq(53, 14) : BOOL
63 : 34 { 0x22 } : BV:8
64 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
65 : eq(53, 64) : BOOL
66 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
67 : eq(53, 66) : BOOL
68 : 21 { 0x15 } : BV:8
69 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
70 : eq(53, 69) : BOOL
71 : 4 { 0x4 } : BV:8
72 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
73 : eq(53, 72) : BOOL
74 : 175 { 0xaf -81 } : BV:8
75 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
76 : eq(53, 75) : BOOL
77 : 95 { 0x5f } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(67, 68, 81) : BV:8
83 : ite(65, 56, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : ite(60, 61, 84) : BV:8
86 : ite(58, 59, 85) : BV:8
87 : ite(55, 56, 86) : BV:8
88 : bvadd(72, 52) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 51) : BOOL
92 : eq(88, 14) : BOOL
93 : eq(88, 64) : BOOL
94 : eq(88, 66) : BOOL
95 : eq(88, 69) : BOOL
96 : eq(88, 72) : BOOL
97 : eq(88, 75) : BOOL
98 : ite(97, 77, 78) : BV:8
99 : ite(96, 74, 98) : BV:8
100 : ite(95, 71, 99) : BV:8
101 : ite(94, 68, 100) : BV:8
102 : ite(93, 56, 101) : BV:8
103 : ite(92, 63, 102) : BV:8
104 : ite(91, 61, 103) : BV:8
105 : ite(90, 59, 104) : BV:8
106 : ite(89, 56, 105) : BV:8
107 : bvadd(75, 52) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 51) : BOOL
111 : eq(107, 14) : BOOL
112 : eq(107, 64) : BOOL
113 : eq(107, 66) : BOOL
114 : eq(107, 69) : BOOL
115 : eq(107, 72) : BOOL
116 : eq(107, 75) : BOOL
117 : ite(116, 77, 78) : BV:8
118 : ite(115, 74, 117) : BV:8
119 : ite(114, 71, 118) : BV:8
120 : ite(113, 68, 119) : BV:8
121 : ite(112, 56, 120) : BV:8
122 : ite(111, 63, 121) : BV:8
123 : ite(110, 61, 122) : BV:8
124 : ite(109, 59, 123) : BV:8
125 : ite(108, 56, 124) : BV:8
126 : bvadd(64, 52) : BV:32
127 : eq(126, 54) : BOOL
128 : eq(126, 57) : BOOL
129 : eq(126, 51) : BOOL
130 : eq(126, 14) : BOOL
131 : eq(126, 64) : BOOL
132 : eq(126, 66) : BOOL
133 : eq(126, 69) : BOOL
134 : eq(126, 72) : BOOL
135 : eq(126, 75) : BOOL
136 : ite(135, 77, 78) : BV:8
137 : ite(134, 74, 136) : BV:8
138 : ite(133, 71, 137) : BV:8
139 : ite(132, 68, 138) : BV:8
140 : ite(131, 56, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 61, 141) : BV:8
143 : ite(128, 59, 142) : BV:8
144 : ite(127, 56, 143) : BV:8
145 : bvconcat(87, 106, 125, 144) : BV:32
146 : bvadd(48, 50, 145) : BV:32
147 : eq(146, 54) : BOOL
148 : eq(146, 57) : BOOL
149 : eq(146, 51) : BOOL
150 : eq(146, 14) : BOOL
151 : eq(146, 64) : BOOL
152 : eq(146, 66) : BOOL
153 : eq(146, 69) : BOOL
154 : eq(146, 72) : BOOL
155 : eq(146, 75) : BOOL
156 : ite(155, 77, 78) : BV:8
157 : ite(154, 74, 156) : BV:8
158 : ite(153, 71, 157) : BV:8
159 : ite(152, 68, 158) : BV:8
160 : ite(151, 56, 159) : BV:8
161 : ite(150, 63, 160) : BV:8
162 : ite(149, 61, 161) : BV:8
163 : ite(148, 59, 162) : BV:8
164 : ite(147, 56, 163) : BV:8
165 : 2 { 0x2 +1.23e129 } : BV:32
166 : bvadd(165, 50, 145) : BV:32
167 : eq(166, 54) : BOOL
168 : eq(166, 57) : BOOL
169 : eq(166, 51) : BOOL
170 : eq(166, 14) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 66) : BOOL
173 : eq(166, 69) : BOOL
174 : eq(166, 72) : BOOL
175 : eq(166, 75) : BOOL
176 : ite(175, 77, 78) : BV:8
177 : ite(174, 74, 176) : BV:8
178 : ite(173, 71, 177) : BV:8
179 : ite(172, 68, 178) : BV:8
180 : ite(171, 56, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 61, 181) : BV:8
183 : ite(168, 59, 182) : BV:8
184 : ite(167, 56, 183) : BV:8
185 : 1 { 0x1 +1.11e129 } : BV:32
186 : bvadd(185, 50, 145) : BV:32
187 : eq(186, 54) : BOOL
188 : eq(186, 57) : BOOL
189 : eq(186, 51) : BOOL
190 : eq(186, 14) : BOOL
191 : eq(186, 64) : BOOL
192 : eq(186, 66) : BOOL
193 : eq(186, 69) : BOOL
194 : eq(186, 72) : BOOL
195 : eq(186, 75) : BOOL
196 : ite(195, 77, 78) : BV:8
197 : ite(194, 74, 196) : BV:8
198 : ite(193, 71, 197) : BV:8
199 : ite(192, 68, 198) : BV:8
200 : ite(191, 56, 199) : BV:8
201 : ite(190, 63, 200) : BV:8
202 : ite(189, 61, 201) : BV:8
203 : ite(188, 59, 202) : BV:8
204 : ite(187, 56, 203) : BV:8
205 : bvadd(50, 145) : BV:32
206 : eq(205, 54) : BOOL
207 : eq(205, 57) : BOOL
208 : eq(205, 51) : BOOL
209 : eq(205, 14) : BOOL
210 : eq(205, 64) : BOOL
211 : eq(205, 66) : BOOL
212 : eq(205, 69) : BOOL
213 : eq(205, 72) : BOOL
214 : eq(205, 75) : BOOL
215 : ite(214, 77, 78) : BV:8
216 : ite(213, 74, 215) : BV:8
217 : ite(212, 71, 216) : BV:8
218 : ite(211, 68, 217) : BV:8
219 : ite(210, 56, 218) : BV:8
220 : ite(209, 63, 219) : BV:8
221 : ite(208, 61, 220) : BV:8
222 : ite(207, 59, 221) : BV:8
223 : ite(206, 56, 222) : BV:8
224 : bvconcat(164, 184, 204, 223) : BV:32
225 : ite(6, 3, 224) : BV:32
226 : ite(47, 224, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16683 : BV:32
2 : Lambda16684 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16679 : BV:32
2 : Lambda16680 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 188 { 0xbc -68 } : BV:8
16 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
17 : eq(12, 16) : BOOL
18 : 192 { 0xc0 -64 } : BV:8
19 : eq(12, 10) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(12, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(12, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(12, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(12, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 15, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : bvadd(32, 11) : BV:32
49 : eq(48, 13) : BOOL
50 : eq(48, 16) : BOOL
51 : eq(48, 10) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 15, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 15, 65) : BV:8
67 : bvadd(35, 11) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 16) : BOOL
70 : eq(67, 10) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 15, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 18, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : bvadd(24, 11) : BV:32
87 : eq(86, 13) : BOOL
88 : eq(86, 16) : BOOL
89 : eq(86, 10) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 15, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 18, 102) : BV:8
104 : ite(87, 15, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : bvadd(7, 9, 105) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 10) : BOOL
110 : eq(106, 21) : BOOL
111 : eq(106, 24) : BOOL
112 : eq(106, 26) : BOOL
113 : eq(106, 29) : BOOL
114 : eq(106, 32) : BOOL
115 : eq(106, 35) : BOOL
116 : ite(115, 37, 38) : BV:8
117 : ite(114, 34, 116) : BV:8
118 : ite(113, 31, 117) : BV:8
119 : ite(112, 28, 118) : BV:8
120 : ite(111, 15, 119) : BV:8
121 : ite(110, 23, 120) : BV:8
122 : ite(109, 20, 121) : BV:8
123 : ite(108, 18, 122) : BV:8
124 : ite(107, 15, 123) : BV:8
125 : 2 { 0x2 +1.23e129 } : BV:32
126 : bvadd(125, 9, 105) : BV:32
127 : eq(126, 13) : BOOL
128 : eq(126, 16) : BOOL
129 : eq(126, 10) : BOOL
130 : eq(126, 21) : BOOL
131 : eq(126, 24) : BOOL
132 : eq(126, 26) : BOOL
133 : eq(126, 29) : BOOL
134 : eq(126, 32) : BOOL
135 : eq(126, 35) : BOOL
136 : ite(135, 37, 38) : BV:8
137 : ite(134, 34, 136) : BV:8
138 : ite(133, 31, 137) : BV:8
139 : ite(132, 28, 138) : BV:8
140 : ite(131, 15, 139) : BV:8
141 : ite(130, 23, 140) : BV:8
142 : ite(129, 20, 141) : BV:8
143 : ite(128, 18, 142) : BV:8
144 : ite(127, 15, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 9, 105) : BV:32
147 : eq(146, 13) : BOOL
148 : eq(146, 16) : BOOL
149 : eq(146, 10) : BOOL
150 : eq(146, 21) : BOOL
151 : eq(146, 24) : BOOL
152 : eq(146, 26) : BOOL
153 : eq(146, 29) : BOOL
154 : eq(146, 32) : BOOL
155 : eq(146, 35) : BOOL
156 : ite(155, 37, 38) : BV:8
157 : ite(154, 34, 156) : BV:8
158 : ite(153, 31, 157) : BV:8
159 : ite(152, 28, 158) : BV:8
160 : ite(151, 15, 159) : BV:8
161 : ite(150, 23, 160) : BV:8
162 : ite(149, 20, 161) : BV:8
163 : ite(148, 18, 162) : BV:8
164 : ite(147, 15, 163) : BV:8
165 : bvadd(9, 105) : BV:32
166 : eq(165, 13) : BOOL
167 : eq(165, 16) : BOOL
168 : eq(165, 10) : BOOL
169 : eq(165, 21) : BOOL
170 : eq(165, 24) : BOOL
171 : eq(165, 26) : BOOL
172 : eq(165, 29) : BOOL
173 : eq(165, 32) : BOOL
174 : eq(165, 35) : BOOL
175 : ite(174, 37, 38) : BV:8
176 : ite(173, 34, 175) : BV:8
177 : ite(172, 31, 176) : BV:8
178 : ite(171, 28, 177) : BV:8
179 : ite(170, 15, 178) : BV:8
180 : ite(169, 23, 179) : BV:8
181 : ite(168, 20, 180) : BV:8
182 : ite(167, 18, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : bvconcat(124, 144, 164, 183) : BV:32
185 : ite(6, 3, 184) : BV:32
186 : lambda(1, 2, 185) : FUNCTION[BV:32,BV:32 -> BV:32]
187 : sym_const(186) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16690 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvmul(7, 1) : BV:32
10 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
11 : bvadd(8, 9, 10) : BV:32
12 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 188 { 0xbc -68 } : BV:8
15 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(11, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(11, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(11, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 14, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(2, 9, 10) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 18) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 17, 64) : BV:8
66 : ite(49, 14, 65) : BV:8
67 : bvadd(5, 9, 10) : BV:32
68 : eq(67, 12) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 14, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 17, 83) : BV:8
85 : ite(68, 14, 84) : BV:8
86 : bvadd(9, 10) : BV:32
87 : eq(86, 12) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 14, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 17, 102) : BV:8
104 : ite(87, 14, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : ite(6, 7, 105) : BV:32
107 : ite(3, 4, 106) : BV:32
108 : lambda(1, 107) : FUNCTION[BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16694 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvmul(4, 1) : BV:32
10 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
11 : bvadd(8, 9, 10) : BV:32
12 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 188 { 0xbc -68 } : BV:8
15 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(11, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(11, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(11, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 14, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(5, 9, 10) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 18) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 17, 64) : BV:8
66 : ite(49, 14, 65) : BV:8
67 : bvadd(2, 9, 10) : BV:32
68 : eq(67, 12) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 14, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 17, 83) : BV:8
85 : ite(68, 14, 84) : BV:8
86 : bvadd(9, 10) : BV:32
87 : eq(86, 12) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 14, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 17, 102) : BV:8
104 : ite(87, 14, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : ite(6, 7, 105) : BV:32
107 : ite(3, 4, 106) : BV:32
108 : lambda(1, 107) : FUNCTION[BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16698 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvmul(7, 1) : BV:32
10 : 571850940 { 0x2215c0bc +1.16994428e197 } : BV:32
11 : bvadd(8, 9, 10) : BV:32
12 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 188 { 0xbc -68 } : BV:8
15 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 157 { 0x9d -99 } : BV:8
21 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
27 : eq(11, 26) : BOOL
28 : 21 { 0x15 } : BV:8
29 : 571850944 { 0x2215c0c0 +1.16994476e197 } : BV:32
30 : eq(11, 29) : BOOL
31 : 4 { 0x4 } : BV:8
32 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 175 { 0xaf -81 } : BV:8
35 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
36 : eq(11, 35) : BOOL
37 : 95 { 0x5f } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(25, 14, 42) : BV:8
44 : ite(22, 23, 43) : BV:8
45 : ite(19, 20, 44) : BV:8
46 : ite(16, 17, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(2, 9, 10) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 18) : BOOL
52 : eq(48, 21) : BOOL
53 : eq(48, 24) : BOOL
54 : eq(48, 26) : BOOL
55 : eq(48, 29) : BOOL
56 : eq(48, 32) : BOOL
57 : eq(48, 35) : BOOL
58 : ite(57, 37, 38) : BV:8
59 : ite(56, 34, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 28, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 23, 62) : BV:8
64 : ite(51, 20, 63) : BV:8
65 : ite(50, 17, 64) : BV:8
66 : ite(49, 14, 65) : BV:8
67 : bvadd(5, 9, 10) : BV:32
68 : eq(67, 12) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : eq(67, 26) : BOOL
74 : eq(67, 29) : BOOL
75 : eq(67, 32) : BOOL
76 : eq(67, 35) : BOOL
77 : ite(76, 37, 38) : BV:8
78 : ite(75, 34, 77) : BV:8
79 : ite(74, 31, 78) : BV:8
80 : ite(73, 28, 79) : BV:8
81 : ite(72, 14, 80) : BV:8
82 : ite(71, 23, 81) : BV:8
83 : ite(70, 20, 82) : BV:8
84 : ite(69, 17, 83) : BV:8
85 : ite(68, 14, 84) : BV:8
86 : bvadd(9, 10) : BV:32
87 : eq(86, 12) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 26) : BOOL
93 : eq(86, 29) : BOOL
94 : eq(86, 32) : BOOL
95 : eq(86, 35) : BOOL
96 : ite(95, 37, 38) : BV:8
97 : ite(94, 34, 96) : BV:8
98 : ite(93, 31, 97) : BV:8
99 : ite(92, 28, 98) : BV:8
100 : ite(91, 14, 99) : BV:8
101 : ite(90, 23, 100) : BV:8
102 : ite(89, 20, 101) : BV:8
103 : ite(88, 17, 102) : BV:8
104 : ite(87, 14, 103) : BV:8
105 : bvconcat(47, 66, 85, 104) : BV:32
106 : ite(6, 7, 105) : BV:32
107 : ite(3, 4, 106) : BV:32
108 : lambda(1, 107) : FUNCTION[BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2793932166
=counter_example_end
=global nodece 62 num_edges_traversed 2
=global nodece 62 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 63
=global nodece 63 nodece z3v487.ce6701.num_edges_traversed1
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3v487.ce6701 241bab40264ec51adfb5bb2fd6023bb
=input.spec-%var-x-1
1 : Lambda16778 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16781 : BV:32
18 : Lambda16779 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16780 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
61 : eq(59, 60) : BOOL
62 : 254 { 0xfe -2 } : BV:8
63 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
64 : eq(59, 63) : BOOL
65 : 191 { 0xbf -65 } : BV:8
66 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
67 : eq(59, 66) : BOOL
68 : 64 { 0x40 } : BV:8
69 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
70 : eq(59, 69) : BOOL
71 : 55 { 0x37 } : BV:8
72 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
73 : eq(59, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
82 : bvadd(81, 58) : BV:32
83 : eq(82, 60) : BOOL
84 : eq(82, 63) : BOOL
85 : eq(82, 66) : BOOL
86 : eq(82, 69) : BOOL
87 : eq(82, 72) : BOOL
88 : ite(87, 74, 75) : BV:8
89 : ite(86, 71, 88) : BV:8
90 : ite(85, 68, 89) : BV:8
91 : ite(84, 65, 90) : BV:8
92 : ite(83, 62, 91) : BV:8
93 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
94 : bvadd(93, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : ite(99, 74, 75) : BV:8
101 : ite(98, 71, 100) : BV:8
102 : ite(97, 68, 101) : BV:8
103 : ite(96, 65, 102) : BV:8
104 : ite(95, 62, 103) : BV:8
105 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
106 : bvadd(105, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 63) : BOOL
109 : eq(106, 66) : BOOL
110 : eq(106, 69) : BOOL
111 : eq(106, 72) : BOOL
112 : ite(111, 74, 75) : BV:8
113 : ite(110, 71, 112) : BV:8
114 : ite(109, 68, 113) : BV:8
115 : ite(108, 65, 114) : BV:8
116 : ite(107, 62, 115) : BV:8
117 : bvconcat(80, 92, 104, 116) : BV:32
118 : bvadd(34, 56, 117) : BV:32
119 : eq(118, 60) : BOOL
120 : eq(118, 63) : BOOL
121 : eq(118, 66) : BOOL
122 : eq(118, 69) : BOOL
123 : eq(118, 72) : BOOL
124 : ite(123, 74, 75) : BV:8
125 : ite(122, 71, 124) : BV:8
126 : ite(121, 68, 125) : BV:8
127 : ite(120, 65, 126) : BV:8
128 : ite(119, 62, 127) : BV:8
129 : 2 { 0x2 +1.23e129 } : BV:32
130 : bvadd(129, 56, 117) : BV:32
131 : eq(130, 60) : BOOL
132 : eq(130, 63) : BOOL
133 : eq(130, 66) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : ite(135, 74, 75) : BV:8
137 : ite(134, 71, 136) : BV:8
138 : ite(133, 68, 137) : BV:8
139 : ite(132, 65, 138) : BV:8
140 : ite(131, 62, 139) : BV:8
141 : 1 { 0x1 +1.11e129 } : BV:32
142 : bvadd(141, 56, 117) : BV:32
143 : eq(142, 60) : BOOL
144 : eq(142, 63) : BOOL
145 : eq(142, 66) : BOOL
146 : eq(142, 69) : BOOL
147 : eq(142, 72) : BOOL
148 : ite(147, 74, 75) : BV:8
149 : ite(146, 71, 148) : BV:8
150 : ite(145, 68, 149) : BV:8
151 : ite(144, 65, 150) : BV:8
152 : ite(143, 62, 151) : BV:8
153 : bvadd(56, 117) : BV:32
154 : eq(153, 60) : BOOL
155 : eq(153, 63) : BOOL
156 : eq(153, 66) : BOOL
157 : eq(153, 69) : BOOL
158 : eq(153, 72) : BOOL
159 : ite(158, 74, 75) : BV:8
160 : ite(157, 71, 159) : BV:8
161 : ite(156, 68, 160) : BV:8
162 : ite(155, 65, 161) : BV:8
163 : ite(154, 62, 162) : BV:8
164 : bvconcat(128, 140, 152, 163) : BV:32
165 : ite(55, 2, 164) : BV:32
166 : lambda(52, 165) : FUNCTION[BV:32 -> BV:32]
167 : map(51, 166) : MAP[BV:32 -> BV:32]
168 : lambda(17, 167) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
169 : map(16, 168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
170 : sym_const(169) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 134742011 ] -> 0, [ 134742012; 134742012 ] -> 64, [ 134742013; 134742013 ] -> 254, [ 134742014; 134742014 ] -> 191, [ 134742015; 134742015 ] -> 55, [ 134742016; 935329347 ] -> 0, [ 935329348; 935329348 ] -> 1, [ 935329349; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 138457151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 138457152; 138457155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 138457156; 675304451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 675304452; 675304455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 675304456; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 138457152 { 0x840b040 +1.50537872e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 675304452 { 0x28405404 +1.50256395e209 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16786 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16789 : BV:32
18 : Lambda16787 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16788 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(2, 52) : BOOL
57 : bvule(52, 34) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(37, 52) : BOOL
60 : bvule(52, 37) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(41, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 41, 41) : BV:32
66 : ite(61, 37, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(22, 27) : BOOL
72 : ite(71, 13, 13) : BOOL
73 : ite(21, 7, 72) : BOOL
74 : and(70, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
80 : eq(78, 79) : BOOL
81 : 254 { 0xfe -2 } : BV:8
82 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
83 : eq(78, 82) : BOOL
84 : 191 { 0xbf -65 } : BV:8
85 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
86 : eq(78, 85) : BOOL
87 : 64 { 0x40 } : BV:8
88 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
89 : eq(78, 88) : BOOL
90 : 55 { 0x37 } : BV:8
91 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
92 : eq(78, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 0 { 0x0 } : BV:8
95 : ite(92, 93, 94) : BV:8
96 : ite(89, 90, 95) : BV:8
97 : ite(86, 87, 96) : BV:8
98 : ite(83, 84, 97) : BV:8
99 : ite(80, 81, 98) : BV:8
100 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
101 : bvadd(100, 77) : BV:32
102 : eq(101, 79) : BOOL
103 : eq(101, 82) : BOOL
104 : eq(101, 85) : BOOL
105 : eq(101, 88) : BOOL
106 : eq(101, 91) : BOOL
107 : ite(106, 93, 94) : BV:8
108 : ite(105, 90, 107) : BV:8
109 : ite(104, 87, 108) : BV:8
110 : ite(103, 84, 109) : BV:8
111 : ite(102, 81, 110) : BV:8
112 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
113 : bvadd(112, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 85) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : ite(118, 93, 94) : BV:8
120 : ite(117, 90, 119) : BV:8
121 : ite(116, 87, 120) : BV:8
122 : ite(115, 84, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
125 : bvadd(124, 77) : BV:32
126 : eq(125, 79) : BOOL
127 : eq(125, 82) : BOOL
128 : eq(125, 85) : BOOL
129 : eq(125, 88) : BOOL
130 : eq(125, 91) : BOOL
131 : ite(130, 93, 94) : BV:8
132 : ite(129, 90, 131) : BV:8
133 : ite(128, 87, 132) : BV:8
134 : ite(127, 84, 133) : BV:8
135 : ite(126, 81, 134) : BV:8
136 : bvconcat(99, 111, 123, 135) : BV:32
137 : bvadd(34, 75, 136) : BV:32
138 : eq(137, 79) : BOOL
139 : eq(137, 82) : BOOL
140 : eq(137, 85) : BOOL
141 : eq(137, 88) : BOOL
142 : eq(137, 91) : BOOL
143 : ite(142, 93, 94) : BV:8
144 : ite(141, 90, 143) : BV:8
145 : ite(140, 87, 144) : BV:8
146 : ite(139, 84, 145) : BV:8
147 : ite(138, 81, 146) : BV:8
148 : 2 { 0x2 +1.23e129 } : BV:32
149 : bvadd(148, 75, 136) : BV:32
150 : eq(149, 79) : BOOL
151 : eq(149, 82) : BOOL
152 : eq(149, 85) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : ite(154, 93, 94) : BV:8
156 : ite(153, 90, 155) : BV:8
157 : ite(152, 87, 156) : BV:8
158 : ite(151, 84, 157) : BV:8
159 : ite(150, 81, 158) : BV:8
160 : 1 { 0x1 +1.11e129 } : BV:32
161 : bvadd(160, 75, 136) : BV:32
162 : eq(161, 79) : BOOL
163 : eq(161, 82) : BOOL
164 : eq(161, 85) : BOOL
165 : eq(161, 88) : BOOL
166 : eq(161, 91) : BOOL
167 : ite(166, 93, 94) : BV:8
168 : ite(165, 90, 167) : BV:8
169 : ite(164, 87, 168) : BV:8
170 : ite(163, 84, 169) : BV:8
171 : ite(162, 81, 170) : BV:8
172 : bvadd(75, 136) : BV:32
173 : eq(172, 79) : BOOL
174 : eq(172, 82) : BOOL
175 : eq(172, 85) : BOOL
176 : eq(172, 88) : BOOL
177 : eq(172, 91) : BOOL
178 : ite(177, 93, 94) : BV:8
179 : ite(176, 90, 178) : BV:8
180 : ite(175, 87, 179) : BV:8
181 : ite(174, 84, 180) : BV:8
182 : ite(173, 81, 181) : BV:8
183 : bvconcat(147, 159, 171, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : ite(74, 183, 184) : BV:32
186 : ite(55, 2, 185) : BV:32
187 : lambda(52, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(51, 187) : MAP[BV:32 -> BV:32]
189 : lambda(17, 188) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
190 : map(16, 189) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
191 : sym_const(190) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda16783 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16784 : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : bvmul(10, 19) : BV:32
26 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
27 : bvadd(6, 25, 26) : BV:32
28 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
29 : eq(27, 28) : BOOL
30 : 254 { 0xfe -2 } : BV:8
31 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
32 : eq(27, 31) : BOOL
33 : 191 { 0xbf -65 } : BV:8
34 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
35 : eq(27, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
38 : eq(27, 37) : BOOL
39 : 55 { 0x37 } : BV:8
40 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
41 : eq(27, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : bvadd(20, 25, 26) : BV:32
50 : eq(49, 28) : BOOL
51 : eq(49, 31) : BOOL
52 : eq(49, 34) : BOOL
53 : eq(49, 37) : BOOL
54 : eq(49, 40) : BOOL
55 : ite(54, 42, 43) : BV:8
56 : ite(53, 39, 55) : BV:8
57 : ite(52, 36, 56) : BV:8
58 : ite(51, 33, 57) : BV:8
59 : ite(50, 30, 58) : BV:8
60 : bvadd(22, 25, 26) : BV:32
61 : eq(60, 28) : BOOL
62 : eq(60, 31) : BOOL
63 : eq(60, 34) : BOOL
64 : eq(60, 37) : BOOL
65 : eq(60, 40) : BOOL
66 : ite(65, 42, 43) : BV:8
67 : ite(64, 39, 66) : BV:8
68 : ite(63, 36, 67) : BV:8
69 : ite(62, 33, 68) : BV:8
70 : ite(61, 30, 69) : BV:8
71 : bvadd(25, 26) : BV:32
72 : eq(71, 28) : BOOL
73 : eq(71, 31) : BOOL
74 : eq(71, 34) : BOOL
75 : eq(71, 37) : BOOL
76 : eq(71, 40) : BOOL
77 : ite(76, 42, 43) : BV:8
78 : ite(75, 39, 77) : BV:8
79 : ite(74, 36, 78) : BV:8
80 : ite(73, 33, 79) : BV:8
81 : ite(72, 30, 80) : BV:8
82 : bvconcat(48, 59, 70, 81) : BV:32
83 : ite(24, 4, 82) : BV:32
84 : ite(23, 22, 83) : BV:32
85 : ite(21, 4, 84) : BV:32
86 : lambda(19, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(18, 86) : MAP[BV:32 -> BV:32]
88 : sum(1, 2, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2041012265 { 0x79a76029 +1.30762207e116 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16791 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16792 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : bvmul(8, 17) : BV:32
23 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
24 : bvadd(4, 22, 23) : BV:32
25 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
26 : eq(24, 25) : BOOL
27 : 254 { 0xfe -2 } : BV:8
28 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
29 : eq(24, 28) : BOOL
30 : 191 { 0xbf -65 } : BV:8
31 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
32 : eq(24, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
35 : eq(24, 34) : BOOL
36 : 55 { 0x37 } : BV:8
37 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
38 : eq(24, 37) : BOOL
39 : 1 { 0x1 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : ite(29, 30, 43) : BV:8
45 : ite(26, 27, 44) : BV:8
46 : bvadd(20, 22, 23) : BV:32
47 : eq(46, 25) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 37) : BOOL
52 : ite(51, 39, 40) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 30, 54) : BV:8
56 : ite(47, 27, 55) : BV:8
57 : bvadd(18, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 37) : BOOL
63 : ite(62, 39, 40) : BV:8
64 : ite(61, 36, 63) : BV:8
65 : ite(60, 33, 64) : BV:8
66 : ite(59, 30, 65) : BV:8
67 : ite(58, 27, 66) : BV:8
68 : bvadd(22, 23) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 34) : BOOL
73 : eq(68, 37) : BOOL
74 : ite(73, 39, 40) : BV:8
75 : ite(72, 36, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 30, 76) : BV:8
78 : ite(69, 27, 77) : BV:8
79 : bvconcat(45, 56, 67, 78) : BV:32
80 : ite(21, 2, 79) : BV:32
81 : ite(19, 18, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16794 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16795 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : bvmul(8, 17) : BV:32
24 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
25 : bvadd(4, 23, 24) : BV:32
26 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
27 : eq(25, 26) : BOOL
28 : 254 { 0xfe -2 } : BV:8
29 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
30 : eq(25, 29) : BOOL
31 : 191 { 0xbf -65 } : BV:8
32 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
33 : eq(25, 32) : BOOL
34 : 64 { 0x40 } : BV:8
35 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
36 : eq(25, 35) : BOOL
37 : 55 { 0x37 } : BV:8
38 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
39 : eq(25, 38) : BOOL
40 : 1 { 0x1 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(30, 31, 44) : BV:8
46 : ite(27, 28, 45) : BV:8
47 : bvadd(18, 23, 24) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : eq(47, 32) : BOOL
51 : eq(47, 35) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 34, 54) : BV:8
56 : ite(49, 31, 55) : BV:8
57 : ite(48, 28, 56) : BV:8
58 : bvadd(20, 23, 24) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : eq(58, 32) : BOOL
62 : eq(58, 35) : BOOL
63 : eq(58, 38) : BOOL
64 : ite(63, 40, 41) : BV:8
65 : ite(62, 37, 64) : BV:8
66 : ite(61, 34, 65) : BV:8
67 : ite(60, 31, 66) : BV:8
68 : ite(59, 28, 67) : BV:8
69 : bvadd(23, 24) : BV:32
70 : eq(69, 26) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : eq(69, 35) : BOOL
74 : eq(69, 38) : BOOL
75 : ite(74, 40, 41) : BV:8
76 : ite(73, 37, 75) : BV:8
77 : ite(72, 34, 76) : BV:8
78 : ite(71, 31, 77) : BV:8
79 : ite(70, 28, 78) : BV:8
80 : bvconcat(46, 57, 68, 79) : BV:32
81 : ite(22, 2, 80) : BV:32
82 : ite(21, 20, 81) : BV:32
83 : ite(19, 2, 82) : BV:32
84 : lambda(17, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(16, 84) : MAP[BV:32 -> BV:32]
86 : sym_const(85) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1271190059 { 0x4bc4d22b +1.53766381e24 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 675304452 { 0x28405404 +1.50256395e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 675304455 { 0x28405407 +1.50256431e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 138457152 { 0x840b040 +1.50537872e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 138457155 { 0x840b043 +1.50537908e145 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16703 : BV:32
2 : Lambda16704 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16708 : BV:32
2 : Lambda16709 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
23 : eq(12, 22) : BOOL
24 : 55 { 0x37 } : BV:8
25 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
47 : bvadd(46, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
59 : bvadd(58, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 24, 65) : BV:8
67 : ite(62, 21, 66) : BV:8
68 : ite(61, 18, 67) : BV:8
69 : ite(60, 15, 68) : BV:8
70 : bvconcat(33, 45, 57, 69) : BV:32
71 : bvadd(7, 9, 70) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 16) : BOOL
74 : eq(71, 19) : BOOL
75 : eq(71, 22) : BOOL
76 : eq(71, 25) : BOOL
77 : ite(76, 27, 28) : BV:8
78 : ite(75, 24, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 18, 79) : BV:8
81 : ite(72, 15, 80) : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : bvadd(82, 9, 70) : BV:32
84 : eq(83, 13) : BOOL
85 : eq(83, 16) : BOOL
86 : eq(83, 19) : BOOL
87 : eq(83, 22) : BOOL
88 : eq(83, 25) : BOOL
89 : ite(88, 27, 28) : BV:8
90 : ite(87, 24, 89) : BV:8
91 : ite(86, 21, 90) : BV:8
92 : ite(85, 18, 91) : BV:8
93 : ite(84, 15, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 9, 70) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 16) : BOOL
98 : eq(95, 19) : BOOL
99 : eq(95, 22) : BOOL
100 : eq(95, 25) : BOOL
101 : ite(100, 27, 28) : BV:8
102 : ite(99, 24, 101) : BV:8
103 : ite(98, 21, 102) : BV:8
104 : ite(97, 18, 103) : BV:8
105 : ite(96, 15, 104) : BV:8
106 : bvadd(9, 70) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 19) : BOOL
110 : eq(106, 22) : BOOL
111 : eq(106, 25) : BOOL
112 : ite(111, 27, 28) : BV:8
113 : ite(110, 24, 112) : BV:8
114 : ite(109, 21, 113) : BV:8
115 : ite(108, 18, 114) : BV:8
116 : ite(107, 15, 115) : BV:8
117 : bvconcat(81, 93, 105, 116) : BV:32
118 : ite(6, 3, 117) : BV:32
119 : lambda(1, 2, 118) : FUNCTION[BV:32,BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16712 : BV:32
2 : Lambda16713 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16716 : BV:32
2 : Lambda16717 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
12 : bvule(11, 1) : BOOL
13 : bvule(1, 11) : BOOL
14 : and(12, 13) : BOOL
15 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 15, 15) : BV:32
21 : ite(14, 11, 20) : BV:32
22 : ite(10, 3, 21) : BV:32
23 : eq(22, 3) : BOOL
24 : bvule(3, 2) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(2, 25) : BOOL
27 : and(24, 26) : BOOL
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 28, 36) : BV:32
38 : ite(27, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(23, 39) : BOOL
41 : 1 { 0x1 } : BOOL
42 : 0 { 0x0 } : BOOL
43 : ite(40, 41, 42) : BOOL
44 : and(12, 18) : BOOL
45 : ite(44, 42, 42) : BOOL
46 : ite(10, 41, 45) : BOOL
47 : and(43, 46) : BOOL
48 : bvmul(28, 2) : BV:32
49 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
50 : bvmul(28, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
53 : eq(51, 52) : BOOL
54 : 254 { 0xfe -2 } : BV:8
55 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
56 : eq(51, 55) : BOOL
57 : 191 { 0xbf -65 } : BV:8
58 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
59 : eq(51, 58) : BOOL
60 : 64 { 0x40 } : BV:8
61 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
62 : eq(51, 61) : BOOL
63 : 55 { 0x37 } : BV:8
64 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
65 : eq(51, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 0 { 0x0 } : BV:8
68 : ite(65, 66, 67) : BV:8
69 : ite(62, 63, 68) : BV:8
70 : ite(59, 60, 69) : BV:8
71 : ite(56, 57, 70) : BV:8
72 : ite(53, 54, 71) : BV:8
73 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
74 : bvadd(73, 50) : BV:32
75 : eq(74, 52) : BOOL
76 : eq(74, 55) : BOOL
77 : eq(74, 58) : BOOL
78 : eq(74, 61) : BOOL
79 : eq(74, 64) : BOOL
80 : ite(79, 66, 67) : BV:8
81 : ite(78, 63, 80) : BV:8
82 : ite(77, 60, 81) : BV:8
83 : ite(76, 57, 82) : BV:8
84 : ite(75, 54, 83) : BV:8
85 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
86 : bvadd(85, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 58) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : ite(91, 66, 67) : BV:8
93 : ite(90, 63, 92) : BV:8
94 : ite(89, 60, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : ite(87, 54, 95) : BV:8
97 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
98 : bvadd(97, 50) : BV:32
99 : eq(98, 52) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 58) : BOOL
102 : eq(98, 61) : BOOL
103 : eq(98, 64) : BOOL
104 : ite(103, 66, 67) : BV:8
105 : ite(102, 63, 104) : BV:8
106 : ite(101, 60, 105) : BV:8
107 : ite(100, 57, 106) : BV:8
108 : ite(99, 54, 107) : BV:8
109 : bvconcat(72, 84, 96, 108) : BV:32
110 : bvadd(25, 48, 109) : BV:32
111 : eq(110, 52) : BOOL
112 : eq(110, 55) : BOOL
113 : eq(110, 58) : BOOL
114 : eq(110, 61) : BOOL
115 : eq(110, 64) : BOOL
116 : ite(115, 66, 67) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 60, 117) : BV:8
119 : ite(112, 57, 118) : BV:8
120 : ite(111, 54, 119) : BV:8
121 : 2 { 0x2 +1.23e129 } : BV:32
122 : bvadd(121, 48, 109) : BV:32
123 : eq(122, 52) : BOOL
124 : eq(122, 55) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : ite(127, 66, 67) : BV:8
129 : ite(126, 63, 128) : BV:8
130 : ite(125, 60, 129) : BV:8
131 : ite(124, 57, 130) : BV:8
132 : ite(123, 54, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 48, 109) : BV:32
135 : eq(134, 52) : BOOL
136 : eq(134, 55) : BOOL
137 : eq(134, 58) : BOOL
138 : eq(134, 61) : BOOL
139 : eq(134, 64) : BOOL
140 : ite(139, 66, 67) : BV:8
141 : ite(138, 63, 140) : BV:8
142 : ite(137, 60, 141) : BV:8
143 : ite(136, 57, 142) : BV:8
144 : ite(135, 54, 143) : BV:8
145 : bvadd(48, 109) : BV:32
146 : eq(145, 52) : BOOL
147 : eq(145, 55) : BOOL
148 : eq(145, 58) : BOOL
149 : eq(145, 61) : BOOL
150 : eq(145, 64) : BOOL
151 : ite(150, 66, 67) : BV:8
152 : ite(149, 63, 151) : BV:8
153 : ite(148, 60, 152) : BV:8
154 : ite(147, 57, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : bvconcat(120, 132, 144, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : ite(47, 156, 157) : BV:32
159 : ite(6, 3, 158) : BV:32
160 : lambda(1, 2, 159) : FUNCTION[BV:32,BV:32 -> BV:32]
161 : sym_const(160) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16721 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
23 : eq(12, 22) : BOOL
24 : 55 { 0x37 } : BV:8
25 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : bvadd(2, 10, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : bvadd(5, 10, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : bvadd(10, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 16) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 15, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : ite(7, 4, 67) : BV:32
69 : ite(6, 5, 68) : BV:32
70 : ite(3, 4, 69) : BV:32
71 : lambda(1, 70) : FUNCTION[BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16725 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
13 : eq(11, 12) : BOOL
14 : 254 { 0xfe -2 } : BV:8
15 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
16 : eq(11, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
19 : eq(11, 18) : BOOL
20 : 64 { 0x40 } : BV:8
21 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
22 : eq(11, 21) : BOOL
23 : 55 { 0x37 } : BV:8
24 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
25 : eq(11, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : bvadd(4, 9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 14, 42) : BV:8
44 : bvadd(2, 9, 10) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(9, 10) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : ite(5, 6, 66) : BV:32
68 : ite(3, 2, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16729 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
23 : eq(12, 22) : BOOL
24 : 55 { 0x37 } : BV:8
25 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : bvadd(2, 10, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : bvadd(5, 10, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : bvadd(10, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 16) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 15, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : ite(7, 4, 67) : BV:32
69 : ite(6, 5, 68) : BV:32
70 : ite(3, 4, 69) : BV:32
71 : lambda(1, 70) : FUNCTION[BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3960322891
=counter_example_end
=global nodece 63 num_edges_traversed 1
=global nodece 63 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 64
=global nodece 64 nodece z3v487.ce6813.num_edges_traversed2
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3v487.ce6813 5114cb10466f7a5b13f71ff7dd28c9
=input.spec-%var-x-1
1 : Lambda16778 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16781 : BV:32
18 : Lambda16779 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16780 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
61 : eq(59, 60) : BOOL
62 : 254 { 0xfe -2 } : BV:8
63 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
64 : eq(59, 63) : BOOL
65 : 191 { 0xbf -65 } : BV:8
66 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
67 : eq(59, 66) : BOOL
68 : 64 { 0x40 } : BV:8
69 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
70 : eq(59, 69) : BOOL
71 : 55 { 0x37 } : BV:8
72 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
73 : eq(59, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
82 : bvadd(81, 58) : BV:32
83 : eq(82, 60) : BOOL
84 : eq(82, 63) : BOOL
85 : eq(82, 66) : BOOL
86 : eq(82, 69) : BOOL
87 : eq(82, 72) : BOOL
88 : ite(87, 74, 75) : BV:8
89 : ite(86, 71, 88) : BV:8
90 : ite(85, 68, 89) : BV:8
91 : ite(84, 65, 90) : BV:8
92 : ite(83, 62, 91) : BV:8
93 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
94 : bvadd(93, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : ite(99, 74, 75) : BV:8
101 : ite(98, 71, 100) : BV:8
102 : ite(97, 68, 101) : BV:8
103 : ite(96, 65, 102) : BV:8
104 : ite(95, 62, 103) : BV:8
105 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
106 : bvadd(105, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 63) : BOOL
109 : eq(106, 66) : BOOL
110 : eq(106, 69) : BOOL
111 : eq(106, 72) : BOOL
112 : ite(111, 74, 75) : BV:8
113 : ite(110, 71, 112) : BV:8
114 : ite(109, 68, 113) : BV:8
115 : ite(108, 65, 114) : BV:8
116 : ite(107, 62, 115) : BV:8
117 : bvconcat(80, 92, 104, 116) : BV:32
118 : bvadd(34, 56, 117) : BV:32
119 : eq(118, 60) : BOOL
120 : eq(118, 63) : BOOL
121 : eq(118, 66) : BOOL
122 : eq(118, 69) : BOOL
123 : eq(118, 72) : BOOL
124 : ite(123, 74, 75) : BV:8
125 : ite(122, 71, 124) : BV:8
126 : ite(121, 68, 125) : BV:8
127 : ite(120, 65, 126) : BV:8
128 : ite(119, 62, 127) : BV:8
129 : 2 { 0x2 +1.23e129 } : BV:32
130 : bvadd(129, 56, 117) : BV:32
131 : eq(130, 60) : BOOL
132 : eq(130, 63) : BOOL
133 : eq(130, 66) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : ite(135, 74, 75) : BV:8
137 : ite(134, 71, 136) : BV:8
138 : ite(133, 68, 137) : BV:8
139 : ite(132, 65, 138) : BV:8
140 : ite(131, 62, 139) : BV:8
141 : 1 { 0x1 +1.11e129 } : BV:32
142 : bvadd(141, 56, 117) : BV:32
143 : eq(142, 60) : BOOL
144 : eq(142, 63) : BOOL
145 : eq(142, 66) : BOOL
146 : eq(142, 69) : BOOL
147 : eq(142, 72) : BOOL
148 : ite(147, 74, 75) : BV:8
149 : ite(146, 71, 148) : BV:8
150 : ite(145, 68, 149) : BV:8
151 : ite(144, 65, 150) : BV:8
152 : ite(143, 62, 151) : BV:8
153 : bvadd(56, 117) : BV:32
154 : eq(153, 60) : BOOL
155 : eq(153, 63) : BOOL
156 : eq(153, 66) : BOOL
157 : eq(153, 69) : BOOL
158 : eq(153, 72) : BOOL
159 : ite(158, 74, 75) : BV:8
160 : ite(157, 71, 159) : BV:8
161 : ite(156, 68, 160) : BV:8
162 : ite(155, 65, 161) : BV:8
163 : ite(154, 62, 162) : BV:8
164 : bvconcat(128, 140, 152, 163) : BV:32
165 : ite(55, 2, 164) : BV:32
166 : lambda(52, 165) : FUNCTION[BV:32 -> BV:32]
167 : map(51, 166) : MAP[BV:32 -> BV:32]
168 : lambda(17, 167) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
169 : map(16, 168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
170 : sym_const(169) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 134742011 ] -> 0, [ 134742012; 134742012 ] -> 64, [ 134742013; 134742013 ] -> 254, [ 134742014; 134742014 ] -> 191, [ 134742015; 134742015 ] -> 55, [ 134742016; 935329347 ] -> 0, [ 935329348; 935329348 ] -> 1, [ 935329349; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 138457151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 138457152; 138457155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 138457156; 675304451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 675304452; 675304455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 675304456; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 138457152 { 0x840b040 +1.50537872e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 675304452 { 0x28405404 +1.50256395e209 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16786 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16789 : BV:32
18 : Lambda16787 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16788 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(2, 52) : BOOL
57 : bvule(52, 34) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(37, 52) : BOOL
60 : bvule(52, 37) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(41, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 41, 41) : BV:32
66 : ite(61, 37, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(22, 27) : BOOL
72 : ite(71, 13, 13) : BOOL
73 : ite(21, 7, 72) : BOOL
74 : and(70, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
80 : eq(78, 79) : BOOL
81 : 254 { 0xfe -2 } : BV:8
82 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
83 : eq(78, 82) : BOOL
84 : 191 { 0xbf -65 } : BV:8
85 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
86 : eq(78, 85) : BOOL
87 : 64 { 0x40 } : BV:8
88 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
89 : eq(78, 88) : BOOL
90 : 55 { 0x37 } : BV:8
91 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
92 : eq(78, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 0 { 0x0 } : BV:8
95 : ite(92, 93, 94) : BV:8
96 : ite(89, 90, 95) : BV:8
97 : ite(86, 87, 96) : BV:8
98 : ite(83, 84, 97) : BV:8
99 : ite(80, 81, 98) : BV:8
100 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
101 : bvadd(100, 77) : BV:32
102 : eq(101, 79) : BOOL
103 : eq(101, 82) : BOOL
104 : eq(101, 85) : BOOL
105 : eq(101, 88) : BOOL
106 : eq(101, 91) : BOOL
107 : ite(106, 93, 94) : BV:8
108 : ite(105, 90, 107) : BV:8
109 : ite(104, 87, 108) : BV:8
110 : ite(103, 84, 109) : BV:8
111 : ite(102, 81, 110) : BV:8
112 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
113 : bvadd(112, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 85) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : ite(118, 93, 94) : BV:8
120 : ite(117, 90, 119) : BV:8
121 : ite(116, 87, 120) : BV:8
122 : ite(115, 84, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
125 : bvadd(124, 77) : BV:32
126 : eq(125, 79) : BOOL
127 : eq(125, 82) : BOOL
128 : eq(125, 85) : BOOL
129 : eq(125, 88) : BOOL
130 : eq(125, 91) : BOOL
131 : ite(130, 93, 94) : BV:8
132 : ite(129, 90, 131) : BV:8
133 : ite(128, 87, 132) : BV:8
134 : ite(127, 84, 133) : BV:8
135 : ite(126, 81, 134) : BV:8
136 : bvconcat(99, 111, 123, 135) : BV:32
137 : bvadd(34, 75, 136) : BV:32
138 : eq(137, 79) : BOOL
139 : eq(137, 82) : BOOL
140 : eq(137, 85) : BOOL
141 : eq(137, 88) : BOOL
142 : eq(137, 91) : BOOL
143 : ite(142, 93, 94) : BV:8
144 : ite(141, 90, 143) : BV:8
145 : ite(140, 87, 144) : BV:8
146 : ite(139, 84, 145) : BV:8
147 : ite(138, 81, 146) : BV:8
148 : 2 { 0x2 +1.23e129 } : BV:32
149 : bvadd(148, 75, 136) : BV:32
150 : eq(149, 79) : BOOL
151 : eq(149, 82) : BOOL
152 : eq(149, 85) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : ite(154, 93, 94) : BV:8
156 : ite(153, 90, 155) : BV:8
157 : ite(152, 87, 156) : BV:8
158 : ite(151, 84, 157) : BV:8
159 : ite(150, 81, 158) : BV:8
160 : 1 { 0x1 +1.11e129 } : BV:32
161 : bvadd(160, 75, 136) : BV:32
162 : eq(161, 79) : BOOL
163 : eq(161, 82) : BOOL
164 : eq(161, 85) : BOOL
165 : eq(161, 88) : BOOL
166 : eq(161, 91) : BOOL
167 : ite(166, 93, 94) : BV:8
168 : ite(165, 90, 167) : BV:8
169 : ite(164, 87, 168) : BV:8
170 : ite(163, 84, 169) : BV:8
171 : ite(162, 81, 170) : BV:8
172 : bvadd(75, 136) : BV:32
173 : eq(172, 79) : BOOL
174 : eq(172, 82) : BOOL
175 : eq(172, 85) : BOOL
176 : eq(172, 88) : BOOL
177 : eq(172, 91) : BOOL
178 : ite(177, 93, 94) : BV:8
179 : ite(176, 90, 178) : BV:8
180 : ite(175, 87, 179) : BV:8
181 : ite(174, 84, 180) : BV:8
182 : ite(173, 81, 181) : BV:8
183 : bvconcat(147, 159, 171, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : ite(74, 183, 184) : BV:32
186 : ite(55, 2, 185) : BV:32
187 : lambda(52, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(51, 187) : MAP[BV:32 -> BV:32]
189 : lambda(17, 188) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
190 : map(16, 189) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
191 : sym_const(190) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda16783 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16784 : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : bvmul(10, 19) : BV:32
26 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
27 : bvadd(6, 25, 26) : BV:32
28 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
29 : eq(27, 28) : BOOL
30 : 254 { 0xfe -2 } : BV:8
31 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
32 : eq(27, 31) : BOOL
33 : 191 { 0xbf -65 } : BV:8
34 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
35 : eq(27, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
38 : eq(27, 37) : BOOL
39 : 55 { 0x37 } : BV:8
40 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
41 : eq(27, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : bvadd(20, 25, 26) : BV:32
50 : eq(49, 28) : BOOL
51 : eq(49, 31) : BOOL
52 : eq(49, 34) : BOOL
53 : eq(49, 37) : BOOL
54 : eq(49, 40) : BOOL
55 : ite(54, 42, 43) : BV:8
56 : ite(53, 39, 55) : BV:8
57 : ite(52, 36, 56) : BV:8
58 : ite(51, 33, 57) : BV:8
59 : ite(50, 30, 58) : BV:8
60 : bvadd(22, 25, 26) : BV:32
61 : eq(60, 28) : BOOL
62 : eq(60, 31) : BOOL
63 : eq(60, 34) : BOOL
64 : eq(60, 37) : BOOL
65 : eq(60, 40) : BOOL
66 : ite(65, 42, 43) : BV:8
67 : ite(64, 39, 66) : BV:8
68 : ite(63, 36, 67) : BV:8
69 : ite(62, 33, 68) : BV:8
70 : ite(61, 30, 69) : BV:8
71 : bvadd(25, 26) : BV:32
72 : eq(71, 28) : BOOL
73 : eq(71, 31) : BOOL
74 : eq(71, 34) : BOOL
75 : eq(71, 37) : BOOL
76 : eq(71, 40) : BOOL
77 : ite(76, 42, 43) : BV:8
78 : ite(75, 39, 77) : BV:8
79 : ite(74, 36, 78) : BV:8
80 : ite(73, 33, 79) : BV:8
81 : ite(72, 30, 80) : BV:8
82 : bvconcat(48, 59, 70, 81) : BV:32
83 : ite(24, 4, 82) : BV:32
84 : ite(23, 22, 83) : BV:32
85 : ite(21, 4, 84) : BV:32
86 : lambda(19, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(18, 86) : MAP[BV:32 -> BV:32]
88 : sum(1, 2, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2041012266 { 0x79a7602a +1.30762219e116 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16791 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16792 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : bvmul(8, 17) : BV:32
23 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
24 : bvadd(4, 22, 23) : BV:32
25 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
26 : eq(24, 25) : BOOL
27 : 254 { 0xfe -2 } : BV:8
28 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
29 : eq(24, 28) : BOOL
30 : 191 { 0xbf -65 } : BV:8
31 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
32 : eq(24, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
35 : eq(24, 34) : BOOL
36 : 55 { 0x37 } : BV:8
37 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
38 : eq(24, 37) : BOOL
39 : 1 { 0x1 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : ite(29, 30, 43) : BV:8
45 : ite(26, 27, 44) : BV:8
46 : bvadd(20, 22, 23) : BV:32
47 : eq(46, 25) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 37) : BOOL
52 : ite(51, 39, 40) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 30, 54) : BV:8
56 : ite(47, 27, 55) : BV:8
57 : bvadd(18, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 37) : BOOL
63 : ite(62, 39, 40) : BV:8
64 : ite(61, 36, 63) : BV:8
65 : ite(60, 33, 64) : BV:8
66 : ite(59, 30, 65) : BV:8
67 : ite(58, 27, 66) : BV:8
68 : bvadd(22, 23) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 34) : BOOL
73 : eq(68, 37) : BOOL
74 : ite(73, 39, 40) : BV:8
75 : ite(72, 36, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 30, 76) : BV:8
78 : ite(69, 27, 77) : BV:8
79 : bvconcat(45, 56, 67, 78) : BV:32
80 : ite(21, 2, 79) : BV:32
81 : ite(19, 18, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16794 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16795 : BV:32
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : bvmul(8, 17) : BV:32
24 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
25 : bvadd(4, 23, 24) : BV:32
26 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
27 : eq(25, 26) : BOOL
28 : 254 { 0xfe -2 } : BV:8
29 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
30 : eq(25, 29) : BOOL
31 : 191 { 0xbf -65 } : BV:8
32 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
33 : eq(25, 32) : BOOL
34 : 64 { 0x40 } : BV:8
35 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
36 : eq(25, 35) : BOOL
37 : 55 { 0x37 } : BV:8
38 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
39 : eq(25, 38) : BOOL
40 : 1 { 0x1 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(30, 31, 44) : BV:8
46 : ite(27, 28, 45) : BV:8
47 : bvadd(18, 23, 24) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : eq(47, 32) : BOOL
51 : eq(47, 35) : BOOL
52 : eq(47, 38) : BOOL
53 : ite(52, 40, 41) : BV:8
54 : ite(51, 37, 53) : BV:8
55 : ite(50, 34, 54) : BV:8
56 : ite(49, 31, 55) : BV:8
57 : ite(48, 28, 56) : BV:8
58 : bvadd(20, 23, 24) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : eq(58, 32) : BOOL
62 : eq(58, 35) : BOOL
63 : eq(58, 38) : BOOL
64 : ite(63, 40, 41) : BV:8
65 : ite(62, 37, 64) : BV:8
66 : ite(61, 34, 65) : BV:8
67 : ite(60, 31, 66) : BV:8
68 : ite(59, 28, 67) : BV:8
69 : bvadd(23, 24) : BV:32
70 : eq(69, 26) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : eq(69, 35) : BOOL
74 : eq(69, 38) : BOOL
75 : ite(74, 40, 41) : BV:8
76 : ite(73, 37, 75) : BV:8
77 : ite(72, 34, 76) : BV:8
78 : ite(71, 31, 77) : BV:8
79 : ite(70, 28, 78) : BV:8
80 : bvconcat(46, 57, 68, 79) : BV:32
81 : ite(22, 2, 80) : BV:32
82 : ite(21, 20, 81) : BV:32
83 : ite(19, 2, 82) : BV:32
84 : lambda(17, 83) : FUNCTION[BV:32 -> BV:32]
85 : map(16, 84) : MAP[BV:32 -> BV:32]
86 : sym_const(85) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1271190060 { 0x4bc4d22c +1.53766393e24 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 675304452 { 0x28405404 +1.50256395e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 675304455 { 0x28405407 +1.50256431e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 138457152 { 0x840b040 +1.50537872e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 138457155 { 0x840b043 +1.50537908e145 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16703 : BV:32
2 : Lambda16704 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16708 : BV:32
2 : Lambda16709 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
23 : eq(12, 22) : BOOL
24 : 55 { 0x37 } : BV:8
25 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
47 : bvadd(46, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
59 : bvadd(58, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 24, 65) : BV:8
67 : ite(62, 21, 66) : BV:8
68 : ite(61, 18, 67) : BV:8
69 : ite(60, 15, 68) : BV:8
70 : bvconcat(33, 45, 57, 69) : BV:32
71 : bvadd(7, 9, 70) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 16) : BOOL
74 : eq(71, 19) : BOOL
75 : eq(71, 22) : BOOL
76 : eq(71, 25) : BOOL
77 : ite(76, 27, 28) : BV:8
78 : ite(75, 24, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 18, 79) : BV:8
81 : ite(72, 15, 80) : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : bvadd(82, 9, 70) : BV:32
84 : eq(83, 13) : BOOL
85 : eq(83, 16) : BOOL
86 : eq(83, 19) : BOOL
87 : eq(83, 22) : BOOL
88 : eq(83, 25) : BOOL
89 : ite(88, 27, 28) : BV:8
90 : ite(87, 24, 89) : BV:8
91 : ite(86, 21, 90) : BV:8
92 : ite(85, 18, 91) : BV:8
93 : ite(84, 15, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 9, 70) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 16) : BOOL
98 : eq(95, 19) : BOOL
99 : eq(95, 22) : BOOL
100 : eq(95, 25) : BOOL
101 : ite(100, 27, 28) : BV:8
102 : ite(99, 24, 101) : BV:8
103 : ite(98, 21, 102) : BV:8
104 : ite(97, 18, 103) : BV:8
105 : ite(96, 15, 104) : BV:8
106 : bvadd(9, 70) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 19) : BOOL
110 : eq(106, 22) : BOOL
111 : eq(106, 25) : BOOL
112 : ite(111, 27, 28) : BV:8
113 : ite(110, 24, 112) : BV:8
114 : ite(109, 21, 113) : BV:8
115 : ite(108, 18, 114) : BV:8
116 : ite(107, 15, 115) : BV:8
117 : bvconcat(81, 93, 105, 116) : BV:32
118 : ite(6, 3, 117) : BV:32
119 : lambda(1, 2, 118) : FUNCTION[BV:32,BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16712 : BV:32
2 : Lambda16713 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16716 : BV:32
2 : Lambda16717 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
12 : bvule(11, 1) : BOOL
13 : bvule(1, 11) : BOOL
14 : and(12, 13) : BOOL
15 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 15, 15) : BV:32
21 : ite(14, 11, 20) : BV:32
22 : ite(10, 3, 21) : BV:32
23 : eq(22, 3) : BOOL
24 : bvule(3, 2) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(2, 25) : BOOL
27 : and(24, 26) : BOOL
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 28, 36) : BV:32
38 : ite(27, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(23, 39) : BOOL
41 : 1 { 0x1 } : BOOL
42 : 0 { 0x0 } : BOOL
43 : ite(40, 41, 42) : BOOL
44 : and(12, 18) : BOOL
45 : ite(44, 42, 42) : BOOL
46 : ite(10, 41, 45) : BOOL
47 : and(43, 46) : BOOL
48 : bvmul(28, 2) : BV:32
49 : 134742011 { 0x807fffb +1.6249940e145 } : BV:32
50 : bvmul(28, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
53 : eq(51, 52) : BOOL
54 : 254 { 0xfe -2 } : BV:8
55 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
56 : eq(51, 55) : BOOL
57 : 191 { 0xbf -65 } : BV:8
58 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
59 : eq(51, 58) : BOOL
60 : 64 { 0x40 } : BV:8
61 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
62 : eq(51, 61) : BOOL
63 : 55 { 0x37 } : BV:8
64 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
65 : eq(51, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 0 { 0x0 } : BV:8
68 : ite(65, 66, 67) : BV:8
69 : ite(62, 63, 68) : BV:8
70 : ite(59, 60, 69) : BV:8
71 : ite(56, 57, 70) : BV:8
72 : ite(53, 54, 71) : BV:8
73 : 134742010 { 0x807fffa +1.6249928e145 } : BV:32
74 : bvadd(73, 50) : BV:32
75 : eq(74, 52) : BOOL
76 : eq(74, 55) : BOOL
77 : eq(74, 58) : BOOL
78 : eq(74, 61) : BOOL
79 : eq(74, 64) : BOOL
80 : ite(79, 66, 67) : BV:8
81 : ite(78, 63, 80) : BV:8
82 : ite(77, 60, 81) : BV:8
83 : ite(76, 57, 82) : BV:8
84 : ite(75, 54, 83) : BV:8
85 : 134742009 { 0x807fff9 +1.6249916e145 } : BV:32
86 : bvadd(85, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 58) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : ite(91, 66, 67) : BV:8
93 : ite(90, 63, 92) : BV:8
94 : ite(89, 60, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : ite(87, 54, 95) : BV:8
97 : 134742008 { 0x807fff8 +1.6249904e145 } : BV:32
98 : bvadd(97, 50) : BV:32
99 : eq(98, 52) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 58) : BOOL
102 : eq(98, 61) : BOOL
103 : eq(98, 64) : BOOL
104 : ite(103, 66, 67) : BV:8
105 : ite(102, 63, 104) : BV:8
106 : ite(101, 60, 105) : BV:8
107 : ite(100, 57, 106) : BV:8
108 : ite(99, 54, 107) : BV:8
109 : bvconcat(72, 84, 96, 108) : BV:32
110 : bvadd(25, 48, 109) : BV:32
111 : eq(110, 52) : BOOL
112 : eq(110, 55) : BOOL
113 : eq(110, 58) : BOOL
114 : eq(110, 61) : BOOL
115 : eq(110, 64) : BOOL
116 : ite(115, 66, 67) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 60, 117) : BV:8
119 : ite(112, 57, 118) : BV:8
120 : ite(111, 54, 119) : BV:8
121 : 2 { 0x2 +1.23e129 } : BV:32
122 : bvadd(121, 48, 109) : BV:32
123 : eq(122, 52) : BOOL
124 : eq(122, 55) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : ite(127, 66, 67) : BV:8
129 : ite(126, 63, 128) : BV:8
130 : ite(125, 60, 129) : BV:8
131 : ite(124, 57, 130) : BV:8
132 : ite(123, 54, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 48, 109) : BV:32
135 : eq(134, 52) : BOOL
136 : eq(134, 55) : BOOL
137 : eq(134, 58) : BOOL
138 : eq(134, 61) : BOOL
139 : eq(134, 64) : BOOL
140 : ite(139, 66, 67) : BV:8
141 : ite(138, 63, 140) : BV:8
142 : ite(137, 60, 141) : BV:8
143 : ite(136, 57, 142) : BV:8
144 : ite(135, 54, 143) : BV:8
145 : bvadd(48, 109) : BV:32
146 : eq(145, 52) : BOOL
147 : eq(145, 55) : BOOL
148 : eq(145, 58) : BOOL
149 : eq(145, 61) : BOOL
150 : eq(145, 64) : BOOL
151 : ite(150, 66, 67) : BV:8
152 : ite(149, 63, 151) : BV:8
153 : ite(148, 60, 152) : BV:8
154 : ite(147, 57, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : bvconcat(120, 132, 144, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : ite(47, 156, 157) : BV:32
159 : ite(6, 3, 158) : BV:32
160 : lambda(1, 2, 159) : FUNCTION[BV:32,BV:32 -> BV:32]
161 : sym_const(160) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16721 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
23 : eq(12, 22) : BOOL
24 : 55 { 0x37 } : BV:8
25 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : bvadd(2, 10, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : bvadd(5, 10, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : bvadd(10, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 16) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 15, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : ite(7, 4, 67) : BV:32
69 : ite(6, 5, 68) : BV:32
70 : ite(3, 4, 69) : BV:32
71 : lambda(1, 70) : FUNCTION[BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16725 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
13 : eq(11, 12) : BOOL
14 : 254 { 0xfe -2 } : BV:8
15 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
16 : eq(11, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
19 : eq(11, 18) : BOOL
20 : 64 { 0x40 } : BV:8
21 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
22 : eq(11, 21) : BOOL
23 : 55 { 0x37 } : BV:8
24 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
25 : eq(11, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : bvadd(4, 9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 14, 42) : BV:8
44 : bvadd(2, 9, 10) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(9, 10) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : ite(5, 6, 66) : BV:32
68 : ite(3, 2, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16729 : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 935329344 { 0x37bffe40 +1.49994659e240 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 134742013 { 0x807fffd +1.6249964e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 134742014 { 0x807fffe +1.6249976e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 134742012 { 0x807fffc +1.6249952e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 134742015 { 0x807ffff +1.6249988e145 } : BV:32
23 : eq(12, 22) : BOOL
24 : 55 { 0x37 } : BV:8
25 : 935329348 { 0x37bffe44 +1.49994707e240 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : bvadd(2, 10, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : bvadd(5, 10, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : bvadd(10, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 16) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 15, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : ite(7, 4, 67) : BV:32
69 : ite(6, 5, 68) : BV:32
70 : ite(3, 4, 69) : BV:32
71 : lambda(1, 70) : FUNCTION[BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3960322891
=counter_example_end
=global nodece 64 num_edges_traversed 2
=global nodece 64 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 65
=global nodece 65 nodece z3.ce6824.num_edges_traversed1
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3.ce6824 97cdce47c48a2ac856a17ef0856a5946
=input.spec-%var-x-1
1 : Lambda17005 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17008 : BV:32
18 : Lambda17006 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17007 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : bvmul(34, 52) : BV:32
77 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
78 : bvmul(34, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
81 : eq(79, 80) : BOOL
82 : 22 { 0x16 } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(79, 83) : BOOL
85 : 99 { 0x63 } : BV:8
86 : eq(79, 77) : BOOL
87 : 234 { 0xea -22 } : BV:8
88 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 220 { 0xdc -36 } : BV:8
91 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
92 : eq(79, 91) : BOOL
93 : 45 { 0x2d } : BV:8
94 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
95 : eq(79, 94) : BOOL
96 : 128 { 0x80 -128 } : BV:8
97 : 0 { 0x0 } : BV:8
98 : ite(95, 96, 97) : BV:8
99 : ite(92, 93, 98) : BV:8
100 : ite(89, 90, 99) : BV:8
101 : ite(86, 87, 100) : BV:8
102 : ite(84, 85, 101) : BV:8
103 : ite(81, 82, 102) : BV:8
104 : bvadd(94, 78) : BV:32
105 : eq(104, 80) : BOOL
106 : eq(104, 83) : BOOL
107 : eq(104, 77) : BOOL
108 : eq(104, 88) : BOOL
109 : eq(104, 91) : BOOL
110 : eq(104, 94) : BOOL
111 : ite(110, 96, 97) : BV:8
112 : ite(109, 93, 111) : BV:8
113 : ite(108, 90, 112) : BV:8
114 : ite(107, 87, 113) : BV:8
115 : ite(106, 85, 114) : BV:8
116 : ite(105, 82, 115) : BV:8
117 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
118 : bvadd(117, 78) : BV:32
119 : eq(118, 80) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 77) : BOOL
122 : eq(118, 88) : BOOL
123 : eq(118, 91) : BOOL
124 : eq(118, 94) : BOOL
125 : ite(124, 96, 97) : BV:8
126 : ite(123, 93, 125) : BV:8
127 : ite(122, 90, 126) : BV:8
128 : ite(121, 87, 127) : BV:8
129 : ite(120, 85, 128) : BV:8
130 : ite(119, 82, 129) : BV:8
131 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
132 : bvadd(131, 78) : BV:32
133 : eq(132, 80) : BOOL
134 : eq(132, 83) : BOOL
135 : eq(132, 77) : BOOL
136 : eq(132, 88) : BOOL
137 : eq(132, 91) : BOOL
138 : eq(132, 94) : BOOL
139 : ite(138, 96, 97) : BV:8
140 : ite(137, 93, 139) : BV:8
141 : ite(136, 90, 140) : BV:8
142 : ite(135, 87, 141) : BV:8
143 : ite(134, 85, 142) : BV:8
144 : ite(133, 82, 143) : BV:8
145 : bvconcat(103, 116, 130, 144) : BV:32
146 : bvadd(75, 76, 145) : BV:32
147 : eq(146, 80) : BOOL
148 : eq(146, 83) : BOOL
149 : eq(146, 77) : BOOL
150 : eq(146, 88) : BOOL
151 : eq(146, 91) : BOOL
152 : eq(146, 94) : BOOL
153 : ite(152, 96, 97) : BV:8
154 : ite(151, 93, 153) : BV:8
155 : ite(150, 90, 154) : BV:8
156 : ite(149, 87, 155) : BV:8
157 : ite(148, 85, 156) : BV:8
158 : ite(147, 82, 157) : BV:8
159 : 2 { 0x2 +1.23e129 } : BV:32
160 : bvadd(159, 76, 145) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 77) : BOOL
164 : eq(160, 88) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 94) : BOOL
167 : ite(166, 96, 97) : BV:8
168 : ite(165, 93, 167) : BV:8
169 : ite(164, 90, 168) : BV:8
170 : ite(163, 87, 169) : BV:8
171 : ite(162, 85, 170) : BV:8
172 : ite(161, 82, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 76, 145) : BV:32
175 : eq(174, 80) : BOOL
176 : eq(174, 83) : BOOL
177 : eq(174, 77) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : ite(180, 96, 97) : BV:8
182 : ite(179, 93, 181) : BV:8
183 : ite(178, 90, 182) : BV:8
184 : ite(177, 87, 183) : BV:8
185 : ite(176, 85, 184) : BV:8
186 : ite(175, 82, 185) : BV:8
187 : bvadd(76, 145) : BV:32
188 : eq(187, 80) : BOOL
189 : eq(187, 83) : BOOL
190 : eq(187, 77) : BOOL
191 : eq(187, 88) : BOOL
192 : eq(187, 91) : BOOL
193 : eq(187, 94) : BOOL
194 : ite(193, 96, 97) : BV:8
195 : ite(192, 93, 194) : BV:8
196 : ite(191, 90, 195) : BV:8
197 : ite(190, 87, 196) : BV:8
198 : ite(189, 85, 197) : BV:8
199 : ite(188, 82, 198) : BV:8
200 : bvconcat(158, 172, 186, 199) : BV:32
201 : ite(55, 2, 200) : BV:32
202 : ite(74, 200, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : lambda(52, 203) : FUNCTION[BV:32 -> BV:32]
205 : map(51, 204) : MAP[BV:32 -> BV:32]
206 : lambda(17, 205) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
207 : map(16, 206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
208 : sym_const(207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 155823377 { 0x949ad11 +1.57559406e147 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
=input.dst.llvm-%n
1 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
=input.dst.llvm-%m
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1524190141 ] -> 0, [ 1524190142; 1524190142 ] -> 128, [ 1524190143; 1524190143 ] -> 234, [ 1524190144; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 220, [ 2147483649; 2147483649 ] -> 45, [ 2147483650; 2147483650 ] -> 99, [ 2147483651; 2147483651 ] -> 22, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 150169143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 150169144; 150169147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 150169148; 321544823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 321544824; 321544827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 321544828; 3989058187 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3989058188; 3989058191 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3989058192; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 321544824 { 0x132a6278 +1.33113002e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3989058188 { 0xedc4328c -305909108 -1.53279256e92 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 150169144 { 0x8f36638 +1.90155696e146 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17013 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17016 : BV:32
18 : Lambda17014 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17015 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : bvmul(34, 52) : BV:32
58 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
59 : bvmul(34, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 22 { 0x16 } : BV:8
64 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 99 { 0x63 } : BV:8
67 : eq(60, 58) : BOOL
68 : 234 { 0xea -22 } : BV:8
69 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 220 { 0xdc -36 } : BV:8
72 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 45 { 0x2d } : BV:8
75 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
76 : eq(60, 75) : BOOL
77 : 128 { 0x80 -128 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(67, 68, 81) : BV:8
83 : ite(65, 66, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : bvadd(75, 59) : BV:32
86 : eq(85, 61) : BOOL
87 : eq(85, 64) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 69) : BOOL
90 : eq(85, 72) : BOOL
91 : eq(85, 75) : BOOL
92 : ite(91, 77, 78) : BV:8
93 : ite(90, 74, 92) : BV:8
94 : ite(89, 71, 93) : BV:8
95 : ite(88, 68, 94) : BV:8
96 : ite(87, 66, 95) : BV:8
97 : ite(86, 63, 96) : BV:8
98 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
99 : bvadd(98, 59) : BV:32
100 : eq(99, 61) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 58) : BOOL
103 : eq(99, 69) : BOOL
104 : eq(99, 72) : BOOL
105 : eq(99, 75) : BOOL
106 : ite(105, 77, 78) : BV:8
107 : ite(104, 74, 106) : BV:8
108 : ite(103, 71, 107) : BV:8
109 : ite(102, 68, 108) : BV:8
110 : ite(101, 66, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
113 : bvadd(112, 59) : BV:32
114 : eq(113, 61) : BOOL
115 : eq(113, 64) : BOOL
116 : eq(113, 58) : BOOL
117 : eq(113, 69) : BOOL
118 : eq(113, 72) : BOOL
119 : eq(113, 75) : BOOL
120 : ite(119, 77, 78) : BV:8
121 : ite(118, 74, 120) : BV:8
122 : ite(117, 71, 121) : BV:8
123 : ite(116, 68, 122) : BV:8
124 : ite(115, 66, 123) : BV:8
125 : ite(114, 63, 124) : BV:8
126 : bvconcat(84, 97, 111, 125) : BV:32
127 : bvadd(56, 57, 126) : BV:32
128 : eq(127, 61) : BOOL
129 : eq(127, 64) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 69) : BOOL
132 : eq(127, 72) : BOOL
133 : eq(127, 75) : BOOL
134 : ite(133, 77, 78) : BV:8
135 : ite(132, 74, 134) : BV:8
136 : ite(131, 71, 135) : BV:8
137 : ite(130, 68, 136) : BV:8
138 : ite(129, 66, 137) : BV:8
139 : ite(128, 63, 138) : BV:8
140 : 2 { 0x2 +1.23e129 } : BV:32
141 : bvadd(140, 57, 126) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 58) : BOOL
145 : eq(141, 69) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 75) : BOOL
148 : ite(147, 77, 78) : BV:8
149 : ite(146, 74, 148) : BV:8
150 : ite(145, 71, 149) : BV:8
151 : ite(144, 68, 150) : BV:8
152 : ite(143, 66, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : 1 { 0x1 +1.11e129 } : BV:32
155 : bvadd(154, 57, 126) : BV:32
156 : eq(155, 61) : BOOL
157 : eq(155, 64) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : ite(161, 77, 78) : BV:8
163 : ite(160, 74, 162) : BV:8
164 : ite(159, 71, 163) : BV:8
165 : ite(158, 68, 164) : BV:8
166 : ite(157, 66, 165) : BV:8
167 : ite(156, 63, 166) : BV:8
168 : bvadd(57, 126) : BV:32
169 : eq(168, 61) : BOOL
170 : eq(168, 64) : BOOL
171 : eq(168, 58) : BOOL
172 : eq(168, 69) : BOOL
173 : eq(168, 72) : BOOL
174 : eq(168, 75) : BOOL
175 : ite(174, 77, 78) : BV:8
176 : ite(173, 74, 175) : BV:8
177 : ite(172, 71, 176) : BV:8
178 : ite(171, 68, 177) : BV:8
179 : ite(170, 66, 178) : BV:8
180 : ite(169, 63, 179) : BV:8
181 : bvconcat(139, 153, 167, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : lambda(52, 182) : FUNCTION[BV:32 -> BV:32]
184 : map(51, 183) : MAP[BV:32 -> BV:32]
185 : lambda(17, 184) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
186 : map(16, 185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
187 : sym_const(186) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
2 : unit : UNIT
3 : Lambda17010 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 5 { 0x5 +1.59e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17011 : BV:32
20 : eq(19, 6) : BOOL
21 : eq(19, 4) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(6, 19) : BV:32
24 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 22 { 0x16 } : BV:8
29 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
30 : eq(25, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
33 : eq(25, 32) : BOOL
34 : 234 { 0xea -22 } : BV:8
35 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
36 : eq(25, 35) : BOOL
37 : 220 { 0xdc -36 } : BV:8
38 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
39 : eq(25, 38) : BOOL
40 : 45 { 0x2d } : BV:8
41 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
42 : eq(25, 41) : BOOL
43 : 128 { 0x80 -128 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 23, 24) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : eq(52, 32) : BOOL
56 : eq(52, 35) : BOOL
57 : eq(52, 38) : BOOL
58 : eq(52, 41) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 40, 59) : BV:8
61 : ite(56, 37, 60) : BV:8
62 : ite(55, 34, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 23, 24) : BV:32
67 : eq(66, 26) : BOOL
68 : eq(66, 29) : BOOL
69 : eq(66, 32) : BOOL
70 : eq(66, 35) : BOOL
71 : eq(66, 38) : BOOL
72 : eq(66, 41) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 40, 73) : BV:8
75 : ite(70, 37, 74) : BV:8
76 : ite(69, 34, 75) : BV:8
77 : ite(68, 31, 76) : BV:8
78 : ite(67, 28, 77) : BV:8
79 : bvadd(23, 24) : BV:32
80 : eq(79, 26) : BOOL
81 : eq(79, 29) : BOOL
82 : eq(79, 32) : BOOL
83 : eq(79, 35) : BOOL
84 : eq(79, 38) : BOOL
85 : eq(79, 41) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 37, 87) : BV:8
89 : ite(82, 34, 88) : BV:8
90 : ite(81, 31, 89) : BV:8
91 : ite(80, 28, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(21, 4, 92) : BV:32
94 : ite(20, 4, 93) : BV:32
95 : lambda(19, 94) : FUNCTION[BV:32 -> BV:32]
96 : map(18, 95) : MAP[BV:32 -> BV:32]
97 : sum(1, 2, 96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
98 : sym_const(97) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 155823377 { 0x949ad11 +1.57559406e147 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 155823378 { 0x949ad12 +1.57559418e147 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1715426971 { 0x663f569b +1.49483048e77 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17018 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17019 : BV:32
18 : eq(17, 4) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(4, 17) : BV:32
21 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 22 { 0x16 } : BV:8
26 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
27 : eq(22, 26) : BOOL
28 : 99 { 0x63 } : BV:8
29 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
30 : eq(22, 29) : BOOL
31 : 234 { 0xea -22 } : BV:8
32 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
33 : eq(22, 32) : BOOL
34 : 220 { 0xdc -36 } : BV:8
35 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
36 : eq(22, 35) : BOOL
37 : 45 { 0x2d } : BV:8
38 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
39 : eq(22, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(30, 31, 44) : BV:8
46 : ite(27, 28, 45) : BV:8
47 : ite(24, 25, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 20, 21) : BV:32
50 : eq(49, 23) : BOOL
51 : eq(49, 26) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 32) : BOOL
54 : eq(49, 35) : BOOL
55 : eq(49, 38) : BOOL
56 : ite(55, 40, 41) : BV:8
57 : ite(54, 37, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(52, 31, 58) : BV:8
60 : ite(51, 28, 59) : BV:8
61 : ite(50, 25, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 20, 21) : BV:32
64 : eq(63, 23) : BOOL
65 : eq(63, 26) : BOOL
66 : eq(63, 29) : BOOL
67 : eq(63, 32) : BOOL
68 : eq(63, 35) : BOOL
69 : eq(63, 38) : BOOL
70 : ite(69, 40, 41) : BV:8
71 : ite(68, 37, 70) : BV:8
72 : ite(67, 34, 71) : BV:8
73 : ite(66, 31, 72) : BV:8
74 : ite(65, 28, 73) : BV:8
75 : ite(64, 25, 74) : BV:8
76 : bvadd(20, 21) : BV:32
77 : eq(76, 23) : BOOL
78 : eq(76, 26) : BOOL
79 : eq(76, 29) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 35) : BOOL
82 : eq(76, 38) : BOOL
83 : ite(82, 40, 41) : BV:8
84 : ite(81, 37, 83) : BV:8
85 : ite(80, 34, 84) : BV:8
86 : ite(79, 31, 85) : BV:8
87 : ite(78, 28, 86) : BV:8
88 : ite(77, 25, 87) : BV:8
89 : bvconcat(47, 61, 75, 88) : BV:32
90 : ite(18, 2, 89) : BV:32
91 : lambda(17, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(16, 91) : MAP[BV:32 -> BV:32]
93 : sym_const(92) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17021 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17022 : BV:32
18 : eq(17, 4) : BOOL
19 : eq(17, 2) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(4, 17) : BV:32
22 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 22 { 0x16 } : BV:8
27 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 99 { 0x63 } : BV:8
30 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
31 : eq(23, 30) : BOOL
32 : 234 { 0xea -22 } : BV:8
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 220 { 0xdc -36 } : BV:8
36 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 45 { 0x2d } : BV:8
39 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
40 : eq(23, 39) : BOOL
41 : 128 { 0x80 -128 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(19, 2, 90) : BV:32
92 : ite(18, 2, 91) : BV:32
93 : lambda(17, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(16, 93) : MAP[BV:32 -> BV:32]
95 : sym_const(94) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 155823377 { 0x949ad11 +1.57559406e147 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1131951063 { 0x437833d7 +1.93908202e7 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 623293508 { 0x2526b444 +1.30237627e203 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 623293508 { 0x2526b444 +1.30237627e203 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 375598572 { 0x16632dec +1.77483892e173 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 375598572 { 0x16632dec +1.77483892e173 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3989058188 { 0xedc4328c -305909108 -1.53279256e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3989058191 { 0xedc4328f -305909105 -1.53279292e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 150169144 { 0x8f36638 +1.90155696e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 150169147 { 0x8f3663b +1.90155732e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 321544824 { 0x132a6278 +1.33113002e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 321544827 { 0x132a627b +1.33113038e167 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 576902675 ] -> true, [ 576902676; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16932 : BV:32
2 : Lambda16933 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16937 : BV:32
2 : Lambda16938 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4 { 0x4 +1.47e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 5 { 0x5 +1.59e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : bvmul(30, 2) : BV:32
50 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
51 : bvmul(30, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
54 : eq(52, 53) : BOOL
55 : 22 { 0x16 } : BV:8
56 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
57 : eq(52, 56) : BOOL
58 : 99 { 0x63 } : BV:8
59 : eq(52, 50) : BOOL
60 : 234 { 0xea -22 } : BV:8
61 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 220 { 0xdc -36 } : BV:8
64 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
65 : eq(52, 64) : BOOL
66 : 45 { 0x2d } : BV:8
67 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
68 : eq(52, 67) : BOOL
69 : 128 { 0x80 -128 } : BV:8
70 : 0 { 0x0 } : BV:8
71 : ite(68, 69, 70) : BV:8
72 : ite(65, 66, 71) : BV:8
73 : ite(62, 63, 72) : BV:8
74 : ite(59, 60, 73) : BV:8
75 : ite(57, 58, 74) : BV:8
76 : ite(54, 55, 75) : BV:8
77 : bvadd(67, 51) : BV:32
78 : eq(77, 53) : BOOL
79 : eq(77, 56) : BOOL
80 : eq(77, 50) : BOOL
81 : eq(77, 61) : BOOL
82 : eq(77, 64) : BOOL
83 : eq(77, 67) : BOOL
84 : ite(83, 69, 70) : BV:8
85 : ite(82, 66, 84) : BV:8
86 : ite(81, 63, 85) : BV:8
87 : ite(80, 60, 86) : BV:8
88 : ite(79, 58, 87) : BV:8
89 : ite(78, 55, 88) : BV:8
90 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
91 : bvadd(90, 51) : BV:32
92 : eq(91, 53) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 50) : BOOL
95 : eq(91, 61) : BOOL
96 : eq(91, 64) : BOOL
97 : eq(91, 67) : BOOL
98 : ite(97, 69, 70) : BV:8
99 : ite(96, 66, 98) : BV:8
100 : ite(95, 63, 99) : BV:8
101 : ite(94, 60, 100) : BV:8
102 : ite(93, 58, 101) : BV:8
103 : ite(92, 55, 102) : BV:8
104 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
105 : bvadd(104, 51) : BV:32
106 : eq(105, 53) : BOOL
107 : eq(105, 56) : BOOL
108 : eq(105, 50) : BOOL
109 : eq(105, 61) : BOOL
110 : eq(105, 64) : BOOL
111 : eq(105, 67) : BOOL
112 : ite(111, 69, 70) : BV:8
113 : ite(110, 66, 112) : BV:8
114 : ite(109, 63, 113) : BV:8
115 : ite(108, 60, 114) : BV:8
116 : ite(107, 58, 115) : BV:8
117 : ite(106, 55, 116) : BV:8
118 : bvconcat(76, 89, 103, 117) : BV:32
119 : bvadd(48, 49, 118) : BV:32
120 : eq(119, 53) : BOOL
121 : eq(119, 56) : BOOL
122 : eq(119, 50) : BOOL
123 : eq(119, 61) : BOOL
124 : eq(119, 64) : BOOL
125 : eq(119, 67) : BOOL
126 : ite(125, 69, 70) : BV:8
127 : ite(124, 66, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 60, 128) : BV:8
130 : ite(121, 58, 129) : BV:8
131 : ite(120, 55, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 49, 118) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 50) : BOOL
137 : eq(133, 61) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 67) : BOOL
140 : ite(139, 69, 70) : BV:8
141 : ite(138, 66, 140) : BV:8
142 : ite(137, 63, 141) : BV:8
143 : ite(136, 60, 142) : BV:8
144 : ite(135, 58, 143) : BV:8
145 : ite(134, 55, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 49, 118) : BV:32
148 : eq(147, 53) : BOOL
149 : eq(147, 56) : BOOL
150 : eq(147, 50) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : ite(153, 69, 70) : BV:8
155 : ite(152, 66, 154) : BV:8
156 : ite(151, 63, 155) : BV:8
157 : ite(150, 60, 156) : BV:8
158 : ite(149, 58, 157) : BV:8
159 : ite(148, 55, 158) : BV:8
160 : bvadd(49, 118) : BV:32
161 : eq(160, 53) : BOOL
162 : eq(160, 56) : BOOL
163 : eq(160, 50) : BOOL
164 : eq(160, 61) : BOOL
165 : eq(160, 64) : BOOL
166 : eq(160, 67) : BOOL
167 : ite(166, 69, 70) : BV:8
168 : ite(165, 66, 167) : BV:8
169 : ite(164, 63, 168) : BV:8
170 : ite(163, 60, 169) : BV:8
171 : ite(162, 58, 170) : BV:8
172 : ite(161, 55, 171) : BV:8
173 : bvconcat(131, 145, 159, 172) : BV:32
174 : ite(6, 3, 173) : BV:32
175 : ite(47, 173, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : lambda(1, 2, 176) : FUNCTION[BV:32,BV:32 -> BV:32]
178 : sym_const(177) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 576902675 ] -> true, [ 576902676; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16943 : BV:32
2 : Lambda16944 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16939 : BV:32
2 : Lambda16940 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 22 { 0x16 } : BV:8
16 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 99 { 0x63 } : BV:8
19 : eq(12, 10) : BOOL
20 : 234 { 0xea -22 } : BV:8
21 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 220 { 0xdc -36 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 45 { 0x2d } : BV:8
27 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
28 : eq(12, 27) : BOOL
29 : 128 { 0x80 -128 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : bvadd(27, 11) : BV:32
38 : eq(37, 13) : BOOL
39 : eq(37, 16) : BOOL
40 : eq(37, 10) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 18, 47) : BV:8
49 : ite(38, 15, 48) : BV:8
50 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
51 : bvadd(50, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 10) : BOOL
55 : eq(51, 21) : BOOL
56 : eq(51, 24) : BOOL
57 : eq(51, 27) : BOOL
58 : ite(57, 29, 30) : BV:8
59 : ite(56, 26, 58) : BV:8
60 : ite(55, 23, 59) : BV:8
61 : ite(54, 20, 60) : BV:8
62 : ite(53, 18, 61) : BV:8
63 : ite(52, 15, 62) : BV:8
64 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
65 : bvadd(64, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 10) : BOOL
69 : eq(65, 21) : BOOL
70 : eq(65, 24) : BOOL
71 : eq(65, 27) : BOOL
72 : ite(71, 29, 30) : BV:8
73 : ite(70, 26, 72) : BV:8
74 : ite(69, 23, 73) : BV:8
75 : ite(68, 20, 74) : BV:8
76 : ite(67, 18, 75) : BV:8
77 : ite(66, 15, 76) : BV:8
78 : bvconcat(36, 49, 63, 77) : BV:32
79 : bvadd(7, 9, 78) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : ite(85, 29, 30) : BV:8
87 : ite(84, 26, 86) : BV:8
88 : ite(83, 23, 87) : BV:8
89 : ite(82, 20, 88) : BV:8
90 : ite(81, 18, 89) : BV:8
91 : ite(80, 15, 90) : BV:8
92 : 2 { 0x2 +1.23e129 } : BV:32
93 : bvadd(92, 9, 78) : BV:32
94 : eq(93, 13) : BOOL
95 : eq(93, 16) : BOOL
96 : eq(93, 10) : BOOL
97 : eq(93, 21) : BOOL
98 : eq(93, 24) : BOOL
99 : eq(93, 27) : BOOL
100 : ite(99, 29, 30) : BV:8
101 : ite(98, 26, 100) : BV:8
102 : ite(97, 23, 101) : BV:8
103 : ite(96, 20, 102) : BV:8
104 : ite(95, 18, 103) : BV:8
105 : ite(94, 15, 104) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 9, 78) : BV:32
108 : eq(107, 13) : BOOL
109 : eq(107, 16) : BOOL
110 : eq(107, 10) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : ite(113, 29, 30) : BV:8
115 : ite(112, 26, 114) : BV:8
116 : ite(111, 23, 115) : BV:8
117 : ite(110, 20, 116) : BV:8
118 : ite(109, 18, 117) : BV:8
119 : ite(108, 15, 118) : BV:8
120 : bvadd(9, 78) : BV:32
121 : eq(120, 13) : BOOL
122 : eq(120, 16) : BOOL
123 : eq(120, 10) : BOOL
124 : eq(120, 21) : BOOL
125 : eq(120, 24) : BOOL
126 : eq(120, 27) : BOOL
127 : ite(126, 29, 30) : BV:8
128 : ite(125, 26, 127) : BV:8
129 : ite(124, 23, 128) : BV:8
130 : ite(123, 20, 129) : BV:8
131 : ite(122, 18, 130) : BV:8
132 : ite(121, 15, 131) : BV:8
133 : bvconcat(91, 105, 119, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16950 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 22 { 0x16 } : BV:8
13 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 99 { 0x63 } : BV:8
16 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
17 : eq(9, 16) : BOOL
18 : 234 { 0xea -22 } : BV:8
19 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 220 { 0xdc -36 } : BV:8
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 45 { 0x2d } : BV:8
25 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
26 : eq(9, 25) : BOOL
27 : 128 { 0x80 -128 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : ite(11, 12, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 7, 8) : BV:32
37 : eq(36, 10) : BOOL
38 : eq(36, 13) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : eq(36, 22) : BOOL
42 : eq(36, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : ite(41, 24, 43) : BV:8
45 : ite(40, 21, 44) : BV:8
46 : ite(39, 18, 45) : BV:8
47 : ite(38, 15, 46) : BV:8
48 : ite(37, 12, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : ite(56, 27, 28) : BV:8
58 : ite(55, 24, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 18, 59) : BV:8
61 : ite(52, 15, 60) : BV:8
62 : ite(51, 12, 61) : BV:8
63 : bvadd(7, 8) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 13) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : eq(63, 22) : BOOL
69 : eq(63, 25) : BOOL
70 : ite(69, 27, 28) : BV:8
71 : ite(68, 24, 70) : BV:8
72 : ite(67, 21, 71) : BV:8
73 : ite(66, 18, 72) : BV:8
74 : ite(65, 15, 73) : BV:8
75 : ite(64, 12, 74) : BV:8
76 : bvconcat(34, 48, 62, 75) : BV:32
77 : ite(5, 4, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16954 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 22 { 0x16 } : BV:8
12 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 99 { 0x63 } : BV:8
15 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
16 : eq(8, 15) : BOOL
17 : 234 { 0xea -22 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 45 { 0x2d } : BV:8
24 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
25 : eq(8, 24) : BOOL
26 : 128 { 0x80 -128 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16958 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 22 { 0x16 } : BV:8
13 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 99 { 0x63 } : BV:8
16 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
17 : eq(9, 16) : BOOL
18 : 234 { 0xea -22 } : BV:8
19 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 220 { 0xdc -36 } : BV:8
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 45 { 0x2d } : BV:8
25 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
26 : eq(9, 25) : BOOL
27 : 128 { 0x80 -128 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : ite(11, 12, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 7, 8) : BV:32
37 : eq(36, 10) : BOOL
38 : eq(36, 13) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : eq(36, 22) : BOOL
42 : eq(36, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : ite(41, 24, 43) : BV:8
45 : ite(40, 21, 44) : BV:8
46 : ite(39, 18, 45) : BV:8
47 : ite(38, 15, 46) : BV:8
48 : ite(37, 12, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : ite(56, 27, 28) : BV:8
58 : ite(55, 24, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 18, 59) : BV:8
61 : ite(52, 15, 60) : BV:8
62 : ite(51, 12, 61) : BV:8
63 : bvadd(7, 8) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 13) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : eq(63, 22) : BOOL
69 : eq(63, 25) : BOOL
70 : ite(69, 27, 28) : BV:8
71 : ite(68, 24, 70) : BV:8
72 : ite(67, 21, 71) : BV:8
73 : ite(66, 18, 72) : BV:8
74 : ite(65, 15, 73) : BV:8
75 : ite(64, 12, 74) : BV:8
76 : bvconcat(34, 48, 62, 75) : BV:32
77 : ite(5, 4, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
641653874
=counter_example_end
=global nodece 65 num_edges_traversed 1
=global nodece 65 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 66
=global nodece 66 nodece z3.ce6866.num_edges_traversed2
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(epsilon)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3.ce6866 e99e41a54cf1b2a11f3b9bf9f52d3843
=input.spec-%var-x-1
1 : Lambda17005 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17008 : BV:32
18 : Lambda17006 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17007 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : bvmul(34, 52) : BV:32
77 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
78 : bvmul(34, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
81 : eq(79, 80) : BOOL
82 : 22 { 0x16 } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(79, 83) : BOOL
85 : 99 { 0x63 } : BV:8
86 : eq(79, 77) : BOOL
87 : 234 { 0xea -22 } : BV:8
88 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 220 { 0xdc -36 } : BV:8
91 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
92 : eq(79, 91) : BOOL
93 : 45 { 0x2d } : BV:8
94 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
95 : eq(79, 94) : BOOL
96 : 128 { 0x80 -128 } : BV:8
97 : 0 { 0x0 } : BV:8
98 : ite(95, 96, 97) : BV:8
99 : ite(92, 93, 98) : BV:8
100 : ite(89, 90, 99) : BV:8
101 : ite(86, 87, 100) : BV:8
102 : ite(84, 85, 101) : BV:8
103 : ite(81, 82, 102) : BV:8
104 : bvadd(94, 78) : BV:32
105 : eq(104, 80) : BOOL
106 : eq(104, 83) : BOOL
107 : eq(104, 77) : BOOL
108 : eq(104, 88) : BOOL
109 : eq(104, 91) : BOOL
110 : eq(104, 94) : BOOL
111 : ite(110, 96, 97) : BV:8
112 : ite(109, 93, 111) : BV:8
113 : ite(108, 90, 112) : BV:8
114 : ite(107, 87, 113) : BV:8
115 : ite(106, 85, 114) : BV:8
116 : ite(105, 82, 115) : BV:8
117 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
118 : bvadd(117, 78) : BV:32
119 : eq(118, 80) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 77) : BOOL
122 : eq(118, 88) : BOOL
123 : eq(118, 91) : BOOL
124 : eq(118, 94) : BOOL
125 : ite(124, 96, 97) : BV:8
126 : ite(123, 93, 125) : BV:8
127 : ite(122, 90, 126) : BV:8
128 : ite(121, 87, 127) : BV:8
129 : ite(120, 85, 128) : BV:8
130 : ite(119, 82, 129) : BV:8
131 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
132 : bvadd(131, 78) : BV:32
133 : eq(132, 80) : BOOL
134 : eq(132, 83) : BOOL
135 : eq(132, 77) : BOOL
136 : eq(132, 88) : BOOL
137 : eq(132, 91) : BOOL
138 : eq(132, 94) : BOOL
139 : ite(138, 96, 97) : BV:8
140 : ite(137, 93, 139) : BV:8
141 : ite(136, 90, 140) : BV:8
142 : ite(135, 87, 141) : BV:8
143 : ite(134, 85, 142) : BV:8
144 : ite(133, 82, 143) : BV:8
145 : bvconcat(103, 116, 130, 144) : BV:32
146 : bvadd(75, 76, 145) : BV:32
147 : eq(146, 80) : BOOL
148 : eq(146, 83) : BOOL
149 : eq(146, 77) : BOOL
150 : eq(146, 88) : BOOL
151 : eq(146, 91) : BOOL
152 : eq(146, 94) : BOOL
153 : ite(152, 96, 97) : BV:8
154 : ite(151, 93, 153) : BV:8
155 : ite(150, 90, 154) : BV:8
156 : ite(149, 87, 155) : BV:8
157 : ite(148, 85, 156) : BV:8
158 : ite(147, 82, 157) : BV:8
159 : 2 { 0x2 +1.23e129 } : BV:32
160 : bvadd(159, 76, 145) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 77) : BOOL
164 : eq(160, 88) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 94) : BOOL
167 : ite(166, 96, 97) : BV:8
168 : ite(165, 93, 167) : BV:8
169 : ite(164, 90, 168) : BV:8
170 : ite(163, 87, 169) : BV:8
171 : ite(162, 85, 170) : BV:8
172 : ite(161, 82, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 76, 145) : BV:32
175 : eq(174, 80) : BOOL
176 : eq(174, 83) : BOOL
177 : eq(174, 77) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : ite(180, 96, 97) : BV:8
182 : ite(179, 93, 181) : BV:8
183 : ite(178, 90, 182) : BV:8
184 : ite(177, 87, 183) : BV:8
185 : ite(176, 85, 184) : BV:8
186 : ite(175, 82, 185) : BV:8
187 : bvadd(76, 145) : BV:32
188 : eq(187, 80) : BOOL
189 : eq(187, 83) : BOOL
190 : eq(187, 77) : BOOL
191 : eq(187, 88) : BOOL
192 : eq(187, 91) : BOOL
193 : eq(187, 94) : BOOL
194 : ite(193, 96, 97) : BV:8
195 : ite(192, 93, 194) : BV:8
196 : ite(191, 90, 195) : BV:8
197 : ite(190, 87, 196) : BV:8
198 : ite(189, 85, 197) : BV:8
199 : ite(188, 82, 198) : BV:8
200 : bvconcat(158, 172, 186, 199) : BV:32
201 : ite(55, 2, 200) : BV:32
202 : ite(74, 200, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : lambda(52, 203) : FUNCTION[BV:32 -> BV:32]
205 : map(51, 204) : MAP[BV:32 -> BV:32]
206 : lambda(17, 205) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
207 : map(16, 206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
208 : sym_const(207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 155823378 { 0x949ad12 +1.57559418e147 } : BV:32
=input.dst.llvm-%x
1 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
=input.dst.llvm-%n
1 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
=input.dst.llvm-%m
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1524190141 ] -> 0, [ 1524190142; 1524190142 ] -> 128, [ 1524190143; 1524190143 ] -> 234, [ 1524190144; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 220, [ 2147483649; 2147483649 ] -> 45, [ 2147483650; 2147483650 ] -> 99, [ 2147483651; 2147483651 ] -> 22, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 150169143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 150169144; 150169147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 150169148; 321544823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 321544824; 321544827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 321544828; 3989058187 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3989058188; 3989058191 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3989058192; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 321544824 { 0x132a6278 +1.33113002e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3989058188 { 0xedc4328c -305909108 -1.53279256e92 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 150169144 { 0x8f36638 +1.90155696e146 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17013 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17016 : BV:32
18 : Lambda17014 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17015 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : bvmul(34, 52) : BV:32
58 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
59 : bvmul(34, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 22 { 0x16 } : BV:8
64 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 99 { 0x63 } : BV:8
67 : eq(60, 58) : BOOL
68 : 234 { 0xea -22 } : BV:8
69 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 220 { 0xdc -36 } : BV:8
72 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 45 { 0x2d } : BV:8
75 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
76 : eq(60, 75) : BOOL
77 : 128 { 0x80 -128 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(67, 68, 81) : BV:8
83 : ite(65, 66, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : bvadd(75, 59) : BV:32
86 : eq(85, 61) : BOOL
87 : eq(85, 64) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 69) : BOOL
90 : eq(85, 72) : BOOL
91 : eq(85, 75) : BOOL
92 : ite(91, 77, 78) : BV:8
93 : ite(90, 74, 92) : BV:8
94 : ite(89, 71, 93) : BV:8
95 : ite(88, 68, 94) : BV:8
96 : ite(87, 66, 95) : BV:8
97 : ite(86, 63, 96) : BV:8
98 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
99 : bvadd(98, 59) : BV:32
100 : eq(99, 61) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 58) : BOOL
103 : eq(99, 69) : BOOL
104 : eq(99, 72) : BOOL
105 : eq(99, 75) : BOOL
106 : ite(105, 77, 78) : BV:8
107 : ite(104, 74, 106) : BV:8
108 : ite(103, 71, 107) : BV:8
109 : ite(102, 68, 108) : BV:8
110 : ite(101, 66, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
113 : bvadd(112, 59) : BV:32
114 : eq(113, 61) : BOOL
115 : eq(113, 64) : BOOL
116 : eq(113, 58) : BOOL
117 : eq(113, 69) : BOOL
118 : eq(113, 72) : BOOL
119 : eq(113, 75) : BOOL
120 : ite(119, 77, 78) : BV:8
121 : ite(118, 74, 120) : BV:8
122 : ite(117, 71, 121) : BV:8
123 : ite(116, 68, 122) : BV:8
124 : ite(115, 66, 123) : BV:8
125 : ite(114, 63, 124) : BV:8
126 : bvconcat(84, 97, 111, 125) : BV:32
127 : bvadd(56, 57, 126) : BV:32
128 : eq(127, 61) : BOOL
129 : eq(127, 64) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 69) : BOOL
132 : eq(127, 72) : BOOL
133 : eq(127, 75) : BOOL
134 : ite(133, 77, 78) : BV:8
135 : ite(132, 74, 134) : BV:8
136 : ite(131, 71, 135) : BV:8
137 : ite(130, 68, 136) : BV:8
138 : ite(129, 66, 137) : BV:8
139 : ite(128, 63, 138) : BV:8
140 : 2 { 0x2 +1.23e129 } : BV:32
141 : bvadd(140, 57, 126) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 58) : BOOL
145 : eq(141, 69) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 75) : BOOL
148 : ite(147, 77, 78) : BV:8
149 : ite(146, 74, 148) : BV:8
150 : ite(145, 71, 149) : BV:8
151 : ite(144, 68, 150) : BV:8
152 : ite(143, 66, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : 1 { 0x1 +1.11e129 } : BV:32
155 : bvadd(154, 57, 126) : BV:32
156 : eq(155, 61) : BOOL
157 : eq(155, 64) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : ite(161, 77, 78) : BV:8
163 : ite(160, 74, 162) : BV:8
164 : ite(159, 71, 163) : BV:8
165 : ite(158, 68, 164) : BV:8
166 : ite(157, 66, 165) : BV:8
167 : ite(156, 63, 166) : BV:8
168 : bvadd(57, 126) : BV:32
169 : eq(168, 61) : BOOL
170 : eq(168, 64) : BOOL
171 : eq(168, 58) : BOOL
172 : eq(168, 69) : BOOL
173 : eq(168, 72) : BOOL
174 : eq(168, 75) : BOOL
175 : ite(174, 77, 78) : BV:8
176 : ite(173, 74, 175) : BV:8
177 : ite(172, 71, 176) : BV:8
178 : ite(171, 68, 177) : BV:8
179 : ite(170, 66, 178) : BV:8
180 : ite(169, 63, 179) : BV:8
181 : bvconcat(139, 153, 167, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : lambda(52, 182) : FUNCTION[BV:32 -> BV:32]
184 : map(51, 183) : MAP[BV:32 -> BV:32]
185 : lambda(17, 184) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
186 : map(16, 185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
187 : sym_const(186) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1419969750 { 0x54a304d6 +1.27358508e42 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 155823378 { 0x949ad12 +1.57559418e147 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 564238084 { 0x21a19704 +1.26242113e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3989058188 { 0xedc4328c -305909108 -1.53279256e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3989058191 { 0xedc4328f -305909105 -1.53279292e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 150169144 { 0x8f36638 +1.90155696e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 150169147 { 0x8f3663b +1.90155732e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 321544824 { 0x132a6278 +1.33113002e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 321544827 { 0x132a627b +1.33113038e167 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 576902675 ] -> true, [ 576902676; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16932 : BV:32
2 : Lambda16933 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16937 : BV:32
2 : Lambda16938 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4 { 0x4 +1.47e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 5 { 0x5 +1.59e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : bvmul(30, 2) : BV:32
50 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
51 : bvmul(30, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
54 : eq(52, 53) : BOOL
55 : 22 { 0x16 } : BV:8
56 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
57 : eq(52, 56) : BOOL
58 : 99 { 0x63 } : BV:8
59 : eq(52, 50) : BOOL
60 : 234 { 0xea -22 } : BV:8
61 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 220 { 0xdc -36 } : BV:8
64 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
65 : eq(52, 64) : BOOL
66 : 45 { 0x2d } : BV:8
67 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
68 : eq(52, 67) : BOOL
69 : 128 { 0x80 -128 } : BV:8
70 : 0 { 0x0 } : BV:8
71 : ite(68, 69, 70) : BV:8
72 : ite(65, 66, 71) : BV:8
73 : ite(62, 63, 72) : BV:8
74 : ite(59, 60, 73) : BV:8
75 : ite(57, 58, 74) : BV:8
76 : ite(54, 55, 75) : BV:8
77 : bvadd(67, 51) : BV:32
78 : eq(77, 53) : BOOL
79 : eq(77, 56) : BOOL
80 : eq(77, 50) : BOOL
81 : eq(77, 61) : BOOL
82 : eq(77, 64) : BOOL
83 : eq(77, 67) : BOOL
84 : ite(83, 69, 70) : BV:8
85 : ite(82, 66, 84) : BV:8
86 : ite(81, 63, 85) : BV:8
87 : ite(80, 60, 86) : BV:8
88 : ite(79, 58, 87) : BV:8
89 : ite(78, 55, 88) : BV:8
90 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
91 : bvadd(90, 51) : BV:32
92 : eq(91, 53) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 50) : BOOL
95 : eq(91, 61) : BOOL
96 : eq(91, 64) : BOOL
97 : eq(91, 67) : BOOL
98 : ite(97, 69, 70) : BV:8
99 : ite(96, 66, 98) : BV:8
100 : ite(95, 63, 99) : BV:8
101 : ite(94, 60, 100) : BV:8
102 : ite(93, 58, 101) : BV:8
103 : ite(92, 55, 102) : BV:8
104 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
105 : bvadd(104, 51) : BV:32
106 : eq(105, 53) : BOOL
107 : eq(105, 56) : BOOL
108 : eq(105, 50) : BOOL
109 : eq(105, 61) : BOOL
110 : eq(105, 64) : BOOL
111 : eq(105, 67) : BOOL
112 : ite(111, 69, 70) : BV:8
113 : ite(110, 66, 112) : BV:8
114 : ite(109, 63, 113) : BV:8
115 : ite(108, 60, 114) : BV:8
116 : ite(107, 58, 115) : BV:8
117 : ite(106, 55, 116) : BV:8
118 : bvconcat(76, 89, 103, 117) : BV:32
119 : bvadd(48, 49, 118) : BV:32
120 : eq(119, 53) : BOOL
121 : eq(119, 56) : BOOL
122 : eq(119, 50) : BOOL
123 : eq(119, 61) : BOOL
124 : eq(119, 64) : BOOL
125 : eq(119, 67) : BOOL
126 : ite(125, 69, 70) : BV:8
127 : ite(124, 66, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 60, 128) : BV:8
130 : ite(121, 58, 129) : BV:8
131 : ite(120, 55, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 49, 118) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 50) : BOOL
137 : eq(133, 61) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 67) : BOOL
140 : ite(139, 69, 70) : BV:8
141 : ite(138, 66, 140) : BV:8
142 : ite(137, 63, 141) : BV:8
143 : ite(136, 60, 142) : BV:8
144 : ite(135, 58, 143) : BV:8
145 : ite(134, 55, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 49, 118) : BV:32
148 : eq(147, 53) : BOOL
149 : eq(147, 56) : BOOL
150 : eq(147, 50) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : ite(153, 69, 70) : BV:8
155 : ite(152, 66, 154) : BV:8
156 : ite(151, 63, 155) : BV:8
157 : ite(150, 60, 156) : BV:8
158 : ite(149, 58, 157) : BV:8
159 : ite(148, 55, 158) : BV:8
160 : bvadd(49, 118) : BV:32
161 : eq(160, 53) : BOOL
162 : eq(160, 56) : BOOL
163 : eq(160, 50) : BOOL
164 : eq(160, 61) : BOOL
165 : eq(160, 64) : BOOL
166 : eq(160, 67) : BOOL
167 : ite(166, 69, 70) : BV:8
168 : ite(165, 66, 167) : BV:8
169 : ite(164, 63, 168) : BV:8
170 : ite(163, 60, 169) : BV:8
171 : ite(162, 58, 170) : BV:8
172 : ite(161, 55, 171) : BV:8
173 : bvconcat(131, 145, 159, 172) : BV:32
174 : ite(6, 3, 173) : BV:32
175 : ite(47, 173, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : lambda(1, 2, 176) : FUNCTION[BV:32,BV:32 -> BV:32]
178 : sym_const(177) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 576902675 ] -> true, [ 576902676; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16943 : BV:32
2 : Lambda16944 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 576902675 { 0x2262d613 +1.77215802e197 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 576902677 { 0x2262d615 +1.77215826e197 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 576902676 { 0x2262d614 +1.77215814e197 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16939 : BV:32
2 : Lambda16940 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 22 { 0x16 } : BV:8
16 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 99 { 0x63 } : BV:8
19 : eq(12, 10) : BOOL
20 : 234 { 0xea -22 } : BV:8
21 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 220 { 0xdc -36 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 45 { 0x2d } : BV:8
27 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
28 : eq(12, 27) : BOOL
29 : 128 { 0x80 -128 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : bvadd(27, 11) : BV:32
38 : eq(37, 13) : BOOL
39 : eq(37, 16) : BOOL
40 : eq(37, 10) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 18, 47) : BV:8
49 : ite(38, 15, 48) : BV:8
50 : 1524190141 { 0x5ad94bbd +1.69762384e54 } : BV:32
51 : bvadd(50, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 10) : BOOL
55 : eq(51, 21) : BOOL
56 : eq(51, 24) : BOOL
57 : eq(51, 27) : BOOL
58 : ite(57, 29, 30) : BV:8
59 : ite(56, 26, 58) : BV:8
60 : ite(55, 23, 59) : BV:8
61 : ite(54, 20, 60) : BV:8
62 : ite(53, 18, 61) : BV:8
63 : ite(52, 15, 62) : BV:8
64 : 1524190140 { 0x5ad94bbc +1.69762372e54 } : BV:32
65 : bvadd(64, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 10) : BOOL
69 : eq(65, 21) : BOOL
70 : eq(65, 24) : BOOL
71 : eq(65, 27) : BOOL
72 : ite(71, 29, 30) : BV:8
73 : ite(70, 26, 72) : BV:8
74 : ite(69, 23, 73) : BV:8
75 : ite(68, 20, 74) : BV:8
76 : ite(67, 18, 75) : BV:8
77 : ite(66, 15, 76) : BV:8
78 : bvconcat(36, 49, 63, 77) : BV:32
79 : bvadd(7, 9, 78) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : ite(85, 29, 30) : BV:8
87 : ite(84, 26, 86) : BV:8
88 : ite(83, 23, 87) : BV:8
89 : ite(82, 20, 88) : BV:8
90 : ite(81, 18, 89) : BV:8
91 : ite(80, 15, 90) : BV:8
92 : 2 { 0x2 +1.23e129 } : BV:32
93 : bvadd(92, 9, 78) : BV:32
94 : eq(93, 13) : BOOL
95 : eq(93, 16) : BOOL
96 : eq(93, 10) : BOOL
97 : eq(93, 21) : BOOL
98 : eq(93, 24) : BOOL
99 : eq(93, 27) : BOOL
100 : ite(99, 29, 30) : BV:8
101 : ite(98, 26, 100) : BV:8
102 : ite(97, 23, 101) : BV:8
103 : ite(96, 20, 102) : BV:8
104 : ite(95, 18, 103) : BV:8
105 : ite(94, 15, 104) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 9, 78) : BV:32
108 : eq(107, 13) : BOOL
109 : eq(107, 16) : BOOL
110 : eq(107, 10) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : ite(113, 29, 30) : BV:8
115 : ite(112, 26, 114) : BV:8
116 : ite(111, 23, 115) : BV:8
117 : ite(110, 20, 116) : BV:8
118 : ite(109, 18, 117) : BV:8
119 : ite(108, 15, 118) : BV:8
120 : bvadd(9, 78) : BV:32
121 : eq(120, 13) : BOOL
122 : eq(120, 16) : BOOL
123 : eq(120, 10) : BOOL
124 : eq(120, 21) : BOOL
125 : eq(120, 24) : BOOL
126 : eq(120, 27) : BOOL
127 : ite(126, 29, 30) : BV:8
128 : ite(125, 26, 127) : BV:8
129 : ite(124, 23, 128) : BV:8
130 : ite(123, 20, 129) : BV:8
131 : ite(122, 18, 130) : BV:8
132 : ite(121, 15, 131) : BV:8
133 : bvconcat(91, 105, 119, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda16950 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 22 { 0x16 } : BV:8
13 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 99 { 0x63 } : BV:8
16 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
17 : eq(9, 16) : BOOL
18 : 234 { 0xea -22 } : BV:8
19 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 220 { 0xdc -36 } : BV:8
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 45 { 0x2d } : BV:8
25 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
26 : eq(9, 25) : BOOL
27 : 128 { 0x80 -128 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : ite(11, 12, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 7, 8) : BV:32
37 : eq(36, 10) : BOOL
38 : eq(36, 13) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : eq(36, 22) : BOOL
42 : eq(36, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : ite(41, 24, 43) : BV:8
45 : ite(40, 21, 44) : BV:8
46 : ite(39, 18, 45) : BV:8
47 : ite(38, 15, 46) : BV:8
48 : ite(37, 12, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : ite(56, 27, 28) : BV:8
58 : ite(55, 24, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 18, 59) : BV:8
61 : ite(52, 15, 60) : BV:8
62 : ite(51, 12, 61) : BV:8
63 : bvadd(7, 8) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 13) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : eq(63, 22) : BOOL
69 : eq(63, 25) : BOOL
70 : ite(69, 27, 28) : BV:8
71 : ite(68, 24, 70) : BV:8
72 : ite(67, 21, 71) : BV:8
73 : ite(66, 18, 72) : BV:8
74 : ite(65, 15, 73) : BV:8
75 : ite(64, 12, 74) : BV:8
76 : bvconcat(34, 48, 62, 75) : BV:32
77 : ite(5, 4, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16954 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 22 { 0x16 } : BV:8
12 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 99 { 0x63 } : BV:8
15 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
16 : eq(8, 15) : BOOL
17 : 234 { 0xea -22 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 45 { 0x2d } : BV:8
24 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
25 : eq(8, 24) : BOOL
26 : 128 { 0x80 -128 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16958 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 375598556 { 0x16632ddc +1.77483701e173 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 22 { 0x16 } : BV:8
13 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 99 { 0x63 } : BV:8
16 : 1524190143 { 0x5ad94bbf +1.69762408e54 } : BV:32
17 : eq(9, 16) : BOOL
18 : 234 { 0xea -22 } : BV:8
19 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 220 { 0xdc -36 } : BV:8
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 45 { 0x2d } : BV:8
25 : 1524190142 { 0x5ad94bbe +1.69762396e54 } : BV:32
26 : eq(9, 25) : BOOL
27 : 128 { 0x80 -128 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : ite(11, 12, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 7, 8) : BV:32
37 : eq(36, 10) : BOOL
38 : eq(36, 13) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : eq(36, 22) : BOOL
42 : eq(36, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : ite(41, 24, 43) : BV:8
45 : ite(40, 21, 44) : BV:8
46 : ite(39, 18, 45) : BV:8
47 : ite(38, 15, 46) : BV:8
48 : ite(37, 12, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : ite(56, 27, 28) : BV:8
58 : ite(55, 24, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 18, 59) : BV:8
61 : ite(52, 15, 60) : BV:8
62 : ite(51, 12, 61) : BV:8
63 : bvadd(7, 8) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 13) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : eq(63, 22) : BOOL
69 : eq(63, 25) : BOOL
70 : ite(69, 27, 28) : BV:8
71 : ite(68, 24, 70) : BV:8
72 : ite(67, 21, 71) : BV:8
73 : ite(66, 18, 72) : BV:8
74 : ite(65, 15, 73) : BV:8
75 : ite(64, 12, 74) : BV:8
76 : bvconcat(34, 48, 62, 75) : BV:32
77 : ite(5, 4, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1570469754
=counter_example_end
=global nodece 66 num_edges_traversed 2
=global nodece 66 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 67
=global nodece 67 nodece z3.ce6926.num_edges_traversed1
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3.ce6926 b07d9e6d0e1e39ca79e3f6b89f122
=input.spec-%var-x-1
1 : Lambda17398 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17401 : BV:32
18 : Lambda17399 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17400 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
82 : eq(80, 81) : BOOL
83 : 232 { 0xe8 -24 } : BV:8
84 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
85 : eq(80, 84) : BOOL
86 : 118 { 0x76 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
90 : eq(80, 89) : BOOL
91 : 224 { 0xe0 -32 } : BV:8
92 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
93 : eq(80, 92) : BOOL
94 : 109 { 0x6d } : BV:8
95 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
96 : eq(80, 95) : BOOL
97 : 201 { 0xc9 -55 } : BV:8
98 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
99 : eq(80, 98) : BOOL
100 : 206 { 0xce -50 } : BV:8
101 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
102 : eq(80, 101) : BOOL
103 : 246 { 0xf6 -10 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
=input.dst.llvm-%n
1 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
=input.dst.llvm-%m
1 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1082654723 ] -> 0, [ 1082654724; 1082654724 ] -> 201, [ 1082654725; 1082654725 ] -> 246, [ 1082654726; 1082654726 ] -> 206, [ 1082654727; 1082654727 ] -> 255, [ 1082654728; 2156396543 ] -> 0, [ 2156396544; 2156396544 ] -> 224, [ 2156396545; 2156396545 ] -> 109, [ 2156396546; 2156396546 ] -> 118, [ 2156396547; 2156396547 ] -> 232, [ 2156396548; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540078459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 540078460; 540078463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 540078464; 1312420599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1312420600; 1312420603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1312420604; 1955342599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1955342600; 1955342603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1955342604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 540078460 { 0x2030f17c +1.38236951e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1312420600 { 0x4e39f2f8 +1.45272731e29 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1955342600 { 0x748c2908 +1.9500217e106 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17406 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17409 : BV:32
18 : Lambda17407 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17408 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
63 : eq(61, 62) : BOOL
64 : 232 { 0xe8 -24 } : BV:8
65 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
66 : eq(61, 65) : BOOL
67 : 118 { 0x76 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
71 : eq(61, 70) : BOOL
72 : 224 { 0xe0 -32 } : BV:8
73 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
74 : eq(61, 73) : BOOL
75 : 109 { 0x6d } : BV:8
76 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
77 : eq(61, 76) : BOOL
78 : 201 { 0xc9 -55 } : BV:8
79 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
80 : eq(61, 79) : BOOL
81 : 206 { 0xce -50 } : BV:8
82 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
83 : eq(61, 82) : BOOL
84 : 246 { 0xf6 -10 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 256 { 0x100 +1.3051e129 } : BV:32
2 : unit : UNIT
3 : Lambda17403 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17404 : BV:32
20 : 268435456 { 0x10000000 +1.0e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
31 : eq(29, 30) : BOOL
32 : 232 { 0xe8 -24 } : BV:8
33 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
34 : eq(29, 33) : BOOL
35 : 118 { 0x76 } : BV:8
36 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
37 : eq(29, 36) : BOOL
38 : 255 { 0xff -1 } : BV:8
39 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
40 : eq(29, 39) : BOOL
41 : 224 { 0xe0 -32 } : BV:8
42 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
43 : eq(29, 42) : BOOL
44 : 109 { 0x6d } : BV:8
45 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
46 : eq(29, 45) : BOOL
47 : 201 { 0xc9 -55 } : BV:8
48 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
49 : eq(29, 48) : BOOL
50 : 206 { 0xce -50 } : BV:8
51 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
52 : eq(29, 51) : BOOL
53 : 246 { 0xf6 -10 } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(31, 32, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : eq(64, 45) : BOOL
71 : eq(64, 48) : BOOL
72 : eq(64, 51) : BOOL
73 : ite(72, 53, 54) : BV:8
74 : ite(71, 50, 73) : BV:8
75 : ite(70, 47, 74) : BV:8
76 : ite(69, 44, 75) : BV:8
77 : ite(68, 41, 76) : BV:8
78 : ite(67, 38, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 32, 79) : BV:8
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : bvadd(81, 27, 28) : BV:32
83 : eq(82, 30) : BOOL
84 : eq(82, 33) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 39) : BOOL
87 : eq(82, 42) : BOOL
88 : eq(82, 45) : BOOL
89 : eq(82, 48) : BOOL
90 : eq(82, 51) : BOOL
91 : ite(90, 53, 54) : BV:8
92 : ite(89, 50, 91) : BV:8
93 : ite(88, 47, 92) : BV:8
94 : ite(87, 44, 93) : BV:8
95 : ite(86, 41, 94) : BV:8
96 : ite(85, 38, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : bvadd(27, 28) : BV:32
100 : eq(99, 30) : BOOL
101 : eq(99, 33) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 39) : BOOL
104 : eq(99, 42) : BOOL
105 : eq(99, 45) : BOOL
106 : eq(99, 48) : BOOL
107 : eq(99, 51) : BOOL
108 : ite(107, 53, 54) : BV:8
109 : ite(106, 50, 108) : BV:8
110 : ite(105, 47, 109) : BV:8
111 : ite(104, 44, 110) : BV:8
112 : ite(103, 41, 111) : BV:8
113 : ite(102, 38, 112) : BV:8
114 : ite(101, 35, 113) : BV:8
115 : ite(100, 32, 114) : BV:8
116 : bvconcat(62, 80, 98, 115) : BV:32
117 : ite(24, 4, 116) : BV:32
118 : ite(23, 4, 117) : BV:32
119 : ite(21, 4, 118) : BV:32
120 : lambda(19, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(18, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 927842446 { 0x374dc08e +1.60743880e239 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17411 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17412 : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
28 : eq(26, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
31 : eq(26, 30) : BOOL
32 : 118 { 0x76 } : BV:8
33 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
37 : eq(26, 36) : BOOL
38 : 224 { 0xe0 -32 } : BV:8
39 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
40 : eq(26, 39) : BOOL
41 : 109 { 0x6d } : BV:8
42 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
43 : eq(26, 42) : BOOL
44 : 201 { 0xc9 -55 } : BV:8
45 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
46 : eq(26, 45) : BOOL
47 : 206 { 0xce -50 } : BV:8
48 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
49 : eq(26, 48) : BOOL
50 : 246 { 0xf6 -10 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17414 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17415 : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
29 : eq(27, 28) : BOOL
30 : 232 { 0xe8 -24 } : BV:8
31 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
32 : eq(27, 31) : BOOL
33 : 118 { 0x76 } : BV:8
34 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
35 : eq(27, 34) : BOOL
36 : 255 { 0xff -1 } : BV:8
37 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
38 : eq(27, 37) : BOOL
39 : 224 { 0xe0 -32 } : BV:8
40 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
41 : eq(27, 40) : BOOL
42 : 109 { 0x6d } : BV:8
43 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
44 : eq(27, 43) : BOOL
45 : 201 { 0xc9 -55 } : BV:8
46 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
47 : eq(27, 46) : BOOL
48 : 206 { 0xce -50 } : BV:8
49 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
50 : eq(27, 49) : BOOL
51 : 246 { 0xf6 -10 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(29, 30, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 36, 75) : BV:8
77 : ite(64, 33, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 36, 93) : BV:8
95 : ite(82, 33, 94) : BV:8
96 : ite(81, 30, 95) : BV:8
97 : bvadd(25, 26) : BV:32
98 : eq(97, 28) : BOOL
99 : eq(97, 31) : BOOL
100 : eq(97, 34) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 36, 110) : BV:8
112 : ite(99, 33, 111) : BV:8
113 : ite(98, 30, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(22, 2, 114) : BV:32
116 : ite(21, 2, 115) : BV:32
117 : ite(19, 2, 116) : BV:32
118 : lambda(17, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(16, 118) : MAP[BV:32 -> BV:32]
120 : sym_const(119) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 896520940 { 0x356fd2ec +1.87362432e235 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 2678752256 { 0x9faa8400 -1616215040 -1.33215332e192 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2283860448 { 0x8820f1e0 -2011106848 -1.25738143e145 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 2678752256 { 0x9faa8400 -1616215040 -1.33215332e192 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 2283860448 { 0x8820f1e0 -2011106848 -1.25738143e145 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1312420600 { 0x4e39f2f8 +1.45272731e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1312420603 { 0x4e39f2fb +1.45272767e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1955342600 { 0x748c2908 +1.9500217e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1955342603 { 0x748c290b +1.9500253e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 540078460 { 0x2030f17c +1.38236951e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 540078463 { 0x2030f17f +1.38236987e193 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 669688064 ] -> true, [ 669688065; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17325 : BV:32
2 : Lambda17326 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17330 : BV:32
2 : Lambda17331 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
55 : eq(53, 54) : BOOL
56 : 232 { 0xe8 -24 } : BV:8
57 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
58 : eq(53, 57) : BOOL
59 : 118 { 0x76 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
63 : eq(53, 62) : BOOL
64 : 224 { 0xe0 -32 } : BV:8
65 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
66 : eq(53, 65) : BOOL
67 : 109 { 0x6d } : BV:8
68 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
69 : eq(53, 68) : BOOL
70 : 201 { 0xc9 -55 } : BV:8
71 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
72 : eq(53, 71) : BOOL
73 : 206 { 0xce -50 } : BV:8
74 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
75 : eq(53, 74) : BOOL
76 : 246 { 0xf6 -10 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 669688064 ] -> true, [ 669688065; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda17336 : BV:32
2 : Lambda17337 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda17332 : BV:32
2 : Lambda17333 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
17 : eq(12, 16) : BOOL
18 : 118 { 0x76 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
22 : eq(12, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
25 : eq(12, 24) : BOOL
26 : 109 { 0x6d } : BV:8
27 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
28 : eq(12, 27) : BOOL
29 : 201 { 0xc9 -55 } : BV:8
30 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
31 : eq(12, 30) : BOOL
32 : 206 { 0xce -50 } : BV:8
33 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
34 : eq(12, 33) : BOOL
35 : 246 { 0xf6 -10 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 1206910975 ] -> true, [ 1206910976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda17343 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
17 : eq(12, 16) : BOOL
18 : 118 { 0x76 } : BV:8
19 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
20 : eq(12, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
23 : eq(12, 22) : BOOL
24 : 224 { 0xe0 -32 } : BV:8
25 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
26 : eq(12, 25) : BOOL
27 : 109 { 0x6d } : BV:8
28 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
29 : eq(12, 28) : BOOL
30 : 201 { 0xc9 -55 } : BV:8
31 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
32 : eq(12, 31) : BOOL
33 : 206 { 0xce -50 } : BV:8
34 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
35 : eq(12, 34) : BOOL
36 : 246 { 0xf6 -10 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1206910975 ] -> true, [ 1206910976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda17347 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
13 : eq(11, 12) : BOOL
14 : 232 { 0xe8 -24 } : BV:8
15 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
16 : eq(11, 15) : BOOL
17 : 118 { 0x76 } : BV:8
18 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
22 : eq(11, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
25 : eq(11, 24) : BOOL
26 : 109 { 0x6d } : BV:8
27 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
28 : eq(11, 27) : BOOL
29 : 201 { 0xc9 -55 } : BV:8
30 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
31 : eq(11, 30) : BOOL
32 : 206 { 0xce -50 } : BV:8
33 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
34 : eq(11, 33) : BOOL
35 : 246 { 0xf6 -10 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1206910975 ] -> true, [ 1206910976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda17351 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
17 : eq(12, 16) : BOOL
18 : 118 { 0x76 } : BV:8
19 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
20 : eq(12, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
23 : eq(12, 22) : BOOL
24 : 224 { 0xe0 -32 } : BV:8
25 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
26 : eq(12, 25) : BOOL
27 : 109 { 0x6d } : BV:8
28 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
29 : eq(12, 28) : BOOL
30 : 201 { 0xc9 -55 } : BV:8
31 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
32 : eq(12, 31) : BOOL
33 : 206 { 0xce -50 } : BV:8
34 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
35 : eq(12, 34) : BOOL
36 : 246 { 0xf6 -10 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1245728400
=counter_example_end
=global nodece 67 num_edges_traversed 1
=global nodece 67 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 68
=global nodece 68 nodece z3.ce6978.num_edges_traversed2
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3.ce6978 92c5bc35e578eaab9b695c155e24e30
=input.spec-%var-x-1
1 : Lambda17398 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17401 : BV:32
18 : Lambda17399 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17400 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
82 : eq(80, 81) : BOOL
83 : 232 { 0xe8 -24 } : BV:8
84 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
85 : eq(80, 84) : BOOL
86 : 118 { 0x76 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
90 : eq(80, 89) : BOOL
91 : 224 { 0xe0 -32 } : BV:8
92 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
93 : eq(80, 92) : BOOL
94 : 109 { 0x6d } : BV:8
95 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
96 : eq(80, 95) : BOOL
97 : 201 { 0xc9 -55 } : BV:8
98 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
99 : eq(80, 98) : BOOL
100 : 206 { 0xce -50 } : BV:8
101 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
102 : eq(80, 101) : BOOL
103 : 246 { 0xf6 -10 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
=input.dst.llvm-%n
1 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
=input.dst.llvm-%m
1 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1082654723 ] -> 0, [ 1082654724; 1082654724 ] -> 201, [ 1082654725; 1082654725 ] -> 246, [ 1082654726; 1082654726 ] -> 206, [ 1082654727; 1082654727 ] -> 255, [ 1082654728; 2156396543 ] -> 0, [ 2156396544; 2156396544 ] -> 224, [ 2156396545; 2156396545 ] -> 109, [ 2156396546; 2156396546 ] -> 118, [ 2156396547; 2156396547 ] -> 232, [ 2156396548; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540078459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 540078460; 540078463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 540078464; 1312420599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1312420600; 1312420603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1312420604; 1955342599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1955342600; 1955342603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1955342604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 540078460 { 0x2030f17c +1.38236951e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1312420600 { 0x4e39f2f8 +1.45272731e29 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1955342600 { 0x748c2908 +1.9500217e106 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17406 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17409 : BV:32
18 : Lambda17407 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17408 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
63 : eq(61, 62) : BOOL
64 : 232 { 0xe8 -24 } : BV:8
65 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
66 : eq(61, 65) : BOOL
67 : 118 { 0x76 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
71 : eq(61, 70) : BOOL
72 : 224 { 0xe0 -32 } : BV:8
73 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
74 : eq(61, 73) : BOOL
75 : 109 { 0x6d } : BV:8
76 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
77 : eq(61, 76) : BOOL
78 : 201 { 0xc9 -55 } : BV:8
79 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
80 : eq(61, 79) : BOOL
81 : 206 { 0xce -50 } : BV:8
82 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
83 : eq(61, 82) : BOOL
84 : 246 { 0xf6 -10 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 256 { 0x100 +1.3051e129 } : BV:32
2 : unit : UNIT
3 : Lambda17403 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17404 : BV:32
20 : 268435456 { 0x10000000 +1.0e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
31 : eq(29, 30) : BOOL
32 : 232 { 0xe8 -24 } : BV:8
33 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
34 : eq(29, 33) : BOOL
35 : 118 { 0x76 } : BV:8
36 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
37 : eq(29, 36) : BOOL
38 : 255 { 0xff -1 } : BV:8
39 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
40 : eq(29, 39) : BOOL
41 : 224 { 0xe0 -32 } : BV:8
42 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
43 : eq(29, 42) : BOOL
44 : 109 { 0x6d } : BV:8
45 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
46 : eq(29, 45) : BOOL
47 : 201 { 0xc9 -55 } : BV:8
48 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
49 : eq(29, 48) : BOOL
50 : 206 { 0xce -50 } : BV:8
51 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
52 : eq(29, 51) : BOOL
53 : 246 { 0xf6 -10 } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(31, 32, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : eq(64, 45) : BOOL
71 : eq(64, 48) : BOOL
72 : eq(64, 51) : BOOL
73 : ite(72, 53, 54) : BV:8
74 : ite(71, 50, 73) : BV:8
75 : ite(70, 47, 74) : BV:8
76 : ite(69, 44, 75) : BV:8
77 : ite(68, 41, 76) : BV:8
78 : ite(67, 38, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 32, 79) : BV:8
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : bvadd(81, 27, 28) : BV:32
83 : eq(82, 30) : BOOL
84 : eq(82, 33) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 39) : BOOL
87 : eq(82, 42) : BOOL
88 : eq(82, 45) : BOOL
89 : eq(82, 48) : BOOL
90 : eq(82, 51) : BOOL
91 : ite(90, 53, 54) : BV:8
92 : ite(89, 50, 91) : BV:8
93 : ite(88, 47, 92) : BV:8
94 : ite(87, 44, 93) : BV:8
95 : ite(86, 41, 94) : BV:8
96 : ite(85, 38, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : bvadd(27, 28) : BV:32
100 : eq(99, 30) : BOOL
101 : eq(99, 33) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 39) : BOOL
104 : eq(99, 42) : BOOL
105 : eq(99, 45) : BOOL
106 : eq(99, 48) : BOOL
107 : eq(99, 51) : BOOL
108 : ite(107, 53, 54) : BV:8
109 : ite(106, 50, 108) : BV:8
110 : ite(105, 47, 109) : BV:8
111 : ite(104, 44, 110) : BV:8
112 : ite(103, 41, 111) : BV:8
113 : ite(102, 38, 112) : BV:8
114 : ite(101, 35, 113) : BV:8
115 : ite(100, 32, 114) : BV:8
116 : bvconcat(62, 80, 98, 115) : BV:32
117 : ite(24, 4, 116) : BV:32
118 : ite(23, 4, 117) : BV:32
119 : ite(21, 4, 118) : BV:32
120 : lambda(19, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(18, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 927842447 { 0x374dc08f +1.60743892e239 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17411 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17412 : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
28 : eq(26, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
31 : eq(26, 30) : BOOL
32 : 118 { 0x76 } : BV:8
33 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
37 : eq(26, 36) : BOOL
38 : 224 { 0xe0 -32 } : BV:8
39 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
40 : eq(26, 39) : BOOL
41 : 109 { 0x6d } : BV:8
42 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
43 : eq(26, 42) : BOOL
44 : 201 { 0xc9 -55 } : BV:8
45 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
46 : eq(26, 45) : BOOL
47 : 206 { 0xce -50 } : BV:8
48 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
49 : eq(26, 48) : BOOL
50 : 246 { 0xf6 -10 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17414 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17415 : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
29 : eq(27, 28) : BOOL
30 : 232 { 0xe8 -24 } : BV:8
31 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
32 : eq(27, 31) : BOOL
33 : 118 { 0x76 } : BV:8
34 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
35 : eq(27, 34) : BOOL
36 : 255 { 0xff -1 } : BV:8
37 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
38 : eq(27, 37) : BOOL
39 : 224 { 0xe0 -32 } : BV:8
40 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
41 : eq(27, 40) : BOOL
42 : 109 { 0x6d } : BV:8
43 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
44 : eq(27, 43) : BOOL
45 : 201 { 0xc9 -55 } : BV:8
46 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
47 : eq(27, 46) : BOOL
48 : 206 { 0xce -50 } : BV:8
49 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
50 : eq(27, 49) : BOOL
51 : 246 { 0xf6 -10 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(29, 30, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 36, 75) : BV:8
77 : ite(64, 33, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 36, 93) : BV:8
95 : ite(82, 33, 94) : BV:8
96 : ite(81, 30, 95) : BV:8
97 : bvadd(25, 26) : BV:32
98 : eq(97, 28) : BOOL
99 : eq(97, 31) : BOOL
100 : eq(97, 34) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 36, 110) : BV:8
112 : ite(99, 33, 111) : BV:8
113 : ite(98, 30, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(22, 2, 114) : BV:32
116 : ite(21, 2, 115) : BV:32
117 : ite(19, 2, 116) : BV:32
118 : lambda(17, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(16, 118) : MAP[BV:32 -> BV:32]
120 : sym_const(119) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 896520941 { 0x356fd2ed +1.87362444e235 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1312420600 { 0x4e39f2f8 +1.45272731e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1312420603 { 0x4e39f2fb +1.45272767e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1955342600 { 0x748c2908 +1.9500217e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1955342603 { 0x748c290b +1.9500253e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 540078460 { 0x2030f17c +1.38236951e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 540078463 { 0x2030f17f +1.38236987e193 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 669688064 ] -> true, [ 669688065; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17325 : BV:32
2 : Lambda17326 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17330 : BV:32
2 : Lambda17331 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
55 : eq(53, 54) : BOOL
56 : 232 { 0xe8 -24 } : BV:8
57 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
58 : eq(53, 57) : BOOL
59 : 118 { 0x76 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
63 : eq(53, 62) : BOOL
64 : 224 { 0xe0 -32 } : BV:8
65 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
66 : eq(53, 65) : BOOL
67 : 109 { 0x6d } : BV:8
68 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
69 : eq(53, 68) : BOOL
70 : 201 { 0xc9 -55 } : BV:8
71 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
72 : eq(53, 71) : BOOL
73 : 206 { 0xce -50 } : BV:8
74 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
75 : eq(53, 74) : BOOL
76 : 246 { 0xf6 -10 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 669688064 ] -> true, [ 669688065; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda17336 : BV:32
2 : Lambda17337 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 669688066 { 0x27eaa102 +1.83303856e208 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 669688065 { 0x27eaa101 +1.83303844e208 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1206910975 { 0x47efffff +1.87499988e16 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1206910977 { 0x47f00001 +1.87500011e16 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1206910976 { 0x47f00000 +1.87500000e16 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda17332 : BV:32
2 : Lambda17333 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
17 : eq(12, 16) : BOOL
18 : 118 { 0x76 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
22 : eq(12, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
25 : eq(12, 24) : BOOL
26 : 109 { 0x6d } : BV:8
27 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
28 : eq(12, 27) : BOOL
29 : 201 { 0xc9 -55 } : BV:8
30 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
31 : eq(12, 30) : BOOL
32 : 206 { 0xce -50 } : BV:8
33 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
34 : eq(12, 33) : BOOL
35 : 246 { 0xf6 -10 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 1206910975 ] -> true, [ 1206910976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda17343 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
17 : eq(12, 16) : BOOL
18 : 118 { 0x76 } : BV:8
19 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
20 : eq(12, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
23 : eq(12, 22) : BOOL
24 : 224 { 0xe0 -32 } : BV:8
25 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
26 : eq(12, 25) : BOOL
27 : 109 { 0x6d } : BV:8
28 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
29 : eq(12, 28) : BOOL
30 : 201 { 0xc9 -55 } : BV:8
31 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
32 : eq(12, 31) : BOOL
33 : 206 { 0xce -50 } : BV:8
34 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
35 : eq(12, 34) : BOOL
36 : 246 { 0xf6 -10 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1206910975 ] -> true, [ 1206910976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda17347 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
13 : eq(11, 12) : BOOL
14 : 232 { 0xe8 -24 } : BV:8
15 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
16 : eq(11, 15) : BOOL
17 : 118 { 0x76 } : BV:8
18 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
22 : eq(11, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
25 : eq(11, 24) : BOOL
26 : 109 { 0x6d } : BV:8
27 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
28 : eq(11, 27) : BOOL
29 : 201 { 0xc9 -55 } : BV:8
30 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
31 : eq(11, 30) : BOOL
32 : 206 { 0xce -50 } : BV:8
33 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
34 : eq(11, 33) : BOOL
35 : 246 { 0xf6 -10 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1206910975 ] -> true, [ 1206910976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda17351 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 669688064 { 0x27eaa100 +1.83303833e208 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3900075488 { 0xe8766de0 -394891808 -1.92522811e81 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2156396547 { 0x80880003 -2138570749 -1.6250035e130 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 2156396546 { 0x80880002 -2138570750 -1.6250023e130 } : BV:32
17 : eq(12, 16) : BOOL
18 : 118 { 0x76 } : BV:8
19 : 1082654727 { 0x40880007 +1.6250083e2 } : BV:32
20 : eq(12, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2156396544 { 0x80880000 -2138570752 -1.6250000e130 } : BV:32
23 : eq(12, 22) : BOOL
24 : 224 { 0xe0 -32 } : BV:8
25 : 2156396545 { 0x80880001 -2138570751 -1.6250011e130 } : BV:32
26 : eq(12, 25) : BOOL
27 : 109 { 0x6d } : BV:8
28 : 1082654724 { 0x40880004 +1.6250047e2 } : BV:32
29 : eq(12, 28) : BOOL
30 : 201 { 0xc9 -55 } : BV:8
31 : 1082654726 { 0x40880006 +1.6250071e2 } : BV:32
32 : eq(12, 31) : BOOL
33 : 206 { 0xce -50 } : BV:8
34 : 1082654725 { 0x40880005 +1.6250059e2 } : BV:32
35 : eq(12, 34) : BOOL
36 : 246 { 0xf6 -10 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1245728400
=counter_example_end
=global nodece 68 num_edges_traversed 2
=global nodece 68 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 69
=global nodece 69 nodece z3.ce7020.num_edges_traversed1
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce7020 294dfbc8409ee4929e7238dfc9a9eac3
=input.spec-%var-x-1
1 : Lambda18112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18115 : BV:32
18 : Lambda18113 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4098 { 0x1002 +1.48851e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 8) : BOOL
35 : and(33, 34) : BOOL
36 : 4099 { 0x1003 +1.48863e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : bvule(25, 18) : BOOL
41 : bvule(18, 25) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 25, 25) : BV:32
44 : ite(39, 36, 43) : BV:32
45 : ite(35, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(32, 46) : BOOL
48 : ite(47, 7, 13) : BOOL
49 : lambda(18, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda18114 : BV:32
51 : eq(17, 2) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : and(22, 27) : BOOL
55 : ite(54, 13, 13) : BOOL
56 : ite(21, 7, 55) : BOOL
57 : bvule(2, 50) : BOOL
58 : bvule(50, 8) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(36, 50) : BOOL
61 : bvule(50, 10) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(25, 50) : BOOL
64 : bvule(50, 25) : BOOL
65 : and(63, 64) : BOOL
66 : ite(65, 25, 25) : BV:32
67 : ite(62, 36, 66) : BV:32
68 : ite(59, 2, 67) : BV:32
69 : eq(68, 2) : BOOL
70 : and(32, 69) : BOOL
71 : ite(70, 7, 13) : BOOL
72 : and(56, 71) : BOOL
73 : 3 { 0x3 +1.35e129 } : BV:32
74 : 4 { 0x4 +1.47e129 } : BV:32
75 : bvmul(74, 50) : BV:32
76 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
77 : bvmul(74, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
80 : eq(78, 79) : BOOL
81 : 34 { 0x22 } : BV:8
82 : eq(78, 76) : BOOL
83 : 251 { 0xfb -5 } : BV:8
84 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
85 : eq(78, 84) : BOOL
86 : 252 { 0xfc -4 } : BV:8
87 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
88 : eq(78, 87) : BOOL
89 : 63 { 0x3f } : BV:8
90 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
91 : eq(78, 90) : BOOL
92 : 108 { 0x6c } : BV:8
93 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
94 : eq(78, 93) : BOOL
95 : 117 { 0x75 } : BV:8
96 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
97 : eq(78, 96) : BOOL
98 : 204 { 0xcc -52 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(85, 86, 103) : BV:8
105 : ite(82, 83, 104) : BV:8
106 : ite(80, 81, 105) : BV:8
107 : bvadd(93, 77) : BV:32
108 : eq(107, 79) : BOOL
109 : eq(107, 76) : BOOL
110 : eq(107, 84) : BOOL
111 : eq(107, 87) : BOOL
112 : eq(107, 90) : BOOL
113 : eq(107, 93) : BOOL
114 : eq(107, 96) : BOOL
115 : ite(114, 98, 99) : BV:8
116 : ite(113, 95, 115) : BV:8
117 : ite(112, 92, 116) : BV:8
118 : ite(111, 89, 117) : BV:8
119 : ite(110, 86, 118) : BV:8
120 : ite(109, 83, 119) : BV:8
121 : ite(108, 81, 120) : BV:8
122 : bvadd(96, 77) : BV:32
123 : eq(122, 79) : BOOL
124 : eq(122, 76) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : eq(122, 90) : BOOL
128 : eq(122, 93) : BOOL
129 : eq(122, 96) : BOOL
130 : ite(129, 98, 99) : BV:8
131 : ite(128, 95, 130) : BV:8
132 : ite(127, 92, 131) : BV:8
133 : ite(126, 89, 132) : BV:8
134 : ite(125, 86, 133) : BV:8
135 : ite(124, 83, 134) : BV:8
136 : ite(123, 81, 135) : BV:8
137 : bvadd(90, 77) : BV:32
138 : eq(137, 79) : BOOL
139 : eq(137, 76) : BOOL
140 : eq(137, 84) : BOOL
141 : eq(137, 87) : BOOL
142 : eq(137, 90) : BOOL
143 : eq(137, 93) : BOOL
144 : eq(137, 96) : BOOL
145 : ite(144, 98, 99) : BV:8
146 : ite(143, 95, 145) : BV:8
147 : ite(142, 92, 146) : BV:8
148 : ite(141, 89, 147) : BV:8
149 : ite(140, 86, 148) : BV:8
150 : ite(139, 83, 149) : BV:8
151 : ite(138, 81, 150) : BV:8
152 : bvconcat(106, 121, 136, 151) : BV:32
153 : bvadd(73, 75, 152) : BV:32
154 : eq(153, 79) : BOOL
155 : eq(153, 76) : BOOL
156 : eq(153, 84) : BOOL
157 : eq(153, 87) : BOOL
158 : eq(153, 90) : BOOL
159 : eq(153, 93) : BOOL
160 : eq(153, 96) : BOOL
161 : ite(160, 98, 99) : BV:8
162 : ite(159, 95, 161) : BV:8
163 : ite(158, 92, 162) : BV:8
164 : ite(157, 89, 163) : BV:8
165 : ite(156, 86, 164) : BV:8
166 : ite(155, 83, 165) : BV:8
167 : ite(154, 81, 166) : BV:8
168 : 2 { 0x2 +1.23e129 } : BV:32
169 : bvadd(168, 75, 152) : BV:32
170 : eq(169, 79) : BOOL
171 : eq(169, 76) : BOOL
172 : eq(169, 84) : BOOL
173 : eq(169, 87) : BOOL
174 : eq(169, 90) : BOOL
175 : eq(169, 93) : BOOL
176 : eq(169, 96) : BOOL
177 : ite(176, 98, 99) : BV:8
178 : ite(175, 95, 177) : BV:8
179 : ite(174, 92, 178) : BV:8
180 : ite(173, 89, 179) : BV:8
181 : ite(172, 86, 180) : BV:8
182 : ite(171, 83, 181) : BV:8
183 : ite(170, 81, 182) : BV:8
184 : 1 { 0x1 +1.11e129 } : BV:32
185 : bvadd(184, 75, 152) : BV:32
186 : eq(185, 79) : BOOL
187 : eq(185, 76) : BOOL
188 : eq(185, 84) : BOOL
189 : eq(185, 87) : BOOL
190 : eq(185, 90) : BOOL
191 : eq(185, 93) : BOOL
192 : eq(185, 96) : BOOL
193 : ite(192, 98, 99) : BV:8
194 : ite(191, 95, 193) : BV:8
195 : ite(190, 92, 194) : BV:8
196 : ite(189, 89, 195) : BV:8
197 : ite(188, 86, 196) : BV:8
198 : ite(187, 83, 197) : BV:8
199 : ite(186, 81, 198) : BV:8
200 : bvadd(75, 152) : BV:32
201 : eq(200, 79) : BOOL
202 : eq(200, 76) : BOOL
203 : eq(200, 84) : BOOL
204 : eq(200, 87) : BOOL
205 : eq(200, 90) : BOOL
206 : eq(200, 93) : BOOL
207 : eq(200, 96) : BOOL
208 : ite(207, 98, 99) : BV:8
209 : ite(206, 95, 208) : BV:8
210 : ite(205, 92, 209) : BV:8
211 : ite(204, 89, 210) : BV:8
212 : ite(203, 86, 211) : BV:8
213 : ite(202, 83, 212) : BV:8
214 : ite(201, 81, 213) : BV:8
215 : bvconcat(167, 183, 199, 214) : BV:32
216 : ite(53, 2, 215) : BV:32
217 : ite(72, 215, 216) : BV:32
218 : ite(53, 2, 217) : BV:32
219 : lambda(50, 218) : FUNCTION[BV:32 -> BV:32]
220 : map(49, 219) : MAP[BV:32 -> BV:32]
221 : lambda(17, 220) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
222 : map(16, 221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
223 : sym_const(222) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
=input.dst.llvm-%n
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.dst.llvm-%m
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 30541795 ] -> 0, [ 30541796; 30541796 ] -> 108, [ 30541797; 30541797 ] -> 204, [ 30541798; 30541798 ] -> 117, [ 30541799; 30541799 ] -> 251, [ 30541800; 30541823 ] -> 0, [ 30541824; 30541824 ] -> 252, [ 30541825; 30541825 ] -> 63, [ 30541826; 30541826 ] -> 34, [ 30541827; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 27529219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 27529220; 27529223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 27529224; 537427967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537427968; 537427971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537427972; 2164293635 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2164293636; 2164293639 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2164293640; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 27529220 { 0x1a41004 +1.28173875e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2164293636 { 0x81008004 -2130673660 -1.390672e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537427968 { 0x20088000 +1.6640625e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda18120 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18123 : BV:32
18 : Lambda18121 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4098 { 0x1002 +1.48851e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 8) : BOOL
35 : and(33, 34) : BOOL
36 : 4099 { 0x1003 +1.48863e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : bvule(25, 18) : BOOL
41 : bvule(18, 25) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 25, 25) : BV:32
44 : ite(39, 36, 43) : BV:32
45 : ite(35, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(32, 46) : BOOL
48 : ite(47, 7, 13) : BOOL
49 : lambda(18, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda18122 : BV:32
51 : eq(17, 2) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : 3 { 0x3 +1.35e129 } : BV:32
55 : 4 { 0x4 +1.47e129 } : BV:32
56 : bvmul(55, 50) : BV:32
57 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
58 : bvmul(55, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
61 : eq(59, 60) : BOOL
62 : 34 { 0x22 } : BV:8
63 : eq(59, 57) : BOOL
64 : 251 { 0xfb -5 } : BV:8
65 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
66 : eq(59, 65) : BOOL
67 : 252 { 0xfc -4 } : BV:8
68 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
69 : eq(59, 68) : BOOL
70 : 63 { 0x3f } : BV:8
71 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
72 : eq(59, 71) : BOOL
73 : 108 { 0x6c } : BV:8
74 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
75 : eq(59, 74) : BOOL
76 : 117 { 0x75 } : BV:8
77 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
78 : eq(59, 77) : BOOL
79 : 204 { 0xcc -52 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : ite(61, 62, 86) : BV:8
88 : bvadd(74, 58) : BV:32
89 : eq(88, 60) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 65) : BOOL
92 : eq(88, 68) : BOOL
93 : eq(88, 71) : BOOL
94 : eq(88, 74) : BOOL
95 : eq(88, 77) : BOOL
96 : ite(95, 79, 80) : BV:8
97 : ite(94, 76, 96) : BV:8
98 : ite(93, 73, 97) : BV:8
99 : ite(92, 70, 98) : BV:8
100 : ite(91, 67, 99) : BV:8
101 : ite(90, 64, 100) : BV:8
102 : ite(89, 62, 101) : BV:8
103 : bvadd(77, 58) : BV:32
104 : eq(103, 60) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : eq(103, 71) : BOOL
109 : eq(103, 74) : BOOL
110 : eq(103, 77) : BOOL
111 : ite(110, 79, 80) : BV:8
112 : ite(109, 76, 111) : BV:8
113 : ite(108, 73, 112) : BV:8
114 : ite(107, 70, 113) : BV:8
115 : ite(106, 67, 114) : BV:8
116 : ite(105, 64, 115) : BV:8
117 : ite(104, 62, 116) : BV:8
118 : bvadd(71, 58) : BV:32
119 : eq(118, 60) : BOOL
120 : eq(118, 57) : BOOL
121 : eq(118, 65) : BOOL
122 : eq(118, 68) : BOOL
123 : eq(118, 71) : BOOL
124 : eq(118, 74) : BOOL
125 : eq(118, 77) : BOOL
126 : ite(125, 79, 80) : BV:8
127 : ite(124, 76, 126) : BV:8
128 : ite(123, 73, 127) : BV:8
129 : ite(122, 70, 128) : BV:8
130 : ite(121, 67, 129) : BV:8
131 : ite(120, 64, 130) : BV:8
132 : ite(119, 62, 131) : BV:8
133 : bvconcat(87, 102, 117, 132) : BV:32
134 : bvadd(54, 56, 133) : BV:32
135 : eq(134, 60) : BOOL
136 : eq(134, 57) : BOOL
137 : eq(134, 65) : BOOL
138 : eq(134, 68) : BOOL
139 : eq(134, 71) : BOOL
140 : eq(134, 74) : BOOL
141 : eq(134, 77) : BOOL
142 : ite(141, 79, 80) : BV:8
143 : ite(140, 76, 142) : BV:8
144 : ite(139, 73, 143) : BV:8
145 : ite(138, 70, 144) : BV:8
146 : ite(137, 67, 145) : BV:8
147 : ite(136, 64, 146) : BV:8
148 : ite(135, 62, 147) : BV:8
149 : 2 { 0x2 +1.23e129 } : BV:32
150 : bvadd(149, 56, 133) : BV:32
151 : eq(150, 60) : BOOL
152 : eq(150, 57) : BOOL
153 : eq(150, 65) : BOOL
154 : eq(150, 68) : BOOL
155 : eq(150, 71) : BOOL
156 : eq(150, 74) : BOOL
157 : eq(150, 77) : BOOL
158 : ite(157, 79, 80) : BV:8
159 : ite(156, 76, 158) : BV:8
160 : ite(155, 73, 159) : BV:8
161 : ite(154, 70, 160) : BV:8
162 : ite(153, 67, 161) : BV:8
163 : ite(152, 64, 162) : BV:8
164 : ite(151, 62, 163) : BV:8
165 : 1 { 0x1 +1.11e129 } : BV:32
166 : bvadd(165, 56, 133) : BV:32
167 : eq(166, 60) : BOOL
168 : eq(166, 57) : BOOL
169 : eq(166, 65) : BOOL
170 : eq(166, 68) : BOOL
171 : eq(166, 71) : BOOL
172 : eq(166, 74) : BOOL
173 : eq(166, 77) : BOOL
174 : ite(173, 79, 80) : BV:8
175 : ite(172, 76, 174) : BV:8
176 : ite(171, 73, 175) : BV:8
177 : ite(170, 70, 176) : BV:8
178 : ite(169, 67, 177) : BV:8
179 : ite(168, 64, 178) : BV:8
180 : ite(167, 62, 179) : BV:8
181 : bvadd(56, 133) : BV:32
182 : eq(181, 60) : BOOL
183 : eq(181, 57) : BOOL
184 : eq(181, 65) : BOOL
185 : eq(181, 68) : BOOL
186 : eq(181, 71) : BOOL
187 : eq(181, 74) : BOOL
188 : eq(181, 77) : BOOL
189 : ite(188, 79, 80) : BV:8
190 : ite(187, 76, 189) : BV:8
191 : ite(186, 73, 190) : BV:8
192 : ite(185, 70, 191) : BV:8
193 : ite(184, 67, 192) : BV:8
194 : ite(183, 64, 193) : BV:8
195 : ite(182, 62, 194) : BV:8
196 : bvconcat(148, 164, 180, 195) : BV:32
197 : ite(53, 2, 196) : BV:32
198 : lambda(50, 197) : FUNCTION[BV:32 -> BV:32]
199 : map(49, 198) : MAP[BV:32 -> BV:32]
200 : lambda(17, 199) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
201 : map(16, 200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
202 : sym_const(201) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : Lambda18117 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4097 { 0x1001 +1.48840e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4098 { 0x1002 +1.48851e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda18118 : BV:32
20 : 8 { 0x8 +1.95e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 6) : BOOL
23 : eq(19, 4) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 19) : BV:32
27 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
28 : bvadd(24, 26, 27) : BV:32
29 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
30 : eq(28, 29) : BOOL
31 : 34 { 0x22 } : BV:8
32 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
33 : eq(28, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
36 : eq(28, 35) : BOOL
37 : 252 { 0xfc -4 } : BV:8
38 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
39 : eq(28, 38) : BOOL
40 : 63 { 0x3f } : BV:8
41 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
42 : eq(28, 41) : BOOL
43 : 108 { 0x6c } : BV:8
44 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
45 : eq(28, 44) : BOOL
46 : 117 { 0x75 } : BV:8
47 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
48 : eq(28, 47) : BOOL
49 : 204 { 0xcc -52 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 26, 27) : BV:32
60 : eq(59, 29) : BOOL
61 : eq(59, 32) : BOOL
62 : eq(59, 35) : BOOL
63 : eq(59, 38) : BOOL
64 : eq(59, 41) : BOOL
65 : eq(59, 44) : BOOL
66 : eq(59, 47) : BOOL
67 : ite(66, 49, 50) : BV:8
68 : ite(65, 46, 67) : BV:8
69 : ite(64, 43, 68) : BV:8
70 : ite(63, 40, 69) : BV:8
71 : ite(62, 37, 70) : BV:8
72 : ite(61, 34, 71) : BV:8
73 : ite(60, 31, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 26, 27) : BV:32
76 : eq(75, 29) : BOOL
77 : eq(75, 32) : BOOL
78 : eq(75, 35) : BOOL
79 : eq(75, 38) : BOOL
80 : eq(75, 41) : BOOL
81 : eq(75, 44) : BOOL
82 : eq(75, 47) : BOOL
83 : ite(82, 49, 50) : BV:8
84 : ite(81, 46, 83) : BV:8
85 : ite(80, 43, 84) : BV:8
86 : ite(79, 40, 85) : BV:8
87 : ite(78, 37, 86) : BV:8
88 : ite(77, 34, 87) : BV:8
89 : ite(76, 31, 88) : BV:8
90 : bvadd(26, 27) : BV:32
91 : eq(90, 29) : BOOL
92 : eq(90, 32) : BOOL
93 : eq(90, 35) : BOOL
94 : eq(90, 38) : BOOL
95 : eq(90, 41) : BOOL
96 : eq(90, 44) : BOOL
97 : eq(90, 47) : BOOL
98 : ite(97, 49, 50) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 43, 99) : BV:8
101 : ite(94, 40, 100) : BV:8
102 : ite(93, 37, 101) : BV:8
103 : ite(92, 34, 102) : BV:8
104 : ite(91, 31, 103) : BV:8
105 : bvconcat(57, 73, 89, 104) : BV:32
106 : ite(23, 4, 105) : BV:32
107 : ite(22, 4, 106) : BV:32
108 : ite(21, 4, 107) : BV:32
109 : lambda(19, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(18, 109) : MAP[BV:32 -> BV:32]
111 : sum(1, 2, 110) : SUM[UNIT,MAP[BV:32 -> BV:32]]
112 : sym_const(111) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1496170941 { 0x592dc1bd +1.35747492e51 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda18125 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4097 { 0x1001 +1.48840e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4098 { 0x1002 +1.48851e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18126 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
27 : eq(25, 26) : BOOL
28 : 34 { 0x22 } : BV:8
29 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
30 : eq(25, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
33 : eq(25, 32) : BOOL
34 : 252 { 0xfc -4 } : BV:8
35 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
36 : eq(25, 35) : BOOL
37 : 63 { 0x3f } : BV:8
38 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
39 : eq(25, 38) : BOOL
40 : 108 { 0x6c } : BV:8
41 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
42 : eq(25, 41) : BOOL
43 : 117 { 0x75 } : BV:8
44 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
45 : eq(25, 44) : BOOL
46 : 204 { 0xcc -52 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(33, 34, 51) : BV:8
53 : ite(30, 31, 52) : BV:8
54 : ite(27, 28, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 23, 24) : BV:32
57 : eq(56, 26) : BOOL
58 : eq(56, 29) : BOOL
59 : eq(56, 32) : BOOL
60 : eq(56, 35) : BOOL
61 : eq(56, 38) : BOOL
62 : eq(56, 41) : BOOL
63 : eq(56, 44) : BOOL
64 : ite(63, 46, 47) : BV:8
65 : ite(62, 43, 64) : BV:8
66 : ite(61, 40, 65) : BV:8
67 : ite(60, 37, 66) : BV:8
68 : ite(59, 34, 67) : BV:8
69 : ite(58, 31, 68) : BV:8
70 : ite(57, 28, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 23, 24) : BV:32
73 : eq(72, 26) : BOOL
74 : eq(72, 29) : BOOL
75 : eq(72, 32) : BOOL
76 : eq(72, 35) : BOOL
77 : eq(72, 38) : BOOL
78 : eq(72, 41) : BOOL
79 : eq(72, 44) : BOOL
80 : ite(79, 46, 47) : BV:8
81 : ite(78, 43, 80) : BV:8
82 : ite(77, 40, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 34, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : bvadd(23, 24) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 32) : BOOL
91 : eq(87, 35) : BOOL
92 : eq(87, 38) : BOOL
93 : eq(87, 41) : BOOL
94 : eq(87, 44) : BOOL
95 : ite(94, 46, 47) : BV:8
96 : ite(93, 43, 95) : BV:8
97 : ite(92, 40, 96) : BV:8
98 : ite(91, 37, 97) : BV:8
99 : ite(90, 34, 98) : BV:8
100 : ite(89, 31, 99) : BV:8
101 : ite(88, 28, 100) : BV:8
102 : bvconcat(54, 70, 86, 101) : BV:32
103 : ite(20, 2, 102) : BV:32
104 : ite(19, 2, 103) : BV:32
105 : lambda(17, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(16, 105) : MAP[BV:32 -> BV:32]
107 : sym_const(106) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda18128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4097 { 0x1001 +1.48840e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4098 { 0x1002 +1.48851e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18129 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 4) : BOOL
21 : eq(17, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
28 : eq(26, 27) : BOOL
29 : 34 { 0x22 } : BV:8
30 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
31 : eq(26, 30) : BOOL
32 : 251 { 0xfb -5 } : BV:8
33 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
34 : eq(26, 33) : BOOL
35 : 252 { 0xfc -4 } : BV:8
36 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
37 : eq(26, 36) : BOOL
38 : 63 { 0x3f } : BV:8
39 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
40 : eq(26, 39) : BOOL
41 : 108 { 0x6c } : BV:8
42 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
43 : eq(26, 42) : BOOL
44 : 117 { 0x75 } : BV:8
45 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
46 : eq(26, 45) : BOOL
47 : 204 { 0xcc -52 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 24, 25) : BV:32
74 : eq(73, 27) : BOOL
75 : eq(73, 30) : BOOL
76 : eq(73, 33) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 45) : BOOL
81 : ite(80, 47, 48) : BV:8
82 : ite(79, 44, 81) : BV:8
83 : ite(78, 41, 82) : BV:8
84 : ite(77, 38, 83) : BV:8
85 : ite(76, 35, 84) : BV:8
86 : ite(75, 32, 85) : BV:8
87 : ite(74, 29, 86) : BV:8
88 : bvadd(24, 25) : BV:32
89 : eq(88, 27) : BOOL
90 : eq(88, 30) : BOOL
91 : eq(88, 33) : BOOL
92 : eq(88, 36) : BOOL
93 : eq(88, 39) : BOOL
94 : eq(88, 42) : BOOL
95 : eq(88, 45) : BOOL
96 : ite(95, 47, 48) : BV:8
97 : ite(94, 44, 96) : BV:8
98 : ite(93, 41, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 35, 99) : BV:8
101 : ite(90, 32, 100) : BV:8
102 : ite(89, 29, 101) : BV:8
103 : bvconcat(55, 71, 87, 102) : BV:32
104 : ite(21, 2, 103) : BV:32
105 : ite(20, 2, 104) : BV:32
106 : ite(19, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 860877020 { 0x334ff0dc +1.62453794e231 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 16388 { 0x4004 +1.195360e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2260992 { 0x228000 +1.26953125e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 16388 { 0x4004 +1.195360e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 2260992 { 0x228000 +1.26953125e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2164293636 { 0x81008004 -2130673660 -1.390672e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2164293639 { 0x81008007 -2130673657 -1.390708e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537427968 { 0x20088000 +1.6640625e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537427971 { 0x20088003 +1.6640660e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 27529220 { 0x1a41004 +1.28173875e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 27529223 { 0x1a41007 +1.28173911e132 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda18039 : BV:32
2 : Lambda18040 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4096 { 0x1000 +1.48828e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4098 { 0x1002 +1.48851e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 8) : BOOL
23 : and(21, 22) : BOOL
24 : 4099 { 0x1003 +1.48863e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(12, 2) : BOOL
29 : bvule(2, 12) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 12, 12) : BV:32
32 : ite(27, 24, 31) : BV:32
33 : ite(23, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(20, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BOOL]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda18044 : BV:32
2 : Lambda18045 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4098 { 0x1002 +1.48851e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 12) : BOOL
31 : and(29, 30) : BOOL
32 : 4099 { 0x1003 +1.48863e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 2) : BOOL
37 : bvule(2, 22) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 22, 22) : BV:32
40 : ite(35, 32, 39) : BV:32
41 : ite(31, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(28, 42) : BOOL
44 : ite(43, 11, 17) : BOOL
45 : and(19, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 2) : BV:32
49 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
50 : bvmul(47, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
53 : eq(51, 52) : BOOL
54 : 34 { 0x22 } : BV:8
55 : eq(51, 49) : BOOL
56 : 251 { 0xfb -5 } : BV:8
57 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
58 : eq(51, 57) : BOOL
59 : 252 { 0xfc -4 } : BV:8
60 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
61 : eq(51, 60) : BOOL
62 : 63 { 0x3f } : BV:8
63 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
64 : eq(51, 63) : BOOL
65 : 108 { 0x6c } : BV:8
66 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
67 : eq(51, 66) : BOOL
68 : 117 { 0x75 } : BV:8
69 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
70 : eq(51, 69) : BOOL
71 : 204 { 0xcc -52 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(58, 59, 76) : BV:8
78 : ite(55, 56, 77) : BV:8
79 : ite(53, 54, 78) : BV:8
80 : bvadd(66, 50) : BV:32
81 : eq(80, 52) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 57) : BOOL
84 : eq(80, 60) : BOOL
85 : eq(80, 63) : BOOL
86 : eq(80, 66) : BOOL
87 : eq(80, 69) : BOOL
88 : ite(87, 71, 72) : BV:8
89 : ite(86, 68, 88) : BV:8
90 : ite(85, 65, 89) : BV:8
91 : ite(84, 62, 90) : BV:8
92 : ite(83, 59, 91) : BV:8
93 : ite(82, 56, 92) : BV:8
94 : ite(81, 54, 93) : BV:8
95 : bvadd(69, 50) : BV:32
96 : eq(95, 52) : BOOL
97 : eq(95, 49) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : eq(95, 63) : BOOL
101 : eq(95, 66) : BOOL
102 : eq(95, 69) : BOOL
103 : ite(102, 71, 72) : BV:8
104 : ite(101, 68, 103) : BV:8
105 : ite(100, 65, 104) : BV:8
106 : ite(99, 62, 105) : BV:8
107 : ite(98, 59, 106) : BV:8
108 : ite(97, 56, 107) : BV:8
109 : ite(96, 54, 108) : BV:8
110 : bvadd(63, 50) : BV:32
111 : eq(110, 52) : BOOL
112 : eq(110, 49) : BOOL
113 : eq(110, 57) : BOOL
114 : eq(110, 60) : BOOL
115 : eq(110, 63) : BOOL
116 : eq(110, 66) : BOOL
117 : eq(110, 69) : BOOL
118 : ite(117, 71, 72) : BV:8
119 : ite(116, 68, 118) : BV:8
120 : ite(115, 65, 119) : BV:8
121 : ite(114, 62, 120) : BV:8
122 : ite(113, 59, 121) : BV:8
123 : ite(112, 56, 122) : BV:8
124 : ite(111, 54, 123) : BV:8
125 : bvconcat(79, 94, 109, 124) : BV:32
126 : bvadd(46, 48, 125) : BV:32
127 : eq(126, 52) : BOOL
128 : eq(126, 49) : BOOL
129 : eq(126, 57) : BOOL
130 : eq(126, 60) : BOOL
131 : eq(126, 63) : BOOL
132 : eq(126, 66) : BOOL
133 : eq(126, 69) : BOOL
134 : ite(133, 71, 72) : BV:8
135 : ite(132, 68, 134) : BV:8
136 : ite(131, 65, 135) : BV:8
137 : ite(130, 62, 136) : BV:8
138 : ite(129, 59, 137) : BV:8
139 : ite(128, 56, 138) : BV:8
140 : ite(127, 54, 139) : BV:8
141 : 2 { 0x2 +1.23e129 } : BV:32
142 : bvadd(141, 48, 125) : BV:32
143 : eq(142, 52) : BOOL
144 : eq(142, 49) : BOOL
145 : eq(142, 57) : BOOL
146 : eq(142, 60) : BOOL
147 : eq(142, 63) : BOOL
148 : eq(142, 66) : BOOL
149 : eq(142, 69) : BOOL
150 : ite(149, 71, 72) : BV:8
151 : ite(148, 68, 150) : BV:8
152 : ite(147, 65, 151) : BV:8
153 : ite(146, 62, 152) : BV:8
154 : ite(145, 59, 153) : BV:8
155 : ite(144, 56, 154) : BV:8
156 : ite(143, 54, 155) : BV:8
157 : 1 { 0x1 +1.11e129 } : BV:32
158 : bvadd(157, 48, 125) : BV:32
159 : eq(158, 52) : BOOL
160 : eq(158, 49) : BOOL
161 : eq(158, 57) : BOOL
162 : eq(158, 60) : BOOL
163 : eq(158, 63) : BOOL
164 : eq(158, 66) : BOOL
165 : eq(158, 69) : BOOL
166 : ite(165, 71, 72) : BV:8
167 : ite(164, 68, 166) : BV:8
168 : ite(163, 65, 167) : BV:8
169 : ite(162, 62, 168) : BV:8
170 : ite(161, 59, 169) : BV:8
171 : ite(160, 56, 170) : BV:8
172 : ite(159, 54, 171) : BV:8
173 : bvadd(48, 125) : BV:32
174 : eq(173, 52) : BOOL
175 : eq(173, 49) : BOOL
176 : eq(173, 57) : BOOL
177 : eq(173, 60) : BOOL
178 : eq(173, 63) : BOOL
179 : eq(173, 66) : BOOL
180 : eq(173, 69) : BOOL
181 : ite(180, 71, 72) : BV:8
182 : ite(179, 68, 181) : BV:8
183 : ite(178, 65, 182) : BV:8
184 : ite(177, 62, 183) : BV:8
185 : ite(176, 59, 184) : BV:8
186 : ite(175, 56, 185) : BV:8
187 : ite(174, 54, 186) : BV:8
188 : bvconcat(140, 156, 172, 187) : BV:32
189 : ite(6, 3, 188) : BV:32
190 : ite(45, 188, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : lambda(1, 2, 191) : FUNCTION[BV:32,BV:32 -> BV:32]
193 : sym_const(192) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda18050 : BV:32
2 : Lambda18051 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4096 { 0x1000 +1.48828e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4098 { 0x1002 +1.48851e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 8) : BOOL
23 : and(21, 22) : BOOL
24 : 4099 { 0x1003 +1.48863e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(12, 2) : BOOL
29 : bvule(2, 12) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 12, 12) : BV:32
32 : ite(27, 24, 31) : BV:32
33 : ite(23, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(20, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BOOL]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda18046 : BV:32
2 : Lambda18047 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
14 : eq(12, 13) : BOOL
15 : 34 { 0x22 } : BV:8
16 : eq(12, 10) : BOOL
17 : 251 { 0xfb -5 } : BV:8
18 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
19 : eq(12, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
22 : eq(12, 21) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
25 : eq(12, 24) : BOOL
26 : 108 { 0x6c } : BV:8
27 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
28 : eq(12, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
31 : eq(12, 30) : BOOL
32 : 204 { 0xcc -52 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(24, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda18057 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4097 { 0x1001 +1.48840e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
14 : eq(12, 13) : BOOL
15 : 34 { 0x22 } : BV:8
16 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
17 : eq(12, 16) : BOOL
18 : 251 { 0xfb -5 } : BV:8
19 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
20 : eq(12, 19) : BOOL
21 : 252 { 0xfc -4 } : BV:8
22 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
23 : eq(12, 22) : BOOL
24 : 63 { 0x3f } : BV:8
25 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
26 : eq(12, 25) : BOOL
27 : 108 { 0x6c } : BV:8
28 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
29 : eq(12, 28) : BOOL
30 : 117 { 0x75 } : BV:8
31 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
32 : eq(12, 31) : BOOL
33 : 204 { 0xcc -52 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda18061 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4097 { 0x1001 +1.48840e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
13 : eq(11, 12) : BOOL
14 : 34 { 0x22 } : BV:8
15 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
16 : eq(11, 15) : BOOL
17 : 251 { 0xfb -5 } : BV:8
18 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
19 : eq(11, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
22 : eq(11, 21) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
25 : eq(11, 24) : BOOL
26 : 108 { 0x6c } : BV:8
27 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
28 : eq(11, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
31 : eq(11, 30) : BOOL
32 : 204 { 0xcc -52 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda18065 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4097 { 0x1001 +1.48840e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
14 : eq(12, 13) : BOOL
15 : 34 { 0x22 } : BV:8
16 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
17 : eq(12, 16) : BOOL
18 : 251 { 0xfb -5 } : BV:8
19 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
20 : eq(12, 19) : BOOL
21 : 252 { 0xfc -4 } : BV:8
22 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
23 : eq(12, 22) : BOOL
24 : 63 { 0x3f } : BV:8
25 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
26 : eq(12, 25) : BOOL
27 : 108 { 0x6c } : BV:8
28 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
29 : eq(12, 28) : BOOL
30 : 117 { 0x75 } : BV:8
31 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
32 : eq(12, 31) : BOOL
33 : 204 { 0xcc -52 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2944110110
=counter_example_end
=global nodece 69 num_edges_traversed 1
=global nodece 69 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 70
=global nodece 70 nodece z3.ce7062.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce7062 c221a0dfa5f03d4ddc93b9e9486f2fd
=input.spec-%var-x-1
1 : Lambda18112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18115 : BV:32
18 : Lambda18113 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4098 { 0x1002 +1.48851e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 8) : BOOL
35 : and(33, 34) : BOOL
36 : 4099 { 0x1003 +1.48863e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : bvule(25, 18) : BOOL
41 : bvule(18, 25) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 25, 25) : BV:32
44 : ite(39, 36, 43) : BV:32
45 : ite(35, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(32, 46) : BOOL
48 : ite(47, 7, 13) : BOOL
49 : lambda(18, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda18114 : BV:32
51 : eq(17, 2) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : and(22, 27) : BOOL
55 : ite(54, 13, 13) : BOOL
56 : ite(21, 7, 55) : BOOL
57 : bvule(2, 50) : BOOL
58 : bvule(50, 8) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(36, 50) : BOOL
61 : bvule(50, 10) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(25, 50) : BOOL
64 : bvule(50, 25) : BOOL
65 : and(63, 64) : BOOL
66 : ite(65, 25, 25) : BV:32
67 : ite(62, 36, 66) : BV:32
68 : ite(59, 2, 67) : BV:32
69 : eq(68, 2) : BOOL
70 : and(32, 69) : BOOL
71 : ite(70, 7, 13) : BOOL
72 : and(56, 71) : BOOL
73 : 3 { 0x3 +1.35e129 } : BV:32
74 : 4 { 0x4 +1.47e129 } : BV:32
75 : bvmul(74, 50) : BV:32
76 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
77 : bvmul(74, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
80 : eq(78, 79) : BOOL
81 : 34 { 0x22 } : BV:8
82 : eq(78, 76) : BOOL
83 : 251 { 0xfb -5 } : BV:8
84 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
85 : eq(78, 84) : BOOL
86 : 252 { 0xfc -4 } : BV:8
87 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
88 : eq(78, 87) : BOOL
89 : 63 { 0x3f } : BV:8
90 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
91 : eq(78, 90) : BOOL
92 : 108 { 0x6c } : BV:8
93 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
94 : eq(78, 93) : BOOL
95 : 117 { 0x75 } : BV:8
96 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
97 : eq(78, 96) : BOOL
98 : 204 { 0xcc -52 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(85, 86, 103) : BV:8
105 : ite(82, 83, 104) : BV:8
106 : ite(80, 81, 105) : BV:8
107 : bvadd(93, 77) : BV:32
108 : eq(107, 79) : BOOL
109 : eq(107, 76) : BOOL
110 : eq(107, 84) : BOOL
111 : eq(107, 87) : BOOL
112 : eq(107, 90) : BOOL
113 : eq(107, 93) : BOOL
114 : eq(107, 96) : BOOL
115 : ite(114, 98, 99) : BV:8
116 : ite(113, 95, 115) : BV:8
117 : ite(112, 92, 116) : BV:8
118 : ite(111, 89, 117) : BV:8
119 : ite(110, 86, 118) : BV:8
120 : ite(109, 83, 119) : BV:8
121 : ite(108, 81, 120) : BV:8
122 : bvadd(96, 77) : BV:32
123 : eq(122, 79) : BOOL
124 : eq(122, 76) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : eq(122, 90) : BOOL
128 : eq(122, 93) : BOOL
129 : eq(122, 96) : BOOL
130 : ite(129, 98, 99) : BV:8
131 : ite(128, 95, 130) : BV:8
132 : ite(127, 92, 131) : BV:8
133 : ite(126, 89, 132) : BV:8
134 : ite(125, 86, 133) : BV:8
135 : ite(124, 83, 134) : BV:8
136 : ite(123, 81, 135) : BV:8
137 : bvadd(90, 77) : BV:32
138 : eq(137, 79) : BOOL
139 : eq(137, 76) : BOOL
140 : eq(137, 84) : BOOL
141 : eq(137, 87) : BOOL
142 : eq(137, 90) : BOOL
143 : eq(137, 93) : BOOL
144 : eq(137, 96) : BOOL
145 : ite(144, 98, 99) : BV:8
146 : ite(143, 95, 145) : BV:8
147 : ite(142, 92, 146) : BV:8
148 : ite(141, 89, 147) : BV:8
149 : ite(140, 86, 148) : BV:8
150 : ite(139, 83, 149) : BV:8
151 : ite(138, 81, 150) : BV:8
152 : bvconcat(106, 121, 136, 151) : BV:32
153 : bvadd(73, 75, 152) : BV:32
154 : eq(153, 79) : BOOL
155 : eq(153, 76) : BOOL
156 : eq(153, 84) : BOOL
157 : eq(153, 87) : BOOL
158 : eq(153, 90) : BOOL
159 : eq(153, 93) : BOOL
160 : eq(153, 96) : BOOL
161 : ite(160, 98, 99) : BV:8
162 : ite(159, 95, 161) : BV:8
163 : ite(158, 92, 162) : BV:8
164 : ite(157, 89, 163) : BV:8
165 : ite(156, 86, 164) : BV:8
166 : ite(155, 83, 165) : BV:8
167 : ite(154, 81, 166) : BV:8
168 : 2 { 0x2 +1.23e129 } : BV:32
169 : bvadd(168, 75, 152) : BV:32
170 : eq(169, 79) : BOOL
171 : eq(169, 76) : BOOL
172 : eq(169, 84) : BOOL
173 : eq(169, 87) : BOOL
174 : eq(169, 90) : BOOL
175 : eq(169, 93) : BOOL
176 : eq(169, 96) : BOOL
177 : ite(176, 98, 99) : BV:8
178 : ite(175, 95, 177) : BV:8
179 : ite(174, 92, 178) : BV:8
180 : ite(173, 89, 179) : BV:8
181 : ite(172, 86, 180) : BV:8
182 : ite(171, 83, 181) : BV:8
183 : ite(170, 81, 182) : BV:8
184 : 1 { 0x1 +1.11e129 } : BV:32
185 : bvadd(184, 75, 152) : BV:32
186 : eq(185, 79) : BOOL
187 : eq(185, 76) : BOOL
188 : eq(185, 84) : BOOL
189 : eq(185, 87) : BOOL
190 : eq(185, 90) : BOOL
191 : eq(185, 93) : BOOL
192 : eq(185, 96) : BOOL
193 : ite(192, 98, 99) : BV:8
194 : ite(191, 95, 193) : BV:8
195 : ite(190, 92, 194) : BV:8
196 : ite(189, 89, 195) : BV:8
197 : ite(188, 86, 196) : BV:8
198 : ite(187, 83, 197) : BV:8
199 : ite(186, 81, 198) : BV:8
200 : bvadd(75, 152) : BV:32
201 : eq(200, 79) : BOOL
202 : eq(200, 76) : BOOL
203 : eq(200, 84) : BOOL
204 : eq(200, 87) : BOOL
205 : eq(200, 90) : BOOL
206 : eq(200, 93) : BOOL
207 : eq(200, 96) : BOOL
208 : ite(207, 98, 99) : BV:8
209 : ite(206, 95, 208) : BV:8
210 : ite(205, 92, 209) : BV:8
211 : ite(204, 89, 210) : BV:8
212 : ite(203, 86, 211) : BV:8
213 : ite(202, 83, 212) : BV:8
214 : ite(201, 81, 213) : BV:8
215 : bvconcat(167, 183, 199, 214) : BV:32
216 : ite(53, 2, 215) : BV:32
217 : ite(72, 215, 216) : BV:32
218 : ite(53, 2, 217) : BV:32
219 : lambda(50, 218) : FUNCTION[BV:32 -> BV:32]
220 : map(49, 219) : MAP[BV:32 -> BV:32]
221 : lambda(17, 220) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
222 : map(16, 221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
223 : sym_const(222) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
=input.dst.llvm-%n
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.dst.llvm-%m
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 30541795 ] -> 0, [ 30541796; 30541796 ] -> 108, [ 30541797; 30541797 ] -> 204, [ 30541798; 30541798 ] -> 117, [ 30541799; 30541799 ] -> 251, [ 30541800; 30541823 ] -> 0, [ 30541824; 30541824 ] -> 252, [ 30541825; 30541825 ] -> 63, [ 30541826; 30541826 ] -> 34, [ 30541827; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 27529219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 27529220; 27529223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 27529224; 537427967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537427968; 537427971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537427972; 2164293635 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2164293636; 2164293639 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2164293640; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 27529220 { 0x1a41004 +1.28173875e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2164293636 { 0x81008004 -2130673660 -1.390672e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537427968 { 0x20088000 +1.6640625e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda18120 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18123 : BV:32
18 : Lambda18121 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4098 { 0x1002 +1.48851e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 8) : BOOL
35 : and(33, 34) : BOOL
36 : 4099 { 0x1003 +1.48863e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : bvule(25, 18) : BOOL
41 : bvule(18, 25) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 25, 25) : BV:32
44 : ite(39, 36, 43) : BV:32
45 : ite(35, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(32, 46) : BOOL
48 : ite(47, 7, 13) : BOOL
49 : lambda(18, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda18122 : BV:32
51 : eq(17, 2) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : 3 { 0x3 +1.35e129 } : BV:32
55 : 4 { 0x4 +1.47e129 } : BV:32
56 : bvmul(55, 50) : BV:32
57 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
58 : bvmul(55, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
61 : eq(59, 60) : BOOL
62 : 34 { 0x22 } : BV:8
63 : eq(59, 57) : BOOL
64 : 251 { 0xfb -5 } : BV:8
65 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
66 : eq(59, 65) : BOOL
67 : 252 { 0xfc -4 } : BV:8
68 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
69 : eq(59, 68) : BOOL
70 : 63 { 0x3f } : BV:8
71 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
72 : eq(59, 71) : BOOL
73 : 108 { 0x6c } : BV:8
74 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
75 : eq(59, 74) : BOOL
76 : 117 { 0x75 } : BV:8
77 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
78 : eq(59, 77) : BOOL
79 : 204 { 0xcc -52 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : ite(61, 62, 86) : BV:8
88 : bvadd(74, 58) : BV:32
89 : eq(88, 60) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 65) : BOOL
92 : eq(88, 68) : BOOL
93 : eq(88, 71) : BOOL
94 : eq(88, 74) : BOOL
95 : eq(88, 77) : BOOL
96 : ite(95, 79, 80) : BV:8
97 : ite(94, 76, 96) : BV:8
98 : ite(93, 73, 97) : BV:8
99 : ite(92, 70, 98) : BV:8
100 : ite(91, 67, 99) : BV:8
101 : ite(90, 64, 100) : BV:8
102 : ite(89, 62, 101) : BV:8
103 : bvadd(77, 58) : BV:32
104 : eq(103, 60) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : eq(103, 71) : BOOL
109 : eq(103, 74) : BOOL
110 : eq(103, 77) : BOOL
111 : ite(110, 79, 80) : BV:8
112 : ite(109, 76, 111) : BV:8
113 : ite(108, 73, 112) : BV:8
114 : ite(107, 70, 113) : BV:8
115 : ite(106, 67, 114) : BV:8
116 : ite(105, 64, 115) : BV:8
117 : ite(104, 62, 116) : BV:8
118 : bvadd(71, 58) : BV:32
119 : eq(118, 60) : BOOL
120 : eq(118, 57) : BOOL
121 : eq(118, 65) : BOOL
122 : eq(118, 68) : BOOL
123 : eq(118, 71) : BOOL
124 : eq(118, 74) : BOOL
125 : eq(118, 77) : BOOL
126 : ite(125, 79, 80) : BV:8
127 : ite(124, 76, 126) : BV:8
128 : ite(123, 73, 127) : BV:8
129 : ite(122, 70, 128) : BV:8
130 : ite(121, 67, 129) : BV:8
131 : ite(120, 64, 130) : BV:8
132 : ite(119, 62, 131) : BV:8
133 : bvconcat(87, 102, 117, 132) : BV:32
134 : bvadd(54, 56, 133) : BV:32
135 : eq(134, 60) : BOOL
136 : eq(134, 57) : BOOL
137 : eq(134, 65) : BOOL
138 : eq(134, 68) : BOOL
139 : eq(134, 71) : BOOL
140 : eq(134, 74) : BOOL
141 : eq(134, 77) : BOOL
142 : ite(141, 79, 80) : BV:8
143 : ite(140, 76, 142) : BV:8
144 : ite(139, 73, 143) : BV:8
145 : ite(138, 70, 144) : BV:8
146 : ite(137, 67, 145) : BV:8
147 : ite(136, 64, 146) : BV:8
148 : ite(135, 62, 147) : BV:8
149 : 2 { 0x2 +1.23e129 } : BV:32
150 : bvadd(149, 56, 133) : BV:32
151 : eq(150, 60) : BOOL
152 : eq(150, 57) : BOOL
153 : eq(150, 65) : BOOL
154 : eq(150, 68) : BOOL
155 : eq(150, 71) : BOOL
156 : eq(150, 74) : BOOL
157 : eq(150, 77) : BOOL
158 : ite(157, 79, 80) : BV:8
159 : ite(156, 76, 158) : BV:8
160 : ite(155, 73, 159) : BV:8
161 : ite(154, 70, 160) : BV:8
162 : ite(153, 67, 161) : BV:8
163 : ite(152, 64, 162) : BV:8
164 : ite(151, 62, 163) : BV:8
165 : 1 { 0x1 +1.11e129 } : BV:32
166 : bvadd(165, 56, 133) : BV:32
167 : eq(166, 60) : BOOL
168 : eq(166, 57) : BOOL
169 : eq(166, 65) : BOOL
170 : eq(166, 68) : BOOL
171 : eq(166, 71) : BOOL
172 : eq(166, 74) : BOOL
173 : eq(166, 77) : BOOL
174 : ite(173, 79, 80) : BV:8
175 : ite(172, 76, 174) : BV:8
176 : ite(171, 73, 175) : BV:8
177 : ite(170, 70, 176) : BV:8
178 : ite(169, 67, 177) : BV:8
179 : ite(168, 64, 178) : BV:8
180 : ite(167, 62, 179) : BV:8
181 : bvadd(56, 133) : BV:32
182 : eq(181, 60) : BOOL
183 : eq(181, 57) : BOOL
184 : eq(181, 65) : BOOL
185 : eq(181, 68) : BOOL
186 : eq(181, 71) : BOOL
187 : eq(181, 74) : BOOL
188 : eq(181, 77) : BOOL
189 : ite(188, 79, 80) : BV:8
190 : ite(187, 76, 189) : BV:8
191 : ite(186, 73, 190) : BV:8
192 : ite(185, 70, 191) : BV:8
193 : ite(184, 67, 192) : BV:8
194 : ite(183, 64, 193) : BV:8
195 : ite(182, 62, 194) : BV:8
196 : bvconcat(148, 164, 180, 195) : BV:32
197 : ite(53, 2, 196) : BV:32
198 : lambda(50, 197) : FUNCTION[BV:32 -> BV:32]
199 : map(49, 198) : MAP[BV:32 -> BV:32]
200 : lambda(17, 199) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
201 : map(16, 200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
202 : sym_const(201) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 619542532 { 0x24ed7804 +1.85522508e202 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1639976548 { 0x61c00e64 +1.50043916e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2164293636 { 0x81008004 -2130673660 -1.390672e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2164293639 { 0x81008007 -2130673657 -1.390708e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537427968 { 0x20088000 +1.6640625e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537427971 { 0x20088003 +1.6640660e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 27529220 { 0x1a41004 +1.28173875e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 27529223 { 0x1a41007 +1.28173911e132 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda18039 : BV:32
2 : Lambda18040 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4096 { 0x1000 +1.48828e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4098 { 0x1002 +1.48851e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 8) : BOOL
23 : and(21, 22) : BOOL
24 : 4099 { 0x1003 +1.48863e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(12, 2) : BOOL
29 : bvule(2, 12) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 12, 12) : BV:32
32 : ite(27, 24, 31) : BV:32
33 : ite(23, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(20, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BOOL]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda18044 : BV:32
2 : Lambda18045 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4098 { 0x1002 +1.48851e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 12) : BOOL
31 : and(29, 30) : BOOL
32 : 4099 { 0x1003 +1.48863e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 2) : BOOL
37 : bvule(2, 22) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 22, 22) : BV:32
40 : ite(35, 32, 39) : BV:32
41 : ite(31, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(28, 42) : BOOL
44 : ite(43, 11, 17) : BOOL
45 : and(19, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 2) : BV:32
49 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
50 : bvmul(47, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
53 : eq(51, 52) : BOOL
54 : 34 { 0x22 } : BV:8
55 : eq(51, 49) : BOOL
56 : 251 { 0xfb -5 } : BV:8
57 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
58 : eq(51, 57) : BOOL
59 : 252 { 0xfc -4 } : BV:8
60 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
61 : eq(51, 60) : BOOL
62 : 63 { 0x3f } : BV:8
63 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
64 : eq(51, 63) : BOOL
65 : 108 { 0x6c } : BV:8
66 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
67 : eq(51, 66) : BOOL
68 : 117 { 0x75 } : BV:8
69 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
70 : eq(51, 69) : BOOL
71 : 204 { 0xcc -52 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(58, 59, 76) : BV:8
78 : ite(55, 56, 77) : BV:8
79 : ite(53, 54, 78) : BV:8
80 : bvadd(66, 50) : BV:32
81 : eq(80, 52) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 57) : BOOL
84 : eq(80, 60) : BOOL
85 : eq(80, 63) : BOOL
86 : eq(80, 66) : BOOL
87 : eq(80, 69) : BOOL
88 : ite(87, 71, 72) : BV:8
89 : ite(86, 68, 88) : BV:8
90 : ite(85, 65, 89) : BV:8
91 : ite(84, 62, 90) : BV:8
92 : ite(83, 59, 91) : BV:8
93 : ite(82, 56, 92) : BV:8
94 : ite(81, 54, 93) : BV:8
95 : bvadd(69, 50) : BV:32
96 : eq(95, 52) : BOOL
97 : eq(95, 49) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : eq(95, 63) : BOOL
101 : eq(95, 66) : BOOL
102 : eq(95, 69) : BOOL
103 : ite(102, 71, 72) : BV:8
104 : ite(101, 68, 103) : BV:8
105 : ite(100, 65, 104) : BV:8
106 : ite(99, 62, 105) : BV:8
107 : ite(98, 59, 106) : BV:8
108 : ite(97, 56, 107) : BV:8
109 : ite(96, 54, 108) : BV:8
110 : bvadd(63, 50) : BV:32
111 : eq(110, 52) : BOOL
112 : eq(110, 49) : BOOL
113 : eq(110, 57) : BOOL
114 : eq(110, 60) : BOOL
115 : eq(110, 63) : BOOL
116 : eq(110, 66) : BOOL
117 : eq(110, 69) : BOOL
118 : ite(117, 71, 72) : BV:8
119 : ite(116, 68, 118) : BV:8
120 : ite(115, 65, 119) : BV:8
121 : ite(114, 62, 120) : BV:8
122 : ite(113, 59, 121) : BV:8
123 : ite(112, 56, 122) : BV:8
124 : ite(111, 54, 123) : BV:8
125 : bvconcat(79, 94, 109, 124) : BV:32
126 : bvadd(46, 48, 125) : BV:32
127 : eq(126, 52) : BOOL
128 : eq(126, 49) : BOOL
129 : eq(126, 57) : BOOL
130 : eq(126, 60) : BOOL
131 : eq(126, 63) : BOOL
132 : eq(126, 66) : BOOL
133 : eq(126, 69) : BOOL
134 : ite(133, 71, 72) : BV:8
135 : ite(132, 68, 134) : BV:8
136 : ite(131, 65, 135) : BV:8
137 : ite(130, 62, 136) : BV:8
138 : ite(129, 59, 137) : BV:8
139 : ite(128, 56, 138) : BV:8
140 : ite(127, 54, 139) : BV:8
141 : 2 { 0x2 +1.23e129 } : BV:32
142 : bvadd(141, 48, 125) : BV:32
143 : eq(142, 52) : BOOL
144 : eq(142, 49) : BOOL
145 : eq(142, 57) : BOOL
146 : eq(142, 60) : BOOL
147 : eq(142, 63) : BOOL
148 : eq(142, 66) : BOOL
149 : eq(142, 69) : BOOL
150 : ite(149, 71, 72) : BV:8
151 : ite(148, 68, 150) : BV:8
152 : ite(147, 65, 151) : BV:8
153 : ite(146, 62, 152) : BV:8
154 : ite(145, 59, 153) : BV:8
155 : ite(144, 56, 154) : BV:8
156 : ite(143, 54, 155) : BV:8
157 : 1 { 0x1 +1.11e129 } : BV:32
158 : bvadd(157, 48, 125) : BV:32
159 : eq(158, 52) : BOOL
160 : eq(158, 49) : BOOL
161 : eq(158, 57) : BOOL
162 : eq(158, 60) : BOOL
163 : eq(158, 63) : BOOL
164 : eq(158, 66) : BOOL
165 : eq(158, 69) : BOOL
166 : ite(165, 71, 72) : BV:8
167 : ite(164, 68, 166) : BV:8
168 : ite(163, 65, 167) : BV:8
169 : ite(162, 62, 168) : BV:8
170 : ite(161, 59, 169) : BV:8
171 : ite(160, 56, 170) : BV:8
172 : ite(159, 54, 171) : BV:8
173 : bvadd(48, 125) : BV:32
174 : eq(173, 52) : BOOL
175 : eq(173, 49) : BOOL
176 : eq(173, 57) : BOOL
177 : eq(173, 60) : BOOL
178 : eq(173, 63) : BOOL
179 : eq(173, 66) : BOOL
180 : eq(173, 69) : BOOL
181 : ite(180, 71, 72) : BV:8
182 : ite(179, 68, 181) : BV:8
183 : ite(178, 65, 182) : BV:8
184 : ite(177, 62, 183) : BV:8
185 : ite(176, 59, 184) : BV:8
186 : ite(175, 56, 185) : BV:8
187 : ite(174, 54, 186) : BV:8
188 : bvconcat(140, 156, 172, 187) : BV:32
189 : ite(6, 3, 188) : BV:32
190 : ite(45, 188, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : lambda(1, 2, 191) : FUNCTION[BV:32,BV:32 -> BV:32]
193 : sym_const(192) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda18050 : BV:32
2 : Lambda18051 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4096 { 0x1000 +1.48828e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4098 { 0x1002 +1.48851e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 8) : BOOL
23 : and(21, 22) : BOOL
24 : 4099 { 0x1003 +1.48863e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(12, 2) : BOOL
29 : bvule(2, 12) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 12, 12) : BV:32
32 : ite(27, 24, 31) : BV:32
33 : ite(23, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(20, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BOOL]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda18046 : BV:32
2 : Lambda18047 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
14 : eq(12, 13) : BOOL
15 : 34 { 0x22 } : BV:8
16 : eq(12, 10) : BOOL
17 : 251 { 0xfb -5 } : BV:8
18 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
19 : eq(12, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
22 : eq(12, 21) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
25 : eq(12, 24) : BOOL
26 : 108 { 0x6c } : BV:8
27 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
28 : eq(12, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
31 : eq(12, 30) : BOOL
32 : 204 { 0xcc -52 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(24, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda18057 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4097 { 0x1001 +1.48840e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
14 : eq(12, 13) : BOOL
15 : 34 { 0x22 } : BV:8
16 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
17 : eq(12, 16) : BOOL
18 : 251 { 0xfb -5 } : BV:8
19 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
20 : eq(12, 19) : BOOL
21 : 252 { 0xfc -4 } : BV:8
22 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
23 : eq(12, 22) : BOOL
24 : 63 { 0x3f } : BV:8
25 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
26 : eq(12, 25) : BOOL
27 : 108 { 0x6c } : BV:8
28 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
29 : eq(12, 28) : BOOL
30 : 117 { 0x75 } : BV:8
31 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
32 : eq(12, 31) : BOOL
33 : 204 { 0xcc -52 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda18061 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4097 { 0x1001 +1.48840e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
13 : eq(11, 12) : BOOL
14 : 34 { 0x22 } : BV:8
15 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
16 : eq(11, 15) : BOOL
17 : 251 { 0xfb -5 } : BV:8
18 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
19 : eq(11, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
22 : eq(11, 21) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
25 : eq(11, 24) : BOOL
26 : 108 { 0x6c } : BV:8
27 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
28 : eq(11, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
31 : eq(11, 30) : BOOL
32 : 204 { 0xcc -52 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda18065 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4097 { 0x1001 +1.48840e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2244604 { 0x223ffc +1.26757764e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 30541826 { 0x1d20802 +1.64086937e132 } : BV:32
14 : eq(12, 13) : BOOL
15 : 34 { 0x22 } : BV:8
16 : 30541799 { 0x1d207e7 +1.64086616e132 } : BV:32
17 : eq(12, 16) : BOOL
18 : 251 { 0xfb -5 } : BV:8
19 : 30541824 { 0x1d20800 +1.64086914e132 } : BV:32
20 : eq(12, 19) : BOOL
21 : 252 { 0xfc -4 } : BV:8
22 : 30541825 { 0x1d20801 +1.64086925e132 } : BV:32
23 : eq(12, 22) : BOOL
24 : 63 { 0x3f } : BV:8
25 : 30541796 { 0x1d207e4 +1.64086580e132 } : BV:32
26 : eq(12, 25) : BOOL
27 : 108 { 0x6c } : BV:8
28 : 30541798 { 0x1d207e6 +1.64086604e132 } : BV:32
29 : eq(12, 28) : BOOL
30 : 117 { 0x75 } : BV:8
31 : 30541797 { 0x1d207e5 +1.64086592e132 } : BV:32
32 : eq(12, 31) : BOOL
33 : 204 { 0xcc -52 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3499775398
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 71
=global nodece 71 nodece z3.ce7122.num_edges_traversed1
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3.ce7122 31d37bc08f4bbf429f10d4e045adb5
=input.spec-%var-x-1
1 : Lambda19123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19126 : BV:32
18 : Lambda19124 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda19125 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : 67110155 { 0x400050b +1.15389e137 } : BV:32
81 : eq(79, 80) : BOOL
82 : 123 { 0x7b } : BV:8
83 : 67110154 { 0x400050a +1.15377e137 } : BV:32
84 : eq(79, 83) : BOOL
85 : 249 { 0xf9 -7 } : BV:8
86 : eq(79, 75) : BOOL
87 : 159 { 0x9f -97 } : BV:8
88 : 1 { 0x1 +1.11e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 255 { 0xff -1 } : BV:8
91 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
92 : eq(79, 91) : BOOL
93 : 176 { 0xb0 -80 } : BV:8
94 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
95 : eq(79, 94) : BOOL
96 : 253 { 0xfd -3 } : BV:8
97 : eq(79, 2) : BOOL
98 : 2 { 0x2 +1.23e129 } : BV:32
99 : eq(79, 98) : BOOL
100 : 0 { 0x0 } : BV:8
101 : ite(99, 87, 100) : BV:8
102 : ite(97, 96, 101) : BV:8
103 : ite(95, 96, 102) : BV:8
104 : ite(92, 93, 103) : BV:8
105 : ite(89, 90, 104) : BV:8
106 : ite(86, 87, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(81, 82, 107) : BV:8
109 : bvadd(98, 78) : BV:32
110 : eq(109, 80) : BOOL
111 : eq(109, 83) : BOOL
112 : eq(109, 75) : BOOL
113 : eq(109, 88) : BOOL
114 : eq(109, 91) : BOOL
115 : eq(109, 94) : BOOL
116 : eq(109, 2) : BOOL
117 : eq(109, 98) : BOOL
118 : ite(117, 87, 100) : BV:8
119 : ite(116, 96, 118) : BV:8
120 : ite(115, 96, 119) : BV:8
121 : ite(114, 93, 120) : BV:8
122 : ite(113, 90, 121) : BV:8
123 : ite(112, 87, 122) : BV:8
124 : ite(111, 85, 123) : BV:8
125 : ite(110, 82, 124) : BV:8
126 : bvadd(88, 78) : BV:32
127 : eq(126, 80) : BOOL
128 : eq(126, 83) : BOOL
129 : eq(126, 75) : BOOL
130 : eq(126, 88) : BOOL
131 : eq(126, 91) : BOOL
132 : eq(126, 94) : BOOL
133 : eq(126, 2) : BOOL
134 : eq(126, 98) : BOOL
135 : ite(134, 87, 100) : BV:8
136 : ite(133, 96, 135) : BV:8
137 : ite(132, 96, 136) : BV:8
138 : ite(131, 93, 137) : BV:8
139 : ite(130, 90, 138) : BV:8
140 : ite(129, 87, 139) : BV:8
141 : ite(128, 85, 140) : BV:8
142 : ite(127, 82, 141) : BV:8
143 : eq(78, 80) : BOOL
144 : eq(78, 83) : BOOL
145 : eq(78, 75) : BOOL
146 : eq(78, 88) : BOOL
147 : eq(78, 91) : BOOL
148 : eq(78, 94) : BOOL
149 : eq(78, 2) : BOOL
150 : eq(78, 98) : BOOL
151 : ite(150, 87, 100) : BV:8
152 : ite(149, 96, 151) : BV:8
153 : ite(148, 96, 152) : BV:8
154 : ite(147, 93, 153) : BV:8
155 : ite(146, 90, 154) : BV:8
156 : ite(145, 87, 155) : BV:8
157 : ite(144, 85, 156) : BV:8
158 : ite(143, 82, 157) : BV:8
159 : bvconcat(108, 125, 142, 158) : BV:32
160 : bvadd(75, 77, 159) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 75) : BOOL
164 : eq(160, 88) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 94) : BOOL
167 : eq(160, 2) : BOOL
168 : eq(160, 98) : BOOL
169 : ite(168, 87, 100) : BV:8
170 : ite(167, 96, 169) : BV:8
171 : ite(166, 96, 170) : BV:8
172 : ite(165, 93, 171) : BV:8
173 : ite(164, 90, 172) : BV:8
174 : ite(163, 87, 173) : BV:8
175 : ite(162, 85, 174) : BV:8
176 : ite(161, 82, 175) : BV:8
177 : bvadd(98, 77, 159) : BV:32
178 : eq(177, 80) : BOOL
179 : eq(177, 83) : BOOL
180 : eq(177, 75) : BOOL
181 : eq(177, 88) : BOOL
182 : eq(177, 91) : BOOL
183 : eq(177, 94) : BOOL
184 : eq(177, 2) : BOOL
185 : eq(177, 98) : BOOL
186 : ite(185, 87, 100) : BV:8
187 : ite(184, 96, 186) : BV:8
188 : ite(183, 96, 187) : BV:8
189 : ite(182, 93, 188) : BV:8
190 : ite(181, 90, 189) : BV:8
191 : ite(180, 87, 190) : BV:8
192 : ite(179, 85, 191) : BV:8
193 : ite(178, 82, 192) : BV:8
194 : bvadd(88, 77, 159) : BV:32
195 : eq(194, 80) : BOOL
196 : eq(194, 83) : BOOL
197 : eq(194, 75) : BOOL
198 : eq(194, 88) : BOOL
199 : eq(194, 91) : BOOL
200 : eq(194, 94) : BOOL
201 : eq(194, 2) : BOOL
202 : eq(194, 98) : BOOL
203 : ite(202, 87, 100) : BV:8
204 : ite(201, 96, 203) : BV:8
205 : ite(200, 96, 204) : BV:8
206 : ite(199, 93, 205) : BV:8
207 : ite(198, 90, 206) : BV:8
208 : ite(197, 87, 207) : BV:8
209 : ite(196, 85, 208) : BV:8
210 : ite(195, 82, 209) : BV:8
211 : bvadd(77, 159) : BV:32
212 : eq(211, 80) : BOOL
213 : eq(211, 83) : BOOL
214 : eq(211, 75) : BOOL
215 : eq(211, 88) : BOOL
216 : eq(211, 91) : BOOL
217 : eq(211, 94) : BOOL
218 : eq(211, 2) : BOOL
219 : eq(211, 98) : BOOL
220 : ite(219, 87, 100) : BV:8
221 : ite(218, 96, 220) : BV:8
222 : ite(217, 96, 221) : BV:8
223 : ite(216, 93, 222) : BV:8
224 : ite(215, 90, 223) : BV:8
225 : ite(214, 87, 224) : BV:8
226 : ite(213, 85, 225) : BV:8
227 : ite(212, 82, 226) : BV:8
228 : bvconcat(176, 193, 210, 227) : BV:32
229 : ite(55, 2, 228) : BV:32
230 : ite(74, 228, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : lambda(52, 231) : FUNCTION[BV:32 -> BV:32]
233 : map(51, 232) : MAP[BV:32 -> BV:32]
234 : lambda(17, 233) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
235 : map(16, 234) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
236 : sym_const(235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
=input.dst.llvm-%m
1 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 253, [ 1; 1 ] -> 255, [ 2; 3 ] -> 159, [ 4; 67110151 ] -> 0, [ 67110152; 67110152 ] -> 176, [ 67110153; 67110153 ] -> 253, [ 67110154; 67110154 ] -> 249, [ 67110155; 67110155 ] -> 123, [ 67110156; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 971071491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 971071492; 971071495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 971071496; 2095096063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2095096064; 2095096067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2095096068; 2700886271 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2700886272; 2700886275 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2700886276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 971071492 { 0x39e16004 +1.76074266e244 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2095096064 { 0x7ce0a100 +1.75491333e122 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2700886272 { 0xa0fc4100 -1594081024 -1.97073364e194 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda19131 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19134 : BV:32
18 : Lambda19132 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda19133 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 67110155 { 0x400050b +1.15389e137 } : BV:32
62 : eq(60, 61) : BOOL
63 : 123 { 0x7b } : BV:8
64 : 67110154 { 0x400050a +1.15377e137 } : BV:32
65 : eq(60, 64) : BOOL
66 : 249 { 0xf9 -7 } : BV:8
67 : eq(60, 56) : BOOL
68 : 159 { 0x9f -97 } : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 255 { 0xff -1 } : BV:8
72 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
73 : eq(60, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
76 : eq(60, 75) : BOOL
77 : 253 { 0xfd -3 } : BV:8
78 : eq(60, 2) : BOOL
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : 0 { 0x0 } : BV:8
82 : ite(80, 68, 81) : BV:8
83 : ite(78, 77, 82) : BV:8
84 : ite(76, 77, 83) : BV:8
85 : ite(73, 74, 84) : BV:8
86 : ite(70, 71, 85) : BV:8
87 : ite(67, 68, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(79, 59) : BV:32
91 : eq(90, 61) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 56) : BOOL
94 : eq(90, 69) : BOOL
95 : eq(90, 72) : BOOL
96 : eq(90, 75) : BOOL
97 : eq(90, 2) : BOOL
98 : eq(90, 79) : BOOL
99 : ite(98, 68, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 77, 100) : BV:8
102 : ite(95, 74, 101) : BV:8
103 : ite(94, 71, 102) : BV:8
104 : ite(93, 68, 103) : BV:8
105 : ite(92, 66, 104) : BV:8
106 : ite(91, 63, 105) : BV:8
107 : bvadd(69, 59) : BV:32
108 : eq(107, 61) : BOOL
109 : eq(107, 64) : BOOL
110 : eq(107, 56) : BOOL
111 : eq(107, 69) : BOOL
112 : eq(107, 72) : BOOL
113 : eq(107, 75) : BOOL
114 : eq(107, 2) : BOOL
115 : eq(107, 79) : BOOL
116 : ite(115, 68, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 77, 117) : BV:8
119 : ite(112, 74, 118) : BV:8
120 : ite(111, 71, 119) : BV:8
121 : ite(110, 68, 120) : BV:8
122 : ite(109, 66, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : eq(59, 61) : BOOL
125 : eq(59, 64) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 69) : BOOL
128 : eq(59, 72) : BOOL
129 : eq(59, 75) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 79) : BOOL
132 : ite(131, 68, 81) : BV:8
133 : ite(130, 77, 132) : BV:8
134 : ite(129, 77, 133) : BV:8
135 : ite(128, 74, 134) : BV:8
136 : ite(127, 71, 135) : BV:8
137 : ite(126, 68, 136) : BV:8
138 : ite(125, 66, 137) : BV:8
139 : ite(124, 63, 138) : BV:8
140 : bvconcat(89, 106, 123, 139) : BV:32
141 : bvadd(56, 58, 140) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 56) : BOOL
145 : eq(141, 69) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 75) : BOOL
148 : eq(141, 2) : BOOL
149 : eq(141, 79) : BOOL
150 : ite(149, 68, 81) : BV:8
151 : ite(148, 77, 150) : BV:8
152 : ite(147, 77, 151) : BV:8
153 : ite(146, 74, 152) : BV:8
154 : ite(145, 71, 153) : BV:8
155 : ite(144, 68, 154) : BV:8
156 : ite(143, 66, 155) : BV:8
157 : ite(142, 63, 156) : BV:8
158 : bvadd(79, 58, 140) : BV:32
159 : eq(158, 61) : BOOL
160 : eq(158, 64) : BOOL
161 : eq(158, 56) : BOOL
162 : eq(158, 69) : BOOL
163 : eq(158, 72) : BOOL
164 : eq(158, 75) : BOOL
165 : eq(158, 2) : BOOL
166 : eq(158, 79) : BOOL
167 : ite(166, 68, 81) : BV:8
168 : ite(165, 77, 167) : BV:8
169 : ite(164, 77, 168) : BV:8
170 : ite(163, 74, 169) : BV:8
171 : ite(162, 71, 170) : BV:8
172 : ite(161, 68, 171) : BV:8
173 : ite(160, 66, 172) : BV:8
174 : ite(159, 63, 173) : BV:8
175 : bvadd(69, 58, 140) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 64) : BOOL
178 : eq(175, 56) : BOOL
179 : eq(175, 69) : BOOL
180 : eq(175, 72) : BOOL
181 : eq(175, 75) : BOOL
182 : eq(175, 2) : BOOL
183 : eq(175, 79) : BOOL
184 : ite(183, 68, 81) : BV:8
185 : ite(182, 77, 184) : BV:8
186 : ite(181, 77, 185) : BV:8
187 : ite(180, 74, 186) : BV:8
188 : ite(179, 71, 187) : BV:8
189 : ite(178, 68, 188) : BV:8
190 : ite(177, 66, 189) : BV:8
191 : ite(176, 63, 190) : BV:8
192 : bvadd(58, 140) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 56) : BOOL
196 : eq(192, 69) : BOOL
197 : eq(192, 72) : BOOL
198 : eq(192, 75) : BOOL
199 : eq(192, 2) : BOOL
200 : eq(192, 79) : BOOL
201 : ite(200, 68, 81) : BV:8
202 : ite(199, 77, 201) : BV:8
203 : ite(198, 77, 202) : BV:8
204 : ite(197, 74, 203) : BV:8
205 : ite(196, 71, 204) : BV:8
206 : ite(195, 68, 205) : BV:8
207 : ite(194, 66, 206) : BV:8
208 : ite(193, 63, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(55, 2, 209) : BV:32
211 : lambda(52, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(51, 211) : MAP[BV:32 -> BV:32]
213 : lambda(17, 212) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
214 : map(16, 213) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
215 : sym_const(214) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2 { 0x2 +1.23e129 } : BV:32
2 : unit : UNIT
3 : Lambda19128 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda19129 : BV:32
20 : eq(19, 4) : BOOL
21 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
22 : eq(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 67110155 { 0x400050b +1.15389e137 } : BV:32
29 : eq(27, 28) : BOOL
30 : 123 { 0x7b } : BV:8
31 : 67110154 { 0x400050a +1.15377e137 } : BV:32
32 : eq(27, 31) : BOOL
33 : 249 { 0xf9 -7 } : BV:8
34 : eq(27, 23) : BOOL
35 : 159 { 0x9f -97 } : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(27, 36) : BOOL
38 : 255 { 0xff -1 } : BV:8
39 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
40 : eq(27, 39) : BOOL
41 : 176 { 0xb0 -80 } : BV:8
42 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
43 : eq(27, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : eq(27, 4) : BOOL
46 : eq(27, 1) : BOOL
47 : 0 { 0x0 } : BV:8
48 : ite(46, 35, 47) : BV:8
49 : ite(45, 44, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(32, 33, 53) : BV:8
55 : ite(29, 30, 54) : BV:8
56 : bvadd(1, 25, 26) : BV:32
57 : eq(56, 28) : BOOL
58 : eq(56, 31) : BOOL
59 : eq(56, 23) : BOOL
60 : eq(56, 36) : BOOL
61 : eq(56, 39) : BOOL
62 : eq(56, 42) : BOOL
63 : eq(56, 4) : BOOL
64 : eq(56, 1) : BOOL
65 : ite(64, 35, 47) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 44, 66) : BV:8
68 : ite(61, 41, 67) : BV:8
69 : ite(60, 38, 68) : BV:8
70 : ite(59, 35, 69) : BV:8
71 : ite(58, 33, 70) : BV:8
72 : ite(57, 30, 71) : BV:8
73 : bvadd(36, 25, 26) : BV:32
74 : eq(73, 28) : BOOL
75 : eq(73, 31) : BOOL
76 : eq(73, 23) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 4) : BOOL
81 : eq(73, 1) : BOOL
82 : ite(81, 35, 47) : BV:8
83 : ite(80, 44, 82) : BV:8
84 : ite(79, 44, 83) : BV:8
85 : ite(78, 41, 84) : BV:8
86 : ite(77, 38, 85) : BV:8
87 : ite(76, 35, 86) : BV:8
88 : ite(75, 33, 87) : BV:8
89 : ite(74, 30, 88) : BV:8
90 : bvadd(25, 26) : BV:32
91 : eq(90, 28) : BOOL
92 : eq(90, 31) : BOOL
93 : eq(90, 23) : BOOL
94 : eq(90, 36) : BOOL
95 : eq(90, 39) : BOOL
96 : eq(90, 42) : BOOL
97 : eq(90, 4) : BOOL
98 : eq(90, 1) : BOOL
99 : ite(98, 35, 47) : BV:8
100 : ite(97, 44, 99) : BV:8
101 : ite(96, 44, 100) : BV:8
102 : ite(95, 41, 101) : BV:8
103 : ite(94, 38, 102) : BV:8
104 : ite(93, 35, 103) : BV:8
105 : ite(92, 33, 104) : BV:8
106 : ite(91, 30, 105) : BV:8
107 : bvconcat(55, 72, 89, 106) : BV:32
108 : ite(22, 4, 107) : BV:32
109 : ite(20, 4, 108) : BV:32
110 : lambda(19, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(18, 110) : MAP[BV:32 -> BV:32]
112 : sum(1, 2, 111) : SUM[UNIT,MAP[BV:32 -> BV:32]]
113 : sym_const(112) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 57478137 { 0x36d0bf9 +1.85192787e135 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 16777538 { 0x1000142 +1.3838e131 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda19136 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19137 : BV:32
18 : eq(17, 2) : BOOL
19 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
20 : eq(17, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 67110155 { 0x400050b +1.15389e137 } : BV:32
27 : eq(25, 26) : BOOL
28 : 123 { 0x7b } : BV:8
29 : 67110154 { 0x400050a +1.15377e137 } : BV:32
30 : eq(25, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : eq(25, 21) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : eq(25, 34) : BOOL
36 : 255 { 0xff -1 } : BV:8
37 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
38 : eq(25, 37) : BOOL
39 : 176 { 0xb0 -80 } : BV:8
40 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
41 : eq(25, 40) : BOOL
42 : 253 { 0xfd -3 } : BV:8
43 : eq(25, 2) : BOOL
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : eq(25, 44) : BOOL
46 : 0 { 0x0 } : BV:8
47 : ite(45, 33, 46) : BV:8
48 : ite(43, 42, 47) : BV:8
49 : ite(41, 42, 48) : BV:8
50 : ite(38, 39, 49) : BV:8
51 : ite(35, 36, 50) : BV:8
52 : ite(32, 33, 51) : BV:8
53 : ite(30, 31, 52) : BV:8
54 : ite(27, 28, 53) : BV:8
55 : bvadd(44, 23, 24) : BV:32
56 : eq(55, 26) : BOOL
57 : eq(55, 29) : BOOL
58 : eq(55, 21) : BOOL
59 : eq(55, 34) : BOOL
60 : eq(55, 37) : BOOL
61 : eq(55, 40) : BOOL
62 : eq(55, 2) : BOOL
63 : eq(55, 44) : BOOL
64 : ite(63, 33, 46) : BV:8
65 : ite(62, 42, 64) : BV:8
66 : ite(61, 42, 65) : BV:8
67 : ite(60, 39, 66) : BV:8
68 : ite(59, 36, 67) : BV:8
69 : ite(58, 33, 68) : BV:8
70 : ite(57, 31, 69) : BV:8
71 : ite(56, 28, 70) : BV:8
72 : bvadd(34, 23, 24) : BV:32
73 : eq(72, 26) : BOOL
74 : eq(72, 29) : BOOL
75 : eq(72, 21) : BOOL
76 : eq(72, 34) : BOOL
77 : eq(72, 37) : BOOL
78 : eq(72, 40) : BOOL
79 : eq(72, 2) : BOOL
80 : eq(72, 44) : BOOL
81 : ite(80, 33, 46) : BV:8
82 : ite(79, 42, 81) : BV:8
83 : ite(78, 42, 82) : BV:8
84 : ite(77, 39, 83) : BV:8
85 : ite(76, 36, 84) : BV:8
86 : ite(75, 33, 85) : BV:8
87 : ite(74, 31, 86) : BV:8
88 : ite(73, 28, 87) : BV:8
89 : bvadd(23, 24) : BV:32
90 : eq(89, 26) : BOOL
91 : eq(89, 29) : BOOL
92 : eq(89, 21) : BOOL
93 : eq(89, 34) : BOOL
94 : eq(89, 37) : BOOL
95 : eq(89, 40) : BOOL
96 : eq(89, 2) : BOOL
97 : eq(89, 44) : BOOL
98 : ite(97, 33, 46) : BV:8
99 : ite(96, 42, 98) : BV:8
100 : ite(95, 42, 99) : BV:8
101 : ite(94, 39, 100) : BV:8
102 : ite(93, 36, 101) : BV:8
103 : ite(92, 33, 102) : BV:8
104 : ite(91, 31, 103) : BV:8
105 : ite(90, 28, 104) : BV:8
106 : bvconcat(54, 71, 88, 105) : BV:32
107 : ite(20, 2, 106) : BV:32
108 : ite(18, 2, 107) : BV:32
109 : lambda(17, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(16, 109) : MAP[BV:32 -> BV:32]
111 : sym_const(110) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda19139 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19140 : BV:32
18 : eq(17, 2) : BOOL
19 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
20 : eq(17, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 67110155 { 0x400050b +1.15389e137 } : BV:32
27 : eq(25, 26) : BOOL
28 : 123 { 0x7b } : BV:8
29 : 67110154 { 0x400050a +1.15377e137 } : BV:32
30 : eq(25, 29) : BOOL
31 : 249 { 0xf9 -7 } : BV:8
32 : eq(25, 21) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : eq(25, 34) : BOOL
36 : 255 { 0xff -1 } : BV:8
37 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
38 : eq(25, 37) : BOOL
39 : 176 { 0xb0 -80 } : BV:8
40 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
41 : eq(25, 40) : BOOL
42 : 253 { 0xfd -3 } : BV:8
43 : eq(25, 2) : BOOL
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : eq(25, 44) : BOOL
46 : 0 { 0x0 } : BV:8
47 : ite(45, 33, 46) : BV:8
48 : ite(43, 42, 47) : BV:8
49 : ite(41, 42, 48) : BV:8
50 : ite(38, 39, 49) : BV:8
51 : ite(35, 36, 50) : BV:8
52 : ite(32, 33, 51) : BV:8
53 : ite(30, 31, 52) : BV:8
54 : ite(27, 28, 53) : BV:8
55 : bvadd(44, 23, 24) : BV:32
56 : eq(55, 26) : BOOL
57 : eq(55, 29) : BOOL
58 : eq(55, 21) : BOOL
59 : eq(55, 34) : BOOL
60 : eq(55, 37) : BOOL
61 : eq(55, 40) : BOOL
62 : eq(55, 2) : BOOL
63 : eq(55, 44) : BOOL
64 : ite(63, 33, 46) : BV:8
65 : ite(62, 42, 64) : BV:8
66 : ite(61, 42, 65) : BV:8
67 : ite(60, 39, 66) : BV:8
68 : ite(59, 36, 67) : BV:8
69 : ite(58, 33, 68) : BV:8
70 : ite(57, 31, 69) : BV:8
71 : ite(56, 28, 70) : BV:8
72 : bvadd(34, 23, 24) : BV:32
73 : eq(72, 26) : BOOL
74 : eq(72, 29) : BOOL
75 : eq(72, 21) : BOOL
76 : eq(72, 34) : BOOL
77 : eq(72, 37) : BOOL
78 : eq(72, 40) : BOOL
79 : eq(72, 2) : BOOL
80 : eq(72, 44) : BOOL
81 : ite(80, 33, 46) : BV:8
82 : ite(79, 42, 81) : BV:8
83 : ite(78, 42, 82) : BV:8
84 : ite(77, 39, 83) : BV:8
85 : ite(76, 36, 84) : BV:8
86 : ite(75, 33, 85) : BV:8
87 : ite(74, 31, 86) : BV:8
88 : ite(73, 28, 87) : BV:8
89 : bvadd(23, 24) : BV:32
90 : eq(89, 26) : BOOL
91 : eq(89, 29) : BOOL
92 : eq(89, 21) : BOOL
93 : eq(89, 34) : BOOL
94 : eq(89, 37) : BOOL
95 : eq(89, 40) : BOOL
96 : eq(89, 2) : BOOL
97 : eq(89, 44) : BOOL
98 : ite(97, 33, 46) : BV:8
99 : ite(96, 42, 98) : BV:8
100 : ite(95, 42, 99) : BV:8
101 : ite(94, 39, 100) : BV:8
102 : ite(93, 36, 101) : BV:8
103 : ite(92, 33, 102) : BV:8
104 : ite(91, 31, 103) : BV:8
105 : ite(90, 28, 104) : BV:8
106 : bvconcat(54, 71, 88, 105) : BV:32
107 : ite(20, 2, 106) : BV:32
108 : ite(18, 2, 107) : BV:32
109 : lambda(17, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(16, 109) : MAP[BV:32 -> BV:32]
111 : sym_const(110) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1419228911 { 0x5497b6ef +1.18527019e42 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2095096064 { 0x7ce0a100 +1.75491333e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2095096067 { 0x7ce0a103 +1.75491368e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2700886272 { 0xa0fc4100 -1594081024 -1.97073364e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2700886275 { 0xa0fc4103 -1594081021 -1.97073400e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 971071492 { 0x39e16004 +1.76074266e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 971071495 { 0x39e16007 +1.76074302e244 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2148532416 ] -> true, [ 2148532417; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda19050 : BV:32
2 : Lambda19051 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda19055 : BV:32
2 : Lambda19056 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : 67110155 { 0x400050b +1.15389e137 } : BV:32
54 : eq(52, 53) : BOOL
55 : 123 { 0x7b } : BV:8
56 : 67110154 { 0x400050a +1.15377e137 } : BV:32
57 : eq(52, 56) : BOOL
58 : 249 { 0xf9 -7 } : BV:8
59 : eq(52, 48) : BOOL
60 : 159 { 0x9f -97 } : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 255 { 0xff -1 } : BV:8
64 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
65 : eq(52, 64) : BOOL
66 : 176 { 0xb0 -80 } : BV:8
67 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
68 : eq(52, 67) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : eq(52, 3) : BOOL
71 : 2 { 0x2 +1.23e129 } : BV:32
72 : eq(52, 71) : BOOL
73 : 0 { 0x0 } : BV:8
74 : ite(72, 60, 73) : BV:8
75 : ite(70, 69, 74) : BV:8
76 : ite(68, 69, 75) : BV:8
77 : ite(65, 66, 76) : BV:8
78 : ite(62, 63, 77) : BV:8
79 : ite(59, 60, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : bvadd(71, 51) : BV:32
83 : eq(82, 53) : BOOL
84 : eq(82, 56) : BOOL
85 : eq(82, 48) : BOOL
86 : eq(82, 61) : BOOL
87 : eq(82, 64) : BOOL
88 : eq(82, 67) : BOOL
89 : eq(82, 3) : BOOL
90 : eq(82, 71) : BOOL
91 : ite(90, 60, 73) : BV:8
92 : ite(89, 69, 91) : BV:8
93 : ite(88, 69, 92) : BV:8
94 : ite(87, 66, 93) : BV:8
95 : ite(86, 63, 94) : BV:8
96 : ite(85, 60, 95) : BV:8
97 : ite(84, 58, 96) : BV:8
98 : ite(83, 55, 97) : BV:8
99 : bvadd(61, 51) : BV:32
100 : eq(99, 53) : BOOL
101 : eq(99, 56) : BOOL
102 : eq(99, 48) : BOOL
103 : eq(99, 61) : BOOL
104 : eq(99, 64) : BOOL
105 : eq(99, 67) : BOOL
106 : eq(99, 3) : BOOL
107 : eq(99, 71) : BOOL
108 : ite(107, 60, 73) : BV:8
109 : ite(106, 69, 108) : BV:8
110 : ite(105, 69, 109) : BV:8
111 : ite(104, 66, 110) : BV:8
112 : ite(103, 63, 111) : BV:8
113 : ite(102, 60, 112) : BV:8
114 : ite(101, 58, 113) : BV:8
115 : ite(100, 55, 114) : BV:8
116 : eq(51, 53) : BOOL
117 : eq(51, 56) : BOOL
118 : eq(51, 48) : BOOL
119 : eq(51, 61) : BOOL
120 : eq(51, 64) : BOOL
121 : eq(51, 67) : BOOL
122 : eq(51, 3) : BOOL
123 : eq(51, 71) : BOOL
124 : ite(123, 60, 73) : BV:8
125 : ite(122, 69, 124) : BV:8
126 : ite(121, 69, 125) : BV:8
127 : ite(120, 66, 126) : BV:8
128 : ite(119, 63, 127) : BV:8
129 : ite(118, 60, 128) : BV:8
130 : ite(117, 58, 129) : BV:8
131 : ite(116, 55, 130) : BV:8
132 : bvconcat(81, 98, 115, 131) : BV:32
133 : bvadd(48, 50, 132) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 48) : BOOL
137 : eq(133, 61) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 67) : BOOL
140 : eq(133, 3) : BOOL
141 : eq(133, 71) : BOOL
142 : ite(141, 60, 73) : BV:8
143 : ite(140, 69, 142) : BV:8
144 : ite(139, 69, 143) : BV:8
145 : ite(138, 66, 144) : BV:8
146 : ite(137, 63, 145) : BV:8
147 : ite(136, 60, 146) : BV:8
148 : ite(135, 58, 147) : BV:8
149 : ite(134, 55, 148) : BV:8
150 : bvadd(71, 50, 132) : BV:32
151 : eq(150, 53) : BOOL
152 : eq(150, 56) : BOOL
153 : eq(150, 48) : BOOL
154 : eq(150, 61) : BOOL
155 : eq(150, 64) : BOOL
156 : eq(150, 67) : BOOL
157 : eq(150, 3) : BOOL
158 : eq(150, 71) : BOOL
159 : ite(158, 60, 73) : BV:8
160 : ite(157, 69, 159) : BV:8
161 : ite(156, 69, 160) : BV:8
162 : ite(155, 66, 161) : BV:8
163 : ite(154, 63, 162) : BV:8
164 : ite(153, 60, 163) : BV:8
165 : ite(152, 58, 164) : BV:8
166 : ite(151, 55, 165) : BV:8
167 : bvadd(61, 50, 132) : BV:32
168 : eq(167, 53) : BOOL
169 : eq(167, 56) : BOOL
170 : eq(167, 48) : BOOL
171 : eq(167, 61) : BOOL
172 : eq(167, 64) : BOOL
173 : eq(167, 67) : BOOL
174 : eq(167, 3) : BOOL
175 : eq(167, 71) : BOOL
176 : ite(175, 60, 73) : BV:8
177 : ite(174, 69, 176) : BV:8
178 : ite(173, 69, 177) : BV:8
179 : ite(172, 66, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 60, 180) : BV:8
182 : ite(169, 58, 181) : BV:8
183 : ite(168, 55, 182) : BV:8
184 : bvadd(50, 132) : BV:32
185 : eq(184, 53) : BOOL
186 : eq(184, 56) : BOOL
187 : eq(184, 48) : BOOL
188 : eq(184, 61) : BOOL
189 : eq(184, 64) : BOOL
190 : eq(184, 67) : BOOL
191 : eq(184, 3) : BOOL
192 : eq(184, 71) : BOOL
193 : ite(192, 60, 73) : BV:8
194 : ite(191, 69, 193) : BV:8
195 : ite(190, 69, 194) : BV:8
196 : ite(189, 66, 195) : BV:8
197 : ite(188, 63, 196) : BV:8
198 : ite(187, 60, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 55, 199) : BV:8
201 : bvconcat(149, 166, 183, 200) : BV:32
202 : ite(6, 3, 201) : BV:32
203 : ite(47, 201, 202) : BV:32
204 : ite(6, 3, 203) : BV:32
205 : lambda(1, 2, 204) : FUNCTION[BV:32,BV:32 -> BV:32]
206 : sym_const(205) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2148532416 ] -> true, [ 2148532417; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda19061 : BV:32
2 : Lambda19062 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda19057 : BV:32
2 : Lambda19058 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 67110155 { 0x400050b +1.15389e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 67110154 { 0x400050a +1.15377e137 } : BV:32
16 : eq(11, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : eq(11, 7) : BOOL
19 : 159 { 0x9f -97 } : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(11, 20) : BOOL
22 : 255 { 0xff -1 } : BV:8
23 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
24 : eq(11, 23) : BOOL
25 : 176 { 0xb0 -80 } : BV:8
26 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
27 : eq(11, 26) : BOOL
28 : 253 { 0xfd -3 } : BV:8
29 : eq(11, 3) : BOOL
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 19, 32) : BV:8
34 : ite(29, 28, 33) : BV:8
35 : ite(27, 28, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : ite(21, 22, 36) : BV:8
38 : ite(18, 19, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(30, 10) : BV:32
42 : eq(41, 12) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 7) : BOOL
45 : eq(41, 20) : BOOL
46 : eq(41, 23) : BOOL
47 : eq(41, 26) : BOOL
48 : eq(41, 3) : BOOL
49 : eq(41, 30) : BOOL
50 : ite(49, 19, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : ite(45, 22, 53) : BV:8
55 : ite(44, 19, 54) : BV:8
56 : ite(43, 17, 55) : BV:8
57 : ite(42, 14, 56) : BV:8
58 : bvadd(20, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 7) : BOOL
62 : eq(58, 20) : BOOL
63 : eq(58, 23) : BOOL
64 : eq(58, 26) : BOOL
65 : eq(58, 3) : BOOL
66 : eq(58, 30) : BOOL
67 : ite(66, 19, 32) : BV:8
68 : ite(65, 28, 67) : BV:8
69 : ite(64, 28, 68) : BV:8
70 : ite(63, 25, 69) : BV:8
71 : ite(62, 22, 70) : BV:8
72 : ite(61, 19, 71) : BV:8
73 : ite(60, 17, 72) : BV:8
74 : ite(59, 14, 73) : BV:8
75 : eq(10, 12) : BOOL
76 : eq(10, 15) : BOOL
77 : eq(10, 7) : BOOL
78 : eq(10, 20) : BOOL
79 : eq(10, 23) : BOOL
80 : eq(10, 26) : BOOL
81 : eq(10, 3) : BOOL
82 : eq(10, 30) : BOOL
83 : ite(82, 19, 32) : BV:8
84 : ite(81, 28, 83) : BV:8
85 : ite(80, 28, 84) : BV:8
86 : ite(79, 25, 85) : BV:8
87 : ite(78, 22, 86) : BV:8
88 : ite(77, 19, 87) : BV:8
89 : ite(76, 17, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : bvconcat(40, 57, 74, 90) : BV:32
92 : bvadd(7, 9, 91) : BV:32
93 : eq(92, 12) : BOOL
94 : eq(92, 15) : BOOL
95 : eq(92, 7) : BOOL
96 : eq(92, 20) : BOOL
97 : eq(92, 23) : BOOL
98 : eq(92, 26) : BOOL
99 : eq(92, 3) : BOOL
100 : eq(92, 30) : BOOL
101 : ite(100, 19, 32) : BV:8
102 : ite(99, 28, 101) : BV:8
103 : ite(98, 28, 102) : BV:8
104 : ite(97, 25, 103) : BV:8
105 : ite(96, 22, 104) : BV:8
106 : ite(95, 19, 105) : BV:8
107 : ite(94, 17, 106) : BV:8
108 : ite(93, 14, 107) : BV:8
109 : bvadd(30, 9, 91) : BV:32
110 : eq(109, 12) : BOOL
111 : eq(109, 15) : BOOL
112 : eq(109, 7) : BOOL
113 : eq(109, 20) : BOOL
114 : eq(109, 23) : BOOL
115 : eq(109, 26) : BOOL
116 : eq(109, 3) : BOOL
117 : eq(109, 30) : BOOL
118 : ite(117, 19, 32) : BV:8
119 : ite(116, 28, 118) : BV:8
120 : ite(115, 28, 119) : BV:8
121 : ite(114, 25, 120) : BV:8
122 : ite(113, 22, 121) : BV:8
123 : ite(112, 19, 122) : BV:8
124 : ite(111, 17, 123) : BV:8
125 : ite(110, 14, 124) : BV:8
126 : bvadd(20, 9, 91) : BV:32
127 : eq(126, 12) : BOOL
128 : eq(126, 15) : BOOL
129 : eq(126, 7) : BOOL
130 : eq(126, 20) : BOOL
131 : eq(126, 23) : BOOL
132 : eq(126, 26) : BOOL
133 : eq(126, 3) : BOOL
134 : eq(126, 30) : BOOL
135 : ite(134, 19, 32) : BV:8
136 : ite(133, 28, 135) : BV:8
137 : ite(132, 28, 136) : BV:8
138 : ite(131, 25, 137) : BV:8
139 : ite(130, 22, 138) : BV:8
140 : ite(129, 19, 139) : BV:8
141 : ite(128, 17, 140) : BV:8
142 : ite(127, 14, 141) : BV:8
143 : bvadd(9, 91) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 7) : BOOL
147 : eq(143, 20) : BOOL
148 : eq(143, 23) : BOOL
149 : eq(143, 26) : BOOL
150 : eq(143, 3) : BOOL
151 : eq(143, 30) : BOOL
152 : ite(151, 19, 32) : BV:8
153 : ite(150, 28, 152) : BV:8
154 : ite(149, 28, 153) : BV:8
155 : ite(148, 25, 154) : BV:8
156 : ite(147, 22, 155) : BV:8
157 : ite(146, 19, 156) : BV:8
158 : ite(145, 17, 157) : BV:8
159 : ite(144, 14, 158) : BV:8
160 : bvconcat(108, 125, 142, 159) : BV:32
161 : ite(6, 3, 160) : BV:32
162 : lambda(1, 2, 161) : FUNCTION[BV:32,BV:32 -> BV:32]
163 : sym_const(162) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda19068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda19072 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda19076 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
577840138
=counter_example_end
=global nodece 71 num_edges_traversed 1
=global nodece 71 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 72
=global nodece 72 nodece z3.ce7152.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3.ce7152 e39fdeae16bf925a334f28b6946eb23
=input.spec-%var-x-1
1 : Lambda19123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19126 : BV:32
18 : Lambda19124 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda19125 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : 67110155 { 0x400050b +1.15389e137 } : BV:32
81 : eq(79, 80) : BOOL
82 : 123 { 0x7b } : BV:8
83 : 67110154 { 0x400050a +1.15377e137 } : BV:32
84 : eq(79, 83) : BOOL
85 : 249 { 0xf9 -7 } : BV:8
86 : eq(79, 75) : BOOL
87 : 159 { 0x9f -97 } : BV:8
88 : 1 { 0x1 +1.11e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 255 { 0xff -1 } : BV:8
91 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
92 : eq(79, 91) : BOOL
93 : 176 { 0xb0 -80 } : BV:8
94 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
95 : eq(79, 94) : BOOL
96 : 253 { 0xfd -3 } : BV:8
97 : eq(79, 2) : BOOL
98 : 2 { 0x2 +1.23e129 } : BV:32
99 : eq(79, 98) : BOOL
100 : 0 { 0x0 } : BV:8
101 : ite(99, 87, 100) : BV:8
102 : ite(97, 96, 101) : BV:8
103 : ite(95, 96, 102) : BV:8
104 : ite(92, 93, 103) : BV:8
105 : ite(89, 90, 104) : BV:8
106 : ite(86, 87, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(81, 82, 107) : BV:8
109 : bvadd(98, 78) : BV:32
110 : eq(109, 80) : BOOL
111 : eq(109, 83) : BOOL
112 : eq(109, 75) : BOOL
113 : eq(109, 88) : BOOL
114 : eq(109, 91) : BOOL
115 : eq(109, 94) : BOOL
116 : eq(109, 2) : BOOL
117 : eq(109, 98) : BOOL
118 : ite(117, 87, 100) : BV:8
119 : ite(116, 96, 118) : BV:8
120 : ite(115, 96, 119) : BV:8
121 : ite(114, 93, 120) : BV:8
122 : ite(113, 90, 121) : BV:8
123 : ite(112, 87, 122) : BV:8
124 : ite(111, 85, 123) : BV:8
125 : ite(110, 82, 124) : BV:8
126 : bvadd(88, 78) : BV:32
127 : eq(126, 80) : BOOL
128 : eq(126, 83) : BOOL
129 : eq(126, 75) : BOOL
130 : eq(126, 88) : BOOL
131 : eq(126, 91) : BOOL
132 : eq(126, 94) : BOOL
133 : eq(126, 2) : BOOL
134 : eq(126, 98) : BOOL
135 : ite(134, 87, 100) : BV:8
136 : ite(133, 96, 135) : BV:8
137 : ite(132, 96, 136) : BV:8
138 : ite(131, 93, 137) : BV:8
139 : ite(130, 90, 138) : BV:8
140 : ite(129, 87, 139) : BV:8
141 : ite(128, 85, 140) : BV:8
142 : ite(127, 82, 141) : BV:8
143 : eq(78, 80) : BOOL
144 : eq(78, 83) : BOOL
145 : eq(78, 75) : BOOL
146 : eq(78, 88) : BOOL
147 : eq(78, 91) : BOOL
148 : eq(78, 94) : BOOL
149 : eq(78, 2) : BOOL
150 : eq(78, 98) : BOOL
151 : ite(150, 87, 100) : BV:8
152 : ite(149, 96, 151) : BV:8
153 : ite(148, 96, 152) : BV:8
154 : ite(147, 93, 153) : BV:8
155 : ite(146, 90, 154) : BV:8
156 : ite(145, 87, 155) : BV:8
157 : ite(144, 85, 156) : BV:8
158 : ite(143, 82, 157) : BV:8
159 : bvconcat(108, 125, 142, 158) : BV:32
160 : bvadd(75, 77, 159) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 75) : BOOL
164 : eq(160, 88) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 94) : BOOL
167 : eq(160, 2) : BOOL
168 : eq(160, 98) : BOOL
169 : ite(168, 87, 100) : BV:8
170 : ite(167, 96, 169) : BV:8
171 : ite(166, 96, 170) : BV:8
172 : ite(165, 93, 171) : BV:8
173 : ite(164, 90, 172) : BV:8
174 : ite(163, 87, 173) : BV:8
175 : ite(162, 85, 174) : BV:8
176 : ite(161, 82, 175) : BV:8
177 : bvadd(98, 77, 159) : BV:32
178 : eq(177, 80) : BOOL
179 : eq(177, 83) : BOOL
180 : eq(177, 75) : BOOL
181 : eq(177, 88) : BOOL
182 : eq(177, 91) : BOOL
183 : eq(177, 94) : BOOL
184 : eq(177, 2) : BOOL
185 : eq(177, 98) : BOOL
186 : ite(185, 87, 100) : BV:8
187 : ite(184, 96, 186) : BV:8
188 : ite(183, 96, 187) : BV:8
189 : ite(182, 93, 188) : BV:8
190 : ite(181, 90, 189) : BV:8
191 : ite(180, 87, 190) : BV:8
192 : ite(179, 85, 191) : BV:8
193 : ite(178, 82, 192) : BV:8
194 : bvadd(88, 77, 159) : BV:32
195 : eq(194, 80) : BOOL
196 : eq(194, 83) : BOOL
197 : eq(194, 75) : BOOL
198 : eq(194, 88) : BOOL
199 : eq(194, 91) : BOOL
200 : eq(194, 94) : BOOL
201 : eq(194, 2) : BOOL
202 : eq(194, 98) : BOOL
203 : ite(202, 87, 100) : BV:8
204 : ite(201, 96, 203) : BV:8
205 : ite(200, 96, 204) : BV:8
206 : ite(199, 93, 205) : BV:8
207 : ite(198, 90, 206) : BV:8
208 : ite(197, 87, 207) : BV:8
209 : ite(196, 85, 208) : BV:8
210 : ite(195, 82, 209) : BV:8
211 : bvadd(77, 159) : BV:32
212 : eq(211, 80) : BOOL
213 : eq(211, 83) : BOOL
214 : eq(211, 75) : BOOL
215 : eq(211, 88) : BOOL
216 : eq(211, 91) : BOOL
217 : eq(211, 94) : BOOL
218 : eq(211, 2) : BOOL
219 : eq(211, 98) : BOOL
220 : ite(219, 87, 100) : BV:8
221 : ite(218, 96, 220) : BV:8
222 : ite(217, 96, 221) : BV:8
223 : ite(216, 93, 222) : BV:8
224 : ite(215, 90, 223) : BV:8
225 : ite(214, 87, 224) : BV:8
226 : ite(213, 85, 225) : BV:8
227 : ite(212, 82, 226) : BV:8
228 : bvconcat(176, 193, 210, 227) : BV:32
229 : ite(55, 2, 228) : BV:32
230 : ite(74, 228, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : lambda(52, 231) : FUNCTION[BV:32 -> BV:32]
233 : map(51, 232) : MAP[BV:32 -> BV:32]
234 : lambda(17, 233) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
235 : map(16, 234) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
236 : sym_const(235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
=input.dst.llvm-%m
1 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 253, [ 1; 1 ] -> 255, [ 2; 3 ] -> 159, [ 4; 67110151 ] -> 0, [ 67110152; 67110152 ] -> 176, [ 67110153; 67110153 ] -> 253, [ 67110154; 67110154 ] -> 249, [ 67110155; 67110155 ] -> 123, [ 67110156; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 971071491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 971071492; 971071495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 971071496; 2095096063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2095096064; 2095096067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2095096068; 2700886271 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2700886272; 2700886275 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2700886276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 971071492 { 0x39e16004 +1.76074266e244 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2095096064 { 0x7ce0a100 +1.75491333e122 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2700886272 { 0xa0fc4100 -1594081024 -1.97073364e194 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda19131 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19134 : BV:32
18 : Lambda19132 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda19133 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 67110155 { 0x400050b +1.15389e137 } : BV:32
62 : eq(60, 61) : BOOL
63 : 123 { 0x7b } : BV:8
64 : 67110154 { 0x400050a +1.15377e137 } : BV:32
65 : eq(60, 64) : BOOL
66 : 249 { 0xf9 -7 } : BV:8
67 : eq(60, 56) : BOOL
68 : 159 { 0x9f -97 } : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 255 { 0xff -1 } : BV:8
72 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
73 : eq(60, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
76 : eq(60, 75) : BOOL
77 : 253 { 0xfd -3 } : BV:8
78 : eq(60, 2) : BOOL
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : 0 { 0x0 } : BV:8
82 : ite(80, 68, 81) : BV:8
83 : ite(78, 77, 82) : BV:8
84 : ite(76, 77, 83) : BV:8
85 : ite(73, 74, 84) : BV:8
86 : ite(70, 71, 85) : BV:8
87 : ite(67, 68, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(79, 59) : BV:32
91 : eq(90, 61) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 56) : BOOL
94 : eq(90, 69) : BOOL
95 : eq(90, 72) : BOOL
96 : eq(90, 75) : BOOL
97 : eq(90, 2) : BOOL
98 : eq(90, 79) : BOOL
99 : ite(98, 68, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 77, 100) : BV:8
102 : ite(95, 74, 101) : BV:8
103 : ite(94, 71, 102) : BV:8
104 : ite(93, 68, 103) : BV:8
105 : ite(92, 66, 104) : BV:8
106 : ite(91, 63, 105) : BV:8
107 : bvadd(69, 59) : BV:32
108 : eq(107, 61) : BOOL
109 : eq(107, 64) : BOOL
110 : eq(107, 56) : BOOL
111 : eq(107, 69) : BOOL
112 : eq(107, 72) : BOOL
113 : eq(107, 75) : BOOL
114 : eq(107, 2) : BOOL
115 : eq(107, 79) : BOOL
116 : ite(115, 68, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 77, 117) : BV:8
119 : ite(112, 74, 118) : BV:8
120 : ite(111, 71, 119) : BV:8
121 : ite(110, 68, 120) : BV:8
122 : ite(109, 66, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : eq(59, 61) : BOOL
125 : eq(59, 64) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 69) : BOOL
128 : eq(59, 72) : BOOL
129 : eq(59, 75) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 79) : BOOL
132 : ite(131, 68, 81) : BV:8
133 : ite(130, 77, 132) : BV:8
134 : ite(129, 77, 133) : BV:8
135 : ite(128, 74, 134) : BV:8
136 : ite(127, 71, 135) : BV:8
137 : ite(126, 68, 136) : BV:8
138 : ite(125, 66, 137) : BV:8
139 : ite(124, 63, 138) : BV:8
140 : bvconcat(89, 106, 123, 139) : BV:32
141 : bvadd(56, 58, 140) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 56) : BOOL
145 : eq(141, 69) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 75) : BOOL
148 : eq(141, 2) : BOOL
149 : eq(141, 79) : BOOL
150 : ite(149, 68, 81) : BV:8
151 : ite(148, 77, 150) : BV:8
152 : ite(147, 77, 151) : BV:8
153 : ite(146, 74, 152) : BV:8
154 : ite(145, 71, 153) : BV:8
155 : ite(144, 68, 154) : BV:8
156 : ite(143, 66, 155) : BV:8
157 : ite(142, 63, 156) : BV:8
158 : bvadd(79, 58, 140) : BV:32
159 : eq(158, 61) : BOOL
160 : eq(158, 64) : BOOL
161 : eq(158, 56) : BOOL
162 : eq(158, 69) : BOOL
163 : eq(158, 72) : BOOL
164 : eq(158, 75) : BOOL
165 : eq(158, 2) : BOOL
166 : eq(158, 79) : BOOL
167 : ite(166, 68, 81) : BV:8
168 : ite(165, 77, 167) : BV:8
169 : ite(164, 77, 168) : BV:8
170 : ite(163, 74, 169) : BV:8
171 : ite(162, 71, 170) : BV:8
172 : ite(161, 68, 171) : BV:8
173 : ite(160, 66, 172) : BV:8
174 : ite(159, 63, 173) : BV:8
175 : bvadd(69, 58, 140) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 64) : BOOL
178 : eq(175, 56) : BOOL
179 : eq(175, 69) : BOOL
180 : eq(175, 72) : BOOL
181 : eq(175, 75) : BOOL
182 : eq(175, 2) : BOOL
183 : eq(175, 79) : BOOL
184 : ite(183, 68, 81) : BV:8
185 : ite(182, 77, 184) : BV:8
186 : ite(181, 77, 185) : BV:8
187 : ite(180, 74, 186) : BV:8
188 : ite(179, 71, 187) : BV:8
189 : ite(178, 68, 188) : BV:8
190 : ite(177, 66, 189) : BV:8
191 : ite(176, 63, 190) : BV:8
192 : bvadd(58, 140) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 56) : BOOL
196 : eq(192, 69) : BOOL
197 : eq(192, 72) : BOOL
198 : eq(192, 75) : BOOL
199 : eq(192, 2) : BOOL
200 : eq(192, 79) : BOOL
201 : ite(200, 68, 81) : BV:8
202 : ite(199, 77, 201) : BV:8
203 : ite(198, 77, 202) : BV:8
204 : ite(197, 74, 203) : BV:8
205 : ite(196, 71, 204) : BV:8
206 : ite(195, 68, 205) : BV:8
207 : ite(194, 66, 206) : BV:8
208 : ite(193, 63, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(55, 2, 209) : BV:32
211 : lambda(52, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(51, 211) : MAP[BV:32 -> BV:32]
213 : lambda(17, 212) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
214 : map(16, 213) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
215 : sym_const(214) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda19189 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
16 : bvule(15, 3) : BOOL
17 : bvule(3, 15) : BOOL
18 : and(16, 17) : BOOL
19 : ite(18, 15, 15) : BV:32
20 : ite(14, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda19190 : BV:32
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 27) : BV:32
31 : bvadd(28, 30, 5) : BV:32
32 : 67110155 { 0x400050b +1.15389e137 } : BV:32
33 : eq(31, 32) : BOOL
34 : 123 { 0x7b } : BV:8
35 : 67110154 { 0x400050a +1.15377e137 } : BV:32
36 : eq(31, 35) : BOOL
37 : 249 { 0xf9 -7 } : BV:8
38 : eq(31, 28) : BOOL
39 : 159 { 0x9f -97 } : BV:8
40 : eq(31, 1) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
43 : eq(31, 42) : BOOL
44 : 176 { 0xb0 -80 } : BV:8
45 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
46 : eq(31, 45) : BOOL
47 : 253 { 0xfd -3 } : BV:8
48 : eq(31, 5) : BOOL
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(31, 49) : BOOL
51 : 0 { 0x0 } : BV:8
52 : ite(50, 39, 51) : BV:8
53 : ite(48, 47, 52) : BV:8
54 : ite(46, 47, 53) : BV:8
55 : ite(43, 44, 54) : BV:8
56 : ite(40, 41, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(33, 34, 58) : BV:8
60 : bvadd(49, 30, 5) : BV:32
61 : eq(60, 32) : BOOL
62 : eq(60, 35) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 1) : BOOL
65 : eq(60, 42) : BOOL
66 : eq(60, 45) : BOOL
67 : eq(60, 5) : BOOL
68 : eq(60, 49) : BOOL
69 : ite(68, 39, 51) : BV:8
70 : ite(67, 47, 69) : BV:8
71 : ite(66, 47, 70) : BV:8
72 : ite(65, 44, 71) : BV:8
73 : ite(64, 41, 72) : BV:8
74 : ite(63, 39, 73) : BV:8
75 : ite(62, 37, 74) : BV:8
76 : ite(61, 34, 75) : BV:8
77 : bvadd(1, 30, 5) : BV:32
78 : eq(77, 32) : BOOL
79 : eq(77, 35) : BOOL
80 : eq(77, 28) : BOOL
81 : eq(77, 1) : BOOL
82 : eq(77, 42) : BOOL
83 : eq(77, 45) : BOOL
84 : eq(77, 5) : BOOL
85 : eq(77, 49) : BOOL
86 : ite(85, 39, 51) : BV:8
87 : ite(84, 47, 86) : BV:8
88 : ite(83, 47, 87) : BV:8
89 : ite(82, 44, 88) : BV:8
90 : ite(81, 41, 89) : BV:8
91 : ite(80, 39, 90) : BV:8
92 : ite(79, 37, 91) : BV:8
93 : ite(78, 34, 92) : BV:8
94 : bvadd(30, 5) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 28) : BOOL
98 : eq(94, 1) : BOOL
99 : eq(94, 42) : BOOL
100 : eq(94, 45) : BOOL
101 : eq(94, 5) : BOOL
102 : eq(94, 49) : BOOL
103 : ite(102, 39, 51) : BV:8
104 : ite(101, 47, 103) : BV:8
105 : ite(100, 47, 104) : BV:8
106 : ite(99, 44, 105) : BV:8
107 : ite(98, 41, 106) : BV:8
108 : ite(97, 39, 107) : BV:8
109 : ite(96, 37, 108) : BV:8
110 : ite(95, 34, 109) : BV:8
111 : bvconcat(59, 76, 93, 110) : BV:32
112 : lambda(27, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(26, 112) : MAP[BV:32 -> BV:32]
114 : sum(1, 2, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 57478137 { 0x36d0bf9 +1.85192787e135 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 16777540 { 0x1000144 +1.3862e131 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda19193 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda19194 : BV:32
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : 4 { 0x4 +1.47e129 } : BV:32
28 : bvmul(27, 25) : BV:32
29 : bvadd(26, 28, 3) : BV:32
30 : 67110155 { 0x400050b +1.15389e137 } : BV:32
31 : eq(29, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 67110154 { 0x400050a +1.15377e137 } : BV:32
34 : eq(29, 33) : BOOL
35 : 249 { 0xf9 -7 } : BV:8
36 : eq(29, 26) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : eq(29, 38) : BOOL
40 : 255 { 0xff -1 } : BV:8
41 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
42 : eq(29, 41) : BOOL
43 : 176 { 0xb0 -80 } : BV:8
44 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
45 : eq(29, 44) : BOOL
46 : 253 { 0xfd -3 } : BV:8
47 : eq(29, 3) : BOOL
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 0 { 0x0 } : BV:8
51 : ite(49, 37, 50) : BV:8
52 : ite(47, 46, 51) : BV:8
53 : ite(45, 46, 52) : BV:8
54 : ite(42, 43, 53) : BV:8
55 : ite(39, 40, 54) : BV:8
56 : ite(36, 37, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(48, 28, 3) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 26) : BOOL
63 : eq(59, 38) : BOOL
64 : eq(59, 41) : BOOL
65 : eq(59, 44) : BOOL
66 : eq(59, 3) : BOOL
67 : eq(59, 48) : BOOL
68 : ite(67, 37, 50) : BV:8
69 : ite(66, 46, 68) : BV:8
70 : ite(65, 46, 69) : BV:8
71 : ite(64, 43, 70) : BV:8
72 : ite(63, 40, 71) : BV:8
73 : ite(62, 37, 72) : BV:8
74 : ite(61, 35, 73) : BV:8
75 : ite(60, 32, 74) : BV:8
76 : bvadd(38, 28, 3) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 26) : BOOL
80 : eq(76, 38) : BOOL
81 : eq(76, 41) : BOOL
82 : eq(76, 44) : BOOL
83 : eq(76, 3) : BOOL
84 : eq(76, 48) : BOOL
85 : ite(84, 37, 50) : BV:8
86 : ite(83, 46, 85) : BV:8
87 : ite(82, 46, 86) : BV:8
88 : ite(81, 43, 87) : BV:8
89 : ite(80, 40, 88) : BV:8
90 : ite(79, 37, 89) : BV:8
91 : ite(78, 35, 90) : BV:8
92 : ite(77, 32, 91) : BV:8
93 : bvadd(28, 3) : BV:32
94 : eq(93, 30) : BOOL
95 : eq(93, 33) : BOOL
96 : eq(93, 26) : BOOL
97 : eq(93, 38) : BOOL
98 : eq(93, 41) : BOOL
99 : eq(93, 44) : BOOL
100 : eq(93, 3) : BOOL
101 : eq(93, 48) : BOOL
102 : ite(101, 37, 50) : BV:8
103 : ite(100, 46, 102) : BV:8
104 : ite(99, 46, 103) : BV:8
105 : ite(98, 43, 104) : BV:8
106 : ite(97, 40, 105) : BV:8
107 : ite(96, 37, 106) : BV:8
108 : ite(95, 35, 107) : BV:8
109 : ite(94, 32, 108) : BV:8
110 : bvconcat(58, 75, 92, 109) : BV:32
111 : lambda(25, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(24, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda19197 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda19198 : BV:32
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : 4 { 0x4 +1.47e129 } : BV:32
28 : bvmul(27, 25) : BV:32
29 : bvadd(26, 28, 3) : BV:32
30 : 67110155 { 0x400050b +1.15389e137 } : BV:32
31 : eq(29, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 67110154 { 0x400050a +1.15377e137 } : BV:32
34 : eq(29, 33) : BOOL
35 : 249 { 0xf9 -7 } : BV:8
36 : eq(29, 26) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : eq(29, 38) : BOOL
40 : 255 { 0xff -1 } : BV:8
41 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
42 : eq(29, 41) : BOOL
43 : 176 { 0xb0 -80 } : BV:8
44 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
45 : eq(29, 44) : BOOL
46 : 253 { 0xfd -3 } : BV:8
47 : eq(29, 3) : BOOL
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 0 { 0x0 } : BV:8
51 : ite(49, 37, 50) : BV:8
52 : ite(47, 46, 51) : BV:8
53 : ite(45, 46, 52) : BV:8
54 : ite(42, 43, 53) : BV:8
55 : ite(39, 40, 54) : BV:8
56 : ite(36, 37, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(48, 28, 3) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 26) : BOOL
63 : eq(59, 38) : BOOL
64 : eq(59, 41) : BOOL
65 : eq(59, 44) : BOOL
66 : eq(59, 3) : BOOL
67 : eq(59, 48) : BOOL
68 : ite(67, 37, 50) : BV:8
69 : ite(66, 46, 68) : BV:8
70 : ite(65, 46, 69) : BV:8
71 : ite(64, 43, 70) : BV:8
72 : ite(63, 40, 71) : BV:8
73 : ite(62, 37, 72) : BV:8
74 : ite(61, 35, 73) : BV:8
75 : ite(60, 32, 74) : BV:8
76 : bvadd(38, 28, 3) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 26) : BOOL
80 : eq(76, 38) : BOOL
81 : eq(76, 41) : BOOL
82 : eq(76, 44) : BOOL
83 : eq(76, 3) : BOOL
84 : eq(76, 48) : BOOL
85 : ite(84, 37, 50) : BV:8
86 : ite(83, 46, 85) : BV:8
87 : ite(82, 46, 86) : BV:8
88 : ite(81, 43, 87) : BV:8
89 : ite(80, 40, 88) : BV:8
90 : ite(79, 37, 89) : BV:8
91 : ite(78, 35, 90) : BV:8
92 : ite(77, 32, 91) : BV:8
93 : bvadd(28, 3) : BV:32
94 : eq(93, 30) : BOOL
95 : eq(93, 33) : BOOL
96 : eq(93, 26) : BOOL
97 : eq(93, 38) : BOOL
98 : eq(93, 41) : BOOL
99 : eq(93, 44) : BOOL
100 : eq(93, 3) : BOOL
101 : eq(93, 48) : BOOL
102 : ite(101, 37, 50) : BV:8
103 : ite(100, 46, 102) : BV:8
104 : ite(99, 46, 103) : BV:8
105 : ite(98, 43, 104) : BV:8
106 : ite(97, 40, 105) : BV:8
107 : ite(96, 37, 106) : BV:8
108 : ite(95, 35, 107) : BV:8
109 : ite(94, 32, 108) : BV:8
110 : bvconcat(58, 75, 92, 109) : BV:32
111 : lambda(25, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(24, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1419228911 { 0x5497b6ef +1.18527019e42 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2095096064 { 0x7ce0a100 +1.75491333e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2095096067 { 0x7ce0a103 +1.75491368e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2700886272 { 0xa0fc4100 -1594081024 -1.97073364e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2700886275 { 0xa0fc4103 -1594081021 -1.97073400e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 971071492 { 0x39e16004 +1.76074266e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 971071495 { 0x39e16007 +1.76074302e244 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2148532416 ] -> true, [ 2148532417; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda19050 : BV:32
2 : Lambda19051 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda19055 : BV:32
2 : Lambda19056 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : 67110155 { 0x400050b +1.15389e137 } : BV:32
54 : eq(52, 53) : BOOL
55 : 123 { 0x7b } : BV:8
56 : 67110154 { 0x400050a +1.15377e137 } : BV:32
57 : eq(52, 56) : BOOL
58 : 249 { 0xf9 -7 } : BV:8
59 : eq(52, 48) : BOOL
60 : 159 { 0x9f -97 } : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 255 { 0xff -1 } : BV:8
64 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
65 : eq(52, 64) : BOOL
66 : 176 { 0xb0 -80 } : BV:8
67 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
68 : eq(52, 67) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : eq(52, 3) : BOOL
71 : 2 { 0x2 +1.23e129 } : BV:32
72 : eq(52, 71) : BOOL
73 : 0 { 0x0 } : BV:8
74 : ite(72, 60, 73) : BV:8
75 : ite(70, 69, 74) : BV:8
76 : ite(68, 69, 75) : BV:8
77 : ite(65, 66, 76) : BV:8
78 : ite(62, 63, 77) : BV:8
79 : ite(59, 60, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : bvadd(71, 51) : BV:32
83 : eq(82, 53) : BOOL
84 : eq(82, 56) : BOOL
85 : eq(82, 48) : BOOL
86 : eq(82, 61) : BOOL
87 : eq(82, 64) : BOOL
88 : eq(82, 67) : BOOL
89 : eq(82, 3) : BOOL
90 : eq(82, 71) : BOOL
91 : ite(90, 60, 73) : BV:8
92 : ite(89, 69, 91) : BV:8
93 : ite(88, 69, 92) : BV:8
94 : ite(87, 66, 93) : BV:8
95 : ite(86, 63, 94) : BV:8
96 : ite(85, 60, 95) : BV:8
97 : ite(84, 58, 96) : BV:8
98 : ite(83, 55, 97) : BV:8
99 : bvadd(61, 51) : BV:32
100 : eq(99, 53) : BOOL
101 : eq(99, 56) : BOOL
102 : eq(99, 48) : BOOL
103 : eq(99, 61) : BOOL
104 : eq(99, 64) : BOOL
105 : eq(99, 67) : BOOL
106 : eq(99, 3) : BOOL
107 : eq(99, 71) : BOOL
108 : ite(107, 60, 73) : BV:8
109 : ite(106, 69, 108) : BV:8
110 : ite(105, 69, 109) : BV:8
111 : ite(104, 66, 110) : BV:8
112 : ite(103, 63, 111) : BV:8
113 : ite(102, 60, 112) : BV:8
114 : ite(101, 58, 113) : BV:8
115 : ite(100, 55, 114) : BV:8
116 : eq(51, 53) : BOOL
117 : eq(51, 56) : BOOL
118 : eq(51, 48) : BOOL
119 : eq(51, 61) : BOOL
120 : eq(51, 64) : BOOL
121 : eq(51, 67) : BOOL
122 : eq(51, 3) : BOOL
123 : eq(51, 71) : BOOL
124 : ite(123, 60, 73) : BV:8
125 : ite(122, 69, 124) : BV:8
126 : ite(121, 69, 125) : BV:8
127 : ite(120, 66, 126) : BV:8
128 : ite(119, 63, 127) : BV:8
129 : ite(118, 60, 128) : BV:8
130 : ite(117, 58, 129) : BV:8
131 : ite(116, 55, 130) : BV:8
132 : bvconcat(81, 98, 115, 131) : BV:32
133 : bvadd(48, 50, 132) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 48) : BOOL
137 : eq(133, 61) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 67) : BOOL
140 : eq(133, 3) : BOOL
141 : eq(133, 71) : BOOL
142 : ite(141, 60, 73) : BV:8
143 : ite(140, 69, 142) : BV:8
144 : ite(139, 69, 143) : BV:8
145 : ite(138, 66, 144) : BV:8
146 : ite(137, 63, 145) : BV:8
147 : ite(136, 60, 146) : BV:8
148 : ite(135, 58, 147) : BV:8
149 : ite(134, 55, 148) : BV:8
150 : bvadd(71, 50, 132) : BV:32
151 : eq(150, 53) : BOOL
152 : eq(150, 56) : BOOL
153 : eq(150, 48) : BOOL
154 : eq(150, 61) : BOOL
155 : eq(150, 64) : BOOL
156 : eq(150, 67) : BOOL
157 : eq(150, 3) : BOOL
158 : eq(150, 71) : BOOL
159 : ite(158, 60, 73) : BV:8
160 : ite(157, 69, 159) : BV:8
161 : ite(156, 69, 160) : BV:8
162 : ite(155, 66, 161) : BV:8
163 : ite(154, 63, 162) : BV:8
164 : ite(153, 60, 163) : BV:8
165 : ite(152, 58, 164) : BV:8
166 : ite(151, 55, 165) : BV:8
167 : bvadd(61, 50, 132) : BV:32
168 : eq(167, 53) : BOOL
169 : eq(167, 56) : BOOL
170 : eq(167, 48) : BOOL
171 : eq(167, 61) : BOOL
172 : eq(167, 64) : BOOL
173 : eq(167, 67) : BOOL
174 : eq(167, 3) : BOOL
175 : eq(167, 71) : BOOL
176 : ite(175, 60, 73) : BV:8
177 : ite(174, 69, 176) : BV:8
178 : ite(173, 69, 177) : BV:8
179 : ite(172, 66, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 60, 180) : BV:8
182 : ite(169, 58, 181) : BV:8
183 : ite(168, 55, 182) : BV:8
184 : bvadd(50, 132) : BV:32
185 : eq(184, 53) : BOOL
186 : eq(184, 56) : BOOL
187 : eq(184, 48) : BOOL
188 : eq(184, 61) : BOOL
189 : eq(184, 64) : BOOL
190 : eq(184, 67) : BOOL
191 : eq(184, 3) : BOOL
192 : eq(184, 71) : BOOL
193 : ite(192, 60, 73) : BV:8
194 : ite(191, 69, 193) : BV:8
195 : ite(190, 69, 194) : BV:8
196 : ite(189, 66, 195) : BV:8
197 : ite(188, 63, 196) : BV:8
198 : ite(187, 60, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 55, 199) : BV:8
201 : bvconcat(149, 166, 183, 200) : BV:32
202 : ite(6, 3, 201) : BV:32
203 : ite(47, 201, 202) : BV:32
204 : ite(6, 3, 203) : BV:32
205 : lambda(1, 2, 204) : FUNCTION[BV:32,BV:32 -> BV:32]
206 : sym_const(205) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2148532416 ] -> true, [ 2148532417; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda19061 : BV:32
2 : Lambda19062 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda19057 : BV:32
2 : Lambda19058 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 67110155 { 0x400050b +1.15389e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 67110154 { 0x400050a +1.15377e137 } : BV:32
16 : eq(11, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : eq(11, 7) : BOOL
19 : 159 { 0x9f -97 } : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(11, 20) : BOOL
22 : 255 { 0xff -1 } : BV:8
23 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
24 : eq(11, 23) : BOOL
25 : 176 { 0xb0 -80 } : BV:8
26 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
27 : eq(11, 26) : BOOL
28 : 253 { 0xfd -3 } : BV:8
29 : eq(11, 3) : BOOL
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 19, 32) : BV:8
34 : ite(29, 28, 33) : BV:8
35 : ite(27, 28, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : ite(21, 22, 36) : BV:8
38 : ite(18, 19, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(30, 10) : BV:32
42 : eq(41, 12) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 7) : BOOL
45 : eq(41, 20) : BOOL
46 : eq(41, 23) : BOOL
47 : eq(41, 26) : BOOL
48 : eq(41, 3) : BOOL
49 : eq(41, 30) : BOOL
50 : ite(49, 19, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : ite(45, 22, 53) : BV:8
55 : ite(44, 19, 54) : BV:8
56 : ite(43, 17, 55) : BV:8
57 : ite(42, 14, 56) : BV:8
58 : bvadd(20, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 7) : BOOL
62 : eq(58, 20) : BOOL
63 : eq(58, 23) : BOOL
64 : eq(58, 26) : BOOL
65 : eq(58, 3) : BOOL
66 : eq(58, 30) : BOOL
67 : ite(66, 19, 32) : BV:8
68 : ite(65, 28, 67) : BV:8
69 : ite(64, 28, 68) : BV:8
70 : ite(63, 25, 69) : BV:8
71 : ite(62, 22, 70) : BV:8
72 : ite(61, 19, 71) : BV:8
73 : ite(60, 17, 72) : BV:8
74 : ite(59, 14, 73) : BV:8
75 : eq(10, 12) : BOOL
76 : eq(10, 15) : BOOL
77 : eq(10, 7) : BOOL
78 : eq(10, 20) : BOOL
79 : eq(10, 23) : BOOL
80 : eq(10, 26) : BOOL
81 : eq(10, 3) : BOOL
82 : eq(10, 30) : BOOL
83 : ite(82, 19, 32) : BV:8
84 : ite(81, 28, 83) : BV:8
85 : ite(80, 28, 84) : BV:8
86 : ite(79, 25, 85) : BV:8
87 : ite(78, 22, 86) : BV:8
88 : ite(77, 19, 87) : BV:8
89 : ite(76, 17, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : bvconcat(40, 57, 74, 90) : BV:32
92 : bvadd(7, 9, 91) : BV:32
93 : eq(92, 12) : BOOL
94 : eq(92, 15) : BOOL
95 : eq(92, 7) : BOOL
96 : eq(92, 20) : BOOL
97 : eq(92, 23) : BOOL
98 : eq(92, 26) : BOOL
99 : eq(92, 3) : BOOL
100 : eq(92, 30) : BOOL
101 : ite(100, 19, 32) : BV:8
102 : ite(99, 28, 101) : BV:8
103 : ite(98, 28, 102) : BV:8
104 : ite(97, 25, 103) : BV:8
105 : ite(96, 22, 104) : BV:8
106 : ite(95, 19, 105) : BV:8
107 : ite(94, 17, 106) : BV:8
108 : ite(93, 14, 107) : BV:8
109 : bvadd(30, 9, 91) : BV:32
110 : eq(109, 12) : BOOL
111 : eq(109, 15) : BOOL
112 : eq(109, 7) : BOOL
113 : eq(109, 20) : BOOL
114 : eq(109, 23) : BOOL
115 : eq(109, 26) : BOOL
116 : eq(109, 3) : BOOL
117 : eq(109, 30) : BOOL
118 : ite(117, 19, 32) : BV:8
119 : ite(116, 28, 118) : BV:8
120 : ite(115, 28, 119) : BV:8
121 : ite(114, 25, 120) : BV:8
122 : ite(113, 22, 121) : BV:8
123 : ite(112, 19, 122) : BV:8
124 : ite(111, 17, 123) : BV:8
125 : ite(110, 14, 124) : BV:8
126 : bvadd(20, 9, 91) : BV:32
127 : eq(126, 12) : BOOL
128 : eq(126, 15) : BOOL
129 : eq(126, 7) : BOOL
130 : eq(126, 20) : BOOL
131 : eq(126, 23) : BOOL
132 : eq(126, 26) : BOOL
133 : eq(126, 3) : BOOL
134 : eq(126, 30) : BOOL
135 : ite(134, 19, 32) : BV:8
136 : ite(133, 28, 135) : BV:8
137 : ite(132, 28, 136) : BV:8
138 : ite(131, 25, 137) : BV:8
139 : ite(130, 22, 138) : BV:8
140 : ite(129, 19, 139) : BV:8
141 : ite(128, 17, 140) : BV:8
142 : ite(127, 14, 141) : BV:8
143 : bvadd(9, 91) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 7) : BOOL
147 : eq(143, 20) : BOOL
148 : eq(143, 23) : BOOL
149 : eq(143, 26) : BOOL
150 : eq(143, 3) : BOOL
151 : eq(143, 30) : BOOL
152 : ite(151, 19, 32) : BV:8
153 : ite(150, 28, 152) : BV:8
154 : ite(149, 28, 153) : BV:8
155 : ite(148, 25, 154) : BV:8
156 : ite(147, 22, 155) : BV:8
157 : ite(146, 19, 156) : BV:8
158 : ite(145, 17, 157) : BV:8
159 : ite(144, 14, 158) : BV:8
160 : bvconcat(108, 125, 142, 159) : BV:32
161 : ite(6, 3, 160) : BV:32
162 : lambda(1, 2, 161) : FUNCTION[BV:32,BV:32 -> BV:32]
163 : sym_const(162) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda19068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda19072 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda19076 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
577840138
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 73
=global nodece 73 nodece z3.ce7188.num_edges_traversed3
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3.ce7188 283dc1bdbc885d274411b375d52958fe
=input.spec-%var-x-1
1 : Lambda19123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19126 : BV:32
18 : Lambda19124 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda19125 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : 67110155 { 0x400050b +1.15389e137 } : BV:32
81 : eq(79, 80) : BOOL
82 : 123 { 0x7b } : BV:8
83 : 67110154 { 0x400050a +1.15377e137 } : BV:32
84 : eq(79, 83) : BOOL
85 : 249 { 0xf9 -7 } : BV:8
86 : eq(79, 75) : BOOL
87 : 159 { 0x9f -97 } : BV:8
88 : 1 { 0x1 +1.11e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 255 { 0xff -1 } : BV:8
91 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
92 : eq(79, 91) : BOOL
93 : 176 { 0xb0 -80 } : BV:8
94 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
95 : eq(79, 94) : BOOL
96 : 253 { 0xfd -3 } : BV:8
97 : eq(79, 2) : BOOL
98 : 2 { 0x2 +1.23e129 } : BV:32
99 : eq(79, 98) : BOOL
100 : 0 { 0x0 } : BV:8
101 : ite(99, 87, 100) : BV:8
102 : ite(97, 96, 101) : BV:8
103 : ite(95, 96, 102) : BV:8
104 : ite(92, 93, 103) : BV:8
105 : ite(89, 90, 104) : BV:8
106 : ite(86, 87, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(81, 82, 107) : BV:8
109 : bvadd(98, 78) : BV:32
110 : eq(109, 80) : BOOL
111 : eq(109, 83) : BOOL
112 : eq(109, 75) : BOOL
113 : eq(109, 88) : BOOL
114 : eq(109, 91) : BOOL
115 : eq(109, 94) : BOOL
116 : eq(109, 2) : BOOL
117 : eq(109, 98) : BOOL
118 : ite(117, 87, 100) : BV:8
119 : ite(116, 96, 118) : BV:8
120 : ite(115, 96, 119) : BV:8
121 : ite(114, 93, 120) : BV:8
122 : ite(113, 90, 121) : BV:8
123 : ite(112, 87, 122) : BV:8
124 : ite(111, 85, 123) : BV:8
125 : ite(110, 82, 124) : BV:8
126 : bvadd(88, 78) : BV:32
127 : eq(126, 80) : BOOL
128 : eq(126, 83) : BOOL
129 : eq(126, 75) : BOOL
130 : eq(126, 88) : BOOL
131 : eq(126, 91) : BOOL
132 : eq(126, 94) : BOOL
133 : eq(126, 2) : BOOL
134 : eq(126, 98) : BOOL
135 : ite(134, 87, 100) : BV:8
136 : ite(133, 96, 135) : BV:8
137 : ite(132, 96, 136) : BV:8
138 : ite(131, 93, 137) : BV:8
139 : ite(130, 90, 138) : BV:8
140 : ite(129, 87, 139) : BV:8
141 : ite(128, 85, 140) : BV:8
142 : ite(127, 82, 141) : BV:8
143 : eq(78, 80) : BOOL
144 : eq(78, 83) : BOOL
145 : eq(78, 75) : BOOL
146 : eq(78, 88) : BOOL
147 : eq(78, 91) : BOOL
148 : eq(78, 94) : BOOL
149 : eq(78, 2) : BOOL
150 : eq(78, 98) : BOOL
151 : ite(150, 87, 100) : BV:8
152 : ite(149, 96, 151) : BV:8
153 : ite(148, 96, 152) : BV:8
154 : ite(147, 93, 153) : BV:8
155 : ite(146, 90, 154) : BV:8
156 : ite(145, 87, 155) : BV:8
157 : ite(144, 85, 156) : BV:8
158 : ite(143, 82, 157) : BV:8
159 : bvconcat(108, 125, 142, 158) : BV:32
160 : bvadd(75, 77, 159) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 75) : BOOL
164 : eq(160, 88) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 94) : BOOL
167 : eq(160, 2) : BOOL
168 : eq(160, 98) : BOOL
169 : ite(168, 87, 100) : BV:8
170 : ite(167, 96, 169) : BV:8
171 : ite(166, 96, 170) : BV:8
172 : ite(165, 93, 171) : BV:8
173 : ite(164, 90, 172) : BV:8
174 : ite(163, 87, 173) : BV:8
175 : ite(162, 85, 174) : BV:8
176 : ite(161, 82, 175) : BV:8
177 : bvadd(98, 77, 159) : BV:32
178 : eq(177, 80) : BOOL
179 : eq(177, 83) : BOOL
180 : eq(177, 75) : BOOL
181 : eq(177, 88) : BOOL
182 : eq(177, 91) : BOOL
183 : eq(177, 94) : BOOL
184 : eq(177, 2) : BOOL
185 : eq(177, 98) : BOOL
186 : ite(185, 87, 100) : BV:8
187 : ite(184, 96, 186) : BV:8
188 : ite(183, 96, 187) : BV:8
189 : ite(182, 93, 188) : BV:8
190 : ite(181, 90, 189) : BV:8
191 : ite(180, 87, 190) : BV:8
192 : ite(179, 85, 191) : BV:8
193 : ite(178, 82, 192) : BV:8
194 : bvadd(88, 77, 159) : BV:32
195 : eq(194, 80) : BOOL
196 : eq(194, 83) : BOOL
197 : eq(194, 75) : BOOL
198 : eq(194, 88) : BOOL
199 : eq(194, 91) : BOOL
200 : eq(194, 94) : BOOL
201 : eq(194, 2) : BOOL
202 : eq(194, 98) : BOOL
203 : ite(202, 87, 100) : BV:8
204 : ite(201, 96, 203) : BV:8
205 : ite(200, 96, 204) : BV:8
206 : ite(199, 93, 205) : BV:8
207 : ite(198, 90, 206) : BV:8
208 : ite(197, 87, 207) : BV:8
209 : ite(196, 85, 208) : BV:8
210 : ite(195, 82, 209) : BV:8
211 : bvadd(77, 159) : BV:32
212 : eq(211, 80) : BOOL
213 : eq(211, 83) : BOOL
214 : eq(211, 75) : BOOL
215 : eq(211, 88) : BOOL
216 : eq(211, 91) : BOOL
217 : eq(211, 94) : BOOL
218 : eq(211, 2) : BOOL
219 : eq(211, 98) : BOOL
220 : ite(219, 87, 100) : BV:8
221 : ite(218, 96, 220) : BV:8
222 : ite(217, 96, 221) : BV:8
223 : ite(216, 93, 222) : BV:8
224 : ite(215, 90, 223) : BV:8
225 : ite(214, 87, 224) : BV:8
226 : ite(213, 85, 225) : BV:8
227 : ite(212, 82, 226) : BV:8
228 : bvconcat(176, 193, 210, 227) : BV:32
229 : ite(55, 2, 228) : BV:32
230 : ite(74, 228, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : lambda(52, 231) : FUNCTION[BV:32 -> BV:32]
233 : map(51, 232) : MAP[BV:32 -> BV:32]
234 : lambda(17, 233) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
235 : map(16, 234) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
236 : sym_const(235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2678063100 { 0x9f9ffffc -1616904196 -1.24999952e192 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
=input.dst.llvm-%m
1 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 253, [ 1; 1 ] -> 255, [ 2; 3 ] -> 159, [ 4; 67110151 ] -> 0, [ 67110152; 67110152 ] -> 176, [ 67110153; 67110153 ] -> 253, [ 67110154; 67110154 ] -> 249, [ 67110155; 67110155 ] -> 123, [ 67110156; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 971071491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 971071492; 971071495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 971071496; 2095096063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2095096064; 2095096067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2095096068; 2700886271 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2700886272; 2700886275 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2700886276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 971071492 { 0x39e16004 +1.76074266e244 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2095096064 { 0x7ce0a100 +1.75491333e122 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2700886272 { 0xa0fc4100 -1594081024 -1.97073364e194 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda19131 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19134 : BV:32
18 : Lambda19132 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda19133 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 67110155 { 0x400050b +1.15389e137 } : BV:32
62 : eq(60, 61) : BOOL
63 : 123 { 0x7b } : BV:8
64 : 67110154 { 0x400050a +1.15377e137 } : BV:32
65 : eq(60, 64) : BOOL
66 : 249 { 0xf9 -7 } : BV:8
67 : eq(60, 56) : BOOL
68 : 159 { 0x9f -97 } : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 255 { 0xff -1 } : BV:8
72 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
73 : eq(60, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
76 : eq(60, 75) : BOOL
77 : 253 { 0xfd -3 } : BV:8
78 : eq(60, 2) : BOOL
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : 0 { 0x0 } : BV:8
82 : ite(80, 68, 81) : BV:8
83 : ite(78, 77, 82) : BV:8
84 : ite(76, 77, 83) : BV:8
85 : ite(73, 74, 84) : BV:8
86 : ite(70, 71, 85) : BV:8
87 : ite(67, 68, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(79, 59) : BV:32
91 : eq(90, 61) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 56) : BOOL
94 : eq(90, 69) : BOOL
95 : eq(90, 72) : BOOL
96 : eq(90, 75) : BOOL
97 : eq(90, 2) : BOOL
98 : eq(90, 79) : BOOL
99 : ite(98, 68, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 77, 100) : BV:8
102 : ite(95, 74, 101) : BV:8
103 : ite(94, 71, 102) : BV:8
104 : ite(93, 68, 103) : BV:8
105 : ite(92, 66, 104) : BV:8
106 : ite(91, 63, 105) : BV:8
107 : bvadd(69, 59) : BV:32
108 : eq(107, 61) : BOOL
109 : eq(107, 64) : BOOL
110 : eq(107, 56) : BOOL
111 : eq(107, 69) : BOOL
112 : eq(107, 72) : BOOL
113 : eq(107, 75) : BOOL
114 : eq(107, 2) : BOOL
115 : eq(107, 79) : BOOL
116 : ite(115, 68, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 77, 117) : BV:8
119 : ite(112, 74, 118) : BV:8
120 : ite(111, 71, 119) : BV:8
121 : ite(110, 68, 120) : BV:8
122 : ite(109, 66, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : eq(59, 61) : BOOL
125 : eq(59, 64) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 69) : BOOL
128 : eq(59, 72) : BOOL
129 : eq(59, 75) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 79) : BOOL
132 : ite(131, 68, 81) : BV:8
133 : ite(130, 77, 132) : BV:8
134 : ite(129, 77, 133) : BV:8
135 : ite(128, 74, 134) : BV:8
136 : ite(127, 71, 135) : BV:8
137 : ite(126, 68, 136) : BV:8
138 : ite(125, 66, 137) : BV:8
139 : ite(124, 63, 138) : BV:8
140 : bvconcat(89, 106, 123, 139) : BV:32
141 : bvadd(56, 58, 140) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 56) : BOOL
145 : eq(141, 69) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 75) : BOOL
148 : eq(141, 2) : BOOL
149 : eq(141, 79) : BOOL
150 : ite(149, 68, 81) : BV:8
151 : ite(148, 77, 150) : BV:8
152 : ite(147, 77, 151) : BV:8
153 : ite(146, 74, 152) : BV:8
154 : ite(145, 71, 153) : BV:8
155 : ite(144, 68, 154) : BV:8
156 : ite(143, 66, 155) : BV:8
157 : ite(142, 63, 156) : BV:8
158 : bvadd(79, 58, 140) : BV:32
159 : eq(158, 61) : BOOL
160 : eq(158, 64) : BOOL
161 : eq(158, 56) : BOOL
162 : eq(158, 69) : BOOL
163 : eq(158, 72) : BOOL
164 : eq(158, 75) : BOOL
165 : eq(158, 2) : BOOL
166 : eq(158, 79) : BOOL
167 : ite(166, 68, 81) : BV:8
168 : ite(165, 77, 167) : BV:8
169 : ite(164, 77, 168) : BV:8
170 : ite(163, 74, 169) : BV:8
171 : ite(162, 71, 170) : BV:8
172 : ite(161, 68, 171) : BV:8
173 : ite(160, 66, 172) : BV:8
174 : ite(159, 63, 173) : BV:8
175 : bvadd(69, 58, 140) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 64) : BOOL
178 : eq(175, 56) : BOOL
179 : eq(175, 69) : BOOL
180 : eq(175, 72) : BOOL
181 : eq(175, 75) : BOOL
182 : eq(175, 2) : BOOL
183 : eq(175, 79) : BOOL
184 : ite(183, 68, 81) : BV:8
185 : ite(182, 77, 184) : BV:8
186 : ite(181, 77, 185) : BV:8
187 : ite(180, 74, 186) : BV:8
188 : ite(179, 71, 187) : BV:8
189 : ite(178, 68, 188) : BV:8
190 : ite(177, 66, 189) : BV:8
191 : ite(176, 63, 190) : BV:8
192 : bvadd(58, 140) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 56) : BOOL
196 : eq(192, 69) : BOOL
197 : eq(192, 72) : BOOL
198 : eq(192, 75) : BOOL
199 : eq(192, 2) : BOOL
200 : eq(192, 79) : BOOL
201 : ite(200, 68, 81) : BV:8
202 : ite(199, 77, 201) : BV:8
203 : ite(198, 77, 202) : BV:8
204 : ite(197, 74, 203) : BV:8
205 : ite(196, 71, 204) : BV:8
206 : ite(195, 68, 205) : BV:8
207 : ite(194, 66, 206) : BV:8
208 : ite(193, 63, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(55, 2, 209) : BV:32
211 : lambda(52, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(51, 211) : MAP[BV:32 -> BV:32]
213 : lambda(17, 212) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
214 : map(16, 213) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
215 : sym_const(214) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda19189 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
16 : bvule(15, 3) : BOOL
17 : bvule(3, 15) : BOOL
18 : and(16, 17) : BOOL
19 : ite(18, 15, 15) : BV:32
20 : ite(14, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda19190 : BV:32
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 27) : BV:32
31 : bvadd(28, 30, 5) : BV:32
32 : 67110155 { 0x400050b +1.15389e137 } : BV:32
33 : eq(31, 32) : BOOL
34 : 123 { 0x7b } : BV:8
35 : 67110154 { 0x400050a +1.15377e137 } : BV:32
36 : eq(31, 35) : BOOL
37 : 249 { 0xf9 -7 } : BV:8
38 : eq(31, 28) : BOOL
39 : 159 { 0x9f -97 } : BV:8
40 : eq(31, 1) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
43 : eq(31, 42) : BOOL
44 : 176 { 0xb0 -80 } : BV:8
45 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
46 : eq(31, 45) : BOOL
47 : 253 { 0xfd -3 } : BV:8
48 : eq(31, 5) : BOOL
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(31, 49) : BOOL
51 : 0 { 0x0 } : BV:8
52 : ite(50, 39, 51) : BV:8
53 : ite(48, 47, 52) : BV:8
54 : ite(46, 47, 53) : BV:8
55 : ite(43, 44, 54) : BV:8
56 : ite(40, 41, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(33, 34, 58) : BV:8
60 : bvadd(49, 30, 5) : BV:32
61 : eq(60, 32) : BOOL
62 : eq(60, 35) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 1) : BOOL
65 : eq(60, 42) : BOOL
66 : eq(60, 45) : BOOL
67 : eq(60, 5) : BOOL
68 : eq(60, 49) : BOOL
69 : ite(68, 39, 51) : BV:8
70 : ite(67, 47, 69) : BV:8
71 : ite(66, 47, 70) : BV:8
72 : ite(65, 44, 71) : BV:8
73 : ite(64, 41, 72) : BV:8
74 : ite(63, 39, 73) : BV:8
75 : ite(62, 37, 74) : BV:8
76 : ite(61, 34, 75) : BV:8
77 : bvadd(1, 30, 5) : BV:32
78 : eq(77, 32) : BOOL
79 : eq(77, 35) : BOOL
80 : eq(77, 28) : BOOL
81 : eq(77, 1) : BOOL
82 : eq(77, 42) : BOOL
83 : eq(77, 45) : BOOL
84 : eq(77, 5) : BOOL
85 : eq(77, 49) : BOOL
86 : ite(85, 39, 51) : BV:8
87 : ite(84, 47, 86) : BV:8
88 : ite(83, 47, 87) : BV:8
89 : ite(82, 44, 88) : BV:8
90 : ite(81, 41, 89) : BV:8
91 : ite(80, 39, 90) : BV:8
92 : ite(79, 37, 91) : BV:8
93 : ite(78, 34, 92) : BV:8
94 : bvadd(30, 5) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 28) : BOOL
98 : eq(94, 1) : BOOL
99 : eq(94, 42) : BOOL
100 : eq(94, 45) : BOOL
101 : eq(94, 5) : BOOL
102 : eq(94, 49) : BOOL
103 : ite(102, 39, 51) : BV:8
104 : ite(101, 47, 103) : BV:8
105 : ite(100, 47, 104) : BV:8
106 : ite(99, 44, 105) : BV:8
107 : ite(98, 41, 106) : BV:8
108 : ite(97, 39, 107) : BV:8
109 : ite(96, 37, 108) : BV:8
110 : ite(95, 34, 109) : BV:8
111 : bvconcat(59, 76, 93, 110) : BV:32
112 : lambda(27, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(26, 112) : MAP[BV:32 -> BV:32]
114 : sum(1, 2, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 57478137 { 0x36d0bf9 +1.85192787e135 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 16777540 { 0x1000144 +1.3862e131 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda19193 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda19194 : BV:32
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : 4 { 0x4 +1.47e129 } : BV:32
28 : bvmul(27, 25) : BV:32
29 : bvadd(26, 28, 3) : BV:32
30 : 67110155 { 0x400050b +1.15389e137 } : BV:32
31 : eq(29, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 67110154 { 0x400050a +1.15377e137 } : BV:32
34 : eq(29, 33) : BOOL
35 : 249 { 0xf9 -7 } : BV:8
36 : eq(29, 26) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : eq(29, 38) : BOOL
40 : 255 { 0xff -1 } : BV:8
41 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
42 : eq(29, 41) : BOOL
43 : 176 { 0xb0 -80 } : BV:8
44 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
45 : eq(29, 44) : BOOL
46 : 253 { 0xfd -3 } : BV:8
47 : eq(29, 3) : BOOL
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 0 { 0x0 } : BV:8
51 : ite(49, 37, 50) : BV:8
52 : ite(47, 46, 51) : BV:8
53 : ite(45, 46, 52) : BV:8
54 : ite(42, 43, 53) : BV:8
55 : ite(39, 40, 54) : BV:8
56 : ite(36, 37, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(48, 28, 3) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 26) : BOOL
63 : eq(59, 38) : BOOL
64 : eq(59, 41) : BOOL
65 : eq(59, 44) : BOOL
66 : eq(59, 3) : BOOL
67 : eq(59, 48) : BOOL
68 : ite(67, 37, 50) : BV:8
69 : ite(66, 46, 68) : BV:8
70 : ite(65, 46, 69) : BV:8
71 : ite(64, 43, 70) : BV:8
72 : ite(63, 40, 71) : BV:8
73 : ite(62, 37, 72) : BV:8
74 : ite(61, 35, 73) : BV:8
75 : ite(60, 32, 74) : BV:8
76 : bvadd(38, 28, 3) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 26) : BOOL
80 : eq(76, 38) : BOOL
81 : eq(76, 41) : BOOL
82 : eq(76, 44) : BOOL
83 : eq(76, 3) : BOOL
84 : eq(76, 48) : BOOL
85 : ite(84, 37, 50) : BV:8
86 : ite(83, 46, 85) : BV:8
87 : ite(82, 46, 86) : BV:8
88 : ite(81, 43, 87) : BV:8
89 : ite(80, 40, 88) : BV:8
90 : ite(79, 37, 89) : BV:8
91 : ite(78, 35, 90) : BV:8
92 : ite(77, 32, 91) : BV:8
93 : bvadd(28, 3) : BV:32
94 : eq(93, 30) : BOOL
95 : eq(93, 33) : BOOL
96 : eq(93, 26) : BOOL
97 : eq(93, 38) : BOOL
98 : eq(93, 41) : BOOL
99 : eq(93, 44) : BOOL
100 : eq(93, 3) : BOOL
101 : eq(93, 48) : BOOL
102 : ite(101, 37, 50) : BV:8
103 : ite(100, 46, 102) : BV:8
104 : ite(99, 46, 103) : BV:8
105 : ite(98, 43, 104) : BV:8
106 : ite(97, 40, 105) : BV:8
107 : ite(96, 37, 106) : BV:8
108 : ite(95, 35, 107) : BV:8
109 : ite(94, 32, 108) : BV:8
110 : bvconcat(58, 75, 92, 109) : BV:32
111 : lambda(25, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(24, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda19197 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda19198 : BV:32
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : 4 { 0x4 +1.47e129 } : BV:32
28 : bvmul(27, 25) : BV:32
29 : bvadd(26, 28, 3) : BV:32
30 : 67110155 { 0x400050b +1.15389e137 } : BV:32
31 : eq(29, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 67110154 { 0x400050a +1.15377e137 } : BV:32
34 : eq(29, 33) : BOOL
35 : 249 { 0xf9 -7 } : BV:8
36 : eq(29, 26) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : eq(29, 38) : BOOL
40 : 255 { 0xff -1 } : BV:8
41 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
42 : eq(29, 41) : BOOL
43 : 176 { 0xb0 -80 } : BV:8
44 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
45 : eq(29, 44) : BOOL
46 : 253 { 0xfd -3 } : BV:8
47 : eq(29, 3) : BOOL
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 0 { 0x0 } : BV:8
51 : ite(49, 37, 50) : BV:8
52 : ite(47, 46, 51) : BV:8
53 : ite(45, 46, 52) : BV:8
54 : ite(42, 43, 53) : BV:8
55 : ite(39, 40, 54) : BV:8
56 : ite(36, 37, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(48, 28, 3) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 26) : BOOL
63 : eq(59, 38) : BOOL
64 : eq(59, 41) : BOOL
65 : eq(59, 44) : BOOL
66 : eq(59, 3) : BOOL
67 : eq(59, 48) : BOOL
68 : ite(67, 37, 50) : BV:8
69 : ite(66, 46, 68) : BV:8
70 : ite(65, 46, 69) : BV:8
71 : ite(64, 43, 70) : BV:8
72 : ite(63, 40, 71) : BV:8
73 : ite(62, 37, 72) : BV:8
74 : ite(61, 35, 73) : BV:8
75 : ite(60, 32, 74) : BV:8
76 : bvadd(38, 28, 3) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 26) : BOOL
80 : eq(76, 38) : BOOL
81 : eq(76, 41) : BOOL
82 : eq(76, 44) : BOOL
83 : eq(76, 3) : BOOL
84 : eq(76, 48) : BOOL
85 : ite(84, 37, 50) : BV:8
86 : ite(83, 46, 85) : BV:8
87 : ite(82, 46, 86) : BV:8
88 : ite(81, 43, 87) : BV:8
89 : ite(80, 40, 88) : BV:8
90 : ite(79, 37, 89) : BV:8
91 : ite(78, 35, 90) : BV:8
92 : ite(77, 32, 91) : BV:8
93 : bvadd(28, 3) : BV:32
94 : eq(93, 30) : BOOL
95 : eq(93, 33) : BOOL
96 : eq(93, 26) : BOOL
97 : eq(93, 38) : BOOL
98 : eq(93, 41) : BOOL
99 : eq(93, 44) : BOOL
100 : eq(93, 3) : BOOL
101 : eq(93, 48) : BOOL
102 : ite(101, 37, 50) : BV:8
103 : ite(100, 46, 102) : BV:8
104 : ite(99, 46, 103) : BV:8
105 : ite(98, 43, 104) : BV:8
106 : ite(97, 40, 105) : BV:8
107 : ite(96, 37, 106) : BV:8
108 : ite(95, 35, 107) : BV:8
109 : ite(94, 32, 108) : BV:8
110 : bvconcat(58, 75, 92, 109) : BV:32
111 : lambda(25, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(24, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2678063100 { 0x9f9ffffc -1616904196 -1.24999952e192 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1419228911 { 0x5497b6ef +1.18527019e42 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2095096064 { 0x7ce0a100 +1.75491333e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2095096067 { 0x7ce0a103 +1.75491368e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2700886272 { 0xa0fc4100 -1594081024 -1.97073364e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2700886275 { 0xa0fc4103 -1594081021 -1.97073400e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 971071492 { 0x39e16004 +1.76074266e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 971071495 { 0x39e16007 +1.76074302e244 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2148532416 ] -> true, [ 2148532417; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda19050 : BV:32
2 : Lambda19051 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda19055 : BV:32
2 : Lambda19056 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : 67110155 { 0x400050b +1.15389e137 } : BV:32
54 : eq(52, 53) : BOOL
55 : 123 { 0x7b } : BV:8
56 : 67110154 { 0x400050a +1.15377e137 } : BV:32
57 : eq(52, 56) : BOOL
58 : 249 { 0xf9 -7 } : BV:8
59 : eq(52, 48) : BOOL
60 : 159 { 0x9f -97 } : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 255 { 0xff -1 } : BV:8
64 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
65 : eq(52, 64) : BOOL
66 : 176 { 0xb0 -80 } : BV:8
67 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
68 : eq(52, 67) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : eq(52, 3) : BOOL
71 : 2 { 0x2 +1.23e129 } : BV:32
72 : eq(52, 71) : BOOL
73 : 0 { 0x0 } : BV:8
74 : ite(72, 60, 73) : BV:8
75 : ite(70, 69, 74) : BV:8
76 : ite(68, 69, 75) : BV:8
77 : ite(65, 66, 76) : BV:8
78 : ite(62, 63, 77) : BV:8
79 : ite(59, 60, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : bvadd(71, 51) : BV:32
83 : eq(82, 53) : BOOL
84 : eq(82, 56) : BOOL
85 : eq(82, 48) : BOOL
86 : eq(82, 61) : BOOL
87 : eq(82, 64) : BOOL
88 : eq(82, 67) : BOOL
89 : eq(82, 3) : BOOL
90 : eq(82, 71) : BOOL
91 : ite(90, 60, 73) : BV:8
92 : ite(89, 69, 91) : BV:8
93 : ite(88, 69, 92) : BV:8
94 : ite(87, 66, 93) : BV:8
95 : ite(86, 63, 94) : BV:8
96 : ite(85, 60, 95) : BV:8
97 : ite(84, 58, 96) : BV:8
98 : ite(83, 55, 97) : BV:8
99 : bvadd(61, 51) : BV:32
100 : eq(99, 53) : BOOL
101 : eq(99, 56) : BOOL
102 : eq(99, 48) : BOOL
103 : eq(99, 61) : BOOL
104 : eq(99, 64) : BOOL
105 : eq(99, 67) : BOOL
106 : eq(99, 3) : BOOL
107 : eq(99, 71) : BOOL
108 : ite(107, 60, 73) : BV:8
109 : ite(106, 69, 108) : BV:8
110 : ite(105, 69, 109) : BV:8
111 : ite(104, 66, 110) : BV:8
112 : ite(103, 63, 111) : BV:8
113 : ite(102, 60, 112) : BV:8
114 : ite(101, 58, 113) : BV:8
115 : ite(100, 55, 114) : BV:8
116 : eq(51, 53) : BOOL
117 : eq(51, 56) : BOOL
118 : eq(51, 48) : BOOL
119 : eq(51, 61) : BOOL
120 : eq(51, 64) : BOOL
121 : eq(51, 67) : BOOL
122 : eq(51, 3) : BOOL
123 : eq(51, 71) : BOOL
124 : ite(123, 60, 73) : BV:8
125 : ite(122, 69, 124) : BV:8
126 : ite(121, 69, 125) : BV:8
127 : ite(120, 66, 126) : BV:8
128 : ite(119, 63, 127) : BV:8
129 : ite(118, 60, 128) : BV:8
130 : ite(117, 58, 129) : BV:8
131 : ite(116, 55, 130) : BV:8
132 : bvconcat(81, 98, 115, 131) : BV:32
133 : bvadd(48, 50, 132) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 48) : BOOL
137 : eq(133, 61) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 67) : BOOL
140 : eq(133, 3) : BOOL
141 : eq(133, 71) : BOOL
142 : ite(141, 60, 73) : BV:8
143 : ite(140, 69, 142) : BV:8
144 : ite(139, 69, 143) : BV:8
145 : ite(138, 66, 144) : BV:8
146 : ite(137, 63, 145) : BV:8
147 : ite(136, 60, 146) : BV:8
148 : ite(135, 58, 147) : BV:8
149 : ite(134, 55, 148) : BV:8
150 : bvadd(71, 50, 132) : BV:32
151 : eq(150, 53) : BOOL
152 : eq(150, 56) : BOOL
153 : eq(150, 48) : BOOL
154 : eq(150, 61) : BOOL
155 : eq(150, 64) : BOOL
156 : eq(150, 67) : BOOL
157 : eq(150, 3) : BOOL
158 : eq(150, 71) : BOOL
159 : ite(158, 60, 73) : BV:8
160 : ite(157, 69, 159) : BV:8
161 : ite(156, 69, 160) : BV:8
162 : ite(155, 66, 161) : BV:8
163 : ite(154, 63, 162) : BV:8
164 : ite(153, 60, 163) : BV:8
165 : ite(152, 58, 164) : BV:8
166 : ite(151, 55, 165) : BV:8
167 : bvadd(61, 50, 132) : BV:32
168 : eq(167, 53) : BOOL
169 : eq(167, 56) : BOOL
170 : eq(167, 48) : BOOL
171 : eq(167, 61) : BOOL
172 : eq(167, 64) : BOOL
173 : eq(167, 67) : BOOL
174 : eq(167, 3) : BOOL
175 : eq(167, 71) : BOOL
176 : ite(175, 60, 73) : BV:8
177 : ite(174, 69, 176) : BV:8
178 : ite(173, 69, 177) : BV:8
179 : ite(172, 66, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 60, 180) : BV:8
182 : ite(169, 58, 181) : BV:8
183 : ite(168, 55, 182) : BV:8
184 : bvadd(50, 132) : BV:32
185 : eq(184, 53) : BOOL
186 : eq(184, 56) : BOOL
187 : eq(184, 48) : BOOL
188 : eq(184, 61) : BOOL
189 : eq(184, 64) : BOOL
190 : eq(184, 67) : BOOL
191 : eq(184, 3) : BOOL
192 : eq(184, 71) : BOOL
193 : ite(192, 60, 73) : BV:8
194 : ite(191, 69, 193) : BV:8
195 : ite(190, 69, 194) : BV:8
196 : ite(189, 66, 195) : BV:8
197 : ite(188, 63, 196) : BV:8
198 : ite(187, 60, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 55, 199) : BV:8
201 : bvconcat(149, 166, 183, 200) : BV:32
202 : ite(6, 3, 201) : BV:32
203 : ite(47, 201, 202) : BV:32
204 : ite(6, 3, 203) : BV:32
205 : lambda(1, 2, 204) : FUNCTION[BV:32,BV:32 -> BV:32]
206 : sym_const(205) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2148532416 ] -> true, [ 2148532417; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda19061 : BV:32
2 : Lambda19062 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2148532416 { 0x801000c0 -2146434880 -1.12502288e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2148532418 { 0x801000c2 -2146434878 -1.12502312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2148532417 { 0x801000c1 -2146434879 -1.12502300e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 623748913 { 0x252da731 +1.35666477e203 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 623748915 { 0x252da733 +1.35666501e203 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 623748914 { 0x252da732 +1.35666489e203 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda19057 : BV:32
2 : Lambda19058 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 67110155 { 0x400050b +1.15389e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 123 { 0x7b } : BV:8
15 : 67110154 { 0x400050a +1.15377e137 } : BV:32
16 : eq(11, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : eq(11, 7) : BOOL
19 : 159 { 0x9f -97 } : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(11, 20) : BOOL
22 : 255 { 0xff -1 } : BV:8
23 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
24 : eq(11, 23) : BOOL
25 : 176 { 0xb0 -80 } : BV:8
26 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
27 : eq(11, 26) : BOOL
28 : 253 { 0xfd -3 } : BV:8
29 : eq(11, 3) : BOOL
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 19, 32) : BV:8
34 : ite(29, 28, 33) : BV:8
35 : ite(27, 28, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : ite(21, 22, 36) : BV:8
38 : ite(18, 19, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(30, 10) : BV:32
42 : eq(41, 12) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 7) : BOOL
45 : eq(41, 20) : BOOL
46 : eq(41, 23) : BOOL
47 : eq(41, 26) : BOOL
48 : eq(41, 3) : BOOL
49 : eq(41, 30) : BOOL
50 : ite(49, 19, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : ite(45, 22, 53) : BV:8
55 : ite(44, 19, 54) : BV:8
56 : ite(43, 17, 55) : BV:8
57 : ite(42, 14, 56) : BV:8
58 : bvadd(20, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 7) : BOOL
62 : eq(58, 20) : BOOL
63 : eq(58, 23) : BOOL
64 : eq(58, 26) : BOOL
65 : eq(58, 3) : BOOL
66 : eq(58, 30) : BOOL
67 : ite(66, 19, 32) : BV:8
68 : ite(65, 28, 67) : BV:8
69 : ite(64, 28, 68) : BV:8
70 : ite(63, 25, 69) : BV:8
71 : ite(62, 22, 70) : BV:8
72 : ite(61, 19, 71) : BV:8
73 : ite(60, 17, 72) : BV:8
74 : ite(59, 14, 73) : BV:8
75 : eq(10, 12) : BOOL
76 : eq(10, 15) : BOOL
77 : eq(10, 7) : BOOL
78 : eq(10, 20) : BOOL
79 : eq(10, 23) : BOOL
80 : eq(10, 26) : BOOL
81 : eq(10, 3) : BOOL
82 : eq(10, 30) : BOOL
83 : ite(82, 19, 32) : BV:8
84 : ite(81, 28, 83) : BV:8
85 : ite(80, 28, 84) : BV:8
86 : ite(79, 25, 85) : BV:8
87 : ite(78, 22, 86) : BV:8
88 : ite(77, 19, 87) : BV:8
89 : ite(76, 17, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : bvconcat(40, 57, 74, 90) : BV:32
92 : bvadd(7, 9, 91) : BV:32
93 : eq(92, 12) : BOOL
94 : eq(92, 15) : BOOL
95 : eq(92, 7) : BOOL
96 : eq(92, 20) : BOOL
97 : eq(92, 23) : BOOL
98 : eq(92, 26) : BOOL
99 : eq(92, 3) : BOOL
100 : eq(92, 30) : BOOL
101 : ite(100, 19, 32) : BV:8
102 : ite(99, 28, 101) : BV:8
103 : ite(98, 28, 102) : BV:8
104 : ite(97, 25, 103) : BV:8
105 : ite(96, 22, 104) : BV:8
106 : ite(95, 19, 105) : BV:8
107 : ite(94, 17, 106) : BV:8
108 : ite(93, 14, 107) : BV:8
109 : bvadd(30, 9, 91) : BV:32
110 : eq(109, 12) : BOOL
111 : eq(109, 15) : BOOL
112 : eq(109, 7) : BOOL
113 : eq(109, 20) : BOOL
114 : eq(109, 23) : BOOL
115 : eq(109, 26) : BOOL
116 : eq(109, 3) : BOOL
117 : eq(109, 30) : BOOL
118 : ite(117, 19, 32) : BV:8
119 : ite(116, 28, 118) : BV:8
120 : ite(115, 28, 119) : BV:8
121 : ite(114, 25, 120) : BV:8
122 : ite(113, 22, 121) : BV:8
123 : ite(112, 19, 122) : BV:8
124 : ite(111, 17, 123) : BV:8
125 : ite(110, 14, 124) : BV:8
126 : bvadd(20, 9, 91) : BV:32
127 : eq(126, 12) : BOOL
128 : eq(126, 15) : BOOL
129 : eq(126, 7) : BOOL
130 : eq(126, 20) : BOOL
131 : eq(126, 23) : BOOL
132 : eq(126, 26) : BOOL
133 : eq(126, 3) : BOOL
134 : eq(126, 30) : BOOL
135 : ite(134, 19, 32) : BV:8
136 : ite(133, 28, 135) : BV:8
137 : ite(132, 28, 136) : BV:8
138 : ite(131, 25, 137) : BV:8
139 : ite(130, 22, 138) : BV:8
140 : ite(129, 19, 139) : BV:8
141 : ite(128, 17, 140) : BV:8
142 : ite(127, 14, 141) : BV:8
143 : bvadd(9, 91) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 7) : BOOL
147 : eq(143, 20) : BOOL
148 : eq(143, 23) : BOOL
149 : eq(143, 26) : BOOL
150 : eq(143, 3) : BOOL
151 : eq(143, 30) : BOOL
152 : ite(151, 19, 32) : BV:8
153 : ite(150, 28, 152) : BV:8
154 : ite(149, 28, 153) : BV:8
155 : ite(148, 25, 154) : BV:8
156 : ite(147, 22, 155) : BV:8
157 : ite(146, 19, 156) : BV:8
158 : ite(145, 17, 157) : BV:8
159 : ite(144, 14, 158) : BV:8
160 : bvconcat(108, 125, 142, 159) : BV:32
161 : ite(6, 3, 160) : BV:32
162 : lambda(1, 2, 161) : FUNCTION[BV:32,BV:32 -> BV:32]
163 : sym_const(162) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda19068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda19072 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 623748913 ] -> true, [ 623748914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda19076 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16777539 { 0x1000143 +1.3850e131 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2079980976 { 0x7bf9fdb0 +1.95305442e120 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 67110155 { 0x400050b +1.15389e137 } : BV:32
12 : eq(10, 11) : BOOL
13 : 123 { 0x7b } : BV:8
14 : 67110154 { 0x400050a +1.15377e137 } : BV:32
15 : eq(10, 14) : BOOL
16 : 249 { 0xf9 -7 } : BV:8
17 : eq(10, 6) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(10, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 67110152 { 0x4000508 +1.15354e137 } : BV:32
23 : eq(10, 22) : BOOL
24 : 176 { 0xb0 -80 } : BV:8
25 : 67110153 { 0x4000509 +1.15366e137 } : BV:32
26 : eq(10, 25) : BOOL
27 : 253 { 0xfd -3 } : BV:8
28 : eq(10, 2) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : eq(10, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 18, 31) : BV:8
33 : ite(28, 27, 32) : BV:8
34 : ite(26, 27, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(17, 18, 36) : BV:8
38 : ite(15, 16, 37) : BV:8
39 : ite(12, 13, 38) : BV:8
40 : bvadd(29, 8, 9) : BV:32
41 : eq(40, 11) : BOOL
42 : eq(40, 14) : BOOL
43 : eq(40, 6) : BOOL
44 : eq(40, 19) : BOOL
45 : eq(40, 22) : BOOL
46 : eq(40, 25) : BOOL
47 : eq(40, 2) : BOOL
48 : eq(40, 29) : BOOL
49 : ite(48, 18, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : ite(41, 13, 55) : BV:8
57 : bvadd(19, 8, 9) : BV:32
58 : eq(57, 11) : BOOL
59 : eq(57, 14) : BOOL
60 : eq(57, 6) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 22) : BOOL
63 : eq(57, 25) : BOOL
64 : eq(57, 2) : BOOL
65 : eq(57, 29) : BOOL
66 : ite(65, 18, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 24, 68) : BV:8
70 : ite(61, 21, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : ite(58, 13, 72) : BV:8
74 : bvadd(8, 9) : BV:32
75 : eq(74, 11) : BOOL
76 : eq(74, 14) : BOOL
77 : eq(74, 6) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 22) : BOOL
80 : eq(74, 25) : BOOL
81 : eq(74, 2) : BOOL
82 : eq(74, 29) : BOOL
83 : ite(82, 18, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 21, 86) : BV:8
88 : ite(77, 18, 87) : BV:8
89 : ite(76, 16, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(5, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
577840138
=counter_example_end
=global nodece 73 num_edges_traversed 3
=global nodece 73 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 74
=global nodece 74 nodece z3v487.ce7250.num_edges_traversed0
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3v487.ce7250 dbbbe1e3be7b748bc8415b43f7788c3
=input.spec-%var-x-1
1 : Lambda20143 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda20146 : BV:32
18 : Lambda20144 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda20145 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
=input.dst.llvm-%m
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 283656063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 283656064; 283656067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 283656068; 343063523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 343063524; 343063527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 343063528; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 343063524 { 0x1472bbe4 +1.89635896e169 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 283656064 { 0x10e83f80 +1.81443786e162 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda20148 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda20151 : BV:32
18 : Lambda20149 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda20150 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 283656064 { 0x10e83f80 +1.81443786e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 283656067 { 0x10e83f83 +1.81443822e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 343063524 { 0x1472bbe4 +1.89635896e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 343063527 { 0x1472bbe7 +1.89635932e169 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4114990379 ] -> true, [ 4114990380; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda20103 : BV:32
2 : Lambda20104 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4114990379 ] -> true, [ 4114990380; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda20112 : BV:32
2 : Lambda20113 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda20116 : BV:32
2 : Lambda20117 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3780339689
=counter_example_end
=global nodece 74 num_edges_traversed 0
=global nodece 74 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 75
=global nodece 75 nodece z3.ce7251.num_edges_traversed0
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(epsilon)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3.ce7251 201d839899e35cac599b7b24773167b
=input.spec-%var-x-1
1 : Lambda20163 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3066867761 { 0xb6ccb031 -1228099535 -1.59912693e238 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda20166 : BV:32
18 : Lambda20164 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda20165 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 145 { 0x91 -111 } : BV:8
28 : eq(25, 21) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 253 { 0xfd -3 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 145, [ 1; 1 ] -> 247, [ 2; 2 ] -> 253, [ 3; 3 ] -> 255, [ 4; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1153173059 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1153173060; 1153173063 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1153173064; 2216168527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2216168528; 2216168531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2216168532; 3290990103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3290990104; 3290990107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3290990108; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1153173060 { 0x44bc0644 +1.46894121e10 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3290990104 { 0xc4288618 -1003977192 -1.31659221e9 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2216168528 { 0x84180c50 -2078798768 -1.18787574e137 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda20170 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3066867761 { 0xb6ccb031 -1228099535 -1.59912693e238 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda20173 : BV:32
18 : Lambda20171 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda20172 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 145 { 0x91 -111 } : BV:8
28 : eq(25, 21) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 253 { 0xfd -3 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3290990104 { 0xc4288618 -1003977192 -1.31659221e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3290990107 { 0xc428861b -1003977189 -1.31659257e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2216168528 { 0x84180c50 -2078798768 -1.18787574e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2216168531 { 0x84180c53 -2078798765 -1.18787610e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1153173060 { 0x44bc0644 +1.46894121e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1153173063 { 0x44bc0647 +1.46894156e10 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3066867761 ] -> true, [ 3066867762; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda20124 : BV:32
2 : Lambda20125 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 145 { 0x91 -111 } : BV:8
11 : eq(7, 3) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 247 { 0xf7 -9 } : BV:8
16 : 253 { 0xfd -3 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3066867761 ] -> true, [ 3066867762; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda20126 : BV:32
2 : Lambda20127 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 145 { 0x91 -111 } : BV:8
11 : eq(7, 3) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 247 { 0xf7 -9 } : BV:8
16 : 253 { 0xfd -3 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3613541153
=counter_example_end
=global nodece 75 num_edges_traversed 0
=global nodece 75 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 76
=global nodece 76 nodece z3.ce7607.num_edges_traversed2
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3.ce7607 6fa4229ac07d5c534df537e1b643db1
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1072488283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1072488284; 1072488287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1072488288; 1496640175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1496640176; 1496640179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1496640180; 4258622623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4258622624; 4258622627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4258622628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20416 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20417 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1072488287 { 0x3fecdf5f +1.85056674e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4258622627 { 0xfdd56ca3 -36344669 -1.66737782e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1496640179 { 0x5934eab3 +1.41341245e51 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 76 num_edges_traversed 2
=global nodece 76 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 77
=global nodece 77 nodece z3.ce7589.num_edges_traversed2
=global nodece 77 nodece_path
=global nodece 77 nodece_path.graph_edge_composition
(epsilon)
=global nodece 77 nodece_cached_counterexample
=counter_example_begin z3.ce7589 2cfa235997adf753c631c82046ad9656
=retaddr_const
1 : 2068079502 { 0x7b44638e +1.53428816e119 } : BV:32
=input.spec-%var-x-1
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 707125783 ] -> 0, [ 707125784; 707125784 ] -> 128, [ 707125785; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 626279043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 626279044; 626279047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 626279048; 707125783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 707125784; 707125787 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 707125788; 1244027327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1244027328; 1244027331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1244027332; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20404 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20405 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
12 : eq(10, 11) : BOOL
13 : 128 { 0x80 -128 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 951221365 { 0x38b27c75 +1.39442312e242 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 2068079502 { 0x7b44638e +1.53428816e119 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 626279047 { 0x25544287 +1.65828025e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1244027331 { 0x4a2659c3 +1.29961431e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 707125787 { 0x2a25e21b +1.29596269e213 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda122 : BV:32
2 : Lambda123 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda127 : BV:32
2 : Lambda128 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3432939377
=counter_example_end
=global nodece 77 num_edges_traversed 2
=global nodece 77 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 78
=global nodece 78 nodece z3v487.ce7571.num_edges_traversed2
=global nodece 78 nodece_path
=global nodece 78 nodece_path.graph_edge_composition
(epsilon)
=global nodece 78 nodece_cached_counterexample
=counter_example_begin z3v487.ce7571 656d3f870677847a79f615ae7a9b4b2
=retaddr_const
1 : 1023645260 { 0x3d03964c +1.2802419e251 } : BV:32
=input.spec-%var-x-1
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 527 ] -> 0, [ 528; 528 ] -> 2, [ 529; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 528; 531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 532; 895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 896; 899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 900; 66051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 66052; 66055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 66056; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20392 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20393 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 528 { 0x210 +1.6294e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 908398201 { 0x36250e79 +1.28950417e237 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1023645260 { 0x3d03964c +1.2802419e251 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 899 { 0x383 +1.10716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 66055 { 0x10207 +1.787436e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 531 { 0x213 +1.6330e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda133 : BV:32
2 : Lambda134 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda138 : BV:32
2 : Lambda139 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3774610773
=counter_example_end
=global nodece 78 num_edges_traversed 2
=global nodece 78 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 79
=global nodece 79 nodece z3v487.ce7553.num_edges_traversed2
=global nodece 79 nodece_path
=global nodece 79 nodece_path.graph_edge_composition
(epsilon)
=global nodece 79 nodece_cached_counterexample
=counter_example_begin z3v487.ce7553 4188b99728add73c98eb57a5982f2c86
=retaddr_const
1 : 487481914 { 0x1d0e623a +1.11237263e187 } : BV:32
=input.spec-%var-x-1
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3712 { 0xe80 +1.44250e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3711 ] -> 0, [ 3712; 3712 ] -> 1, [ 3713; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3712; 3715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3716; 200195 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 200196; 200199 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 200200; 1179663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179664; 1179667 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1179668; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3712 { 0xe80 +1.44250e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 200196 { 0x30e04 +1.2386522e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3712 { 0xe80 +1.44250e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20380 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20381 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 3712 { 0xe80 +1.44250e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1977543493 { 0x75deeb45 +1.74155485e108 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 487481914 { 0x1d0e623a +1.11237263e187 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 200196 { 0x30e04 +1.2386522e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 200199 { 0x30e07 +1.2386558e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1179667 { 0x120013 +1.14062726e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3712 { 0xe80 +1.44250e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3715 { 0xe83 +1.44286e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda202 : BV:32
2 : Lambda203 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3712 { 0xe80 +1.44250e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda207 : BV:32
2 : Lambda208 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3712 { 0xe80 +1.44250e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3078948147
=counter_example_end
=global nodece 79 num_edges_traversed 2
=global nodece 79 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 80
=global nodece 80 nodece z3v487.ce7535.num_edges_traversed2
=global nodece 80 nodece_path
=global nodece 80 nodece_path.graph_edge_composition
(epsilon)
=global nodece 80 nodece_cached_counterexample
=counter_example_begin z3v487.ce7535 a461cdd16d11ef3381fd4155b68dede5
=retaddr_const
1 : 762750777 { 0x2d76a739 +1.92697823e219 } : BV:32
=input.spec-%var-x-1
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 33554464 { 0x2000020 +1.381e133 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 269557767 ] -> 0, [ 269557768; 269557768 ] -> 32, [ 269557769; 269557770 ] -> 0, [ 269557771; 269557771 ] -> 2, [ 269557772; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3346099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3346100; 3346103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3346104; 269557767 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269557768; 269557771 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 269557772; 1343766599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1343766600; 1343766603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1343766604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20368 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20369 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
15 : eq(10, 14) : BOOL
16 : 32 { 0x20 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 1) : BV:32
28 : eq(27, 11) : BOOL
29 : eq(27, 14) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : bvadd(9, 1) : BV:32
33 : eq(32, 11) : BOOL
34 : eq(32, 14) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 13, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 636444144 { 0x25ef5df0 +1.87005424e204 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 762750777 { 0x2d76a739 +1.92697823e219 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3346103 { 0x330eb7 +1.39888656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1343766603 { 0x5018404b +1.18946206e33 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda282 : BV:32
2 : Lambda283 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda287 : BV:32
2 : Lambda288 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1435306660
=counter_example_end
=global nodece 80 num_edges_traversed 2
=global nodece 80 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 81
=global nodece 81 nodece z3v487.ce7517.num_edges_traversed2
=global nodece 81 nodece_path
=global nodece 81 nodece_path.graph_edge_composition
(epsilon)
=global nodece 81 nodece_cached_counterexample
=counter_example_begin z3v487.ce7517 b991288e3852bd277955c4f43428a13
=retaddr_const
1 : 472621042 { 0x1c2b9ff2 +1.34081864e185 } : BV:32
=input.spec-%var-x-1
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda396 : BV:32
11 : Lambda394 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda395 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 16732019 ] -> 0, [ 16732020; 16732020 ] -> 16, [ 16732021; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16732019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16732020; 16732023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16732024; 16945127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16945128; 16945131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16945132; 2147632071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147632072; 2147632075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147632076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda396 : BV:32
11 : Lambda394 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda395 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20356 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20357 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
12 : eq(10, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 881167082 { 0x34858aea +1.4330182e234 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 472621042 { 0x1c2b9ff2 +1.34081864e185 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 16945131 { 0x1028feb +1.2001702e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16732023 { 0xff4f77 +1.99461257e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147632075 { 0x800243cb -2147335221 -1.1769387e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda362 : BV:32
2 : Lambda363 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda367 : BV:32
2 : Lambda368 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3425639859
=counter_example_end
=global nodece 81 num_edges_traversed 2
=global nodece 81 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 82
=global nodece 82 nodece z3.ce7499.num_edges_traversed2
=global nodece 82 nodece_path
=global nodece 82 nodece_path.graph_edge_composition
(epsilon)
=global nodece 82 nodece_cached_counterexample
=counter_example_begin z3.ce7499 f725c6ca93d6274369ae7b83729ed3
=retaddr_const
1 : 615311507 { 0x24ace893 +1.35084760e202 } : BV:32
=input.spec-%var-x-1
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1777298643 ] -> 4, [ 1777298644; 1777298647 ] -> 0, [ 1777298648; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1524960039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1524960040; 1524960043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1524960044; 1777298643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1777298644; 1777298647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1777298648; 3349973779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3349973780; 3349973783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3349973784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20344 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20345 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
18 : eq(11, 17) : BOOL
19 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
20 : eq(11, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : ite(20, 14, 21) : BV:8
23 : ite(18, 14, 22) : BV:8
24 : ite(16, 14, 23) : BV:8
25 : ite(13, 14, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : eq(27, 17) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 14, 21) : BV:8
33 : ite(30, 14, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 14, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 9, 10) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : eq(37, 17) : BOOL
41 : eq(37, 19) : BOOL
42 : ite(41, 14, 21) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 14, 44) : BV:8
46 : bvadd(9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 19) : BOOL
51 : ite(50, 14, 21) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 14, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : lambda(6, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(5, 56) : MAP[BV:32 -> BV:32]
58 : sum(1, 2, 57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
59 : sym_const(58) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 471722674 { 0x1c1deab2 +1.23372483e185 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 615311507 { 0x24ace893 +1.35084760e202 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3349973783 { 0xc7ac8b17 -944993513 -1.34799468e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1524960043 { 0x5ae50b2b +1.78940331e54 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda612 : BV:32
2 : Lambda613 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda617 : BV:32
2 : Lambda618 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3552478230
=counter_example_end
=global nodece 82 num_edges_traversed 2
=global nodece 82 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 83
=global nodece 83 nodece z3v487.ce7481.num_edges_traversed2
=global nodece 83 nodece_path
=global nodece 83 nodece_path.graph_edge_composition
(epsilon)
=global nodece 83 nodece_cached_counterexample
=counter_example_begin z3v487.ce7481 838034e9714fb016a47653ce89336344
=retaddr_const
1 : 1604764643 { 0x5fa6c3e3 +1.30285298e64 } : BV:32
=input.spec-%var-x-1
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 7 ] -> 255, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 144547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 144548; 144551 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 144552; 8297615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8297616; 8297619 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8297620; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20332 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20333 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 7 { 0x7 +1.83e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(10, 14) : BOOL
16 : 5 { 0x5 +1.59e129 } : BV:32
17 : eq(10, 16) : BOOL
18 : eq(10, 8) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 13, 19) : BV:8
21 : ite(17, 13, 20) : BV:8
22 : ite(15, 13, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 9, 1) : BV:32
26 : eq(25, 11) : BOOL
27 : eq(25, 14) : BOOL
28 : eq(25, 16) : BOOL
29 : eq(25, 8) : BOOL
30 : ite(29, 13, 19) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : ite(27, 13, 31) : BV:8
33 : ite(26, 13, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 9, 1) : BV:32
36 : eq(35, 11) : BOOL
37 : eq(35, 14) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 8) : BOOL
40 : ite(39, 13, 19) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 13, 41) : BV:8
43 : ite(36, 13, 42) : BV:8
44 : bvadd(9, 1) : BV:32
45 : eq(44, 11) : BOOL
46 : eq(44, 14) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 8) : BOOL
49 : ite(48, 13, 19) : BV:8
50 : ite(47, 13, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(6, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(5, 54) : MAP[BV:32 -> BV:32]
56 : sum(1, 2, 55) : SUM[UNIT,MAP[BV:32 -> BV:32]]
57 : sym_const(56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1886554817 { 0x70728ac1 +1.89485943e97 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1604764643 { 0x5fa6c3e3 +1.30285298e64 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 8297619 { 0x7e9c93 +1.98915326e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 144551 { 0x234a7 +1.1723182e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda875 : BV:32
2 : Lambda876 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda880 : BV:32
2 : Lambda881 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2211894552
=counter_example_end
=global nodece 83 num_edges_traversed 2
=global nodece 83 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 84
=global nodece 84 nodece z3v487.ce7391.num_edges_traversed2
=global nodece 84 nodece_path
=global nodece 84 nodece_path.graph_edge_composition
(epsilon)
=global nodece 84 nodece_cached_counterexample
=counter_example_begin z3v487.ce7391 e1132c2811f341a3cd429659f1306556
=retaddr_const
1 : 1489602212 { 0x58c986a4 +1.57442140e50 } : BV:32
=input.spec-%var-x-1
1 : Lambda13984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13987 : BV:32
18 : Lambda13985 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13986 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 67108863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67108864; 67108867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 67108868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13997 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14000 : BV:32
18 : Lambda13998 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13999 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20272 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20273 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1814544015 { 0x6c27be8f +1.31050288e89 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1218224662 { 0x489ca216 +1.22369647e18 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 201701758 { 0xc05b97e +1.4472327e153 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1489602212 { 0x58c986a4 +1.57442140e50 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 67108867 { 0x4000003 +1.35e137 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
280779204
=counter_example_end
=global nodece 84 num_edges_traversed 2
=global nodece 84 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 85
=global nodece 85 nodece z3.ce7337.num_edges_traversed2
=global nodece 85 nodece_path
=global nodece 85 nodece_path.graph_edge_composition
(epsilon)
=global nodece 85 nodece_cached_counterexample
=counter_example_begin z3.ce7337 78bc4a97e353c2aded723658b17bd
=retaddr_const
1 : 1206863680 { 0x47ef4740 +1.86936187e16 } : BV:32
=input.spec-%var-x-1
1 : Lambda15646 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15649 : BV:32
17 : Lambda15647 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15648 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 41943043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 41943044; 41943047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 41943048; 2878023327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2878023328; 2878023331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2878023332; 2952823471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2952823472; 2952823475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2952823476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15659 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15662 : BV:32
17 : Lambda15660 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15661 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda20236 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda20237 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 735184678 { 0x2bd20726 +1.64084315e216 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1553404948 { 0x5c971414 +1.18030023e58 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 616367717 { 0x24bd0665 +1.47675764e202 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1206863680 { 0x47ef4740 +1.86936187e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2878023331 { 0xab8b26a3 -1416943965 -1.8711659e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 41943047 { 0x2800007 +1.83e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2952823475 { 0xb00082b3 -1342143821 -1.398862e225 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2399984045
=counter_example_end
=global nodece 85 num_edges_traversed 2
=global nodece 85 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 41
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 44
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 45
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 46
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 77
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce6866
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 2 for input.spec-%var-i-1.L3%7%bbentry
155823378
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 4 for input.dst.llvm-%x
1524190140
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 5 for input.dst.llvm-%n
576902676
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 6 for input.dst.llvm-%m
5
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
155823378
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 40 for input.spec-%var-i-0.L3%19%bbentry
155823378
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
155823379
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6866 expr point z3.ce6866 done
=inductive-invariants point_set point z3v487.ce69
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 4 for input.dst.llvm-%x
33554464
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce69 expr point z3v487.ce69 done
=inductive-invariants point_set point z3v487.ce47
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 done
=inductive-invariants point_set point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 done
=inductive-invariants point_set point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 done
=inductive-invariants point_set point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 6 for input.dst.llvm-%m
128
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 done
=inductive-invariants point_set point z3v487.ce6825
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 2 for input.spec-%var-i-1.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 4 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 6 for input.dst.llvm-%m
33554432
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 40 for input.spec-%var-i-0.L3%19%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6825 expr point z3v487.ce6825 done
=inductive-invariants point_set point z3.ce48
=inductive-invariants point_set point z3.ce48 expr point z3.ce48
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 done
=inductive-invariants point_set point z3v487.ce245
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 4 for input.dst.llvm-%x
1082405120
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 5 for input.dst.llvm-%n
271581184
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 6 for input.dst.llvm-%m
133447875
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 done
=inductive-invariants point_set point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 4 for input.dst.llvm-%x
2176913664
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 done
=inductive-invariants point_set point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 4 for input.dst.llvm-%x
3413356288
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 6 for input.dst.llvm-%m
1235583807
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 done
=inductive-invariants point_set point z3.ce7152
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 2 for input.spec-%var-i-1.L3%7%bbentry
16777539
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 5 for input.dst.llvm-%n
2148532417
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 6 for input.dst.llvm-%m
623748914
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
16777539
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 40 for input.spec-%var-i-0.L3%19%bbentry
16777539
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
16777540
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7152 expr point z3.ce7152 done
=inductive-invariants point_set point z3v487.ce300
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 4 for input.dst.llvm-%x
2176913664
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 5 for input.dst.llvm-%n
134742036
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 6 for input.dst.llvm-%m
1207959580
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 done
=inductive-invariants point_set point z3.ce70
=inductive-invariants point_set point z3.ce70 expr point z3.ce70
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 4 for input.dst.llvm-%x
2147483776
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce70 expr point z3.ce70 done
=inductive-invariants point_set point z3v487.ce91
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce91 expr point z3v487.ce91 done
=inductive-invariants point_set point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 done
=inductive-invariants point_set point z3.ce92
=inductive-invariants point_set point z3.ce92 expr point z3.ce92
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce92 expr point z3.ce92 done
=inductive-invariants point_set point z3.ce114
=inductive-invariants point_set point z3.ce114 expr point z3.ce114
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 done
=inductive-invariants point_set point z3.ce6824
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 2 for input.spec-%var-i-1.L3%7%bbentry
155823377
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 4 for input.dst.llvm-%x
1524190140
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 5 for input.dst.llvm-%n
576902676
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 6 for input.dst.llvm-%m
5
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
155823377
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 40 for input.spec-%var-i-0.L3%19%bbentry
155823377
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
155823378
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6824 expr point z3.ce6824 done
=inductive-invariants point_set point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 done
=inductive-invariants point_set point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 done
=inductive-invariants point_set point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 4 for input.dst.llvm-%x
67372036
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 6 for input.dst.llvm-%m
67372036
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 done
=inductive-invariants point_set point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 done
=inductive-invariants point_set point z3.ce202
=inductive-invariants point_set point z3.ce202 expr point z3.ce202
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 done
=inductive-invariants point_set point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 done
=inductive-invariants point_set point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 done
=inductive-invariants point_set point z3v487.ce201
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 6 for input.dst.llvm-%m
2155905040
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 done
=inductive-invariants point_set point z3v487.ce7123
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 2 for input.spec-%var-i-1.L3%7%bbentry
536870912
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 5 for input.dst.llvm-%n
929985024
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 6 for input.dst.llvm-%m
23908784
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7123 expr point z3v487.ce7123 done
=inductive-invariants point_set point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 done
=inductive-invariants point_set point z3.ce6926
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 2 for input.spec-%var-i-1.L3%7%bbentry
268435455
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 4 for input.dst.llvm-%x
1082654724
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 5 for input.dst.llvm-%n
669688065
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 6 for input.dst.llvm-%m
1206910976
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 39 for input.spec-%var-j-0.L3%19%bbentry
669688065
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 40 for input.spec-%var-i-0.L3%19%bbentry
268435455
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
268435456
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
669688065
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6926 expr point z3.ce6926 done
=inductive-invariants point_set point z3v487.ce257
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 4 for input.dst.llvm-%x
2176913664
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 done
=inductive-invariants point_set point z3.ce278
=inductive-invariants point_set point z3.ce278 expr point z3.ce278
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 4 for input.dst.llvm-%x
3413356288
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 6 for input.dst.llvm-%m
1235583807
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 done
=inductive-invariants point_set point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 done
=inductive-invariants point_set point z3v487.ce4133
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 5 for input.dst.llvm-%n
262144
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4133 expr point z3v487.ce4133 done
=inductive-invariants point_set point z3.ce312
=inductive-invariants point_set point z3.ce312 expr point z3.ce312
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 done
=inductive-invariants point_set point z3.ce7122
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 2 for input.spec-%var-i-1.L3%7%bbentry
16777539
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 5 for input.dst.llvm-%n
2148532417
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 6 for input.dst.llvm-%m
623748914
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
16777539
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7122 expr point z3.ce7122 done
=inductive-invariants point_set point z3.ce7214
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 2 for input.spec-%var-i-1.L3%7%bbentry
16777539
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 5 for input.dst.llvm-%n
2148532417
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 6 for input.dst.llvm-%m
623748914
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
16777539
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 40 for input.spec-%var-i-0.L3%19%bbentry
16777539
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 41 for input.spec-%var-ret-0.L3%19%bbentry
2678063100
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
16777540
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2678063100
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7214 expr point z3.ce7214 done
=inductive-invariants point_set point z3v487.ce4212
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 5 for input.dst.llvm-%n
2836467724
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 6 for input.dst.llvm-%m
32842
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4212 expr point z3v487.ce4212 done
=inductive-invariants point_set point z3v487.ce1244
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 6 for input.dst.llvm-%m
65536
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1244 expr point z3v487.ce1244 done
=inductive-invariants point_set point z3.ce1245
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1245 expr point z3.ce1245 done
=inductive-invariants point_set point z3.ce4012
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4012 expr point z3.ce4012 done
=inductive-invariants point_set point z3v487.ce4013
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4013 expr point z3v487.ce4013 done
=inductive-invariants point_set point z3.ce4052
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4052 expr point z3.ce4052 done
=inductive-invariants point_set point z3v487.ce4053
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4053 expr point z3v487.ce4053 done
=inductive-invariants point_set point z3.ce4093
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4093 expr point z3.ce4093 done
=inductive-invariants point_set point z3v487.ce4092
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 6 for input.dst.llvm-%m
32768
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 done
=inductive-invariants point_set point z3.ce4132
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4132 expr point z3.ce4132 done
=inductive-invariants point_set point z3.ce4172
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4172 expr point z3.ce4172 done
=inductive-invariants point_set point z3v487.ce4173
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4173 expr point z3v487.ce4173 done
=inductive-invariants point_set point z3v487.ce4233
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 4 for input.dst.llvm-%x
33554432
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4233 expr point z3v487.ce4233 done
=inductive-invariants point_set point z3.ce4232
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 4 for input.dst.llvm-%x
1024
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 6 for input.dst.llvm-%m
410323005
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4232 expr point z3.ce4232 done
=inductive-invariants point_set point z3v487.ce4293
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 4 for input.dst.llvm-%x
33554432
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4293 expr point z3v487.ce4293 done
=inductive-invariants point_set point z3v487.ce4272
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 6 for input.dst.llvm-%m
140510284
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 done
=inductive-invariants point_set point z3.ce4292
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 4 for input.dst.llvm-%x
1024
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 6 for input.dst.llvm-%m
410323005
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4292 expr point z3.ce4292 done
=inductive-invariants point_set point z3v487.ce4332
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 6 for input.dst.llvm-%m
1073744036
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 done
=inductive-invariants point_set point z3v487.ce4352
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 5 for input.dst.llvm-%n
406880264
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 6 for input.dst.llvm-%m
587206658
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4352 expr point z3v487.ce4352 done
=inductive-invariants point_set point z3v487.ce4372
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 4 for input.dst.llvm-%x
256
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 6 for input.dst.llvm-%m
452984833
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4372 expr point z3v487.ce4372 done
=inductive-invariants point_set point z3v487.ce4392
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 4 for input.dst.llvm-%x
256
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 6 for input.dst.llvm-%m
452984833
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4392 expr point z3v487.ce4392 done
=inductive-invariants point_set point z3.ce5344
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5344 expr point z3.ce5344 done
=inductive-invariants point_set point z3v487.ce5310
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5310 expr point z3v487.ce5310 done
=inductive-invariants point_set point z3.ce5364
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5364 expr point z3.ce5364 done
=inductive-invariants point_set point z3.ce5384
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5384 expr point z3.ce5384 done
=inductive-invariants point_set point z3v487.ce5374
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5374 expr point z3v487.ce5374 done
=inductive-invariants point_set point z3.ce5419
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 40 for input.spec-%var-i-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5419 expr point z3.ce5419 done
=inductive-invariants point_set point z3v487.ce5559
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5559 expr point z3v487.ce5559 done
=inductive-invariants point_set point z3v487.ce5647
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 5 for input.dst.llvm-%n
2147483650
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5647 expr point z3v487.ce5647 done
=inductive-invariants point_set point z3.ce5679
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 5 for input.dst.llvm-%n
66
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 40 for input.spec-%var-i-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5679 expr point z3.ce5679 done
=inductive-invariants point_set point z3.ce5880
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 2 for input.spec-%var-i-1.L3%7%bbentry
1788035617
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 5 for input.dst.llvm-%n
3007537185
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1788035617
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 40 for input.spec-%var-i-0.L3%19%bbentry
1788035617
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1788035618
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5880 expr point z3.ce5880 done
=inductive-invariants point_set point z3v487.ce6577
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 4 for input.dst.llvm-%x
335544312
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 6 for input.dst.llvm-%m
11
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 39 for input.spec-%var-j-0.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967288
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
3
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967288
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6577 expr point z3v487.ce6577 done
=inductive-invariants point_set point z3.ce6576
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 4 for input.dst.llvm-%x
1207975924
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 6 for input.dst.llvm-%m
16777220
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967232
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967232
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6576 expr point z3.ce6576 done
=inductive-invariants point_set point z3v487.ce6457
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 6 for input.dst.llvm-%m
65536
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6457 expr point z3v487.ce6457 done
=inductive-invariants point_set point z3v487.ce6086
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 40 for input.spec-%var-i-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6086 expr point z3v487.ce6086 done
=inductive-invariants point_set point z3v487.ce5928
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 5 for input.dst.llvm-%n
3164492488
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5928 expr point z3v487.ce5928 done
=inductive-invariants point_set point z3v487.ce6385
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 6 for input.dst.llvm-%m
2155905040
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 41 for input.spec-%var-ret-0.L3%19%bbentry
2139062144
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2139062144
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6385 expr point z3v487.ce6385 done
=inductive-invariants point_set point z3v487.ce6701
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 4 for input.dst.llvm-%x
134742008
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6701 expr point z3v487.ce6701 done
=inductive-invariants point_set point z3v487.ce6927
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 2 for input.spec-%var-i-1.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 4 for input.dst.llvm-%x
536870912
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 6 for input.dst.llvm-%m
617533262
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 39 for input.spec-%var-j-0.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 40 for input.spec-%var-i-0.L3%19%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6927 expr point z3v487.ce6927 done
=inductive-invariants point_set point z3.ce6519
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6519 expr point z3.ce6519 done
=inductive-invariants point_set point z3.ce6700
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 4 for input.dst.llvm-%x
4294967288
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 6 for input.dst.llvm-%m
512
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967292
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967292
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6700 expr point z3.ce6700 done
=inductive-invariants point_set point z3v487.ce7021
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 2 for input.spec-%var-i-1.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 4 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 5 for input.dst.llvm-%n
671088640
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 6 for input.dst.llvm-%m
2415919106
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 39 for input.spec-%var-j-0.L3%19%bbentry
671088641
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 40 for input.spec-%var-i-0.L3%19%bbentry
536870911
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
671088641
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7021 expr point z3v487.ce7021 done
=inductive-invariants point_set point z3.ce7062
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 2 for input.spec-%var-i-1.L3%7%bbentry
8
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 4 for input.dst.llvm-%x
30541796
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 5 for input.dst.llvm-%n
4097
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 6 for input.dst.llvm-%m
4098
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 40 for input.spec-%var-i-0.L3%19%bbentry
8
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
9
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7062 expr point z3.ce7062 done
=inductive-invariants point_set point z3.ce7020
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 2 for input.spec-%var-i-1.L3%7%bbentry
7
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 4 for input.dst.llvm-%x
30541796
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 5 for input.dst.llvm-%n
4097
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 6 for input.dst.llvm-%m
4098
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
7
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 39 for input.spec-%var-j-0.L3%19%bbentry
4098
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 40 for input.spec-%var-i-0.L3%19%bbentry
7
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
8
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4098
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7020 expr point z3.ce7020 done
=inductive-invariants point_set point z3.ce5300
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5300 expr point z3.ce5300 done
=inductive-invariants point_set point z3.ce5584
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5584 expr point z3.ce5584 done
=inductive-invariants point_set point z3.ce5646
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 5 for input.dst.llvm-%n
66
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5646 expr point z3.ce5646 done
=inductive-invariants point_set point z3v487.ce5583
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5583 expr point z3v487.ce5583 done
=inductive-invariants point_set point z3v487.ce5613
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 40 for input.spec-%var-i-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5613 expr point z3v487.ce5613 done
=inductive-invariants point_set point z3.ce5847
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 2 for input.spec-%var-i-1.L3%7%bbentry
1788035616
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 5 for input.dst.llvm-%n
3007537185
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1788035616
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 40 for input.spec-%var-i-0.L3%19%bbentry
1788035616
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1788035617
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5847 expr point z3.ce5847 done
=inductive-invariants point_set point z3v487.ce5803
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 2 for input.spec-%var-i-1.L3%7%bbentry
5
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5803 expr point z3v487.ce5803 done
=inductive-invariants point_set point z3.ce5804
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 2 for input.spec-%var-i-1.L3%7%bbentry
5
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 5 for input.dst.llvm-%n
8388609
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5804 expr point z3.ce5804 done
=inductive-invariants point_set point z3v487.ce5740
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 5 for input.dst.llvm-%n
16
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5740 expr point z3v487.ce5740 done
=inductive-invariants point_set point z3.ce5741
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 5 for input.dst.llvm-%n
16777216
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5741 expr point z3.ce5741 done
=inductive-invariants point_set point z3v487.ce5770
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 5 for input.dst.llvm-%n
16
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 40 for input.spec-%var-i-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5770 expr point z3v487.ce5770 done
=inductive-invariants point_set point z3v487.ce5961
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 5 for input.dst.llvm-%n
3164492488
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5961 expr point z3v487.ce5961 done
=inductive-invariants point_set point z3.ce5929
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 5 for input.dst.llvm-%n
4285462760
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483647
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5929 expr point z3.ce5929 done
=inductive-invariants point_set point z3v487.ce5848
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 2 for input.spec-%var-i-1.L3%7%bbentry
1671799361
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 5 for input.dst.llvm-%n
3402843268
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1671799361
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 40 for input.spec-%var-i-0.L3%19%bbentry
1671799361
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1671799362
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5848 expr point z3v487.ce5848 done
=inductive-invariants point_set point z3.ce6023
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 5 for input.dst.llvm-%n
3871593448
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6023 expr point z3.ce6023 done
=inductive-invariants point_set point z3.ce6085
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 40 for input.spec-%var-i-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6085 expr point z3.ce6085 done
=inductive-invariants point_set point z3v487.ce6022
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 2 for input.spec-%var-i-1.L3%7%bbentry
3087007743
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 5 for input.dst.llvm-%n
3194682687
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3087007743
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6022 expr point z3v487.ce6022 done
=inductive-invariants point_set point z3v487.ce6052
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 2 for input.spec-%var-i-1.L3%7%bbentry
3087007743
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 5 for input.dst.llvm-%n
3194682687
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3087007743
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 40 for input.spec-%var-i-0.L3%19%bbentry
3087007743
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3087007744
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6052 expr point z3v487.ce6052 done
=inductive-invariants point_set point z3.ce6148
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6148 expr point z3.ce6148 done
=inductive-invariants point_set point z3v487.ce6149
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6149 expr point z3v487.ce6149 done
=inductive-invariants point_set point z3.ce6230
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 2 for input.spec-%var-i-1.L3%7%bbentry
25690163
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 4 for input.dst.llvm-%x
14679856
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 5 for input.dst.llvm-%n
2168717332
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 6 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
25690163
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 40 for input.spec-%var-i-0.L3%19%bbentry
25690163
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
25690164
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 46 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 47 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 50 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 51 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 54 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 55 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 58 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 59 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 62 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 63 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 64 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 65 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 66 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 67 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 68 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 val 69 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6230 expr point z3.ce6230 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L3%19%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce69
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce47
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce113
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce26
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce25
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce91
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce92
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce114
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce157
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce7122
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce5310
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=13; number of preds=3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 8->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce5310
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce5583
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce5803
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce5740
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce6022
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3.ce6148
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce179
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce92
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce201
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce25
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce223
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce201
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce5310
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce5583
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce5803
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3v487.ce5740
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce6022
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3.ce6148
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce25
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3.ce179
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3.ce92
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce201
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3v487.ce5310
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L3%19%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 45
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.45
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-32-free_var_idx.44
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.43
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.42
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-1.L3%7%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.40
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 6
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce113
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce7152
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce114
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce4012
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce4052
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce4092
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce5384
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3v487.ce6577
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce6576
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce6457
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3v487.ce6385
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: z3v487.ce6701
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 15: z3.ce6700
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 16: z3.ce6230
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=13; number of visited CEs=17; number of preds=7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 45->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 45->0; 
40
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->1; 41->0; 42->0; 43->0; 44->0; 45->0; 
42
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->0; 42->1; 43->0; 44->0; 45->0; 
43
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->4294967295; 40->0; 41->0; 42->0; 43->1; 44->0; 45->0; 
44
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->1; 45->0; 
45
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->4294967295; 42->0; 43->0; 44->0; 45->1; 
matrix done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce6824
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce6576
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce6385
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce5384
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce5419
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce5679
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce5847
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce5961
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce5384
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce5679
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce5928
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce5646
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3.ce6085
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce179
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce114
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3v487.ce1244
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce4132
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3.ce5384
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3.ce5419
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3.ce5679
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 4: z3.ce5847
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 5: z3v487.ce5961
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 1: z3.ce6824
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 2: z3.ce6576
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 3: z3v487.ce6385
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini name dst-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini expr_group_type HOUDINI with 48 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 46
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 47
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 49
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 50
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 51
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 54
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 55
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 58
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 59
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 64
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 69
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 0: z3.ce179
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 1: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 2: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 3: z3.ce6926
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 4: z3v487.ce1244
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 5: z3.ce5384
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 6: z3v487.ce6385
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 7: z3.ce7020
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 8: z3v487.ce5961
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based name spec-coupling-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 72
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 73
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 74
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 77
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ce 0: z3.ce92
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-1.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L3%19%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvugt(4, 1) : BOOL
6 : not(5) : BOOL
7 : or(5, 6) : BOOL
8 : and(3, 7) : BOOL
9 : not(8) : BOOL
10 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
11 : input.spec-%var-j-0.L3%19%bbentry : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 0 { 0x0 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
16 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
17 : map_get(15, 16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
18 : 1 { 0x1 +1.0e1025 } : INT
19 : sum_is(17, 18) : BOOL
20 : and(14, 19) : BOOL
21 : sum_is(12, 18) : BOOL
22 : input.spec-%var-i-0.L3%19%bbentry : BV:32
23 : bvugt(22, 11) : BOOL
24 : not(23) : BOOL
25 : or(23, 24) : BOOL
26 : and(21, 25) : BOOL
27 : or(20, 26) : BOOL
28 : or(9, 27) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L3%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%19%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=SRC Ranking expr 3
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 2
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 3
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 4
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 5
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 6
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140506 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140380 : 0 { 0x0 } : BOOL
140507 : select(140396, 140397, 140506, 140398, 140379, 140380) : BV:32
=RhsExpr
140395 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140508 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140399 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140380 : 0 { 0x0 } : BOOL
140509 : select(140396, 140397, 140508, 140399, 140379, 140380) : BV:32
=RhsExpr
140394 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140510 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140400 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140380 : 0 { 0x0 } : BOOL
140511 : select(140396, 140397, 140510, 140400, 140379, 140380) : BV:32
=RhsExpr
140393 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140393 : input.dst.llvm-%x : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140406 : islangaligned(140393, 140379) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
141079 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
141081 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
141082 : bvule(141079, 141081) : BOOL
140376 : 4 { 0x4 +1.47e129 } : BV:32
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141083 : bvadd(140376, 140337) : BV:32
141084 : bvadd(141079, 141083) : BV:32
141085 : eq(141081, 141084) : BOOL
141086 : and(141082, 141085) : BOOL
141087 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
141088 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
141089 : bvule(141087, 141088) : BOOL
141090 : and(141086, 141089) : BOOL
141091 : bvadd(141087, 141083) : BV:32
141092 : eq(141088, 141091) : BOOL
141093 : and(141090, 141092) : BOOL
141094 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
141095 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
141096 : bvule(141094, 141095) : BOOL
141097 : and(141093, 141096) : BOOL
141098 : bvadd(141094, 141083) : BV:32
141099 : eq(141095, 141098) : BOOL
141100 : and(141097, 141099) : BOOL
141101 : bvuge(141079, 141087) : BOOL
141102 : bvule(141079, 141088) : BOOL
141103 : and(141101, 141102) : BOOL
141105 : bvuge(141081, 141087) : BOOL
141106 : bvule(141081, 141088) : BOOL
141107 : and(141105, 141106) : BOOL
141108 : not(141107) : BOOL
141109 : andnot1(141103, 141108) : BOOL
141104 : bvuge(141087, 141079) : BOOL
141110 : bvule(141087, 141081) : BOOL
141111 : and(141104, 141110) : BOOL
141113 : bvuge(141088, 141079) : BOOL
141114 : bvule(141088, 141081) : BOOL
141115 : and(141113, 141114) : BOOL
141116 : not(141115) : BOOL
141117 : andnot1(141111, 141116) : BOOL
141112 : and(141109, 141117) : BOOL
141118 : bvuge(141079, 141094) : BOOL
141119 : bvule(141079, 141095) : BOOL
141120 : and(141118, 141119) : BOOL
141122 : bvuge(141081, 141094) : BOOL
141123 : bvule(141081, 141095) : BOOL
141124 : and(141122, 141123) : BOOL
141125 : not(141124) : BOOL
141126 : andnot1(141120, 141125) : BOOL
141129 : and(141112, 141126) : BOOL
141121 : bvuge(141094, 141079) : BOOL
141127 : bvule(141094, 141081) : BOOL
141128 : and(141121, 141127) : BOOL
141130 : bvuge(141095, 141079) : BOOL
141131 : bvule(141095, 141081) : BOOL
141132 : and(141130, 141131) : BOOL
141133 : not(141132) : BOOL
141134 : andnot1(141128, 141133) : BOOL
141135 : and(141129, 141134) : BOOL
141136 : bvuge(141087, 141094) : BOOL
141137 : bvule(141087, 141095) : BOOL
141138 : and(141136, 141137) : BOOL
141140 : bvuge(141088, 141094) : BOOL
141141 : bvule(141088, 141095) : BOOL
141142 : and(141140, 141141) : BOOL
141143 : not(141142) : BOOL
141144 : andnot1(141138, 141143) : BOOL
141147 : and(141135, 141144) : BOOL
141139 : bvuge(141094, 141087) : BOOL
141145 : bvule(141094, 141088) : BOOL
141146 : and(141139, 141145) : BOOL
141148 : bvuge(141095, 141087) : BOOL
141149 : bvule(141095, 141088) : BOOL
141150 : and(141148, 141149) : BOOL
141151 : not(141150) : BOOL
141152 : andnot1(141146, 141151) : BOOL
141153 : and(141147, 141152) : BOOL
141154 : and(141100, 141153) : BOOL
140399 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
141155 : 3 { 0x3 +1.35e129 } : BV:32
141156 : bvand(140399, 141155) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141157 : eq(141156, 140276) : BOOL
140400 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
141158 : bvand(140400, 141155) : BV:32
141159 : eq(141158, 140276) : BOOL
141160 : and(141157, 141159) : BOOL
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
141161 : bvand(140398, 141155) : BV:32
141162 : eq(141161, 140276) : BOOL
141163 : and(141160, 141162) : BOOL
141164 : and(141154, 141163) : BOOL
141165 : eq(140399, 141079) : BOOL
141166 : eq(140400, 141087) : BOOL
141167 : and(141165, 141166) : BOOL
141168 : eq(140398, 141094) : BOOL
141169 : and(141167, 141168) : BOOL
141170 : and(141164, 141169) : BOOL
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140288 : 1 { 0x1 +1.11e129 } : BV:32
140401 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141171 : region_agrees_with_memlabel(140397, 140276, 140288, 140401) : BOOL
141172 : and(141170, 141171) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140360 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140364 : bvule(140276, 140360) : BOOL
140394 : input.dst.llvm-%n : BV:32
141174 : bvult(140360, 140394) : BOOL
141175 : and(140364, 141174) : BOOL
141176 : lambda(140360, 141175) : FUNCTION[BV:32 -> BOOL]
140361 : Lambda1 : BV:32
140368 : bvule(140276, 140361) : BOOL
140395 : input.dst.llvm-%m : BV:32
141177 : bvult(140361, 140395) : BOOL
141195 : and(140368, 141177) : BOOL
141196 : lambda(140361, 141195) : FUNCTION[BV:32 -> BOOL]
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
141173 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
140376 : 4 { 0x4 +1.47e129 } : BV:32
140382 : bvmul(140361, 140376) : BV:32
140377 : bvmul(140360, 140376) : BV:32
140393 : input.dst.llvm-%x : BV:32
141216 : bvadd(140377, 140393) : BV:32
140379 : 4 { 0x4 +1.0e1025 } : INT
140380 : 0 { 0x0 } : BOOL
141237 : select(140396, 140397, 141173, 141216, 140379, 140380) : BV:32
141238 : bvadd(140382, 141237) : BV:32
141239 : select(140396, 140397, 141173, 141238, 140379, 140380) : BV:32
141240 : lambda(140361, 141239) : FUNCTION[BV:32 -> BV:32]
141241 : map(141196, 141240) : MAP[BV:32 -> BV:32]
141242 : lambda(140360, 141241) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141243 : map(141176, 141242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141244 : eq(140273, 141243) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
fold-conjunct
=LhsExpr
140702 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140395 : input.dst.llvm-%m : BV:32
140712 : bvult(140702, 140395) : BOOL
140701 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140703 : bvugt(140701, 140702) : BOOL
209676 : not(140703) : BOOL
277088 : or(140703, 209676) : BOOL
277097 : and(140712, 277088) : BOOL
140556 : 4 { 0x4 +1.0e1025 } : BV:64
140427 : 32 { 0x20 +1.0e1025 } : INT
140731 : bvsign_ext(140701, 140427) : BV:64
140882 : bvmul(140556, 140731) : BV:64
140431 : 63 { 0x3f +1.0e1025 } : INT
140883 : bvextract(140882, 140431, 140427) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140730 : bvslt(140701, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140896 : ite(140730, 140337, 140276) : BV:32
140898 : eq(140883, 140896) : BOOL
140379 : 4 { 0x4 +1.0e1025 } : INT
140900 : isindexforsize(140898, 140379) : BOOL
140393 : input.dst.llvm-%x : BV:32
140376 : 4 { 0x4 +1.47e129 } : BV:32
140823 : bvmul(140376, 140701) : BV:32
140826 : bvadd(140393, 140823) : BV:32
140902 : isgepoffset(140826, 140823) : BOOL
140906 : islangaligned(140826, 140379) : BOOL
140396 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140397 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140544 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140380 : 0 { 0x0 } : BOOL
140832 : select(140396, 140397, 140544, 140826, 140379, 140380) : BV:32
140908 : islangaligned(140832, 140379) : BOOL
140911 : and(140906, 140908) : BOOL
140746 : bvsign_ext(140702, 140427) : BV:64
140924 : bvmul(140556, 140746) : BV:64
140925 : bvextract(140924, 140431, 140427) : BV:32
140745 : bvslt(140702, 140276) : BOOL
140938 : ite(140745, 140337, 140276) : BV:32
140940 : eq(140925, 140938) : BOOL
140942 : isindexforsize(140940, 140379) : BOOL
140835 : bvmul(140376, 140702) : BV:32
140837 : bvadd(140832, 140835) : BV:32
140944 : isgepoffset(140837, 140835) : BOOL
140949 : and(140900, 140902, 140906, 140911, 140942, 140944) : BOOL
140864 : islangaligned(140837, 140379) : BOOL
213385 : and(140949, 140864) : BOOL
140275 : 1 { 0x1 } : BOOL
213920 : eq(213385, 140275) : BOOL
213924 : implies(209676, 213920) : BOOL
213925 : implies(140703, 213920) : BOOL
213926 : and(213924, 213925) : BOOL
213921 : eq(213926, 140275) : BOOL
213922 : implies(277097, 213921) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 5
=bv_rank at L3%19%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 9
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
